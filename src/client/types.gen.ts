// This file is auto-generated by @hey-api/openapi-ts

export type Actor = {
    type: 'actors';
    id: string;
    attributes?: {
        actorType?: 'USER' | 'API_KEY' | 'XCODE_CLOUD' | 'APPLE';
        userFirstName?: string;
        userLastName?: string;
        userEmail?: string;
        apiKeyId?: string;
    };
    links?: ResourceLinks;
};

export type ActorsResponse = {
    data: Array<Actor>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type ActorResponse = {
    data: Actor;
    links: DocumentLinks;
};

export type AgeRatingDeclaration = {
    type: 'ageRatingDeclarations';
    id: string;
    attributes?: {
        alcoholTobaccoOrDrugUseOrReferences?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        contests?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        /**
         * @deprecated
         */
        gamblingAndContests?: boolean;
        gambling?: boolean;
        gamblingSimulated?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        kidsAgeBand?: KidsAgeBand;
        lootBox?: boolean;
        medicalOrTreatmentInformation?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        profanityOrCrudeHumor?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        sexualContentGraphicAndNudity?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        sexualContentOrNudity?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        horrorOrFearThemes?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        matureOrSuggestiveThemes?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        unrestrictedWebAccess?: boolean;
        violenceCartoonOrFantasy?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        violenceRealisticProlongedGraphicOrSadistic?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        violenceRealistic?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        ageRatingOverride?: 'NONE' | 'SEVENTEEN_PLUS' | 'UNRATED';
        koreaAgeRatingOverride?: 'NONE' | 'FIFTEEN_PLUS' | 'NINETEEN_PLUS';
        /**
         * @deprecated
         */
        seventeenPlus?: boolean;
    };
    links?: ResourceLinks;
};

export type AgeRatingDeclarationResponse = {
    data: AgeRatingDeclaration;
    links: DocumentLinks;
};

export type AgeRatingDeclarationUpdateRequest = {
    data: {
        type: 'ageRatingDeclarations';
        id: string;
        attributes?: {
            alcoholTobaccoOrDrugUseOrReferences?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            contests?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            /**
             * @deprecated
             */
            gamblingAndContests?: boolean;
            gambling?: boolean;
            gamblingSimulated?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            kidsAgeBand?: KidsAgeBand;
            lootBox?: boolean;
            medicalOrTreatmentInformation?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            profanityOrCrudeHumor?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            sexualContentGraphicAndNudity?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            sexualContentOrNudity?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            horrorOrFearThemes?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            matureOrSuggestiveThemes?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            unrestrictedWebAccess?: boolean;
            violenceCartoonOrFantasy?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            violenceRealisticProlongedGraphicOrSadistic?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            violenceRealistic?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            ageRatingOverride?: 'NONE' | 'SEVENTEEN_PLUS' | 'UNRATED';
            koreaAgeRatingOverride?: 'NONE' | 'FIFTEEN_PLUS' | 'NINETEEN_PLUS';
            /**
             * @deprecated
             */
            seventeenPlus?: boolean;
        };
    };
};

export type AlternativeDistributionDomain = {
    type: 'alternativeDistributionDomains';
    id: string;
    attributes?: {
        domain?: string;
        referenceName?: string;
        createdDate?: string;
    };
    links?: ResourceLinks;
};

export type AlternativeDistributionDomainsResponse = {
    data: Array<AlternativeDistributionDomain>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AlternativeDistributionDomainResponse = {
    data: AlternativeDistributionDomain;
    links: DocumentLinks;
};

export type AlternativeDistributionDomainCreateRequest = {
    data: {
        type: 'alternativeDistributionDomains';
        attributes: {
            domain: string;
            referenceName: string;
        };
    };
};

export type AlternativeDistributionKey = {
    type: 'alternativeDistributionKeys';
    id: string;
    attributes?: {
        publicKey?: string;
    };
    links?: ResourceLinks;
};

export type AlternativeDistributionKeysResponse = {
    data: Array<AlternativeDistributionKey>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AlternativeDistributionKeyResponse = {
    data: AlternativeDistributionKey;
    links: DocumentLinks;
};

export type AlternativeDistributionKeyCreateRequest = {
    data: {
        type: 'alternativeDistributionKeys';
        attributes: {
            publicKey: string;
        };
        relationships?: {
            app?: {
                data?: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type AlternativeDistributionPackageDelta = {
    type: 'alternativeDistributionPackageDeltas';
    id: string;
    attributes?: {
        url?: string;
        urlExpirationDate?: string;
        alternativeDistributionKeyBlob?: string;
        fileChecksum?: string;
    };
    links?: ResourceLinks;
};

export type AlternativeDistributionPackageDeltasResponse = {
    data: Array<AlternativeDistributionPackageDelta>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AlternativeDistributionPackageDeltaResponse = {
    data: AlternativeDistributionPackageDelta;
    links: DocumentLinks;
};

export type AlternativeDistributionPackageVariant = {
    type: 'alternativeDistributionPackageVariants';
    id: string;
    attributes?: {
        url?: string;
        urlExpirationDate?: string;
        alternativeDistributionKeyBlob?: string;
        fileChecksum?: string;
    };
    links?: ResourceLinks;
};

export type AlternativeDistributionPackageVariantsResponse = {
    data: Array<AlternativeDistributionPackageVariant>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AlternativeDistributionPackageVariantResponse = {
    data: AlternativeDistributionPackageVariant;
    links: DocumentLinks;
};

export type AlternativeDistributionPackageVersion = {
    type: 'alternativeDistributionPackageVersions';
    id: string;
    attributes?: {
        url?: string;
        urlExpirationDate?: string;
        version?: string;
        fileChecksum?: string;
        state?: 'COMPLETED' | 'REPLACED';
    };
    relationships?: {
        variants?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'alternativeDistributionPackageVariants';
                id: string;
            }>;
        };
        deltas?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'alternativeDistributionPackageDeltas';
                id: string;
            }>;
        };
        alternativeDistributionPackage?: {
            data?: {
                type: 'alternativeDistributionPackages';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type AlternativeDistributionPackageVersionsResponse = {
    data: Array<AlternativeDistributionPackageVersion>;
    included?: Array<AlternativeDistributionPackageVariant | AlternativeDistributionPackageDelta | AlternativeDistributionPackage>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AlternativeDistributionPackageVersionResponse = {
    data: AlternativeDistributionPackageVersion;
    included?: Array<AlternativeDistributionPackageVariant | AlternativeDistributionPackageDelta | AlternativeDistributionPackage>;
    links: DocumentLinks;
};

export type AlternativeDistributionPackage = {
    type: 'alternativeDistributionPackages';
    id: string;
    relationships?: {
        versions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'alternativeDistributionPackageVersions';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type AlternativeDistributionPackageResponse = {
    data: AlternativeDistributionPackage;
    included?: Array<AlternativeDistributionPackageVersion>;
    links: DocumentLinks;
};

export type AlternativeDistributionPackageCreateRequest = {
    data: {
        type: 'alternativeDistributionPackages';
        relationships: {
            appStoreVersion: {
                data: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
        };
    };
};

export type AnalyticsReportInstance = {
    type: 'analyticsReportInstances';
    id: string;
    attributes?: {
        granularity?: 'DAILY' | 'WEEKLY' | 'MONTHLY';
        processingDate?: string;
    };
    relationships?: {
        segments?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type AnalyticsReportInstancesResponse = {
    data: Array<AnalyticsReportInstance>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AnalyticsReportInstanceResponse = {
    data: AnalyticsReportInstance;
    links: DocumentLinks;
};

export type AnalyticsReportRequest = {
    type: 'analyticsReportRequests';
    id: string;
    attributes?: {
        accessType?: 'ONE_TIME_SNAPSHOT' | 'ONGOING';
        stoppedDueToInactivity?: boolean;
    };
    relationships?: {
        reports?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'analyticsReports';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type AnalyticsReportRequestsResponse = {
    data: Array<AnalyticsReportRequest>;
    included?: Array<AnalyticsReport>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AnalyticsReportRequestResponse = {
    data: AnalyticsReportRequest;
    included?: Array<AnalyticsReport>;
    links: DocumentLinks;
};

export type AnalyticsReportRequestCreateRequest = {
    data: {
        type: 'analyticsReportRequests';
        attributes: {
            accessType: 'ONE_TIME_SNAPSHOT' | 'ONGOING';
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type AnalyticsReportSegment = {
    type: 'analyticsReportSegments';
    id: string;
    attributes?: {
        checksum?: string;
        sizeInBytes?: number;
        url?: string;
    };
    links?: ResourceLinks;
};

export type AnalyticsReportSegmentsResponse = {
    data: Array<AnalyticsReportSegment>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AnalyticsReportSegmentResponse = {
    data: AnalyticsReportSegment;
    links: DocumentLinks;
};

export type AnalyticsReport = {
    type: 'analyticsReports';
    id: string;
    attributes?: {
        name?: string;
        category?: 'APP_USAGE' | 'APP_STORE_ENGAGEMENT' | 'COMMERCE' | 'FRAMEWORK_USAGE' | 'PERFORMANCE';
    };
    relationships?: {
        instances?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type AnalyticsReportsResponse = {
    data: Array<AnalyticsReport>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AnalyticsReportResponse = {
    data: AnalyticsReport;
    links: DocumentLinks;
};

export type AppAvailabilityV2 = {
    type: 'appAvailabilities';
    id: string;
    attributes?: {
        availableInNewTerritories?: boolean;
    };
    relationships?: {
        territoryAvailabilities?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'territoryAvailabilities';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type AppAvailabilityV2Response = {
    data: AppAvailabilityV2;
    included?: Array<TerritoryAvailability>;
    links: DocumentLinks;
};

export type AppAvailabilityV2CreateRequest = {
    data: {
        type: 'appAvailabilities';
        attributes: {
            availableInNewTerritories: boolean;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
            territoryAvailabilities: {
                data: Array<{
                    type: 'territoryAvailabilities';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<TerritoryAvailabilityInlineCreate>;
};

export type AppCategory = {
    type: 'appCategories';
    id: string;
    attributes?: {
        platforms?: Array<Platform>;
    };
    relationships?: {
        subcategories?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appCategories';
                id: string;
            }>;
        };
        parent?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appCategories';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type AppCategoriesResponse = {
    data: Array<AppCategory>;
    included?: Array<AppCategory>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppCategoryResponse = {
    data: AppCategory;
    included?: Array<AppCategory>;
    links: DocumentLinks;
};

export type AppClipAdvancedExperienceImage = {
    type: 'appClipAdvancedExperienceImages';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        sourceFileChecksum?: string;
        imageAsset?: ImageAsset;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
    };
    links?: ResourceLinks;
};

export type AppClipAdvancedExperienceImageResponse = {
    data: AppClipAdvancedExperienceImage;
    links: DocumentLinks;
};

export type AppClipAdvancedExperienceImageCreateRequest = {
    data: {
        type: 'appClipAdvancedExperienceImages';
        attributes: {
            fileSize: number;
            fileName: string;
        };
    };
};

export type AppClipAdvancedExperienceImageUpdateRequest = {
    data: {
        type: 'appClipAdvancedExperienceImages';
        id: string;
        attributes?: {
            sourceFileChecksum?: string;
            uploaded?: boolean;
        };
    };
};

export type AppClipAdvancedExperienceLocalization = {
    type: 'appClipAdvancedExperienceLocalizations';
    id: string;
    attributes?: {
        language?: AppClipAdvancedExperienceLanguage;
        title?: string;
        subtitle?: string;
    };
    links?: ResourceLinks;
};

export type AppClipAdvancedExperienceLocalizationInlineCreate = {
    type: 'appClipAdvancedExperienceLocalizations';
    id?: string;
    attributes?: {
        language?: AppClipAdvancedExperienceLanguage;
        title?: string;
        subtitle?: string;
    };
};

export type AppClipAdvancedExperience = {
    type: 'appClipAdvancedExperiences';
    id: string;
    attributes?: {
        link?: string;
        version?: number;
        status?: 'RECEIVED' | 'DEACTIVATED' | 'APP_TRANSFER_IN_PROGRESS';
        action?: AppClipAction;
        isPoweredBy?: boolean;
        place?: {
            placeId?: string;
            names?: Array<string>;
            mainAddress?: {
                fullAddress?: string;
                structuredAddress?: {
                    streetAddress?: Array<string>;
                    floor?: string;
                    neighborhood?: string;
                    locality?: string;
                    stateProvince?: string;
                    postalCode?: string;
                    countryCode?: string;
                };
            };
            displayPoint?: {
                coordinates?: {
                    latitude?: number;
                    longitude?: number;
                };
                source?: 'CALCULATED' | 'MANUALLY_PLACED';
            };
            mapAction?: 'BUY_TICKETS' | 'VIEW_AVAILABILITY' | 'VIEW_PRICING' | 'HOTEL_BOOK_ROOM' | 'PARKING_RESERVE_PARKING' | 'RESTAURANT_JOIN_WAITLIST' | 'RESTAURANT_ORDER_DELIVERY' | 'RESTAURANT_ORDER_FOOD' | 'RESTAURANT_ORDER_TAKEOUT' | 'RESTAURANT_RESERVATION' | 'SCHEDULE_APPOINTMENT' | 'RESTAURANT_VIEW_MENU' | 'THEATER_NOW_PLAYING';
            relationship?: 'OWNER' | 'AUTHORIZED' | 'OTHER';
            phoneNumber?: {
                number?: string;
                type?: 'FAX' | 'LANDLINE' | 'MOBILE' | 'TOLLFREE';
                intent?: string;
            };
            homePage?: string;
            categories?: Array<string>;
        };
        placeStatus?: 'PENDING' | 'MATCHED' | 'NO_MATCH';
        businessCategory?: 'AUTOMOTIVE' | 'BEAUTY' | 'BIKES' | 'BOOKS' | 'CASINO' | 'EDUCATION' | 'EDUCATION_JAPAN' | 'ENTERTAINMENT' | 'EV_CHARGER' | 'FINANCIAL_USD' | 'FINANCIAL_CNY' | 'FINANCIAL_GBP' | 'FINANCIAL_JPY' | 'FINANCIAL_EUR' | 'FITNESS' | 'FOOD_AND_DRINK' | 'GAS' | 'GROCERY' | 'HEALTH_AND_MEDICAL' | 'HOTEL_AND_TRAVEL' | 'MUSIC' | 'PARKING' | 'PET_SERVICES' | 'PROFESSIONAL_SERVICES' | 'SHOPPING' | 'TICKETING' | 'TRANSIT';
        defaultLanguage?: AppClipAdvancedExperienceLanguage;
    };
    relationships?: {
        appClip?: {
            data?: {
                type: 'appClips';
                id: string;
            };
        };
        headerImage?: {
            data?: {
                type: 'appClipAdvancedExperienceImages';
                id: string;
            };
        };
        localizations?: {
            meta?: PagingInformation;
            data?: Array<{
                type: 'appClipAdvancedExperienceLocalizations';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type AppClipAdvancedExperiencesResponse = {
    data: Array<AppClipAdvancedExperience>;
    included?: Array<AppClip | AppClipAdvancedExperienceImage | AppClipAdvancedExperienceLocalization>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppClipAdvancedExperienceResponse = {
    data: AppClipAdvancedExperience;
    included?: Array<AppClip | AppClipAdvancedExperienceImage | AppClipAdvancedExperienceLocalization>;
    links: DocumentLinks;
};

export type AppClipAdvancedExperienceCreateRequest = {
    data: {
        type: 'appClipAdvancedExperiences';
        attributes: {
            link: string;
            action?: AppClipAction;
            isPoweredBy: boolean;
            place?: {
                placeId?: string;
                names?: Array<string>;
                mainAddress?: {
                    fullAddress?: string;
                    structuredAddress?: {
                        streetAddress?: Array<string>;
                        floor?: string;
                        neighborhood?: string;
                        locality?: string;
                        stateProvince?: string;
                        postalCode?: string;
                        countryCode?: string;
                    };
                };
                displayPoint?: {
                    coordinates?: {
                        latitude?: number;
                        longitude?: number;
                    };
                    source?: 'CALCULATED' | 'MANUALLY_PLACED';
                };
                mapAction?: 'BUY_TICKETS' | 'VIEW_AVAILABILITY' | 'VIEW_PRICING' | 'HOTEL_BOOK_ROOM' | 'PARKING_RESERVE_PARKING' | 'RESTAURANT_JOIN_WAITLIST' | 'RESTAURANT_ORDER_DELIVERY' | 'RESTAURANT_ORDER_FOOD' | 'RESTAURANT_ORDER_TAKEOUT' | 'RESTAURANT_RESERVATION' | 'SCHEDULE_APPOINTMENT' | 'RESTAURANT_VIEW_MENU' | 'THEATER_NOW_PLAYING';
                relationship?: 'OWNER' | 'AUTHORIZED' | 'OTHER';
                phoneNumber?: {
                    number?: string;
                    type?: 'FAX' | 'LANDLINE' | 'MOBILE' | 'TOLLFREE';
                    intent?: string;
                };
                homePage?: string;
                categories?: Array<string>;
            };
            businessCategory?: 'AUTOMOTIVE' | 'BEAUTY' | 'BIKES' | 'BOOKS' | 'CASINO' | 'EDUCATION' | 'EDUCATION_JAPAN' | 'ENTERTAINMENT' | 'EV_CHARGER' | 'FINANCIAL_USD' | 'FINANCIAL_CNY' | 'FINANCIAL_GBP' | 'FINANCIAL_JPY' | 'FINANCIAL_EUR' | 'FITNESS' | 'FOOD_AND_DRINK' | 'GAS' | 'GROCERY' | 'HEALTH_AND_MEDICAL' | 'HOTEL_AND_TRAVEL' | 'MUSIC' | 'PARKING' | 'PET_SERVICES' | 'PROFESSIONAL_SERVICES' | 'SHOPPING' | 'TICKETING' | 'TRANSIT';
            defaultLanguage: AppClipAdvancedExperienceLanguage;
        };
        relationships: {
            appClip: {
                data: {
                    type: 'appClips';
                    id: string;
                };
            };
            headerImage: {
                data: {
                    type: 'appClipAdvancedExperienceImages';
                    id: string;
                };
            };
            localizations: {
                data: Array<{
                    type: 'appClipAdvancedExperienceLocalizations';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<AppClipAdvancedExperienceLocalizationInlineCreate>;
};

export type AppClipAdvancedExperienceUpdateRequest = {
    data: {
        type: 'appClipAdvancedExperiences';
        id: string;
        attributes?: {
            action?: AppClipAction;
            isPoweredBy?: boolean;
            place?: {
                placeId?: string;
                names?: Array<string>;
                mainAddress?: {
                    fullAddress?: string;
                    structuredAddress?: {
                        streetAddress?: Array<string>;
                        floor?: string;
                        neighborhood?: string;
                        locality?: string;
                        stateProvince?: string;
                        postalCode?: string;
                        countryCode?: string;
                    };
                };
                displayPoint?: {
                    coordinates?: {
                        latitude?: number;
                        longitude?: number;
                    };
                    source?: 'CALCULATED' | 'MANUALLY_PLACED';
                };
                mapAction?: 'BUY_TICKETS' | 'VIEW_AVAILABILITY' | 'VIEW_PRICING' | 'HOTEL_BOOK_ROOM' | 'PARKING_RESERVE_PARKING' | 'RESTAURANT_JOIN_WAITLIST' | 'RESTAURANT_ORDER_DELIVERY' | 'RESTAURANT_ORDER_FOOD' | 'RESTAURANT_ORDER_TAKEOUT' | 'RESTAURANT_RESERVATION' | 'SCHEDULE_APPOINTMENT' | 'RESTAURANT_VIEW_MENU' | 'THEATER_NOW_PLAYING';
                relationship?: 'OWNER' | 'AUTHORIZED' | 'OTHER';
                phoneNumber?: {
                    number?: string;
                    type?: 'FAX' | 'LANDLINE' | 'MOBILE' | 'TOLLFREE';
                    intent?: string;
                };
                homePage?: string;
                categories?: Array<string>;
            };
            businessCategory?: 'AUTOMOTIVE' | 'BEAUTY' | 'BIKES' | 'BOOKS' | 'CASINO' | 'EDUCATION' | 'EDUCATION_JAPAN' | 'ENTERTAINMENT' | 'EV_CHARGER' | 'FINANCIAL_USD' | 'FINANCIAL_CNY' | 'FINANCIAL_GBP' | 'FINANCIAL_JPY' | 'FINANCIAL_EUR' | 'FITNESS' | 'FOOD_AND_DRINK' | 'GAS' | 'GROCERY' | 'HEALTH_AND_MEDICAL' | 'HOTEL_AND_TRAVEL' | 'MUSIC' | 'PARKING' | 'PET_SERVICES' | 'PROFESSIONAL_SERVICES' | 'SHOPPING' | 'TICKETING' | 'TRANSIT';
            defaultLanguage?: AppClipAdvancedExperienceLanguage;
            removed?: boolean;
        };
        relationships?: {
            appClip?: {
                data?: {
                    type: 'appClips';
                    id: string;
                };
            };
            headerImage?: {
                data?: {
                    type: 'appClipAdvancedExperienceImages';
                    id: string;
                };
            };
            localizations?: {
                data?: Array<{
                    type: 'appClipAdvancedExperienceLocalizations';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<AppClipAdvancedExperienceLocalizationInlineCreate>;
};

export type AppClipAppStoreReviewDetail = {
    type: 'appClipAppStoreReviewDetails';
    id: string;
    attributes?: {
        invocationUrls?: Array<string>;
    };
    relationships?: {
        appClipDefaultExperience?: {
            data?: {
                type: 'appClipDefaultExperiences';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type AppClipAppStoreReviewDetailResponse = {
    data: AppClipAppStoreReviewDetail;
    included?: Array<AppClipDefaultExperience>;
    links: DocumentLinks;
};

export type AppClipAppStoreReviewDetailCreateRequest = {
    data: {
        type: 'appClipAppStoreReviewDetails';
        attributes?: {
            invocationUrls?: Array<string>;
        };
        relationships: {
            appClipDefaultExperience: {
                data: {
                    type: 'appClipDefaultExperiences';
                    id: string;
                };
            };
        };
    };
};

export type AppClipAppStoreReviewDetailUpdateRequest = {
    data: {
        type: 'appClipAppStoreReviewDetails';
        id: string;
        attributes?: {
            invocationUrls?: Array<string>;
        };
    };
};

export type AppClipDefaultExperienceLocalization = {
    type: 'appClipDefaultExperienceLocalizations';
    id: string;
    attributes?: {
        locale?: string;
        subtitle?: string;
    };
    relationships?: {
        appClipDefaultExperience?: {
            data?: {
                type: 'appClipDefaultExperiences';
                id: string;
            };
        };
        appClipHeaderImage?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appClipHeaderImages';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type AppClipDefaultExperienceLocalizationsResponse = {
    data: Array<AppClipDefaultExperienceLocalization>;
    included?: Array<AppClipDefaultExperience | AppClipHeaderImage>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppClipDefaultExperienceLocalizationResponse = {
    data: AppClipDefaultExperienceLocalization;
    included?: Array<AppClipDefaultExperience | AppClipHeaderImage>;
    links: DocumentLinks;
};

export type AppClipDefaultExperienceLocalizationCreateRequest = {
    data: {
        type: 'appClipDefaultExperienceLocalizations';
        attributes: {
            locale: string;
            subtitle?: string;
        };
        relationships: {
            appClipDefaultExperience: {
                data: {
                    type: 'appClipDefaultExperiences';
                    id: string;
                };
            };
        };
    };
};

export type AppClipDefaultExperienceLocalizationUpdateRequest = {
    data: {
        type: 'appClipDefaultExperienceLocalizations';
        id: string;
        attributes?: {
            subtitle?: string;
        };
    };
};

export type AppClipDefaultExperience = {
    type: 'appClipDefaultExperiences';
    id: string;
    attributes?: {
        action?: AppClipAction;
    };
    relationships?: {
        appClip?: {
            data?: {
                type: 'appClips';
                id: string;
            };
        };
        releaseWithAppStoreVersion?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appStoreVersions';
                id: string;
            };
        };
        appClipDefaultExperienceLocalizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appClipDefaultExperienceLocalizations';
                id: string;
            }>;
        };
        appClipAppStoreReviewDetail?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appClipAppStoreReviewDetails';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type AppClipDefaultExperiencesResponse = {
    data: Array<AppClipDefaultExperience>;
    included?: Array<AppClip | AppStoreVersion | AppClipDefaultExperienceLocalization | AppClipAppStoreReviewDetail>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppClipDefaultExperienceResponse = {
    data: AppClipDefaultExperience;
    included?: Array<AppClip | AppStoreVersion | AppClipDefaultExperienceLocalization | AppClipAppStoreReviewDetail>;
    links: DocumentLinks;
};

export type AppClipDefaultExperienceCreateRequest = {
    data: {
        type: 'appClipDefaultExperiences';
        attributes?: {
            action?: AppClipAction;
        };
        relationships: {
            appClip: {
                data: {
                    type: 'appClips';
                    id: string;
                };
            };
            releaseWithAppStoreVersion?: {
                data?: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
            appClipDefaultExperienceTemplate?: {
                data?: {
                    type: 'appClipDefaultExperiences';
                    id: string;
                };
            };
        };
    };
};

export type AppClipDefaultExperienceUpdateRequest = {
    data: {
        type: 'appClipDefaultExperiences';
        id: string;
        attributes?: {
            action?: AppClipAction;
        };
        relationships?: {
            releaseWithAppStoreVersion?: {
                data?: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
        };
    };
};

export type AppClipDomainStatus = {
    type: 'appClipDomainStatuses';
    id: string;
    attributes?: {
        domains?: Array<{
            domain?: string;
            isValid?: boolean;
            lastUpdatedDate?: string;
            errorCode?: 'BAD_HTTP_RESPONSE' | 'BAD_JSON_CONTENT' | 'BAD_PKCS7_SIGNATURE' | 'CANNOT_REACH_AASA_FILE' | 'DNS_ERROR' | 'INSECURE_REDIRECTS_FORBIDDEN' | 'INVALID_ENTITLEMENT_MISSING_SECTION' | 'INVALID_ENTITLEMENT_SYNTAX_ERROR' | 'INVALID_ENTITLEMENT_UNHANDLED_SECTION' | 'INVALID_ENTITLEMENT_UNKNOWN_ID' | 'NETWORK_ERROR' | 'NETWORK_ERROR_TEMPORARY' | 'OTHER_ERROR' | 'TIMEOUT' | 'TLS_ERROR' | 'UNEXPECTED_ERROR';
        }>;
        lastUpdatedDate?: string;
    };
    links?: ResourceLinks;
};

export type AppClipDomainStatusResponse = {
    data: AppClipDomainStatus;
    links: DocumentLinks;
};

export type AppClipHeaderImage = {
    type: 'appClipHeaderImages';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        sourceFileChecksum?: string;
        imageAsset?: ImageAsset;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
    };
    relationships?: {
        appClipDefaultExperienceLocalization?: {
            data?: {
                type: 'appClipDefaultExperienceLocalizations';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type AppClipHeaderImageResponse = {
    data: AppClipHeaderImage;
    included?: Array<AppClipDefaultExperienceLocalization>;
    links: DocumentLinks;
};

export type AppClipHeaderImageCreateRequest = {
    data: {
        type: 'appClipHeaderImages';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            appClipDefaultExperienceLocalization: {
                data: {
                    type: 'appClipDefaultExperienceLocalizations';
                    id: string;
                };
            };
        };
    };
};

export type AppClipHeaderImageUpdateRequest = {
    data: {
        type: 'appClipHeaderImages';
        id: string;
        attributes?: {
            sourceFileChecksum?: string;
            uploaded?: boolean;
        };
    };
};

export type AppClip = {
    type: 'appClips';
    id: string;
    attributes?: {
        bundleId?: string;
    };
    relationships?: {
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
        appClipDefaultExperiences?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appClipDefaultExperiences';
                id: string;
            }>;
        };
        appClipAdvancedExperiences?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type AppClipsResponse = {
    data: Array<AppClip>;
    included?: Array<App | AppClipDefaultExperience>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppClipResponse = {
    data: AppClip;
    included?: Array<App | AppClipDefaultExperience>;
    links: DocumentLinks;
};

export type AppCustomProductPageLocalization = {
    type: 'appCustomProductPageLocalizations';
    id: string;
    attributes?: {
        locale?: string;
        promotionalText?: string;
    };
    relationships?: {
        appCustomProductPageVersion?: {
            data?: {
                type: 'appCustomProductPageVersions';
                id: string;
            };
        };
        appScreenshotSets?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appScreenshotSets';
                id: string;
            }>;
        };
        appPreviewSets?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appPreviewSets';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type AppCustomProductPageLocalizationInlineCreate = {
    type: 'appCustomProductPageLocalizations';
    id?: string;
    attributes: {
        locale: string;
        promotionalText?: string;
    };
    relationships?: {
        appCustomProductPageVersion?: {
            data?: {
                type: 'appCustomProductPageVersions';
                id: string;
            };
        };
    };
};

export type AppCustomProductPageLocalizationsResponse = {
    data: Array<AppCustomProductPageLocalization>;
    included?: Array<AppCustomProductPageVersion | AppScreenshotSet | AppPreviewSet>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppCustomProductPageLocalizationResponse = {
    data: AppCustomProductPageLocalization;
    included?: Array<AppCustomProductPageVersion | AppScreenshotSet | AppPreviewSet>;
    links: DocumentLinks;
};

export type AppCustomProductPageLocalizationCreateRequest = {
    data: {
        type: 'appCustomProductPageLocalizations';
        attributes: {
            locale: string;
            promotionalText?: string;
        };
        relationships: {
            appCustomProductPageVersion: {
                data: {
                    type: 'appCustomProductPageVersions';
                    id: string;
                };
            };
        };
    };
};

export type AppCustomProductPageLocalizationUpdateRequest = {
    data: {
        type: 'appCustomProductPageLocalizations';
        id: string;
        attributes?: {
            promotionalText?: string;
        };
    };
};

export type AppCustomProductPageVersion = {
    type: 'appCustomProductPageVersions';
    id: string;
    attributes?: {
        version?: string;
        state?: 'PREPARE_FOR_SUBMISSION' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'ACCEPTED' | 'APPROVED' | 'REPLACED_WITH_NEW_VERSION' | 'REJECTED';
        deepLink?: string;
    };
    relationships?: {
        appCustomProductPage?: {
            data?: {
                type: 'appCustomProductPages';
                id: string;
            };
        };
        appCustomProductPageLocalizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appCustomProductPageLocalizations';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type AppCustomProductPageVersionInlineCreate = {
    type: 'appCustomProductPageVersions';
    id?: string;
    attributes?: {
        deepLink?: string;
    };
    relationships?: {
        appCustomProductPage?: {
            data?: {
                type: 'appCustomProductPages';
                id: string;
            };
        };
        appCustomProductPageLocalizations?: {
            data?: Array<{
                type: 'appCustomProductPageLocalizations';
                id: string;
            }>;
        };
    };
};

export type AppCustomProductPageVersionsResponse = {
    data: Array<AppCustomProductPageVersion>;
    included?: Array<AppCustomProductPage | AppCustomProductPageLocalization>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppCustomProductPageVersionResponse = {
    data: AppCustomProductPageVersion;
    included?: Array<AppCustomProductPage | AppCustomProductPageLocalization>;
    links: DocumentLinks;
};

export type AppCustomProductPageVersionCreateRequest = {
    data: {
        type: 'appCustomProductPageVersions';
        attributes?: {
            deepLink?: string;
        };
        relationships: {
            appCustomProductPage: {
                data: {
                    type: 'appCustomProductPages';
                    id: string;
                };
            };
            appCustomProductPageLocalizations?: {
                data?: Array<{
                    type: 'appCustomProductPageLocalizations';
                    id: string;
                }>;
            };
        };
    };
};

export type AppCustomProductPageVersionUpdateRequest = {
    data: {
        type: 'appCustomProductPageVersions';
        id: string;
        attributes?: {
            deepLink?: string;
        };
    };
};

export type AppCustomProductPage = {
    type: 'appCustomProductPages';
    id: string;
    attributes?: {
        name?: string;
        url?: string;
        visible?: boolean;
    };
    relationships?: {
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
        appCustomProductPageVersions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appCustomProductPageVersions';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type AppCustomProductPagesResponse = {
    data: Array<AppCustomProductPage>;
    included?: Array<App | AppCustomProductPageVersion>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppCustomProductPageResponse = {
    data: AppCustomProductPage;
    included?: Array<App | AppCustomProductPageVersion>;
    links: DocumentLinks;
};

export type AppCustomProductPageCreateRequest = {
    data: {
        type: 'appCustomProductPages';
        attributes: {
            name: string;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
            appCustomProductPageVersions?: {
                data?: Array<{
                    type: 'appCustomProductPageVersions';
                    id: string;
                }>;
            };
            appStoreVersionTemplate?: {
                data?: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
            customProductPageTemplate?: {
                data?: {
                    type: 'appCustomProductPages';
                    id: string;
                };
            };
        };
    };
    included?: Array<AppCustomProductPageLocalizationInlineCreate | AppCustomProductPageVersionInlineCreate>;
};

export type AppCustomProductPageUpdateRequest = {
    data: {
        type: 'appCustomProductPages';
        id: string;
        attributes?: {
            name?: string;
            visible?: boolean;
        };
    };
};

export type AppEncryptionDeclarationDocument = {
    type: 'appEncryptionDeclarationDocuments';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        assetToken?: string;
        downloadUrl?: string;
        sourceFileChecksum?: string;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
    };
    links?: ResourceLinks;
};

export type AppEncryptionDeclarationDocumentResponse = {
    data: AppEncryptionDeclarationDocument;
    links: DocumentLinks;
};

export type AppEncryptionDeclarationDocumentCreateRequest = {
    data: {
        type: 'appEncryptionDeclarationDocuments';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            appEncryptionDeclaration: {
                data: {
                    type: 'appEncryptionDeclarations';
                    id: string;
                };
            };
        };
    };
};

export type AppEncryptionDeclarationDocumentUpdateRequest = {
    data: {
        type: 'appEncryptionDeclarationDocuments';
        id: string;
        attributes?: {
            sourceFileChecksum?: string;
            uploaded?: boolean;
        };
    };
};

export type AppEncryptionDeclaration = {
    type: 'appEncryptionDeclarations';
    id: string;
    attributes?: {
        appDescription?: string;
        createdDate?: string;
        /**
         * @deprecated
         */
        usesEncryption?: boolean;
        exempt?: boolean;
        containsProprietaryCryptography?: boolean;
        containsThirdPartyCryptography?: boolean;
        availableOnFrenchStore?: boolean;
        platform?: Platform;
        /**
         * @deprecated
         */
        uploadedDate?: string;
        /**
         * @deprecated
         */
        documentUrl?: string;
        /**
         * @deprecated
         */
        documentName?: string;
        /**
         * @deprecated
         */
        documentType?: string;
        appEncryptionDeclarationState?: AppEncryptionDeclarationState;
        codeValue?: string;
    };
    relationships?: {
        /**
         * @deprecated
         */
        app?: {
            links?: RelationshipLinks;
            data?: {
                type: 'apps';
                id: string;
            };
        };
        /**
         * @deprecated
         */
        builds?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'builds';
                id: string;
            }>;
        };
        appEncryptionDeclarationDocument?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appEncryptionDeclarationDocuments';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type AppEncryptionDeclarationsResponse = {
    data: Array<AppEncryptionDeclaration>;
    included?: Array<App | Build | AppEncryptionDeclarationDocument>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppEncryptionDeclarationResponse = {
    data: AppEncryptionDeclaration;
    included?: Array<App | Build | AppEncryptionDeclarationDocument>;
    links: DocumentLinks;
};

export type AppEncryptionDeclarationCreateRequest = {
    data: {
        type: 'appEncryptionDeclarations';
        attributes: {
            appDescription: string;
            containsProprietaryCryptography: boolean;
            containsThirdPartyCryptography: boolean;
            availableOnFrenchStore: boolean;
        };
        relationships: {
            /**
             * @deprecated
             */
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type AppEventLocalization = {
    type: 'appEventLocalizations';
    id: string;
    attributes?: {
        locale?: string;
        name?: string;
        shortDescription?: string;
        longDescription?: string;
    };
    relationships?: {
        appEvent?: {
            data?: {
                type: 'appEvents';
                id: string;
            };
        };
        appEventScreenshots?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appEventScreenshots';
                id: string;
            }>;
        };
        appEventVideoClips?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appEventVideoClips';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type AppEventLocalizationsResponse = {
    data: Array<AppEventLocalization>;
    included?: Array<AppEvent | AppEventScreenshot | AppEventVideoClip>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppEventLocalizationResponse = {
    data: AppEventLocalization;
    included?: Array<AppEvent | AppEventScreenshot | AppEventVideoClip>;
    links: DocumentLinks;
};

export type AppEventLocalizationCreateRequest = {
    data: {
        type: 'appEventLocalizations';
        attributes: {
            locale: string;
            name?: string;
            shortDescription?: string;
            longDescription?: string;
        };
        relationships: {
            appEvent: {
                data: {
                    type: 'appEvents';
                    id: string;
                };
            };
        };
    };
};

export type AppEventLocalizationUpdateRequest = {
    data: {
        type: 'appEventLocalizations';
        id: string;
        attributes?: {
            name?: string;
            shortDescription?: string;
            longDescription?: string;
        };
    };
};

export type AppEventScreenshot = {
    type: 'appEventScreenshots';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        imageAsset?: ImageAsset;
        assetToken?: string;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
        appEventAssetType?: AppEventAssetType;
    };
    relationships?: {
        appEventLocalization?: {
            data?: {
                type: 'appEventLocalizations';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type AppEventScreenshotsResponse = {
    data: Array<AppEventScreenshot>;
    included?: Array<AppEventLocalization>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppEventScreenshotResponse = {
    data: AppEventScreenshot;
    included?: Array<AppEventLocalization>;
    links: DocumentLinks;
};

export type AppEventScreenshotCreateRequest = {
    data: {
        type: 'appEventScreenshots';
        attributes: {
            fileSize: number;
            fileName: string;
            appEventAssetType: AppEventAssetType;
        };
        relationships: {
            appEventLocalization: {
                data: {
                    type: 'appEventLocalizations';
                    id: string;
                };
            };
        };
    };
};

export type AppEventScreenshotUpdateRequest = {
    data: {
        type: 'appEventScreenshots';
        id: string;
        attributes?: {
            uploaded?: boolean;
        };
    };
};

export type AppEventVideoClip = {
    type: 'appEventVideoClips';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        previewFrameTimeCode?: string;
        videoUrl?: string;
        previewFrameImage?: PreviewFrameImage;
        previewImage?: ImageAsset;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
        videoDeliveryState?: AppMediaVideoState;
        appEventAssetType?: AppEventAssetType;
    };
    relationships?: {
        appEventLocalization?: {
            data?: {
                type: 'appEventLocalizations';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type AppEventVideoClipsResponse = {
    data: Array<AppEventVideoClip>;
    included?: Array<AppEventLocalization>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppEventVideoClipResponse = {
    data: AppEventVideoClip;
    included?: Array<AppEventLocalization>;
    links: DocumentLinks;
};

export type AppEventVideoClipCreateRequest = {
    data: {
        type: 'appEventVideoClips';
        attributes: {
            fileSize: number;
            fileName: string;
            previewFrameTimeCode?: string;
            appEventAssetType: AppEventAssetType;
        };
        relationships: {
            appEventLocalization: {
                data: {
                    type: 'appEventLocalizations';
                    id: string;
                };
            };
        };
    };
};

export type AppEventVideoClipUpdateRequest = {
    data: {
        type: 'appEventVideoClips';
        id: string;
        attributes?: {
            previewFrameTimeCode?: string;
            uploaded?: boolean;
        };
    };
};

export type AppEvent = {
    type: 'appEvents';
    id: string;
    attributes?: {
        referenceName?: string;
        badge?: 'LIVE_EVENT' | 'PREMIERE' | 'CHALLENGE' | 'COMPETITION' | 'NEW_SEASON' | 'MAJOR_UPDATE' | 'SPECIAL_EVENT';
        eventState?: 'DRAFT' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'REJECTED' | 'ACCEPTED' | 'APPROVED' | 'PUBLISHED' | 'PAST' | 'ARCHIVED';
        deepLink?: string;
        purchaseRequirement?: string;
        primaryLocale?: string;
        priority?: 'HIGH' | 'NORMAL';
        purpose?: 'APPROPRIATE_FOR_ALL_USERS' | 'ATTRACT_NEW_USERS' | 'KEEP_ACTIVE_USERS_INFORMED' | 'BRING_BACK_LAPSED_USERS';
        territorySchedules?: Array<{
            territories?: Array<string>;
            publishStart?: string;
            eventStart?: string;
            eventEnd?: string;
        }>;
        archivedTerritorySchedules?: Array<{
            territories?: Array<string>;
            publishStart?: string;
            eventStart?: string;
            eventEnd?: string;
        }>;
    };
    relationships?: {
        localizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appEventLocalizations';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type AppEventsResponse = {
    data: Array<AppEvent>;
    included?: Array<AppEventLocalization>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppEventResponse = {
    data: AppEvent;
    included?: Array<AppEventLocalization>;
    links: DocumentLinks;
};

export type AppEventCreateRequest = {
    data: {
        type: 'appEvents';
        attributes: {
            referenceName: string;
            badge?: 'LIVE_EVENT' | 'PREMIERE' | 'CHALLENGE' | 'COMPETITION' | 'NEW_SEASON' | 'MAJOR_UPDATE' | 'SPECIAL_EVENT';
            deepLink?: string;
            purchaseRequirement?: string;
            primaryLocale?: string;
            priority?: 'HIGH' | 'NORMAL';
            purpose?: 'APPROPRIATE_FOR_ALL_USERS' | 'ATTRACT_NEW_USERS' | 'KEEP_ACTIVE_USERS_INFORMED' | 'BRING_BACK_LAPSED_USERS';
            territorySchedules?: Array<{
                territories?: Array<string>;
                publishStart?: string;
                eventStart?: string;
                eventEnd?: string;
            }>;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type AppEventUpdateRequest = {
    data: {
        type: 'appEvents';
        id: string;
        attributes?: {
            referenceName?: string;
            badge?: 'LIVE_EVENT' | 'PREMIERE' | 'CHALLENGE' | 'COMPETITION' | 'NEW_SEASON' | 'MAJOR_UPDATE' | 'SPECIAL_EVENT';
            deepLink?: string;
            purchaseRequirement?: string;
            primaryLocale?: string;
            priority?: 'HIGH' | 'NORMAL';
            purpose?: 'APPROPRIATE_FOR_ALL_USERS' | 'ATTRACT_NEW_USERS' | 'KEEP_ACTIVE_USERS_INFORMED' | 'BRING_BACK_LAPSED_USERS';
            territorySchedules?: Array<{
                territories?: Array<string>;
                publishStart?: string;
                eventStart?: string;
                eventEnd?: string;
            }>;
        };
    };
};

export type AppInfoLocalization = {
    type: 'appInfoLocalizations';
    id: string;
    attributes?: {
        locale?: string;
        name?: string;
        subtitle?: string;
        privacyPolicyUrl?: string;
        privacyChoicesUrl?: string;
        privacyPolicyText?: string;
    };
    relationships?: {
        appInfo?: {
            data?: {
                type: 'appInfos';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type AppInfoLocalizationsResponse = {
    data: Array<AppInfoLocalization>;
    included?: Array<AppInfo>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppInfoLocalizationResponse = {
    data: AppInfoLocalization;
    included?: Array<AppInfo>;
    links: DocumentLinks;
};

export type AppInfoLocalizationCreateRequest = {
    data: {
        type: 'appInfoLocalizations';
        attributes: {
            locale: string;
            name: string;
            subtitle?: string;
            privacyPolicyUrl?: string;
            privacyChoicesUrl?: string;
            privacyPolicyText?: string;
        };
        relationships: {
            appInfo: {
                data: {
                    type: 'appInfos';
                    id: string;
                };
            };
        };
    };
};

export type AppInfoLocalizationUpdateRequest = {
    data: {
        type: 'appInfoLocalizations';
        id: string;
        attributes?: {
            name?: string;
            subtitle?: string;
            privacyPolicyUrl?: string;
            privacyChoicesUrl?: string;
            privacyPolicyText?: string;
        };
    };
};

export type AppInfo = {
    type: 'appInfos';
    id: string;
    attributes?: {
        appStoreState?: AppStoreVersionState;
        state?: 'ACCEPTED' | 'DEVELOPER_REJECTED' | 'IN_REVIEW' | 'PENDING_RELEASE' | 'PREPARE_FOR_SUBMISSION' | 'READY_FOR_DISTRIBUTION' | 'READY_FOR_REVIEW' | 'REJECTED' | 'REPLACED_WITH_NEW_INFO' | 'WAITING_FOR_REVIEW';
        appStoreAgeRating?: AppStoreAgeRating;
        australiaAgeRating?: 'FIFTEEN' | 'EIGHTEEN';
        brazilAgeRating?: BrazilAgeRating;
        brazilAgeRatingV2?: 'SELF_RATED_L' | 'SELF_RATED_TEN' | 'SELF_RATED_TWELVE' | 'SELF_RATED_FOURTEEN' | 'SELF_RATED_SIXTEEN' | 'SELF_RATED_EIGHTEEN' | 'OFFICIAL_L' | 'OFFICIAL_TEN' | 'OFFICIAL_TWELVE' | 'OFFICIAL_FOURTEEN' | 'OFFICIAL_SIXTEEN' | 'OFFICIAL_EIGHTEEN';
        franceAgeRating?: 'EIGHTEEN';
        koreaAgeRating?: 'ALL' | 'TWELVE' | 'FIFTEEN' | 'NINETEEN' | 'NOT_APPLICABLE';
        kidsAgeBand?: KidsAgeBand;
    };
    relationships?: {
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
        ageRatingDeclaration?: {
            links?: RelationshipLinks;
            data?: {
                type: 'ageRatingDeclarations';
                id: string;
            };
        };
        appInfoLocalizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appInfoLocalizations';
                id: string;
            }>;
        };
        primaryCategory?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appCategories';
                id: string;
            };
        };
        primarySubcategoryOne?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appCategories';
                id: string;
            };
        };
        primarySubcategoryTwo?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appCategories';
                id: string;
            };
        };
        secondaryCategory?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appCategories';
                id: string;
            };
        };
        secondarySubcategoryOne?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appCategories';
                id: string;
            };
        };
        secondarySubcategoryTwo?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appCategories';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type AppInfosResponse = {
    data: Array<AppInfo>;
    included?: Array<App | AgeRatingDeclaration | AppInfoLocalization | AppCategory>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppInfoResponse = {
    data: AppInfo;
    included?: Array<App | AgeRatingDeclaration | AppInfoLocalization | AppCategory>;
    links: DocumentLinks;
};

export type AppInfoUpdateRequest = {
    data: {
        type: 'appInfos';
        id: string;
        relationships?: {
            primaryCategory?: {
                data?: {
                    type: 'appCategories';
                    id: string;
                };
            };
            primarySubcategoryOne?: {
                data?: {
                    type: 'appCategories';
                    id: string;
                };
            };
            primarySubcategoryTwo?: {
                data?: {
                    type: 'appCategories';
                    id: string;
                };
            };
            secondaryCategory?: {
                data?: {
                    type: 'appCategories';
                    id: string;
                };
            };
            secondarySubcategoryOne?: {
                data?: {
                    type: 'appCategories';
                    id: string;
                };
            };
            secondarySubcategoryTwo?: {
                data?: {
                    type: 'appCategories';
                    id: string;
                };
            };
        };
    };
};

export type AppPreviewSet = {
    type: 'appPreviewSets';
    id: string;
    attributes?: {
        previewType?: PreviewType;
    };
    relationships?: {
        appStoreVersionLocalization?: {
            data?: {
                type: 'appStoreVersionLocalizations';
                id: string;
            };
        };
        appCustomProductPageLocalization?: {
            data?: {
                type: 'appCustomProductPageLocalizations';
                id: string;
            };
        };
        appStoreVersionExperimentTreatmentLocalization?: {
            data?: {
                type: 'appStoreVersionExperimentTreatmentLocalizations';
                id: string;
            };
        };
        appPreviews?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appPreviews';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type AppPreviewSetsResponse = {
    data: Array<AppPreviewSet>;
    included?: Array<AppStoreVersionLocalization | AppCustomProductPageLocalization | AppStoreVersionExperimentTreatmentLocalization | AppPreview>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppPreviewSetResponse = {
    data: AppPreviewSet;
    included?: Array<AppStoreVersionLocalization | AppCustomProductPageLocalization | AppStoreVersionExperimentTreatmentLocalization | AppPreview>;
    links: DocumentLinks;
};

export type AppPreviewSetCreateRequest = {
    data: {
        type: 'appPreviewSets';
        attributes: {
            previewType: PreviewType;
        };
        relationships?: {
            appStoreVersionLocalization?: {
                data?: {
                    type: 'appStoreVersionLocalizations';
                    id: string;
                };
            };
            appCustomProductPageLocalization?: {
                data?: {
                    type: 'appCustomProductPageLocalizations';
                    id: string;
                };
            };
            appStoreVersionExperimentTreatmentLocalization?: {
                data?: {
                    type: 'appStoreVersionExperimentTreatmentLocalizations';
                    id: string;
                };
            };
        };
    };
};

export type AppPreview = {
    type: 'appPreviews';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        sourceFileChecksum?: string;
        previewFrameTimeCode?: string;
        mimeType?: string;
        videoUrl?: string;
        previewFrameImage?: PreviewFrameImage;
        previewImage?: ImageAsset;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
        videoDeliveryState?: AppMediaVideoState;
    };
    relationships?: {
        appPreviewSet?: {
            data?: {
                type: 'appPreviewSets';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type AppPreviewsResponse = {
    data: Array<AppPreview>;
    included?: Array<AppPreviewSet>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppPreviewResponse = {
    data: AppPreview;
    included?: Array<AppPreviewSet>;
    links: DocumentLinks;
};

export type AppPreviewCreateRequest = {
    data: {
        type: 'appPreviews';
        attributes: {
            fileSize: number;
            fileName: string;
            previewFrameTimeCode?: string;
            mimeType?: string;
        };
        relationships: {
            appPreviewSet: {
                data: {
                    type: 'appPreviewSets';
                    id: string;
                };
            };
        };
    };
};

export type AppPreviewUpdateRequest = {
    data: {
        type: 'appPreviews';
        id: string;
        attributes?: {
            sourceFileChecksum?: string;
            previewFrameTimeCode?: string;
            uploaded?: boolean;
        };
    };
};

export type AppPricePointV3 = {
    type: 'appPricePoints';
    id: string;
    attributes?: {
        customerPrice?: string;
        proceeds?: string;
    };
    relationships?: {
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
        equalizations?: {
            links?: RelationshipLinks;
        };
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type AppPricePointsV3Response = {
    data: Array<AppPricePointV3>;
    included?: Array<App | Territory>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppPricePointV3Response = {
    data: AppPricePointV3;
    included?: Array<App | Territory>;
    links: DocumentLinks;
};

export type AppPriceSchedule = {
    type: 'appPriceSchedules';
    id: string;
    relationships?: {
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
        baseTerritory?: {
            links?: RelationshipLinks;
            data?: {
                type: 'territories';
                id: string;
            };
        };
        manualPrices?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appPrices';
                id: string;
            }>;
        };
        automaticPrices?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appPrices';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type AppPriceScheduleResponse = {
    data: AppPriceSchedule;
    included?: Array<App | Territory | AppPriceV2>;
    links: DocumentLinks;
};

export type AppPriceScheduleCreateRequest = {
    data: {
        type: 'appPriceSchedules';
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
            baseTerritory: {
                data: {
                    type: 'territories';
                    id: string;
                };
            };
            manualPrices: {
                data: Array<{
                    type: 'appPrices';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<AppPriceV2InlineCreate | TerritoryInlineCreate>;
};

export type AppPriceV2 = {
    type: 'appPrices';
    id: string;
    attributes?: {
        manual?: boolean;
        startDate?: string;
        endDate?: string;
    };
    relationships?: {
        appPricePoint?: {
            data?: {
                type: 'appPricePoints';
                id: string;
            };
        };
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type AppPriceV2InlineCreate = {
    type: 'appPrices';
    id?: string;
};

export type AppPricesV2Response = {
    data: Array<AppPriceV2>;
    included?: Array<AppPricePointV3 | Territory>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppScreenshotSet = {
    type: 'appScreenshotSets';
    id: string;
    attributes?: {
        screenshotDisplayType?: ScreenshotDisplayType;
    };
    relationships?: {
        appStoreVersionLocalization?: {
            data?: {
                type: 'appStoreVersionLocalizations';
                id: string;
            };
        };
        appCustomProductPageLocalization?: {
            data?: {
                type: 'appCustomProductPageLocalizations';
                id: string;
            };
        };
        appStoreVersionExperimentTreatmentLocalization?: {
            data?: {
                type: 'appStoreVersionExperimentTreatmentLocalizations';
                id: string;
            };
        };
        appScreenshots?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appScreenshots';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type AppScreenshotSetsResponse = {
    data: Array<AppScreenshotSet>;
    included?: Array<AppStoreVersionLocalization | AppCustomProductPageLocalization | AppStoreVersionExperimentTreatmentLocalization | AppScreenshot>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppScreenshotSetResponse = {
    data: AppScreenshotSet;
    included?: Array<AppStoreVersionLocalization | AppCustomProductPageLocalization | AppStoreVersionExperimentTreatmentLocalization | AppScreenshot>;
    links: DocumentLinks;
};

export type AppScreenshotSetCreateRequest = {
    data: {
        type: 'appScreenshotSets';
        attributes: {
            screenshotDisplayType: ScreenshotDisplayType;
        };
        relationships?: {
            appStoreVersionLocalization?: {
                data?: {
                    type: 'appStoreVersionLocalizations';
                    id: string;
                };
            };
            appCustomProductPageLocalization?: {
                data?: {
                    type: 'appCustomProductPageLocalizations';
                    id: string;
                };
            };
            appStoreVersionExperimentTreatmentLocalization?: {
                data?: {
                    type: 'appStoreVersionExperimentTreatmentLocalizations';
                    id: string;
                };
            };
        };
    };
};

export type AppScreenshot = {
    type: 'appScreenshots';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        sourceFileChecksum?: string;
        imageAsset?: ImageAsset;
        assetToken?: string;
        assetType?: string;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
    };
    relationships?: {
        appScreenshotSet?: {
            data?: {
                type: 'appScreenshotSets';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type AppScreenshotsResponse = {
    data: Array<AppScreenshot>;
    included?: Array<AppScreenshotSet>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppScreenshotResponse = {
    data: AppScreenshot;
    included?: Array<AppScreenshotSet>;
    links: DocumentLinks;
};

export type AppScreenshotCreateRequest = {
    data: {
        type: 'appScreenshots';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            appScreenshotSet: {
                data: {
                    type: 'appScreenshotSets';
                    id: string;
                };
            };
        };
    };
};

export type AppScreenshotUpdateRequest = {
    data: {
        type: 'appScreenshots';
        id: string;
        attributes?: {
            sourceFileChecksum?: string;
            uploaded?: boolean;
        };
    };
};

export type AppStoreReviewAttachment = {
    type: 'appStoreReviewAttachments';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        sourceFileChecksum?: string;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
    };
    relationships?: {
        appStoreReviewDetail?: {
            data?: {
                type: 'appStoreReviewDetails';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type AppStoreReviewAttachmentsResponse = {
    data: Array<AppStoreReviewAttachment>;
    included?: Array<AppStoreReviewDetail>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppStoreReviewAttachmentResponse = {
    data: AppStoreReviewAttachment;
    included?: Array<AppStoreReviewDetail>;
    links: DocumentLinks;
};

export type AppStoreReviewAttachmentCreateRequest = {
    data: {
        type: 'appStoreReviewAttachments';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            appStoreReviewDetail: {
                data: {
                    type: 'appStoreReviewDetails';
                    id: string;
                };
            };
        };
    };
};

export type AppStoreReviewAttachmentUpdateRequest = {
    data: {
        type: 'appStoreReviewAttachments';
        id: string;
        attributes?: {
            sourceFileChecksum?: string;
            uploaded?: boolean;
        };
    };
};

export type AppStoreReviewDetail = {
    type: 'appStoreReviewDetails';
    id: string;
    attributes?: {
        contactFirstName?: string;
        contactLastName?: string;
        contactPhone?: string;
        contactEmail?: string;
        demoAccountName?: string;
        demoAccountPassword?: string;
        demoAccountRequired?: boolean;
        notes?: string;
    };
    relationships?: {
        appStoreVersion?: {
            data?: {
                type: 'appStoreVersions';
                id: string;
            };
        };
        appStoreReviewAttachments?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appStoreReviewAttachments';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type AppStoreReviewDetailResponse = {
    data: AppStoreReviewDetail;
    included?: Array<AppStoreVersion | AppStoreReviewAttachment>;
    links: DocumentLinks;
};

export type AppStoreReviewDetailCreateRequest = {
    data: {
        type: 'appStoreReviewDetails';
        attributes?: {
            contactFirstName?: string;
            contactLastName?: string;
            contactPhone?: string;
            contactEmail?: string;
            demoAccountName?: string;
            demoAccountPassword?: string;
            demoAccountRequired?: boolean;
            notes?: string;
        };
        relationships: {
            appStoreVersion: {
                data: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
        };
    };
};

export type AppStoreReviewDetailUpdateRequest = {
    data: {
        type: 'appStoreReviewDetails';
        id: string;
        attributes?: {
            contactFirstName?: string;
            contactLastName?: string;
            contactPhone?: string;
            contactEmail?: string;
            demoAccountName?: string;
            demoAccountPassword?: string;
            demoAccountRequired?: boolean;
            notes?: string;
        };
    };
};

export type AppStoreVersionExperimentTreatmentLocalization = {
    type: 'appStoreVersionExperimentTreatmentLocalizations';
    id: string;
    attributes?: {
        locale?: string;
    };
    relationships?: {
        appStoreVersionExperimentTreatment?: {
            data?: {
                type: 'appStoreVersionExperimentTreatments';
                id: string;
            };
        };
        appScreenshotSets?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appScreenshotSets';
                id: string;
            }>;
        };
        appPreviewSets?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appPreviewSets';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type AppStoreVersionExperimentTreatmentLocalizationsResponse = {
    data: Array<AppStoreVersionExperimentTreatmentLocalization>;
    included?: Array<AppStoreVersionExperimentTreatment | AppScreenshotSet | AppPreviewSet>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppStoreVersionExperimentTreatmentLocalizationResponse = {
    data: AppStoreVersionExperimentTreatmentLocalization;
    included?: Array<AppStoreVersionExperimentTreatment | AppScreenshotSet | AppPreviewSet>;
    links: DocumentLinks;
};

export type AppStoreVersionExperimentTreatmentLocalizationCreateRequest = {
    data: {
        type: 'appStoreVersionExperimentTreatmentLocalizations';
        attributes: {
            locale: string;
        };
        relationships: {
            appStoreVersionExperimentTreatment: {
                data: {
                    type: 'appStoreVersionExperimentTreatments';
                    id: string;
                };
            };
        };
    };
};

export type AppStoreVersionExperimentTreatment = {
    type: 'appStoreVersionExperimentTreatments';
    id: string;
    attributes?: {
        name?: string;
        appIcon?: ImageAsset;
        appIconName?: string;
        promotedDate?: string;
    };
    relationships?: {
        appStoreVersionExperiment?: {
            data?: {
                type: 'appStoreVersionExperiments';
                id: string;
            };
        };
        appStoreVersionExperimentV2?: {
            data?: {
                type: 'appStoreVersionExperiments';
                id: string;
            };
        };
        appStoreVersionExperimentTreatmentLocalizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appStoreVersionExperimentTreatmentLocalizations';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type AppStoreVersionExperimentTreatmentsResponse = {
    data: Array<AppStoreVersionExperimentTreatment>;
    included?: Array<AppStoreVersionExperiment | AppStoreVersionExperimentV2 | AppStoreVersionExperimentTreatmentLocalization>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppStoreVersionExperimentTreatmentResponse = {
    data: AppStoreVersionExperimentTreatment;
    included?: Array<AppStoreVersionExperiment | AppStoreVersionExperimentV2 | AppStoreVersionExperimentTreatmentLocalization>;
    links: DocumentLinks;
};

export type AppStoreVersionExperimentTreatmentCreateRequest = {
    data: {
        type: 'appStoreVersionExperimentTreatments';
        attributes: {
            name: string;
            appIconName?: string;
        };
        relationships?: {
            appStoreVersionExperiment?: {
                data?: {
                    type: 'appStoreVersionExperiments';
                    id: string;
                };
            };
            appStoreVersionExperimentV2?: {
                data?: {
                    type: 'appStoreVersionExperiments';
                    id: string;
                };
            };
        };
    };
};

export type AppStoreVersionExperimentTreatmentUpdateRequest = {
    data: {
        type: 'appStoreVersionExperimentTreatments';
        id: string;
        attributes?: {
            name?: string;
            appIconName?: string;
        };
    };
};

export type AppStoreVersionExperimentV2 = {
    type: 'appStoreVersionExperiments';
    id: string;
    attributes?: {
        name?: string;
        platform?: Platform;
        trafficProportion?: number;
        state?: 'PREPARE_FOR_SUBMISSION' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'ACCEPTED' | 'APPROVED' | 'REJECTED' | 'COMPLETED' | 'STOPPED';
        reviewRequired?: boolean;
        startDate?: string;
        endDate?: string;
    };
    relationships?: {
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
        latestControlVersion?: {
            data?: {
                type: 'appStoreVersions';
                id: string;
            };
        };
        controlVersions?: {
            meta?: PagingInformation;
            data?: Array<{
                type: 'appStoreVersions';
                id: string;
            }>;
        };
        appStoreVersionExperimentTreatments?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appStoreVersionExperimentTreatments';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type AppStoreVersionExperimentsV2Response = {
    data: Array<AppStoreVersionExperimentV2>;
    included?: Array<App | AppStoreVersion | AppStoreVersionExperimentTreatment>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppStoreVersionExperimentV2Response = {
    data: AppStoreVersionExperimentV2;
    included?: Array<App | AppStoreVersion | AppStoreVersionExperimentTreatment>;
    links: DocumentLinks;
};

export type AppStoreVersionExperimentV2CreateRequest = {
    data: {
        type: 'appStoreVersionExperiments';
        attributes: {
            name: string;
            platform: Platform;
            trafficProportion: number;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type AppStoreVersionExperimentV2UpdateRequest = {
    data: {
        type: 'appStoreVersionExperiments';
        id: string;
        attributes?: {
            name?: string;
            trafficProportion?: number;
            started?: boolean;
        };
    };
};

/**
 * @deprecated
 */
export type AppStoreVersionExperiment = {
    type: 'appStoreVersionExperiments';
    id: string;
    attributes?: {
        name?: string;
        trafficProportion?: number;
        state?: 'PREPARE_FOR_SUBMISSION' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'ACCEPTED' | 'APPROVED' | 'REJECTED' | 'COMPLETED' | 'STOPPED';
        reviewRequired?: boolean;
        startDate?: string;
        endDate?: string;
    };
    relationships?: {
        appStoreVersion?: {
            data?: {
                type: 'appStoreVersions';
                id: string;
            };
        };
        appStoreVersionExperimentTreatments?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appStoreVersionExperimentTreatments';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

/**
 * @deprecated
 */
export type AppStoreVersionExperimentsResponse = {
    data: Array<AppStoreVersionExperiment>;
    included?: Array<AppStoreVersion | AppStoreVersionExperimentTreatment>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

/**
 * @deprecated
 */
export type AppStoreVersionExperimentResponse = {
    data: AppStoreVersionExperiment;
    included?: Array<AppStoreVersion | AppStoreVersionExperimentTreatment>;
    links: DocumentLinks;
};

/**
 * @deprecated
 */
export type AppStoreVersionExperimentCreateRequest = {
    data: {
        type: 'appStoreVersionExperiments';
        attributes: {
            name: string;
            trafficProportion: number;
        };
        relationships: {
            appStoreVersion: {
                data: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
        };
    };
};

/**
 * @deprecated
 */
export type AppStoreVersionExperimentUpdateRequest = {
    data: {
        type: 'appStoreVersionExperiments';
        id: string;
        attributes?: {
            name?: string;
            trafficProportion?: number;
            started?: boolean;
        };
    };
};

export type AppStoreVersionLocalization = {
    type: 'appStoreVersionLocalizations';
    id: string;
    attributes?: {
        description?: string;
        locale?: string;
        keywords?: string;
        marketingUrl?: string;
        promotionalText?: string;
        supportUrl?: string;
        whatsNew?: string;
    };
    relationships?: {
        appStoreVersion?: {
            data?: {
                type: 'appStoreVersions';
                id: string;
            };
        };
        appScreenshotSets?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appScreenshotSets';
                id: string;
            }>;
        };
        appPreviewSets?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appPreviewSets';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type AppStoreVersionLocalizationsResponse = {
    data: Array<AppStoreVersionLocalization>;
    included?: Array<AppStoreVersion | AppScreenshotSet | AppPreviewSet>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppStoreVersionLocalizationResponse = {
    data: AppStoreVersionLocalization;
    included?: Array<AppStoreVersion | AppScreenshotSet | AppPreviewSet>;
    links: DocumentLinks;
};

export type AppStoreVersionLocalizationCreateRequest = {
    data: {
        type: 'appStoreVersionLocalizations';
        attributes: {
            description?: string;
            locale: string;
            keywords?: string;
            marketingUrl?: string;
            promotionalText?: string;
            supportUrl?: string;
            whatsNew?: string;
        };
        relationships: {
            appStoreVersion: {
                data: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
        };
    };
};

export type AppStoreVersionLocalizationUpdateRequest = {
    data: {
        type: 'appStoreVersionLocalizations';
        id: string;
        attributes?: {
            description?: string;
            keywords?: string;
            marketingUrl?: string;
            promotionalText?: string;
            supportUrl?: string;
            whatsNew?: string;
        };
    };
};

export type AppStoreVersionPhasedRelease = {
    type: 'appStoreVersionPhasedReleases';
    id: string;
    attributes?: {
        phasedReleaseState?: PhasedReleaseState;
        startDate?: string;
        totalPauseDuration?: number;
        currentDayNumber?: number;
    };
    links?: ResourceLinks;
};

export type AppStoreVersionPhasedReleaseResponse = {
    data: AppStoreVersionPhasedRelease;
    links: DocumentLinks;
};

export type AppStoreVersionPhasedReleaseCreateRequest = {
    data: {
        type: 'appStoreVersionPhasedReleases';
        attributes?: {
            phasedReleaseState?: PhasedReleaseState;
        };
        relationships: {
            appStoreVersion: {
                data: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
        };
    };
};

export type AppStoreVersionPhasedReleaseUpdateRequest = {
    data: {
        type: 'appStoreVersionPhasedReleases';
        id: string;
        attributes?: {
            phasedReleaseState?: PhasedReleaseState;
        };
    };
};

export type AppStoreVersionPromotion = {
    type: 'appStoreVersionPromotions';
    id: string;
    links?: ResourceLinks;
};

export type AppStoreVersionPromotionResponse = {
    data: AppStoreVersionPromotion;
    links: DocumentLinks;
};

export type AppStoreVersionPromotionCreateRequest = {
    data: {
        type: 'appStoreVersionPromotions';
        relationships: {
            appStoreVersion: {
                data: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
            appStoreVersionExperimentTreatment: {
                data: {
                    type: 'appStoreVersionExperimentTreatments';
                    id: string;
                };
            };
        };
    };
};

export type AppStoreVersionReleaseRequest = {
    type: 'appStoreVersionReleaseRequests';
    id: string;
    links?: ResourceLinks;
};

export type AppStoreVersionReleaseRequestResponse = {
    data: AppStoreVersionReleaseRequest;
    links: DocumentLinks;
};

export type AppStoreVersionReleaseRequestCreateRequest = {
    data: {
        type: 'appStoreVersionReleaseRequests';
        relationships: {
            appStoreVersion: {
                data: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
        };
    };
};

/**
 * @deprecated
 */
export type AppStoreVersionSubmission = {
    type: 'appStoreVersionSubmissions';
    id: string;
    relationships?: {
        appStoreVersion?: {
            data?: {
                type: 'appStoreVersions';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

/**
 * @deprecated
 */
export type AppStoreVersionSubmissionResponse = {
    data: AppStoreVersionSubmission;
    included?: Array<AppStoreVersion>;
    links: DocumentLinks;
};

/**
 * @deprecated
 */
export type AppStoreVersionSubmissionCreateRequest = {
    data: {
        type: 'appStoreVersionSubmissions';
        relationships: {
            appStoreVersion: {
                data: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
        };
    };
};

export type AppStoreVersion = {
    type: 'appStoreVersions';
    id: string;
    attributes?: {
        platform?: Platform;
        versionString?: string;
        appStoreState?: AppStoreVersionState;
        appVersionState?: AppVersionState;
        copyright?: string;
        reviewType?: 'APP_STORE' | 'NOTARIZATION';
        releaseType?: 'MANUAL' | 'AFTER_APPROVAL' | 'SCHEDULED';
        earliestReleaseDate?: string;
        downloadable?: boolean;
        createdDate?: string;
    };
    relationships?: {
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
        /**
         * @deprecated
         */
        ageRatingDeclaration?: {
            links?: RelationshipLinks;
            data?: {
                type: 'ageRatingDeclarations';
                id: string;
            };
        };
        appStoreVersionLocalizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appStoreVersionLocalizations';
                id: string;
            }>;
        };
        build?: {
            links?: RelationshipLinks;
            data?: {
                type: 'builds';
                id: string;
            };
        };
        appStoreVersionPhasedRelease?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appStoreVersionPhasedReleases';
                id: string;
            };
        };
        gameCenterAppVersion?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterAppVersions';
                id: string;
            };
        };
        routingAppCoverage?: {
            links?: RelationshipLinks;
            data?: {
                type: 'routingAppCoverages';
                id: string;
            };
        };
        appStoreReviewDetail?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appStoreReviewDetails';
                id: string;
            };
        };
        appStoreVersionSubmission?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appStoreVersionSubmissions';
                id: string;
            };
        };
        appClipDefaultExperience?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appClipDefaultExperiences';
                id: string;
            };
        };
        appStoreVersionExperiments?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appStoreVersionExperiments';
                id: string;
            }>;
        };
        appStoreVersionExperimentsV2?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appStoreVersionExperiments';
                id: string;
            }>;
        };
        customerReviews?: {
            links?: RelationshipLinks;
        };
        alternativeDistributionPackage?: {
            links?: RelationshipLinks;
            data?: {
                type: 'alternativeDistributionPackages';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type AppStoreVersionsResponse = {
    data: Array<AppStoreVersion>;
    included?: Array<App | AgeRatingDeclaration | AppStoreVersionLocalization | Build | AppStoreVersionPhasedRelease | GameCenterAppVersion | RoutingAppCoverage | AppStoreReviewDetail | AppStoreVersionSubmission | AppClipDefaultExperience | AppStoreVersionExperiment | AppStoreVersionExperimentV2 | AlternativeDistributionPackage>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppStoreVersionResponse = {
    data: AppStoreVersion;
    included?: Array<App | AgeRatingDeclaration | AppStoreVersionLocalization | Build | AppStoreVersionPhasedRelease | GameCenterAppVersion | RoutingAppCoverage | AppStoreReviewDetail | AppStoreVersionSubmission | AppClipDefaultExperience | AppStoreVersionExperiment | AppStoreVersionExperimentV2 | AlternativeDistributionPackage>;
    links: DocumentLinks;
};

export type AppStoreVersionCreateRequest = {
    data: {
        type: 'appStoreVersions';
        attributes: {
            platform: Platform;
            versionString: string;
            copyright?: string;
            reviewType?: 'APP_STORE' | 'NOTARIZATION';
            releaseType?: 'MANUAL' | 'AFTER_APPROVAL' | 'SCHEDULED';
            earliestReleaseDate?: string;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
            appStoreVersionLocalizations?: {
                data?: Array<{
                    type: 'appStoreVersionLocalizations';
                    id: string;
                }>;
            };
            build?: {
                data?: {
                    type: 'builds';
                    id: string;
                };
            };
        };
    };
};

export type AppStoreVersionUpdateRequest = {
    data: {
        type: 'appStoreVersions';
        id: string;
        attributes?: {
            versionString?: string;
            copyright?: string;
            reviewType?: 'APP_STORE' | 'NOTARIZATION';
            releaseType?: 'MANUAL' | 'AFTER_APPROVAL' | 'SCHEDULED';
            earliestReleaseDate?: string;
            downloadable?: boolean;
        };
        relationships?: {
            build?: {
                data?: {
                    type: 'builds';
                    id: string;
                };
            };
            appClipDefaultExperience?: {
                data?: {
                    type: 'appClipDefaultExperiences';
                    id: string;
                };
            };
        };
    };
};

export type App = {
    type: 'apps';
    id: string;
    attributes?: {
        name?: string;
        bundleId?: string;
        sku?: string;
        primaryLocale?: string;
        isOrEverWasMadeForKids?: boolean;
        subscriptionStatusUrl?: string;
        subscriptionStatusUrlVersion?: SubscriptionStatusUrlVersion;
        subscriptionStatusUrlForSandbox?: string;
        subscriptionStatusUrlVersionForSandbox?: SubscriptionStatusUrlVersion;
        contentRightsDeclaration?: 'DOES_NOT_USE_THIRD_PARTY_CONTENT' | 'USES_THIRD_PARTY_CONTENT';
        streamlinedPurchasingEnabled?: boolean;
    };
    relationships?: {
        appEncryptionDeclarations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appEncryptionDeclarations';
                id: string;
            }>;
        };
        ciProduct?: {
            links?: RelationshipLinks;
            data?: {
                type: 'ciProducts';
                id: string;
            };
        };
        betaTesters?: {
            links?: RelationshipLinks;
        };
        betaGroups?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'betaGroups';
                id: string;
            }>;
        };
        appStoreVersions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appStoreVersions';
                id: string;
            }>;
        };
        preReleaseVersions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'preReleaseVersions';
                id: string;
            }>;
        };
        betaAppLocalizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'betaAppLocalizations';
                id: string;
            }>;
        };
        builds?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'builds';
                id: string;
            }>;
        };
        betaLicenseAgreement?: {
            links?: RelationshipLinks;
            data?: {
                type: 'betaLicenseAgreements';
                id: string;
            };
        };
        betaAppReviewDetail?: {
            links?: RelationshipLinks;
            data?: {
                type: 'betaAppReviewDetails';
                id: string;
            };
        };
        appInfos?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appInfos';
                id: string;
            }>;
        };
        appClips?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appClips';
                id: string;
            }>;
        };
        appPricePoints?: {
            links?: RelationshipLinks;
        };
        endUserLicenseAgreement?: {
            links?: RelationshipLinks;
            data?: {
                type: 'endUserLicenseAgreements';
                id: string;
            };
        };
        appPriceSchedule?: {
            links?: RelationshipLinks;
        };
        appAvailabilityV2?: {
            links?: RelationshipLinks;
        };
        /**
         * @deprecated
         */
        inAppPurchases?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'inAppPurchases';
                id: string;
            }>;
        };
        subscriptionGroups?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionGroups';
                id: string;
            }>;
        };
        gameCenterEnabledVersions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterEnabledVersions';
                id: string;
            }>;
        };
        perfPowerMetrics?: {
            links?: RelationshipLinks;
        };
        appCustomProductPages?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appCustomProductPages';
                id: string;
            }>;
        };
        inAppPurchasesV2?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'inAppPurchases';
                id: string;
            }>;
        };
        promotedPurchases?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'promotedPurchases';
                id: string;
            }>;
        };
        appEvents?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appEvents';
                id: string;
            }>;
        };
        reviewSubmissions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'reviewSubmissions';
                id: string;
            }>;
        };
        subscriptionGracePeriod?: {
            links?: RelationshipLinks;
            data?: {
                type: 'subscriptionGracePeriods';
                id: string;
            };
        };
        customerReviews?: {
            links?: RelationshipLinks;
        };
        gameCenterDetail?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterDetails';
                id: string;
            };
        };
        appStoreVersionExperimentsV2?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appStoreVersionExperiments';
                id: string;
            }>;
        };
        alternativeDistributionKey?: {
            links?: RelationshipLinks;
        };
        analyticsReportRequests?: {
            links?: RelationshipLinks;
        };
        marketplaceSearchDetail?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type AppsResponse = {
    data: Array<App>;
    included?: Array<AppEncryptionDeclaration | CiProduct | BetaGroup | AppStoreVersion | PrereleaseVersion | BetaAppLocalization | Build | BetaLicenseAgreement | BetaAppReviewDetail | AppInfo | AppClip | EndUserLicenseAgreement | InAppPurchase | SubscriptionGroup | GameCenterEnabledVersion | AppCustomProductPage | InAppPurchaseV2 | PromotedPurchase | AppEvent | ReviewSubmission | SubscriptionGracePeriod | GameCenterDetail | AppStoreVersionExperimentV2>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppResponse = {
    data: App;
    included?: Array<AppEncryptionDeclaration | CiProduct | BetaGroup | AppStoreVersion | PrereleaseVersion | BetaAppLocalization | Build | BetaLicenseAgreement | BetaAppReviewDetail | AppInfo | AppClip | EndUserLicenseAgreement | InAppPurchase | SubscriptionGroup | GameCenterEnabledVersion | AppCustomProductPage | InAppPurchaseV2 | PromotedPurchase | AppEvent | ReviewSubmission | SubscriptionGracePeriod | GameCenterDetail | AppStoreVersionExperimentV2>;
    links: DocumentLinks;
};

export type AppUpdateRequest = {
    data: {
        type: 'apps';
        id: string;
        attributes?: {
            bundleId?: string;
            primaryLocale?: string;
            subscriptionStatusUrl?: string;
            subscriptionStatusUrlVersion?: SubscriptionStatusUrlVersion;
            subscriptionStatusUrlForSandbox?: string;
            subscriptionStatusUrlVersionForSandbox?: SubscriptionStatusUrlVersion;
            contentRightsDeclaration?: 'DOES_NOT_USE_THIRD_PARTY_CONTENT' | 'USES_THIRD_PARTY_CONTENT';
            streamlinedPurchasingEnabled?: boolean;
        };
    };
};

export type BetaAppClipInvocationLocalization = {
    type: 'betaAppClipInvocationLocalizations';
    id: string;
    attributes?: {
        title?: string;
        locale?: string;
    };
    links?: ResourceLinks;
};

export type BetaAppClipInvocationLocalizationInlineCreate = {
    type: 'betaAppClipInvocationLocalizations';
    id?: string;
    attributes: {
        title: string;
        locale: string;
    };
    relationships?: {
        betaAppClipInvocation?: {
            data?: {
                type: 'betaAppClipInvocations';
                id: string;
            };
        };
    };
};

export type BetaAppClipInvocationLocalizationResponse = {
    data: BetaAppClipInvocationLocalization;
    links: DocumentLinks;
};

export type BetaAppClipInvocationLocalizationCreateRequest = {
    data: {
        type: 'betaAppClipInvocationLocalizations';
        attributes: {
            title: string;
            locale: string;
        };
        relationships: {
            betaAppClipInvocation: {
                data: {
                    type: 'betaAppClipInvocations';
                    id: string;
                };
            };
        };
    };
};

export type BetaAppClipInvocationLocalizationUpdateRequest = {
    data: {
        type: 'betaAppClipInvocationLocalizations';
        id: string;
        attributes?: {
            title?: string;
        };
    };
};

export type BetaAppClipInvocation = {
    type: 'betaAppClipInvocations';
    id: string;
    attributes?: {
        url?: string;
    };
    relationships?: {
        betaAppClipInvocationLocalizations?: {
            meta?: PagingInformation;
            data?: Array<{
                type: 'betaAppClipInvocationLocalizations';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type BetaAppClipInvocationsResponse = {
    data: Array<BetaAppClipInvocation>;
    included?: Array<BetaAppClipInvocationLocalization>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaAppClipInvocationResponse = {
    data: BetaAppClipInvocation;
    included?: Array<BetaAppClipInvocationLocalization>;
    links: DocumentLinks;
};

export type BetaAppClipInvocationCreateRequest = {
    data: {
        type: 'betaAppClipInvocations';
        attributes: {
            url: string;
        };
        relationships: {
            buildBundle: {
                data: {
                    type: 'buildBundles';
                    id: string;
                };
            };
            betaAppClipInvocationLocalizations: {
                data: Array<{
                    type: 'betaAppClipInvocationLocalizations';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<BetaAppClipInvocationLocalizationInlineCreate>;
};

export type BetaAppClipInvocationUpdateRequest = {
    data: {
        type: 'betaAppClipInvocations';
        id: string;
        attributes?: {
            url?: string;
        };
    };
};

export type BetaAppLocalization = {
    type: 'betaAppLocalizations';
    id: string;
    attributes?: {
        feedbackEmail?: string;
        marketingUrl?: string;
        privacyPolicyUrl?: string;
        tvOsPrivacyPolicy?: string;
        description?: string;
        locale?: string;
    };
    relationships?: {
        app?: {
            links?: RelationshipLinks;
            data?: {
                type: 'apps';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type BetaAppLocalizationsResponse = {
    data: Array<BetaAppLocalization>;
    included?: Array<App>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaAppLocalizationResponse = {
    data: BetaAppLocalization;
    included?: Array<App>;
    links: DocumentLinks;
};

export type BetaAppLocalizationCreateRequest = {
    data: {
        type: 'betaAppLocalizations';
        attributes: {
            feedbackEmail?: string;
            marketingUrl?: string;
            privacyPolicyUrl?: string;
            tvOsPrivacyPolicy?: string;
            description?: string;
            locale: string;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type BetaAppLocalizationUpdateRequest = {
    data: {
        type: 'betaAppLocalizations';
        id: string;
        attributes?: {
            feedbackEmail?: string;
            marketingUrl?: string;
            privacyPolicyUrl?: string;
            tvOsPrivacyPolicy?: string;
            description?: string;
        };
    };
};

export type BetaAppReviewDetail = {
    type: 'betaAppReviewDetails';
    id: string;
    attributes?: {
        contactFirstName?: string;
        contactLastName?: string;
        contactPhone?: string;
        contactEmail?: string;
        demoAccountName?: string;
        demoAccountPassword?: string;
        demoAccountRequired?: boolean;
        notes?: string;
    };
    relationships?: {
        app?: {
            links?: RelationshipLinks;
            data?: {
                type: 'apps';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type BetaAppReviewDetailsResponse = {
    data: Array<BetaAppReviewDetail>;
    included?: Array<App>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaAppReviewDetailResponse = {
    data: BetaAppReviewDetail;
    included?: Array<App>;
    links: DocumentLinks;
};

export type BetaAppReviewDetailUpdateRequest = {
    data: {
        type: 'betaAppReviewDetails';
        id: string;
        attributes?: {
            contactFirstName?: string;
            contactLastName?: string;
            contactPhone?: string;
            contactEmail?: string;
            demoAccountName?: string;
            demoAccountPassword?: string;
            demoAccountRequired?: boolean;
            notes?: string;
        };
    };
};

export type BetaAppReviewSubmission = {
    type: 'betaAppReviewSubmissions';
    id: string;
    attributes?: {
        betaReviewState?: BetaReviewState;
        submittedDate?: string;
    };
    relationships?: {
        build?: {
            links?: RelationshipLinks;
            data?: {
                type: 'builds';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type BetaAppReviewSubmissionsResponse = {
    data: Array<BetaAppReviewSubmission>;
    included?: Array<Build>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaAppReviewSubmissionResponse = {
    data: BetaAppReviewSubmission;
    included?: Array<Build>;
    links: DocumentLinks;
};

export type BetaAppReviewSubmissionCreateRequest = {
    data: {
        type: 'betaAppReviewSubmissions';
        relationships: {
            build: {
                data: {
                    type: 'builds';
                    id: string;
                };
            };
        };
    };
};

export type BetaBuildLocalization = {
    type: 'betaBuildLocalizations';
    id: string;
    attributes?: {
        whatsNew?: string;
        locale?: string;
    };
    relationships?: {
        build?: {
            links?: RelationshipLinks;
            data?: {
                type: 'builds';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type BetaBuildLocalizationsResponse = {
    data: Array<BetaBuildLocalization>;
    included?: Array<Build>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaBuildLocalizationResponse = {
    data: BetaBuildLocalization;
    included?: Array<Build>;
    links: DocumentLinks;
};

export type BetaBuildLocalizationCreateRequest = {
    data: {
        type: 'betaBuildLocalizations';
        attributes: {
            whatsNew?: string;
            locale: string;
        };
        relationships: {
            build: {
                data: {
                    type: 'builds';
                    id: string;
                };
            };
        };
    };
};

export type BetaBuildLocalizationUpdateRequest = {
    data: {
        type: 'betaBuildLocalizations';
        id: string;
        attributes?: {
            whatsNew?: string;
        };
    };
};

export type BetaGroup = {
    type: 'betaGroups';
    id: string;
    attributes?: {
        name?: string;
        createdDate?: string;
        isInternalGroup?: boolean;
        hasAccessToAllBuilds?: boolean;
        publicLinkEnabled?: boolean;
        publicLinkId?: string;
        publicLinkLimitEnabled?: boolean;
        publicLinkLimit?: number;
        publicLink?: string;
        feedbackEnabled?: boolean;
        iosBuildsAvailableForAppleSiliconMac?: boolean;
        iosBuildsAvailableForAppleVision?: boolean;
    };
    relationships?: {
        app?: {
            links?: RelationshipLinks;
            data?: {
                type: 'apps';
                id: string;
            };
        };
        builds?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'builds';
                id: string;
            }>;
        };
        betaTesters?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'betaTesters';
                id: string;
            }>;
        };
        betaRecruitmentCriteria?: {
            links?: RelationshipLinks;
            data?: {
                type: 'betaRecruitmentCriteria';
                id: string;
            };
        };
        betaRecruitmentCriterionCompatibleBuildCheck?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type BetaGroupsResponse = {
    data: Array<BetaGroup>;
    included?: Array<App | Build | BetaTester | BetaRecruitmentCriterion>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaGroupResponse = {
    data: BetaGroup;
    included?: Array<App | Build | BetaTester | BetaRecruitmentCriterion>;
    links: DocumentLinks;
};

export type BetaGroupCreateRequest = {
    data: {
        type: 'betaGroups';
        attributes: {
            name: string;
            isInternalGroup?: boolean;
            hasAccessToAllBuilds?: boolean;
            publicLinkEnabled?: boolean;
            publicLinkLimitEnabled?: boolean;
            publicLinkLimit?: number;
            feedbackEnabled?: boolean;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
            builds?: {
                data?: Array<{
                    type: 'builds';
                    id: string;
                }>;
            };
            betaTesters?: {
                data?: Array<{
                    type: 'betaTesters';
                    id: string;
                }>;
            };
        };
    };
};

export type BetaGroupUpdateRequest = {
    data: {
        type: 'betaGroups';
        id: string;
        attributes?: {
            name?: string;
            publicLinkEnabled?: boolean;
            publicLinkLimitEnabled?: boolean;
            publicLinkLimit?: number;
            feedbackEnabled?: boolean;
            iosBuildsAvailableForAppleSiliconMac?: boolean;
            iosBuildsAvailableForAppleVision?: boolean;
        };
    };
};

export type BetaLicenseAgreement = {
    type: 'betaLicenseAgreements';
    id: string;
    attributes?: {
        agreementText?: string;
    };
    relationships?: {
        app?: {
            links?: RelationshipLinks;
            data?: {
                type: 'apps';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type BetaLicenseAgreementsResponse = {
    data: Array<BetaLicenseAgreement>;
    included?: Array<App>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaLicenseAgreementResponse = {
    data: BetaLicenseAgreement;
    included?: Array<App>;
    links: DocumentLinks;
};

export type BetaLicenseAgreementUpdateRequest = {
    data: {
        type: 'betaLicenseAgreements';
        id: string;
        attributes?: {
            agreementText?: string;
        };
    };
};

export type BetaRecruitmentCriterion = {
    type: 'betaRecruitmentCriteria';
    id: string;
    attributes?: {
        lastModifiedDate?: string;
        deviceFamilyOsVersionFilters?: Array<DeviceFamilyOsVersionFilter>;
    };
    links?: ResourceLinks;
};

export type BetaRecruitmentCriterionResponse = {
    data: BetaRecruitmentCriterion;
    links: DocumentLinks;
};

export type BetaRecruitmentCriterionCreateRequest = {
    data: {
        type: 'betaRecruitmentCriteria';
        attributes: {
            deviceFamilyOsVersionFilters: Array<DeviceFamilyOsVersionFilter>;
        };
        relationships: {
            betaGroup: {
                data: {
                    type: 'betaGroups';
                    id: string;
                };
            };
        };
    };
};

export type BetaRecruitmentCriterionUpdateRequest = {
    data: {
        type: 'betaRecruitmentCriteria';
        id: string;
        attributes?: {
            deviceFamilyOsVersionFilters?: Array<DeviceFamilyOsVersionFilter>;
        };
    };
};

export type BetaRecruitmentCriterionCompatibleBuildCheck = {
    type: 'betaRecruitmentCriterionCompatibleBuildChecks';
    id: string;
    attributes?: {
        hasCompatibleBuild?: boolean;
    };
    links?: ResourceLinks;
};

export type BetaRecruitmentCriterionCompatibleBuildCheckResponse = {
    data: BetaRecruitmentCriterionCompatibleBuildCheck;
    links: DocumentLinks;
};

export type BetaRecruitmentCriterionOption = {
    type: 'betaRecruitmentCriterionOptions';
    id: string;
    attributes?: {
        deviceFamilyOsVersions?: Array<{
            deviceFamily?: DeviceFamily;
            osVersions?: Array<string>;
        }>;
    };
    links?: ResourceLinks;
};

export type BetaRecruitmentCriterionOptionsResponse = {
    data: Array<BetaRecruitmentCriterionOption>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaTesterInvitation = {
    type: 'betaTesterInvitations';
    id: string;
    links?: ResourceLinks;
};

export type BetaTesterInvitationResponse = {
    data: BetaTesterInvitation;
    links: DocumentLinks;
};

export type BetaTesterInvitationCreateRequest = {
    data: {
        type: 'betaTesterInvitations';
        relationships: {
            betaTester: {
                data: {
                    type: 'betaTesters';
                    id: string;
                };
            };
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type BetaTester = {
    type: 'betaTesters';
    id: string;
    attributes?: {
        firstName?: string;
        lastName?: string;
        email?: string;
        inviteType?: BetaInviteType;
        state?: BetaTesterState;
    };
    relationships?: {
        apps?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'apps';
                id: string;
            }>;
        };
        betaGroups?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'betaGroups';
                id: string;
            }>;
        };
        builds?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'builds';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type BetaTestersResponse = {
    data: Array<BetaTester>;
    included?: Array<App | BetaGroup | Build>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaTesterResponse = {
    data: BetaTester;
    included?: Array<App | BetaGroup | Build>;
    links: DocumentLinks;
};

export type BetaTesterCreateRequest = {
    data: {
        type: 'betaTesters';
        attributes: {
            firstName?: string;
            lastName?: string;
            email: string;
        };
        relationships?: {
            betaGroups?: {
                data?: Array<{
                    type: 'betaGroups';
                    id: string;
                }>;
            };
            builds?: {
                data?: Array<{
                    type: 'builds';
                    id: string;
                }>;
            };
        };
    };
};

export type BuildBetaDetail = {
    type: 'buildBetaDetails';
    id: string;
    attributes?: {
        autoNotifyEnabled?: boolean;
        internalBuildState?: InternalBetaState;
        externalBuildState?: ExternalBetaState;
    };
    relationships?: {
        build?: {
            links?: RelationshipLinks;
            data?: {
                type: 'builds';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type BuildBetaDetailsResponse = {
    data: Array<BuildBetaDetail>;
    included?: Array<Build>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BuildBetaDetailResponse = {
    data: BuildBetaDetail;
    included?: Array<Build>;
    links: DocumentLinks;
};

export type BuildBetaDetailUpdateRequest = {
    data: {
        type: 'buildBetaDetails';
        id: string;
        attributes?: {
            autoNotifyEnabled?: boolean;
        };
    };
};

export type BuildBetaNotification = {
    type: 'buildBetaNotifications';
    id: string;
    links?: ResourceLinks;
};

export type BuildBetaNotificationResponse = {
    data: BuildBetaNotification;
    links: DocumentLinks;
};

export type BuildBetaNotificationCreateRequest = {
    data: {
        type: 'buildBetaNotifications';
        relationships: {
            build: {
                data: {
                    type: 'builds';
                    id: string;
                };
            };
        };
    };
};

export type BuildBundleFileSize = {
    type: 'buildBundleFileSizes';
    id: string;
    attributes?: {
        deviceModel?: string;
        osVersion?: string;
        downloadBytes?: number;
        installBytes?: number;
    };
    links?: ResourceLinks;
};

export type BuildBundleFileSizesResponse = {
    data: Array<BuildBundleFileSize>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BuildBundle = {
    type: 'buildBundles';
    id: string;
    attributes?: {
        bundleId?: string;
        bundleType?: 'APP' | 'APP_CLIP';
        sdkBuild?: string;
        platformBuild?: string;
        fileName?: string;
        hasSirikit?: boolean;
        hasOnDemandResources?: boolean;
        hasPrerenderedIcon?: boolean;
        usesLocationServices?: boolean;
        isIosBuildMacAppStoreCompatible?: boolean;
        includesSymbols?: boolean;
        dSYMUrl?: string;
        supportedArchitectures?: Array<string>;
        requiredCapabilities?: Array<string>;
        deviceProtocols?: Array<string>;
        locales?: Array<string>;
        entitlements?: {
            [key: string]: {
                [key: string]: string;
            };
        };
    };
    relationships?: {
        appClipDomainCacheStatus?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appClipDomainStatuses';
                id: string;
            };
        };
        appClipDomainDebugStatus?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appClipDomainStatuses';
                id: string;
            };
        };
        betaAppClipInvocations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'betaAppClipInvocations';
                id: string;
            }>;
        };
        buildBundleFileSizes?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'buildBundleFileSizes';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type BuildIcon = {
    type: 'buildIcons';
    id: string;
    attributes?: {
        name?: string;
        iconAsset?: ImageAsset;
        iconType?: IconAssetType;
    };
    links?: ResourceLinks;
};

export type BuildIconsResponse = {
    data: Array<BuildIcon>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type Build = {
    type: 'builds';
    id: string;
    attributes?: {
        version?: string;
        uploadedDate?: string;
        expirationDate?: string;
        expired?: boolean;
        minOsVersion?: string;
        lsMinimumSystemVersion?: string;
        computedMinMacOsVersion?: string;
        iconAssetToken?: ImageAsset;
        processingState?: 'PROCESSING' | 'FAILED' | 'INVALID' | 'VALID';
        buildAudienceType?: BuildAudienceType;
        usesNonExemptEncryption?: boolean;
    };
    relationships?: {
        preReleaseVersion?: {
            links?: RelationshipLinks;
            data?: {
                type: 'preReleaseVersions';
                id: string;
            };
        };
        individualTesters?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'betaTesters';
                id: string;
            }>;
        };
        betaGroups?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'betaGroups';
                id: string;
            }>;
        };
        betaBuildLocalizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'betaBuildLocalizations';
                id: string;
            }>;
        };
        appEncryptionDeclaration?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appEncryptionDeclarations';
                id: string;
            };
        };
        betaAppReviewSubmission?: {
            links?: RelationshipLinks;
            data?: {
                type: 'betaAppReviewSubmissions';
                id: string;
            };
        };
        app?: {
            links?: RelationshipLinks;
            data?: {
                type: 'apps';
                id: string;
            };
        };
        buildBetaDetail?: {
            links?: RelationshipLinks;
            data?: {
                type: 'buildBetaDetails';
                id: string;
            };
        };
        appStoreVersion?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appStoreVersions';
                id: string;
            };
        };
        icons?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'buildIcons';
                id: string;
            }>;
        };
        buildBundles?: {
            meta?: PagingInformation;
            data?: Array<{
                type: 'buildBundles';
                id: string;
            }>;
        };
        perfPowerMetrics?: {
            links?: RelationshipLinks;
        };
        diagnosticSignatures?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type BuildsResponse = {
    data: Array<Build>;
    included?: Array<PrereleaseVersion | BetaTester | BetaGroup | BetaBuildLocalization | AppEncryptionDeclaration | BetaAppReviewSubmission | App | BuildBetaDetail | AppStoreVersion | BuildIcon | BuildBundle>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BuildResponse = {
    data: Build;
    included?: Array<PrereleaseVersion | BetaTester | BetaGroup | BetaBuildLocalization | AppEncryptionDeclaration | BetaAppReviewSubmission | App | BuildBetaDetail | AppStoreVersion | BuildIcon | BuildBundle>;
    links: DocumentLinks;
};

export type BuildUpdateRequest = {
    data: {
        type: 'builds';
        id: string;
        attributes?: {
            expired?: boolean;
            usesNonExemptEncryption?: boolean;
        };
        relationships?: {
            appEncryptionDeclaration?: {
                data?: {
                    type: 'appEncryptionDeclarations';
                    id: string;
                };
            };
        };
    };
};

export type BundleIdCapability = {
    type: 'bundleIdCapabilities';
    id: string;
    attributes?: {
        capabilityType?: CapabilityType;
        settings?: Array<CapabilitySetting>;
    };
    links?: ResourceLinks;
};

export type BundleIdCapabilitiesResponse = {
    data: Array<BundleIdCapability>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BundleIdCapabilityResponse = {
    data: BundleIdCapability;
    links: DocumentLinks;
};

export type BundleIdCapabilityCreateRequest = {
    data: {
        type: 'bundleIdCapabilities';
        attributes: {
            capabilityType: CapabilityType;
            settings?: Array<CapabilitySetting>;
        };
        relationships: {
            bundleId: {
                data: {
                    type: 'bundleIds';
                    id: string;
                };
            };
        };
    };
};

export type BundleIdCapabilityUpdateRequest = {
    data: {
        type: 'bundleIdCapabilities';
        id: string;
        attributes?: {
            capabilityType?: CapabilityType;
            settings?: Array<CapabilitySetting>;
        };
    };
};

export type BundleId = {
    type: 'bundleIds';
    id: string;
    attributes?: {
        name?: string;
        platform?: BundleIdPlatform;
        identifier?: string;
        seedId?: string;
    };
    relationships?: {
        profiles?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'profiles';
                id: string;
            }>;
        };
        bundleIdCapabilities?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'bundleIdCapabilities';
                id: string;
            }>;
        };
        app?: {
            links?: RelationshipLinks;
            data?: {
                type: 'apps';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type BundleIdsResponse = {
    data: Array<BundleId>;
    included?: Array<Profile | BundleIdCapability | App>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BundleIdResponse = {
    data: BundleId;
    included?: Array<Profile | BundleIdCapability | App>;
    links: DocumentLinks;
};

export type BundleIdCreateRequest = {
    data: {
        type: 'bundleIds';
        attributes: {
            name: string;
            platform: BundleIdPlatform;
            identifier: string;
            seedId?: string;
        };
    };
};

export type BundleIdUpdateRequest = {
    data: {
        type: 'bundleIds';
        id: string;
        attributes?: {
            name?: string;
        };
    };
};

export type Certificate = {
    type: 'certificates';
    id: string;
    attributes?: {
        name?: string;
        certificateType?: CertificateType;
        displayName?: string;
        serialNumber?: string;
        platform?: BundleIdPlatform;
        expirationDate?: string;
        certificateContent?: string;
        activated?: boolean;
    };
    links?: ResourceLinks;
};

export type CertificatesResponse = {
    data: Array<Certificate>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type CertificateResponse = {
    data: Certificate;
    links: DocumentLinks;
};

export type CertificateCreateRequest = {
    data: {
        type: 'certificates';
        attributes: {
            csrContent: string;
            certificateType: CertificateType;
        };
        relationships?: {
            merchantId?: {
                data?: {
                    type: 'merchantIds';
                    id: string;
                };
            };
        };
    };
};

export type CertificateUpdateRequest = {
    data: {
        type: 'certificates';
        id: string;
        attributes?: {
            activated?: boolean;
        };
    };
};

export type CiArtifact = {
    type: 'ciArtifacts';
    id: string;
    attributes?: {
        fileType?: 'ARCHIVE' | 'ARCHIVE_EXPORT' | 'LOG_BUNDLE' | 'RESULT_BUNDLE' | 'TEST_PRODUCTS' | 'XCODEBUILD_PRODUCTS' | 'STAPLED_NOTARIZED_ARCHIVE';
        fileName?: string;
        fileSize?: number;
        downloadUrl?: string;
    };
    links?: ResourceLinks;
};

export type CiArtifactsResponse = {
    data: Array<CiArtifact>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type CiArtifactResponse = {
    data: CiArtifact;
    links: DocumentLinks;
};

export type CiBuildAction = {
    type: 'ciBuildActions';
    id: string;
    attributes?: {
        name?: string;
        actionType?: CiActionType;
        startedDate?: string;
        finishedDate?: string;
        issueCounts?: CiIssueCounts;
        executionProgress?: CiExecutionProgress;
        completionStatus?: CiCompletionStatus;
        isRequiredToPass?: boolean;
    };
    relationships?: {
        buildRun?: {
            links?: RelationshipLinks;
            data?: {
                type: 'ciBuildRuns';
                id: string;
            };
        };
        artifacts?: {
            links?: RelationshipLinks;
        };
        issues?: {
            links?: RelationshipLinks;
        };
        testResults?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type CiBuildActionsResponse = {
    data: Array<CiBuildAction>;
    included?: Array<CiBuildRun>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type CiBuildActionResponse = {
    data: CiBuildAction;
    included?: Array<CiBuildRun>;
    links: DocumentLinks;
};

export type CiBuildRun = {
    type: 'ciBuildRuns';
    id: string;
    attributes?: {
        number?: number;
        createdDate?: string;
        startedDate?: string;
        finishedDate?: string;
        sourceCommit?: {
            commitSha?: string;
            message?: string;
            author?: CiGitUser;
            committer?: CiGitUser;
            webUrl?: string;
        };
        destinationCommit?: {
            commitSha?: string;
            message?: string;
            author?: CiGitUser;
            committer?: CiGitUser;
            webUrl?: string;
        };
        isPullRequestBuild?: boolean;
        issueCounts?: CiIssueCounts;
        executionProgress?: CiExecutionProgress;
        completionStatus?: CiCompletionStatus;
        startReason?: 'GIT_REF_CHANGE' | 'MANUAL' | 'MANUAL_REBUILD' | 'PULL_REQUEST_OPEN' | 'PULL_REQUEST_UPDATE' | 'SCHEDULE';
        cancelReason?: 'AUTOMATICALLY_BY_NEWER_BUILD' | 'MANUALLY_BY_USER';
    };
    relationships?: {
        builds?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'builds';
                id: string;
            }>;
        };
        workflow?: {
            data?: {
                type: 'ciWorkflows';
                id: string;
            };
        };
        product?: {
            data?: {
                type: 'ciProducts';
                id: string;
            };
        };
        sourceBranchOrTag?: {
            data?: {
                type: 'scmGitReferences';
                id: string;
            };
        };
        destinationBranch?: {
            data?: {
                type: 'scmGitReferences';
                id: string;
            };
        };
        actions?: {
            links?: RelationshipLinks;
        };
        pullRequest?: {
            data?: {
                type: 'scmPullRequests';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type CiBuildRunsResponse = {
    data: Array<CiBuildRun>;
    included?: Array<Build | CiWorkflow | CiProduct | ScmGitReference | ScmPullRequest>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type CiBuildRunResponse = {
    data: CiBuildRun;
    included?: Array<Build | CiWorkflow | CiProduct | ScmGitReference | ScmPullRequest>;
    links: DocumentLinks;
};

export type CiBuildRunCreateRequest = {
    data: {
        type: 'ciBuildRuns';
        attributes?: {
            clean?: boolean;
        };
        relationships?: {
            buildRun?: {
                data?: {
                    type: 'ciBuildRuns';
                    id: string;
                };
            };
            workflow?: {
                data?: {
                    type: 'ciWorkflows';
                    id: string;
                };
            };
            sourceBranchOrTag?: {
                data?: {
                    type: 'scmGitReferences';
                    id: string;
                };
            };
            pullRequest?: {
                data?: {
                    type: 'scmPullRequests';
                    id: string;
                };
            };
        };
    };
};

export type CiIssue = {
    type: 'ciIssues';
    id: string;
    attributes?: {
        issueType?: 'ANALYZER_WARNING' | 'ERROR' | 'TEST_FAILURE' | 'WARNING';
        message?: string;
        fileSource?: FileLocation;
        category?: string;
    };
    links?: ResourceLinks;
};

export type CiIssuesResponse = {
    data: Array<CiIssue>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type CiIssueResponse = {
    data: CiIssue;
    links: DocumentLinks;
};

export type CiMacOsVersion = {
    type: 'ciMacOsVersions';
    id: string;
    attributes?: {
        version?: string;
        name?: string;
    };
    relationships?: {
        xcodeVersions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'ciXcodeVersions';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type CiMacOsVersionsResponse = {
    data: Array<CiMacOsVersion>;
    included?: Array<CiXcodeVersion>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type CiMacOsVersionResponse = {
    data: CiMacOsVersion;
    included?: Array<CiXcodeVersion>;
    links: DocumentLinks;
};

export type CiProduct = {
    type: 'ciProducts';
    id: string;
    attributes?: {
        name?: string;
        createdDate?: string;
        productType?: 'APP' | 'FRAMEWORK';
    };
    relationships?: {
        app?: {
            links?: RelationshipLinks;
            data?: {
                type: 'apps';
                id: string;
            };
        };
        bundleId?: {
            data?: {
                type: 'bundleIds';
                id: string;
            };
        };
        workflows?: {
            links?: RelationshipLinks;
        };
        primaryRepositories?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'scmRepositories';
                id: string;
            }>;
        };
        additionalRepositories?: {
            links?: RelationshipLinks;
        };
        buildRuns?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type CiProductsResponse = {
    data: Array<CiProduct>;
    included?: Array<App | BundleId | ScmRepository>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type CiProductResponse = {
    data: CiProduct;
    included?: Array<App | BundleId | ScmRepository>;
    links: DocumentLinks;
};

export type CiTestResult = {
    type: 'ciTestResults';
    id: string;
    attributes?: {
        className?: string;
        name?: string;
        status?: CiTestStatus;
        fileSource?: FileLocation;
        message?: string;
        destinationTestResults?: Array<{
            uuid?: string;
            deviceName?: string;
            osVersion?: string;
            status?: CiTestStatus;
            duration?: number;
        }>;
    };
    links?: ResourceLinks;
};

export type CiTestResultsResponse = {
    data: Array<CiTestResult>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type CiTestResultResponse = {
    data: CiTestResult;
    links: DocumentLinks;
};

export type CiWorkflow = {
    type: 'ciWorkflows';
    id: string;
    attributes?: {
        name?: string;
        description?: string;
        branchStartCondition?: CiBranchStartCondition;
        tagStartCondition?: CiTagStartCondition;
        pullRequestStartCondition?: CiPullRequestStartCondition;
        scheduledStartCondition?: CiScheduledStartCondition;
        manualBranchStartCondition?: CiManualBranchStartCondition;
        manualTagStartCondition?: CiManualTagStartCondition;
        manualPullRequestStartCondition?: CiManualPullRequestStartCondition;
        actions?: Array<CiAction>;
        isEnabled?: boolean;
        isLockedForEditing?: boolean;
        clean?: boolean;
        containerFilePath?: string;
        lastModifiedDate?: string;
    };
    relationships?: {
        product?: {
            data?: {
                type: 'ciProducts';
                id: string;
            };
        };
        repository?: {
            links?: RelationshipLinks;
            data?: {
                type: 'scmRepositories';
                id: string;
            };
        };
        xcodeVersion?: {
            data?: {
                type: 'ciXcodeVersions';
                id: string;
            };
        };
        macOsVersion?: {
            data?: {
                type: 'ciMacOsVersions';
                id: string;
            };
        };
        buildRuns?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type CiWorkflowsResponse = {
    data: Array<CiWorkflow>;
    included?: Array<CiProduct | ScmRepository | CiXcodeVersion | CiMacOsVersion>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type CiWorkflowResponse = {
    data: CiWorkflow;
    included?: Array<CiProduct | ScmRepository | CiXcodeVersion | CiMacOsVersion>;
    links: DocumentLinks;
};

export type CiWorkflowCreateRequest = {
    data: {
        type: 'ciWorkflows';
        attributes: {
            name: string;
            description: string;
            branchStartCondition?: CiBranchStartCondition;
            tagStartCondition?: CiTagStartCondition;
            pullRequestStartCondition?: CiPullRequestStartCondition;
            scheduledStartCondition?: CiScheduledStartCondition;
            manualBranchStartCondition?: CiManualBranchStartCondition;
            manualTagStartCondition?: CiManualTagStartCondition;
            manualPullRequestStartCondition?: CiManualPullRequestStartCondition;
            actions: Array<CiAction>;
            isEnabled: boolean;
            isLockedForEditing?: boolean;
            clean: boolean;
            containerFilePath: string;
        };
        relationships: {
            product: {
                data: {
                    type: 'ciProducts';
                    id: string;
                };
            };
            repository: {
                data: {
                    type: 'scmRepositories';
                    id: string;
                };
            };
            xcodeVersion: {
                data: {
                    type: 'ciXcodeVersions';
                    id: string;
                };
            };
            macOsVersion: {
                data: {
                    type: 'ciMacOsVersions';
                    id: string;
                };
            };
        };
    };
};

export type CiWorkflowUpdateRequest = {
    data: {
        type: 'ciWorkflows';
        id: string;
        attributes?: {
            name?: string;
            description?: string;
            branchStartCondition?: CiBranchStartCondition;
            tagStartCondition?: CiTagStartCondition;
            pullRequestStartCondition?: CiPullRequestStartCondition;
            scheduledStartCondition?: CiScheduledStartCondition;
            manualBranchStartCondition?: CiManualBranchStartCondition;
            manualTagStartCondition?: CiManualTagStartCondition;
            manualPullRequestStartCondition?: CiManualPullRequestStartCondition;
            actions?: Array<CiAction>;
            isEnabled?: boolean;
            isLockedForEditing?: boolean;
            clean?: boolean;
            containerFilePath?: string;
        };
        relationships?: {
            xcodeVersion?: {
                data?: {
                    type: 'ciXcodeVersions';
                    id: string;
                };
            };
            macOsVersion?: {
                data?: {
                    type: 'ciMacOsVersions';
                    id: string;
                };
            };
        };
    };
};

export type CiXcodeVersion = {
    type: 'ciXcodeVersions';
    id: string;
    attributes?: {
        version?: string;
        name?: string;
        testDestinations?: Array<{
            deviceTypeName?: string;
            deviceTypeIdentifier?: string;
            availableRuntimes?: Array<{
                runtimeName?: string;
                runtimeIdentifier?: string;
            }>;
            kind?: CiTestDestinationKind;
        }>;
    };
    relationships?: {
        macOsVersions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'ciMacOsVersions';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type CiXcodeVersionsResponse = {
    data: Array<CiXcodeVersion>;
    included?: Array<CiMacOsVersion>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type CiXcodeVersionResponse = {
    data: CiXcodeVersion;
    included?: Array<CiMacOsVersion>;
    links: DocumentLinks;
};

export type CustomerReviewResponseV1 = {
    type: 'customerReviewResponses';
    id: string;
    attributes?: {
        responseBody?: string;
        lastModifiedDate?: string;
        state?: 'PUBLISHED' | 'PENDING_PUBLISH';
    };
    relationships?: {
        review?: {
            data?: {
                type: 'customerReviews';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type CustomerReviewResponseV1Response = {
    data: CustomerReviewResponseV1;
    included?: Array<CustomerReview>;
    links: DocumentLinks;
};

export type CustomerReviewResponseV1CreateRequest = {
    data: {
        type: 'customerReviewResponses';
        attributes: {
            responseBody: string;
        };
        relationships: {
            review: {
                data: {
                    type: 'customerReviews';
                    id: string;
                };
            };
        };
    };
};

export type CustomerReview = {
    type: 'customerReviews';
    id: string;
    attributes?: {
        rating?: number;
        title?: string;
        body?: string;
        reviewerNickname?: string;
        createdDate?: string;
        territory?: TerritoryCode;
    };
    relationships?: {
        response?: {
            links?: RelationshipLinks;
            data?: {
                type: 'customerReviewResponses';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type CustomerReviewsResponse = {
    data: Array<CustomerReview>;
    included?: Array<CustomerReviewResponseV1>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type CustomerReviewResponse = {
    data: CustomerReview;
    included?: Array<CustomerReviewResponseV1>;
    links: DocumentLinks;
};

export type Device = {
    type: 'devices';
    id: string;
    attributes?: {
        name?: string;
        platform?: BundleIdPlatform;
        udid?: string;
        deviceClass?: 'APPLE_WATCH' | 'IPAD' | 'IPHONE' | 'IPOD' | 'APPLE_TV' | 'MAC';
        status?: 'ENABLED' | 'DISABLED';
        model?: string;
        addedDate?: string;
    };
    links?: ResourceLinks;
};

export type DevicesResponse = {
    data: Array<Device>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type DeviceResponse = {
    data: Device;
    links: DocumentLinks;
};

export type DeviceCreateRequest = {
    data: {
        type: 'devices';
        attributes: {
            name: string;
            platform: BundleIdPlatform;
            udid: string;
        };
    };
};

export type DeviceUpdateRequest = {
    data: {
        type: 'devices';
        id: string;
        attributes?: {
            name?: string;
            status?: 'ENABLED' | 'DISABLED';
        };
    };
};

export type DiagnosticLog = {
    type: 'diagnosticLogs';
    id: string;
    links?: ResourceLinks;
};

export type DiagnosticSignature = {
    type: 'diagnosticSignatures';
    id: string;
    attributes?: {
        diagnosticType?: 'DISK_WRITES' | 'HANGS' | 'LAUNCHES';
        signature?: string;
        weight?: number;
        insight?: DiagnosticInsight;
    };
    relationships?: {
        logs?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type DiagnosticSignaturesResponse = {
    data: Array<DiagnosticSignature>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type EndAppAvailabilityPreOrder = {
    type: 'endAppAvailabilityPreOrders';
    id: string;
    links?: ResourceLinks;
};

export type EndAppAvailabilityPreOrderResponse = {
    data: EndAppAvailabilityPreOrder;
    links: DocumentLinks;
};

export type EndAppAvailabilityPreOrderCreateRequest = {
    data: {
        type: 'endAppAvailabilityPreOrders';
        relationships: {
            territoryAvailabilities: {
                data: Array<{
                    type: 'territoryAvailabilities';
                    id: string;
                }>;
            };
        };
    };
};

export type EndUserLicenseAgreement = {
    type: 'endUserLicenseAgreements';
    id: string;
    attributes?: {
        agreementText?: string;
    };
    relationships?: {
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
        territories?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'territories';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type EndUserLicenseAgreementResponse = {
    data: EndUserLicenseAgreement;
    included?: Array<App | Territory>;
    links: DocumentLinks;
};

export type EndUserLicenseAgreementCreateRequest = {
    data: {
        type: 'endUserLicenseAgreements';
        attributes: {
            agreementText: string;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
            territories: {
                data: Array<{
                    type: 'territories';
                    id: string;
                }>;
            };
        };
    };
};

export type EndUserLicenseAgreementUpdateRequest = {
    data: {
        type: 'endUserLicenseAgreements';
        id: string;
        attributes?: {
            agreementText?: string;
        };
        relationships?: {
            territories?: {
                data?: Array<{
                    type: 'territories';
                    id: string;
                }>;
            };
        };
    };
};

export type GameCenterAchievementImage = {
    type: 'gameCenterAchievementImages';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        imageAsset?: ImageAsset;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
    };
    relationships?: {
        gameCenterAchievementLocalization?: {
            data?: {
                type: 'gameCenterAchievementLocalizations';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type GameCenterAchievementImageResponse = {
    data: GameCenterAchievementImage;
    included?: Array<GameCenterAchievementLocalization>;
    links: DocumentLinks;
};

export type GameCenterAchievementImageCreateRequest = {
    data: {
        type: 'gameCenterAchievementImages';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            gameCenterAchievementLocalization: {
                data: {
                    type: 'gameCenterAchievementLocalizations';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterAchievementImageUpdateRequest = {
    data: {
        type: 'gameCenterAchievementImages';
        id: string;
        attributes?: {
            uploaded?: boolean;
        };
    };
};

export type GameCenterAchievementLocalization = {
    type: 'gameCenterAchievementLocalizations';
    id: string;
    attributes?: {
        locale?: string;
        name?: string;
        beforeEarnedDescription?: string;
        afterEarnedDescription?: string;
    };
    relationships?: {
        gameCenterAchievement?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterAchievements';
                id: string;
            };
        };
        gameCenterAchievementImage?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterAchievementImages';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type GameCenterAchievementLocalizationsResponse = {
    data: Array<GameCenterAchievementLocalization>;
    included?: Array<GameCenterAchievement | GameCenterAchievementImage>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterAchievementLocalizationResponse = {
    data: GameCenterAchievementLocalization;
    included?: Array<GameCenterAchievement | GameCenterAchievementImage>;
    links: DocumentLinks;
};

export type GameCenterAchievementLocalizationCreateRequest = {
    data: {
        type: 'gameCenterAchievementLocalizations';
        attributes: {
            locale: string;
            name: string;
            beforeEarnedDescription: string;
            afterEarnedDescription: string;
        };
        relationships: {
            gameCenterAchievement: {
                data: {
                    type: 'gameCenterAchievements';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterAchievementLocalizationUpdateRequest = {
    data: {
        type: 'gameCenterAchievementLocalizations';
        id: string;
        attributes?: {
            name?: string;
            beforeEarnedDescription?: string;
            afterEarnedDescription?: string;
        };
    };
};

export type GameCenterAchievementRelease = {
    type: 'gameCenterAchievementReleases';
    id: string;
    attributes?: {
        live?: boolean;
    };
    relationships?: {
        gameCenterDetail?: {
            data?: {
                type: 'gameCenterDetails';
                id: string;
            };
        };
        gameCenterAchievement?: {
            data?: {
                type: 'gameCenterAchievements';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type GameCenterAchievementReleasesResponse = {
    data: Array<GameCenterAchievementRelease>;
    included?: Array<GameCenterDetail | GameCenterAchievement>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterAchievementReleaseResponse = {
    data: GameCenterAchievementRelease;
    included?: Array<GameCenterDetail | GameCenterAchievement>;
    links: DocumentLinks;
};

export type GameCenterAchievementReleaseCreateRequest = {
    data: {
        type: 'gameCenterAchievementReleases';
        relationships: {
            gameCenterDetail: {
                data: {
                    type: 'gameCenterDetails';
                    id: string;
                };
            };
            gameCenterAchievement: {
                data: {
                    type: 'gameCenterAchievements';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterAchievement = {
    type: 'gameCenterAchievements';
    id: string;
    attributes?: {
        referenceName?: string;
        vendorIdentifier?: string;
        points?: number;
        showBeforeEarned?: boolean;
        repeatable?: boolean;
        archived?: boolean;
    };
    relationships?: {
        gameCenterDetail?: {
            data?: {
                type: 'gameCenterDetails';
                id: string;
            };
        };
        gameCenterGroup?: {
            data?: {
                type: 'gameCenterGroups';
                id: string;
            };
        };
        /**
         * @deprecated
         */
        groupAchievement?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterAchievements';
                id: string;
            };
        };
        localizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterAchievementLocalizations';
                id: string;
            }>;
        };
        releases?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterAchievementReleases';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type GameCenterAchievementsResponse = {
    data: Array<GameCenterAchievement>;
    included?: Array<GameCenterDetail | GameCenterGroup | GameCenterAchievement | GameCenterAchievementLocalization | GameCenterAchievementRelease>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterAchievementResponse = {
    data: GameCenterAchievement;
    included?: Array<GameCenterDetail | GameCenterGroup | GameCenterAchievement | GameCenterAchievementLocalization | GameCenterAchievementRelease>;
    links: DocumentLinks;
};

export type GameCenterAchievementCreateRequest = {
    data: {
        type: 'gameCenterAchievements';
        attributes: {
            referenceName: string;
            vendorIdentifier: string;
            points: number;
            showBeforeEarned: boolean;
            repeatable: boolean;
        };
        relationships?: {
            gameCenterDetail?: {
                data?: {
                    type: 'gameCenterDetails';
                    id: string;
                };
            };
            gameCenterGroup?: {
                data?: {
                    type: 'gameCenterGroups';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterAchievementUpdateRequest = {
    data: {
        type: 'gameCenterAchievements';
        id: string;
        attributes?: {
            referenceName?: string;
            points?: number;
            showBeforeEarned?: boolean;
            repeatable?: boolean;
            archived?: boolean;
        };
    };
};

export type GameCenterAppVersion = {
    type: 'gameCenterAppVersions';
    id: string;
    attributes?: {
        enabled?: boolean;
    };
    relationships?: {
        compatibilityVersions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterAppVersions';
                id: string;
            }>;
        };
        appStoreVersion?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appStoreVersions';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type GameCenterAppVersionsResponse = {
    data: Array<GameCenterAppVersion>;
    included?: Array<GameCenterAppVersion | AppStoreVersion>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterAppVersionResponse = {
    data: GameCenterAppVersion;
    included?: Array<GameCenterAppVersion | AppStoreVersion>;
    links: DocumentLinks;
};

export type GameCenterAppVersionCreateRequest = {
    data: {
        type: 'gameCenterAppVersions';
        relationships: {
            appStoreVersion: {
                data: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterAppVersionUpdateRequest = {
    data: {
        type: 'gameCenterAppVersions';
        id: string;
        attributes?: {
            enabled?: boolean;
        };
    };
};

export type GameCenterDetail = {
    type: 'gameCenterDetails';
    id: string;
    attributes?: {
        arcadeEnabled?: boolean;
        challengeEnabled?: boolean;
    };
    relationships?: {
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
        gameCenterAppVersions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterAppVersions';
                id: string;
            }>;
        };
        gameCenterGroup?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterGroups';
                id: string;
            };
        };
        gameCenterLeaderboards?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboards';
                id: string;
            }>;
        };
        gameCenterLeaderboardSets?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboardSets';
                id: string;
            }>;
        };
        gameCenterAchievements?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterAchievements';
                id: string;
            }>;
        };
        defaultLeaderboard?: {
            data?: {
                type: 'gameCenterLeaderboards';
                id: string;
            };
        };
        defaultGroupLeaderboard?: {
            data?: {
                type: 'gameCenterLeaderboards';
                id: string;
            };
        };
        achievementReleases?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterAchievementReleases';
                id: string;
            }>;
        };
        leaderboardReleases?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboardReleases';
                id: string;
            }>;
        };
        leaderboardSetReleases?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboardSetReleases';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type GameCenterDetailsResponse = {
    data: Array<GameCenterDetail>;
    included?: Array<App | GameCenterAppVersion | GameCenterGroup | GameCenterLeaderboard | GameCenterLeaderboardSet | GameCenterAchievement | GameCenterAchievementRelease | GameCenterLeaderboardRelease | GameCenterLeaderboardSetRelease>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterDetailResponse = {
    data: GameCenterDetail;
    included?: Array<App | GameCenterAppVersion | GameCenterGroup | GameCenterLeaderboard | GameCenterLeaderboardSet | GameCenterAchievement | GameCenterAchievementRelease | GameCenterLeaderboardRelease | GameCenterLeaderboardSetRelease>;
    links: DocumentLinks;
};

export type GameCenterDetailCreateRequest = {
    data: {
        type: 'gameCenterDetails';
        attributes?: {
            challengeEnabled?: boolean;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterDetailUpdateRequest = {
    data: {
        type: 'gameCenterDetails';
        id: string;
        attributes?: {
            challengeEnabled?: boolean;
        };
        relationships?: {
            gameCenterGroup?: {
                data?: {
                    type: 'gameCenterGroups';
                    id: string;
                };
            };
            defaultLeaderboard?: {
                data?: {
                    type: 'gameCenterLeaderboards';
                    id: string;
                };
            };
            defaultGroupLeaderboard?: {
                data?: {
                    type: 'gameCenterLeaderboards';
                    id: string;
                };
            };
        };
    };
};

/**
 * @deprecated
 */
export type GameCenterEnabledVersion = {
    type: 'gameCenterEnabledVersions';
    id: string;
    attributes?: {
        platform?: Platform;
        versionString?: string;
        iconAsset?: ImageAsset;
    };
    relationships?: {
        compatibleVersions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterEnabledVersions';
                id: string;
            }>;
        };
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

/**
 * @deprecated
 */
export type GameCenterEnabledVersionsResponse = {
    data: Array<GameCenterEnabledVersion>;
    included?: Array<GameCenterEnabledVersion | App>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterGroup = {
    type: 'gameCenterGroups';
    id: string;
    attributes?: {
        referenceName?: string;
    };
    relationships?: {
        gameCenterDetails?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterDetails';
                id: string;
            }>;
        };
        gameCenterLeaderboards?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboards';
                id: string;
            }>;
        };
        gameCenterLeaderboardSets?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboardSets';
                id: string;
            }>;
        };
        gameCenterAchievements?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterAchievements';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type GameCenterGroupsResponse = {
    data: Array<GameCenterGroup>;
    included?: Array<GameCenterDetail | GameCenterLeaderboard | GameCenterLeaderboardSet | GameCenterAchievement>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterGroupResponse = {
    data: GameCenterGroup;
    included?: Array<GameCenterDetail | GameCenterLeaderboard | GameCenterLeaderboardSet | GameCenterAchievement>;
    links: DocumentLinks;
};

export type GameCenterGroupCreateRequest = {
    data: {
        type: 'gameCenterGroups';
        attributes?: {
            referenceName?: string;
        };
    };
};

export type GameCenterGroupUpdateRequest = {
    data: {
        type: 'gameCenterGroups';
        id: string;
        attributes?: {
            referenceName?: string;
        };
    };
};

export type GameCenterLeaderboardEntrySubmission = {
    type: 'gameCenterLeaderboardEntrySubmissions';
    id: string;
    attributes?: {
        bundleId?: string;
        challengeIds?: Array<string>;
        context?: string;
        scopedPlayerId?: string;
        score?: string;
        submittedDate?: string;
        vendorIdentifier?: string;
    };
    links?: ResourceLinks;
};

export type GameCenterLeaderboardEntrySubmissionResponse = {
    data: GameCenterLeaderboardEntrySubmission;
    links: DocumentLinks;
};

export type GameCenterLeaderboardEntrySubmissionCreateRequest = {
    data: {
        type: 'gameCenterLeaderboardEntrySubmissions';
        attributes: {
            bundleId: string;
            challengeIds?: Array<string>;
            context?: string;
            scopedPlayerId: string;
            score: string;
            submittedDate?: string;
            vendorIdentifier: string;
        };
    };
};

export type GameCenterLeaderboardImage = {
    type: 'gameCenterLeaderboardImages';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        imageAsset?: ImageAsset;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
    };
    relationships?: {
        gameCenterLeaderboardLocalization?: {
            data?: {
                type: 'gameCenterLeaderboardLocalizations';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type GameCenterLeaderboardImageResponse = {
    data: GameCenterLeaderboardImage;
    included?: Array<GameCenterLeaderboardLocalization>;
    links: DocumentLinks;
};

export type GameCenterLeaderboardImageCreateRequest = {
    data: {
        type: 'gameCenterLeaderboardImages';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            gameCenterLeaderboardLocalization: {
                data: {
                    type: 'gameCenterLeaderboardLocalizations';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterLeaderboardImageUpdateRequest = {
    data: {
        type: 'gameCenterLeaderboardImages';
        id: string;
        attributes?: {
            uploaded?: boolean;
        };
    };
};

export type GameCenterLeaderboardLocalization = {
    type: 'gameCenterLeaderboardLocalizations';
    id: string;
    attributes?: {
        locale?: string;
        name?: string;
        formatterOverride?: GameCenterLeaderboardFormatter;
        formatterSuffix?: string;
        formatterSuffixSingular?: string;
    };
    relationships?: {
        gameCenterLeaderboard?: {
            data?: {
                type: 'gameCenterLeaderboards';
                id: string;
            };
        };
        gameCenterLeaderboardImage?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterLeaderboardImages';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type GameCenterLeaderboardLocalizationsResponse = {
    data: Array<GameCenterLeaderboardLocalization>;
    included?: Array<GameCenterLeaderboard | GameCenterLeaderboardImage>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterLeaderboardLocalizationResponse = {
    data: GameCenterLeaderboardLocalization;
    included?: Array<GameCenterLeaderboard | GameCenterLeaderboardImage>;
    links: DocumentLinks;
};

export type GameCenterLeaderboardLocalizationCreateRequest = {
    data: {
        type: 'gameCenterLeaderboardLocalizations';
        attributes: {
            locale: string;
            name: string;
            formatterOverride?: GameCenterLeaderboardFormatter;
            formatterSuffix?: string;
            formatterSuffixSingular?: string;
        };
        relationships: {
            gameCenterLeaderboard: {
                data: {
                    type: 'gameCenterLeaderboards';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterLeaderboardLocalizationUpdateRequest = {
    data: {
        type: 'gameCenterLeaderboardLocalizations';
        id: string;
        attributes?: {
            name?: string;
            formatterOverride?: GameCenterLeaderboardFormatter;
            formatterSuffix?: string;
            formatterSuffixSingular?: string;
        };
    };
};

export type GameCenterLeaderboardRelease = {
    type: 'gameCenterLeaderboardReleases';
    id: string;
    attributes?: {
        live?: boolean;
    };
    relationships?: {
        gameCenterDetail?: {
            data?: {
                type: 'gameCenterDetails';
                id: string;
            };
        };
        gameCenterLeaderboard?: {
            data?: {
                type: 'gameCenterLeaderboards';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type GameCenterLeaderboardReleasesResponse = {
    data: Array<GameCenterLeaderboardRelease>;
    included?: Array<GameCenterDetail | GameCenterLeaderboard>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterLeaderboardReleaseResponse = {
    data: GameCenterLeaderboardRelease;
    included?: Array<GameCenterDetail | GameCenterLeaderboard>;
    links: DocumentLinks;
};

export type GameCenterLeaderboardReleaseCreateRequest = {
    data: {
        type: 'gameCenterLeaderboardReleases';
        relationships: {
            gameCenterDetail: {
                data: {
                    type: 'gameCenterDetails';
                    id: string;
                };
            };
            gameCenterLeaderboard: {
                data: {
                    type: 'gameCenterLeaderboards';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterLeaderboardSetImage = {
    type: 'gameCenterLeaderboardSetImages';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        imageAsset?: ImageAsset;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
    };
    relationships?: {
        gameCenterLeaderboardSetLocalization?: {
            data?: {
                type: 'gameCenterLeaderboardSetLocalizations';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type GameCenterLeaderboardSetImageResponse = {
    data: GameCenterLeaderboardSetImage;
    included?: Array<GameCenterLeaderboardSetLocalization>;
    links: DocumentLinks;
};

export type GameCenterLeaderboardSetImageCreateRequest = {
    data: {
        type: 'gameCenterLeaderboardSetImages';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            gameCenterLeaderboardSetLocalization: {
                data: {
                    type: 'gameCenterLeaderboardSetLocalizations';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterLeaderboardSetImageUpdateRequest = {
    data: {
        type: 'gameCenterLeaderboardSetImages';
        id: string;
        attributes?: {
            uploaded?: boolean;
        };
    };
};

export type GameCenterLeaderboardSetLocalization = {
    type: 'gameCenterLeaderboardSetLocalizations';
    id: string;
    attributes?: {
        locale?: string;
        name?: string;
    };
    relationships?: {
        gameCenterLeaderboardSet?: {
            data?: {
                type: 'gameCenterLeaderboardSets';
                id: string;
            };
        };
        gameCenterLeaderboardSetImage?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterLeaderboardSetImages';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type GameCenterLeaderboardSetLocalizationsResponse = {
    data: Array<GameCenterLeaderboardSetLocalization>;
    included?: Array<GameCenterLeaderboardSet | GameCenterLeaderboardSetImage>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterLeaderboardSetLocalizationResponse = {
    data: GameCenterLeaderboardSetLocalization;
    included?: Array<GameCenterLeaderboardSet | GameCenterLeaderboardSetImage>;
    links: DocumentLinks;
};

export type GameCenterLeaderboardSetLocalizationCreateRequest = {
    data: {
        type: 'gameCenterLeaderboardSetLocalizations';
        attributes: {
            locale: string;
            name: string;
        };
        relationships: {
            gameCenterLeaderboardSet: {
                data: {
                    type: 'gameCenterLeaderboardSets';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterLeaderboardSetLocalizationUpdateRequest = {
    data: {
        type: 'gameCenterLeaderboardSetLocalizations';
        id: string;
        attributes?: {
            name?: string;
        };
    };
};

export type GameCenterLeaderboardSetMemberLocalization = {
    type: 'gameCenterLeaderboardSetMemberLocalizations';
    id: string;
    attributes?: {
        name?: string;
        locale?: string;
    };
    relationships?: {
        gameCenterLeaderboardSet?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterLeaderboardSets';
                id: string;
            };
        };
        gameCenterLeaderboard?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterLeaderboards';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type GameCenterLeaderboardSetMemberLocalizationsResponse = {
    data: Array<GameCenterLeaderboardSetMemberLocalization>;
    included?: Array<GameCenterLeaderboardSet | GameCenterLeaderboard>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterLeaderboardSetMemberLocalizationResponse = {
    data: GameCenterLeaderboardSetMemberLocalization;
    included?: Array<GameCenterLeaderboardSet | GameCenterLeaderboard>;
    links: DocumentLinks;
};

export type GameCenterLeaderboardSetMemberLocalizationCreateRequest = {
    data: {
        type: 'gameCenterLeaderboardSetMemberLocalizations';
        attributes?: {
            name?: string;
            locale?: string;
        };
        relationships: {
            gameCenterLeaderboardSet: {
                data: {
                    type: 'gameCenterLeaderboardSets';
                    id: string;
                };
            };
            gameCenterLeaderboard: {
                data: {
                    type: 'gameCenterLeaderboards';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterLeaderboardSetMemberLocalizationUpdateRequest = {
    data: {
        type: 'gameCenterLeaderboardSetMemberLocalizations';
        id: string;
        attributes?: {
            name?: string;
        };
    };
};

export type GameCenterLeaderboardSetRelease = {
    type: 'gameCenterLeaderboardSetReleases';
    id: string;
    attributes?: {
        live?: boolean;
    };
    relationships?: {
        gameCenterDetail?: {
            data?: {
                type: 'gameCenterDetails';
                id: string;
            };
        };
        gameCenterLeaderboardSet?: {
            data?: {
                type: 'gameCenterLeaderboardSets';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type GameCenterLeaderboardSetReleasesResponse = {
    data: Array<GameCenterLeaderboardSetRelease>;
    included?: Array<GameCenterDetail | GameCenterLeaderboardSet>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterLeaderboardSetReleaseResponse = {
    data: GameCenterLeaderboardSetRelease;
    included?: Array<GameCenterDetail | GameCenterLeaderboardSet>;
    links: DocumentLinks;
};

export type GameCenterLeaderboardSetReleaseCreateRequest = {
    data: {
        type: 'gameCenterLeaderboardSetReleases';
        relationships: {
            gameCenterDetail: {
                data: {
                    type: 'gameCenterDetails';
                    id: string;
                };
            };
            gameCenterLeaderboardSet: {
                data: {
                    type: 'gameCenterLeaderboardSets';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterLeaderboardSet = {
    type: 'gameCenterLeaderboardSets';
    id: string;
    attributes?: {
        referenceName?: string;
        vendorIdentifier?: string;
    };
    relationships?: {
        gameCenterDetail?: {
            data?: {
                type: 'gameCenterDetails';
                id: string;
            };
        };
        gameCenterGroup?: {
            data?: {
                type: 'gameCenterGroups';
                id: string;
            };
        };
        /**
         * @deprecated
         */
        groupLeaderboardSet?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterLeaderboardSets';
                id: string;
            };
        };
        localizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboardSetLocalizations';
                id: string;
            }>;
        };
        gameCenterLeaderboards?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboards';
                id: string;
            }>;
        };
        releases?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboardSetReleases';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type GameCenterLeaderboardSetsResponse = {
    data: Array<GameCenterLeaderboardSet>;
    included?: Array<GameCenterDetail | GameCenterGroup | GameCenterLeaderboardSet | GameCenterLeaderboardSetLocalization | GameCenterLeaderboard | GameCenterLeaderboardSetRelease>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterLeaderboardSetResponse = {
    data: GameCenterLeaderboardSet;
    included?: Array<GameCenterDetail | GameCenterGroup | GameCenterLeaderboardSet | GameCenterLeaderboardSetLocalization | GameCenterLeaderboard | GameCenterLeaderboardSetRelease>;
    links: DocumentLinks;
};

export type GameCenterLeaderboardSetCreateRequest = {
    data: {
        type: 'gameCenterLeaderboardSets';
        attributes: {
            referenceName: string;
            vendorIdentifier: string;
        };
        relationships?: {
            gameCenterDetail?: {
                data?: {
                    type: 'gameCenterDetails';
                    id: string;
                };
            };
            gameCenterGroup?: {
                data?: {
                    type: 'gameCenterGroups';
                    id: string;
                };
            };
            gameCenterLeaderboards?: {
                data?: Array<{
                    type: 'gameCenterLeaderboards';
                    id: string;
                }>;
            };
        };
    };
};

export type GameCenterLeaderboardSetUpdateRequest = {
    data: {
        type: 'gameCenterLeaderboardSets';
        id: string;
        attributes?: {
            referenceName?: string;
        };
    };
};

export type GameCenterLeaderboard = {
    type: 'gameCenterLeaderboards';
    id: string;
    attributes?: {
        defaultFormatter?: GameCenterLeaderboardFormatter;
        referenceName?: string;
        vendorIdentifier?: string;
        submissionType?: 'BEST_SCORE' | 'MOST_RECENT_SCORE';
        scoreSortType?: 'ASC' | 'DESC';
        scoreRangeStart?: string;
        scoreRangeEnd?: string;
        recurrenceStartDate?: string;
        recurrenceDuration?: string;
        recurrenceRule?: string;
        archived?: boolean;
    };
    relationships?: {
        gameCenterDetail?: {
            data?: {
                type: 'gameCenterDetails';
                id: string;
            };
        };
        gameCenterGroup?: {
            data?: {
                type: 'gameCenterGroups';
                id: string;
            };
        };
        /**
         * @deprecated
         */
        groupLeaderboard?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterLeaderboards';
                id: string;
            };
        };
        gameCenterLeaderboardSets?: {
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboardSets';
                id: string;
            }>;
        };
        localizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboardLocalizations';
                id: string;
            }>;
        };
        releases?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboardReleases';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type GameCenterLeaderboardsResponse = {
    data: Array<GameCenterLeaderboard>;
    included?: Array<GameCenterDetail | GameCenterGroup | GameCenterLeaderboard | GameCenterLeaderboardSet | GameCenterLeaderboardLocalization | GameCenterLeaderboardRelease>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterLeaderboardResponse = {
    data: GameCenterLeaderboard;
    included?: Array<GameCenterDetail | GameCenterGroup | GameCenterLeaderboard | GameCenterLeaderboardSet | GameCenterLeaderboardLocalization | GameCenterLeaderboardRelease>;
    links: DocumentLinks;
};

export type GameCenterLeaderboardCreateRequest = {
    data: {
        type: 'gameCenterLeaderboards';
        attributes: {
            defaultFormatter: GameCenterLeaderboardFormatter;
            referenceName: string;
            vendorIdentifier: string;
            submissionType: 'BEST_SCORE' | 'MOST_RECENT_SCORE';
            scoreSortType: 'ASC' | 'DESC';
            scoreRangeStart?: string;
            scoreRangeEnd?: string;
            recurrenceStartDate?: string;
            recurrenceDuration?: string;
            recurrenceRule?: string;
        };
        relationships?: {
            gameCenterDetail?: {
                data?: {
                    type: 'gameCenterDetails';
                    id: string;
                };
            };
            gameCenterGroup?: {
                data?: {
                    type: 'gameCenterGroups';
                    id: string;
                };
            };
            gameCenterLeaderboardSets?: {
                data?: Array<{
                    type: 'gameCenterLeaderboardSets';
                    id: string;
                }>;
            };
        };
    };
};

export type GameCenterLeaderboardUpdateRequest = {
    data: {
        type: 'gameCenterLeaderboards';
        id: string;
        attributes?: {
            defaultFormatter?: GameCenterLeaderboardFormatter;
            referenceName?: string;
            submissionType?: 'BEST_SCORE' | 'MOST_RECENT_SCORE';
            scoreSortType?: 'ASC' | 'DESC';
            scoreRangeStart?: string;
            scoreRangeEnd?: string;
            recurrenceStartDate?: string;
            recurrenceDuration?: string;
            recurrenceRule?: string;
            archived?: boolean;
        };
    };
};

export type GameCenterMatchmakingQueue = {
    type: 'gameCenterMatchmakingQueues';
    id: string;
    attributes?: {
        referenceName?: string;
        classicMatchmakingBundleIds?: Array<string>;
    };
    relationships?: {
        ruleSet?: {
            data?: {
                type: 'gameCenterMatchmakingRuleSets';
                id: string;
            };
        };
        experimentRuleSet?: {
            data?: {
                type: 'gameCenterMatchmakingRuleSets';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type GameCenterMatchmakingQueuesResponse = {
    data: Array<GameCenterMatchmakingQueue>;
    included?: Array<GameCenterMatchmakingRuleSet>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterMatchmakingQueueResponse = {
    data: GameCenterMatchmakingQueue;
    included?: Array<GameCenterMatchmakingRuleSet>;
    links: DocumentLinks;
};

export type GameCenterMatchmakingQueueCreateRequest = {
    data: {
        type: 'gameCenterMatchmakingQueues';
        attributes: {
            referenceName: string;
            classicMatchmakingBundleIds?: Array<string>;
        };
        relationships: {
            ruleSet: {
                data: {
                    type: 'gameCenterMatchmakingRuleSets';
                    id: string;
                };
            };
            experimentRuleSet?: {
                data?: {
                    type: 'gameCenterMatchmakingRuleSets';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterMatchmakingQueueUpdateRequest = {
    data: {
        type: 'gameCenterMatchmakingQueues';
        id: string;
        attributes?: {
            classicMatchmakingBundleIds?: Array<string>;
        };
        relationships?: {
            ruleSet?: {
                data?: {
                    type: 'gameCenterMatchmakingRuleSets';
                    id: string;
                };
            };
            experimentRuleSet?: {
                data?: {
                    type: 'gameCenterMatchmakingRuleSets';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterMatchmakingRuleSetTest = {
    type: 'gameCenterMatchmakingRuleSetTests';
    id: string;
    attributes?: {
        matchmakingResults?: Array<Array<{
            requestName?: string;
            teamAssignments?: Array<GameCenterMatchmakingTeamAssignment>;
        }>>;
    };
    links?: ResourceLinks;
};

export type GameCenterMatchmakingRuleSetTestResponse = {
    data: GameCenterMatchmakingRuleSetTest;
    links: DocumentLinks;
};

export type GameCenterMatchmakingRuleSetTestCreateRequest = {
    data: {
        type: 'gameCenterMatchmakingRuleSetTests';
        relationships: {
            matchmakingRuleSet: {
                data: {
                    type: 'gameCenterMatchmakingRuleSets';
                    id: string;
                };
            };
            matchmakingRequests: {
                data: Array<{
                    type: 'gameCenterMatchmakingTestRequests';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<GameCenterMatchmakingTestPlayerPropertyInlineCreate | GameCenterMatchmakingTestRequestInlineCreate>;
};

export type GameCenterMatchmakingRuleSet = {
    type: 'gameCenterMatchmakingRuleSets';
    id: string;
    attributes?: {
        referenceName?: string;
        ruleLanguageVersion?: number;
        minPlayers?: number;
        maxPlayers?: number;
    };
    relationships?: {
        teams?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterMatchmakingTeams';
                id: string;
            }>;
        };
        rules?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterMatchmakingRules';
                id: string;
            }>;
        };
        matchmakingQueues?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterMatchmakingQueues';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type GameCenterMatchmakingRuleSetsResponse = {
    data: Array<GameCenterMatchmakingRuleSet>;
    included?: Array<GameCenterMatchmakingTeam | GameCenterMatchmakingRule | GameCenterMatchmakingQueue>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterMatchmakingRuleSetResponse = {
    data: GameCenterMatchmakingRuleSet;
    included?: Array<GameCenterMatchmakingTeam | GameCenterMatchmakingRule | GameCenterMatchmakingQueue>;
    links: DocumentLinks;
};

export type GameCenterMatchmakingRuleSetCreateRequest = {
    data: {
        type: 'gameCenterMatchmakingRuleSets';
        attributes: {
            referenceName: string;
            ruleLanguageVersion: number;
            minPlayers: number;
            maxPlayers: number;
        };
    };
};

export type GameCenterMatchmakingRuleSetUpdateRequest = {
    data: {
        type: 'gameCenterMatchmakingRuleSets';
        id: string;
        attributes?: {
            minPlayers?: number;
            maxPlayers?: number;
        };
    };
};

export type GameCenterMatchmakingRule = {
    type: 'gameCenterMatchmakingRules';
    id: string;
    attributes?: {
        referenceName?: string;
        description?: string;
        type?: 'COMPATIBLE' | 'DISTANCE' | 'MATCH' | 'TEAM';
        expression?: string;
        weight?: number;
    };
    links?: ResourceLinks;
};

export type GameCenterMatchmakingRulesResponse = {
    data: Array<GameCenterMatchmakingRule>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterMatchmakingRuleResponse = {
    data: GameCenterMatchmakingRule;
    links: DocumentLinks;
};

export type GameCenterMatchmakingRuleCreateRequest = {
    data: {
        type: 'gameCenterMatchmakingRules';
        attributes: {
            referenceName: string;
            description: string;
            type: 'COMPATIBLE' | 'DISTANCE' | 'MATCH' | 'TEAM';
            expression: string;
            weight?: number;
        };
        relationships: {
            ruleSet: {
                data: {
                    type: 'gameCenterMatchmakingRuleSets';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterMatchmakingRuleUpdateRequest = {
    data: {
        type: 'gameCenterMatchmakingRules';
        id: string;
        attributes?: {
            description?: string;
            expression?: string;
            weight?: number;
        };
    };
};

export type GameCenterMatchmakingTeam = {
    type: 'gameCenterMatchmakingTeams';
    id: string;
    attributes?: {
        referenceName?: string;
        minPlayers?: number;
        maxPlayers?: number;
    };
    links?: ResourceLinks;
};

export type GameCenterMatchmakingTeamsResponse = {
    data: Array<GameCenterMatchmakingTeam>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterMatchmakingTeamResponse = {
    data: GameCenterMatchmakingTeam;
    links: DocumentLinks;
};

export type GameCenterMatchmakingTeamCreateRequest = {
    data: {
        type: 'gameCenterMatchmakingTeams';
        attributes: {
            referenceName: string;
            minPlayers: number;
            maxPlayers: number;
        };
        relationships: {
            ruleSet: {
                data: {
                    type: 'gameCenterMatchmakingRuleSets';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterMatchmakingTeamUpdateRequest = {
    data: {
        type: 'gameCenterMatchmakingTeams';
        id: string;
        attributes?: {
            minPlayers?: number;
            maxPlayers?: number;
        };
    };
};

export type GameCenterMatchmakingTestPlayerPropertyInlineCreate = {
    type: 'gameCenterMatchmakingTestPlayerProperties';
    id?: string;
    attributes: {
        playerId: string;
        properties?: Array<Property>;
    };
};

export type GameCenterMatchmakingTestRequestInlineCreate = {
    type: 'gameCenterMatchmakingTestRequests';
    id?: string;
    attributes: {
        requestName: string;
        secondsInQueue: number;
        locale?: 'AR-SA' | 'CA-ES' | 'CS-CZ' | 'DA-DK' | 'DE-DE' | 'EL-GR' | 'EN-AU' | 'EN-GB' | 'EN-US' | 'EN-KY' | 'ES-ES' | 'ES-MX' | 'FI-FI' | 'FR-CA' | 'FR-FR' | 'HI-IN' | 'HR-HR' | 'HU-HU' | 'ID-ID' | 'IT-IT' | 'IW-IL' | 'JA-JP' | 'KO-KR' | 'MS-MY' | 'NL-NL' | 'NO-NO' | 'PL-PL' | 'PT-BR' | 'PT-PT' | 'RO-RO' | 'RU-RU' | 'SK-SK' | 'SV-SE' | 'TH-TH' | 'TR-TR' | 'UK-UA' | 'ZH-CN' | 'ZH-TW' | 'ZH-HK';
        location?: Location;
        minPlayers?: number;
        maxPlayers?: number;
        playerCount?: number;
        bundleId: string;
        platform: Platform;
        appVersion: string;
    };
    relationships?: {
        matchmakingPlayerProperties?: {
            data?: Array<{
                type: 'gameCenterMatchmakingTestPlayerProperties';
                id: string;
            }>;
        };
    };
};

export type GameCenterPlayerAchievementSubmission = {
    type: 'gameCenterPlayerAchievementSubmissions';
    id: string;
    attributes?: {
        bundleId?: string;
        challengeIds?: Array<string>;
        percentageAchieved?: number;
        scopedPlayerId?: string;
        submittedDate?: string;
        vendorIdentifier?: string;
    };
    links?: ResourceLinks;
};

export type GameCenterPlayerAchievementSubmissionResponse = {
    data: GameCenterPlayerAchievementSubmission;
    links: DocumentLinks;
};

export type GameCenterPlayerAchievementSubmissionCreateRequest = {
    data: {
        type: 'gameCenterPlayerAchievementSubmissions';
        attributes: {
            bundleId: string;
            challengeIds?: Array<string>;
            percentageAchieved: number;
            scopedPlayerId: string;
            submittedDate?: string;
            vendorIdentifier: string;
        };
    };
};

export type InAppPurchaseAppStoreReviewScreenshot = {
    type: 'inAppPurchaseAppStoreReviewScreenshots';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        sourceFileChecksum?: string;
        imageAsset?: ImageAsset;
        assetToken?: string;
        assetType?: string;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
    };
    relationships?: {
        inAppPurchaseV2?: {
            data?: {
                type: 'inAppPurchases';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type InAppPurchaseAppStoreReviewScreenshotResponse = {
    data: InAppPurchaseAppStoreReviewScreenshot;
    included?: Array<InAppPurchaseV2>;
    links: DocumentLinks;
};

export type InAppPurchaseAppStoreReviewScreenshotCreateRequest = {
    data: {
        type: 'inAppPurchaseAppStoreReviewScreenshots';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            inAppPurchaseV2: {
                data: {
                    type: 'inAppPurchases';
                    id: string;
                };
            };
        };
    };
};

export type InAppPurchaseAppStoreReviewScreenshotUpdateRequest = {
    data: {
        type: 'inAppPurchaseAppStoreReviewScreenshots';
        id: string;
        attributes?: {
            sourceFileChecksum?: string;
            uploaded?: boolean;
        };
    };
};

export type InAppPurchaseAvailability = {
    type: 'inAppPurchaseAvailabilities';
    id: string;
    attributes?: {
        availableInNewTerritories?: boolean;
    };
    relationships?: {
        availableTerritories?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'territories';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type InAppPurchaseAvailabilityResponse = {
    data: InAppPurchaseAvailability;
    included?: Array<Territory>;
    links: DocumentLinks;
};

export type InAppPurchaseAvailabilityCreateRequest = {
    data: {
        type: 'inAppPurchaseAvailabilities';
        attributes: {
            availableInNewTerritories: boolean;
        };
        relationships: {
            inAppPurchase: {
                data: {
                    type: 'inAppPurchases';
                    id: string;
                };
            };
            availableTerritories: {
                data: Array<{
                    type: 'territories';
                    id: string;
                }>;
            };
        };
    };
};

export type InAppPurchaseContent = {
    type: 'inAppPurchaseContents';
    id: string;
    attributes?: {
        fileName?: string;
        fileSize?: number;
        url?: string;
        lastModifiedDate?: string;
    };
    relationships?: {
        inAppPurchaseV2?: {
            data?: {
                type: 'inAppPurchases';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type InAppPurchaseContentResponse = {
    data: InAppPurchaseContent;
    included?: Array<InAppPurchaseV2>;
    links: DocumentLinks;
};

export type InAppPurchaseImage = {
    type: 'inAppPurchaseImages';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        sourceFileChecksum?: string;
        assetToken?: string;
        imageAsset?: ImageAsset;
        uploadOperations?: Array<UploadOperation>;
        state?: 'AWAITING_UPLOAD' | 'UPLOAD_COMPLETE' | 'FAILED' | 'PREPARE_FOR_SUBMISSION' | 'WAITING_FOR_REVIEW' | 'APPROVED' | 'REJECTED';
    };
    relationships?: {
        inAppPurchase?: {
            data?: {
                type: 'inAppPurchases';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type InAppPurchaseImagesResponse = {
    data: Array<InAppPurchaseImage>;
    included?: Array<InAppPurchaseV2>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type InAppPurchaseImageResponse = {
    data: InAppPurchaseImage;
    included?: Array<InAppPurchaseV2>;
    links: DocumentLinks;
};

export type InAppPurchaseImageCreateRequest = {
    data: {
        type: 'inAppPurchaseImages';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            inAppPurchase: {
                data: {
                    type: 'inAppPurchases';
                    id: string;
                };
            };
        };
    };
};

export type InAppPurchaseImageUpdateRequest = {
    data: {
        type: 'inAppPurchaseImages';
        id: string;
        attributes?: {
            sourceFileChecksum?: string;
            uploaded?: boolean;
        };
    };
};

export type InAppPurchaseLocalization = {
    type: 'inAppPurchaseLocalizations';
    id: string;
    attributes?: {
        name?: string;
        locale?: string;
        description?: string;
        state?: 'PREPARE_FOR_SUBMISSION' | 'WAITING_FOR_REVIEW' | 'APPROVED' | 'REJECTED';
    };
    relationships?: {
        inAppPurchaseV2?: {
            data?: {
                type: 'inAppPurchases';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type InAppPurchaseLocalizationsResponse = {
    data: Array<InAppPurchaseLocalization>;
    included?: Array<InAppPurchaseV2>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type InAppPurchaseLocalizationResponse = {
    data: InAppPurchaseLocalization;
    included?: Array<InAppPurchaseV2>;
    links: DocumentLinks;
};

export type InAppPurchaseLocalizationCreateRequest = {
    data: {
        type: 'inAppPurchaseLocalizations';
        attributes: {
            name: string;
            locale: string;
            description?: string;
        };
        relationships: {
            inAppPurchaseV2: {
                data: {
                    type: 'inAppPurchases';
                    id: string;
                };
            };
        };
    };
};

export type InAppPurchaseLocalizationUpdateRequest = {
    data: {
        type: 'inAppPurchaseLocalizations';
        id: string;
        attributes?: {
            name?: string;
            description?: string;
        };
    };
};

export type InAppPurchasePricePoint = {
    type: 'inAppPurchasePricePoints';
    id: string;
    attributes?: {
        customerPrice?: string;
        proceeds?: string;
    };
    relationships?: {
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
        equalizations?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type InAppPurchasePricePointsResponse = {
    data: Array<InAppPurchasePricePoint>;
    included?: Array<Territory>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type InAppPurchasePriceSchedule = {
    type: 'inAppPurchasePriceSchedules';
    id: string;
    relationships?: {
        baseTerritory?: {
            links?: RelationshipLinks;
            data?: {
                type: 'territories';
                id: string;
            };
        };
        manualPrices?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'inAppPurchasePrices';
                id: string;
            }>;
        };
        automaticPrices?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'inAppPurchasePrices';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type InAppPurchasePriceScheduleResponse = {
    data: InAppPurchasePriceSchedule;
    included?: Array<Territory | InAppPurchasePrice>;
    links: DocumentLinks;
};

export type InAppPurchasePriceScheduleCreateRequest = {
    data: {
        type: 'inAppPurchasePriceSchedules';
        relationships: {
            inAppPurchase: {
                data: {
                    type: 'inAppPurchases';
                    id: string;
                };
            };
            baseTerritory: {
                data: {
                    type: 'territories';
                    id: string;
                };
            };
            manualPrices: {
                data: Array<{
                    type: 'inAppPurchasePrices';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<InAppPurchasePriceInlineCreate | TerritoryInlineCreate>;
};

export type InAppPurchasePrice = {
    type: 'inAppPurchasePrices';
    id: string;
    attributes?: {
        startDate?: string;
        endDate?: string;
        manual?: boolean;
    };
    relationships?: {
        inAppPurchasePricePoint?: {
            data?: {
                type: 'inAppPurchasePricePoints';
                id: string;
            };
        };
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type InAppPurchasePriceInlineCreate = {
    type: 'inAppPurchasePrices';
    id?: string;
    attributes?: {
        startDate?: string;
        endDate?: string;
    };
    relationships?: {
        inAppPurchaseV2?: {
            data?: {
                type: 'inAppPurchases';
                id: string;
            };
        };
        inAppPurchasePricePoint?: {
            data?: {
                type: 'inAppPurchasePricePoints';
                id: string;
            };
        };
    };
};

export type InAppPurchasePricesResponse = {
    data: Array<InAppPurchasePrice>;
    included?: Array<InAppPurchasePricePoint | Territory>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type InAppPurchaseSubmission = {
    type: 'inAppPurchaseSubmissions';
    id: string;
    relationships?: {
        inAppPurchaseV2?: {
            data?: {
                type: 'inAppPurchases';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type InAppPurchaseSubmissionResponse = {
    data: InAppPurchaseSubmission;
    included?: Array<InAppPurchaseV2>;
    links: DocumentLinks;
};

export type InAppPurchaseSubmissionCreateRequest = {
    data: {
        type: 'inAppPurchaseSubmissions';
        relationships: {
            inAppPurchaseV2: {
                data: {
                    type: 'inAppPurchases';
                    id: string;
                };
            };
        };
    };
};

/**
 * @deprecated
 */
export type InAppPurchase = {
    type: 'inAppPurchases';
    id: string;
    attributes?: {
        referenceName?: string;
        productId?: string;
        inAppPurchaseType?: 'AUTOMATICALLY_RENEWABLE_SUBSCRIPTION' | 'NON_CONSUMABLE' | 'CONSUMABLE' | 'NON_RENEWING_SUBSCRIPTION' | 'FREE_SUBSCRIPTION';
        state?: 'CREATED' | 'DEVELOPER_SIGNED_OFF' | 'DEVELOPER_ACTION_NEEDED' | 'DELETION_IN_PROGRESS' | 'APPROVED' | 'DELETED' | 'REMOVED_FROM_SALE' | 'DEVELOPER_REMOVED_FROM_SALE' | 'WAITING_FOR_UPLOAD' | 'PROCESSING_CONTENT' | 'REPLACED' | 'REJECTED' | 'WAITING_FOR_SCREENSHOT' | 'PREPARE_FOR_SUBMISSION' | 'MISSING_METADATA' | 'READY_TO_SUBMIT' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'PENDING_DEVELOPER_RELEASE';
    };
    relationships?: {
        apps?: {
            meta?: PagingInformation;
            data?: Array<{
                type: 'apps';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

/**
 * @deprecated
 */
export type InAppPurchasesResponse = {
    data: Array<InAppPurchase>;
    included?: Array<App>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

/**
 * @deprecated
 */
export type InAppPurchaseResponse = {
    data: InAppPurchase;
    included?: Array<App>;
    links: DocumentLinks;
};

export type InAppPurchaseV2 = {
    type: 'inAppPurchases';
    id: string;
    attributes?: {
        name?: string;
        productId?: string;
        inAppPurchaseType?: InAppPurchaseType;
        state?: InAppPurchaseState;
        reviewNote?: string;
        familySharable?: boolean;
        contentHosting?: boolean;
    };
    relationships?: {
        inAppPurchaseLocalizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'inAppPurchaseLocalizations';
                id: string;
            }>;
        };
        pricePoints?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'inAppPurchasePricePoints';
                id: string;
            }>;
        };
        content?: {
            links?: RelationshipLinks;
            data?: {
                type: 'inAppPurchaseContents';
                id: string;
            };
        };
        appStoreReviewScreenshot?: {
            links?: RelationshipLinks;
            data?: {
                type: 'inAppPurchaseAppStoreReviewScreenshots';
                id: string;
            };
        };
        promotedPurchase?: {
            links?: RelationshipLinks;
            data?: {
                type: 'promotedPurchases';
                id: string;
            };
        };
        iapPriceSchedule?: {
            links?: RelationshipLinks;
            data?: {
                type: 'inAppPurchasePriceSchedules';
                id: string;
            };
        };
        inAppPurchaseAvailability?: {
            links?: RelationshipLinks;
            data?: {
                type: 'inAppPurchaseAvailabilities';
                id: string;
            };
        };
        images?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'inAppPurchaseImages';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type InAppPurchasesV2Response = {
    data: Array<InAppPurchaseV2>;
    included?: Array<InAppPurchaseLocalization | InAppPurchasePricePoint | InAppPurchaseContent | InAppPurchaseAppStoreReviewScreenshot | PromotedPurchase | InAppPurchasePriceSchedule | InAppPurchaseAvailability | InAppPurchaseImage>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type InAppPurchaseV2Response = {
    data: InAppPurchaseV2;
    included?: Array<InAppPurchaseLocalization | InAppPurchasePricePoint | InAppPurchaseContent | InAppPurchaseAppStoreReviewScreenshot | PromotedPurchase | InAppPurchasePriceSchedule | InAppPurchaseAvailability | InAppPurchaseImage>;
    links: DocumentLinks;
};

export type InAppPurchaseV2CreateRequest = {
    data: {
        type: 'inAppPurchases';
        attributes: {
            name: string;
            productId: string;
            inAppPurchaseType: InAppPurchaseType;
            reviewNote?: string;
            familySharable?: boolean;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type InAppPurchaseV2UpdateRequest = {
    data: {
        type: 'inAppPurchases';
        id: string;
        attributes?: {
            name?: string;
            reviewNote?: string;
            familySharable?: boolean;
        };
    };
};

/**
 * @deprecated
 */
export type MarketplaceDomain = {
    type: 'marketplaceDomains';
    id: string;
    attributes?: {
        domain?: string;
        referenceName?: string;
        createdDate?: string;
    };
    links?: ResourceLinks;
};

/**
 * @deprecated
 */
export type MarketplaceDomainsResponse = {
    data: Array<MarketplaceDomain>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

/**
 * @deprecated
 */
export type MarketplaceDomainResponse = {
    data: MarketplaceDomain;
    links: DocumentLinks;
};

/**
 * @deprecated
 */
export type MarketplaceDomainCreateRequest = {
    data: {
        type: 'marketplaceDomains';
        attributes: {
            domain: string;
            referenceName: string;
        };
    };
};

export type MarketplaceSearchDetail = {
    type: 'marketplaceSearchDetails';
    id: string;
    attributes?: {
        catalogUrl?: string;
    };
    links?: ResourceLinks;
};

export type MarketplaceSearchDetailResponse = {
    data: MarketplaceSearchDetail;
    links: DocumentLinks;
};

export type MarketplaceSearchDetailCreateRequest = {
    data: {
        type: 'marketplaceSearchDetails';
        attributes: {
            catalogUrl: string;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type MarketplaceSearchDetailUpdateRequest = {
    data: {
        type: 'marketplaceSearchDetails';
        id: string;
        attributes?: {
            catalogUrl?: string;
        };
    };
};

export type MarketplaceWebhook = {
    type: 'marketplaceWebhooks';
    id: string;
    attributes?: {
        endpointUrl?: string;
    };
    links?: ResourceLinks;
};

export type MarketplaceWebhooksResponse = {
    data: Array<MarketplaceWebhook>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type MarketplaceWebhookResponse = {
    data: MarketplaceWebhook;
    links: DocumentLinks;
};

export type MarketplaceWebhookCreateRequest = {
    data: {
        type: 'marketplaceWebhooks';
        attributes: {
            endpointUrl: string;
            secret: string;
        };
    };
};

export type MarketplaceWebhookUpdateRequest = {
    data: {
        type: 'marketplaceWebhooks';
        id: string;
        attributes?: {
            endpointUrl?: string;
            secret?: string;
        };
    };
};

export type MerchantId = {
    type: 'merchantIds';
    id: string;
    attributes?: {
        name?: string;
        identifier?: string;
    };
    relationships?: {
        certificates?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'certificates';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type MerchantIdsResponse = {
    data: Array<MerchantId>;
    included?: Array<Certificate>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type MerchantIdResponse = {
    data: MerchantId;
    included?: Array<Certificate>;
    links: DocumentLinks;
};

export type MerchantIdCreateRequest = {
    data: {
        type: 'merchantIds';
        attributes: {
            name: string;
            identifier: string;
        };
    };
};

export type MerchantIdUpdateRequest = {
    data: {
        type: 'merchantIds';
        id: string;
        attributes?: {
            name?: string;
        };
    };
};

export type Nomination = {
    type: 'nominations';
    id: string;
    attributes?: {
        name?: string;
        type?: 'APP_LAUNCH' | 'APP_ENHANCEMENTS' | 'NEW_CONTENT';
        description?: string;
        createdDate?: string;
        lastModifiedDate?: string;
        submittedDate?: string;
        state?: 'DRAFT' | 'SUBMITTED' | 'ARCHIVED';
        publishStartDate?: string;
        publishEndDate?: string;
        deviceFamilies?: Array<DeviceFamily>;
        locales?: Array<string>;
        supplementalMaterialsUris?: Array<string>;
        hasInAppEvents?: boolean;
        launchInSelectMarketsFirst?: boolean;
        notes?: string;
        preOrderEnabled?: boolean;
    };
    relationships?: {
        relatedApps?: {
            meta?: PagingInformation;
            data?: Array<{
                type: 'apps';
                id: string;
            }>;
        };
        createdByActor?: {
            data?: {
                type: 'actors';
                id: string;
            };
        };
        lastModifiedByActor?: {
            data?: {
                type: 'actors';
                id: string;
            };
        };
        submittedByActor?: {
            data?: {
                type: 'actors';
                id: string;
            };
        };
        inAppEvents?: {
            meta?: PagingInformation;
            data?: Array<{
                type: 'appEvents';
                id: string;
            }>;
        };
        supportedTerritories?: {
            meta?: PagingInformation;
            data?: Array<{
                type: 'territories';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type NominationsResponse = {
    data: Array<Nomination>;
    included?: Array<App | Actor | AppEvent | Territory>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type NominationResponse = {
    data: Nomination;
    included?: Array<App | Actor | AppEvent | Territory>;
    links: DocumentLinks;
};

export type NominationCreateRequest = {
    data: {
        type: 'nominations';
        attributes: {
            name: string;
            type: 'APP_LAUNCH' | 'APP_ENHANCEMENTS' | 'NEW_CONTENT';
            description: string;
            submitted: boolean;
            publishStartDate: string;
            publishEndDate?: string;
            deviceFamilies?: Array<DeviceFamily>;
            locales?: Array<string>;
            supplementalMaterialsUris?: Array<string>;
            hasInAppEvents?: boolean;
            launchInSelectMarketsFirst?: boolean;
            notes?: string;
            preOrderEnabled?: boolean;
        };
        relationships: {
            relatedApps: {
                data: Array<{
                    type: 'apps';
                    id: string;
                }>;
            };
            inAppEvents?: {
                data?: Array<{
                    type: 'appEvents';
                    id: string;
                }>;
            };
            supportedTerritories?: {
                data?: Array<{
                    type: 'territories';
                    id: string;
                }>;
            };
        };
    };
};

export type NominationUpdateRequest = {
    data: {
        type: 'nominations';
        id: string;
        attributes?: {
            name?: string;
            type?: 'APP_LAUNCH' | 'APP_ENHANCEMENTS' | 'NEW_CONTENT';
            description?: string;
            submitted?: boolean;
            archived?: boolean;
            publishStartDate?: string;
            publishEndDate?: string;
            deviceFamilies?: Array<DeviceFamily>;
            locales?: Array<string>;
            supplementalMaterialsUris?: Array<string>;
            hasInAppEvents?: boolean;
            launchInSelectMarketsFirst?: boolean;
            notes?: string;
            preOrderEnabled?: boolean;
        };
        relationships?: {
            relatedApps?: {
                data?: Array<{
                    type: 'apps';
                    id: string;
                }>;
            };
            inAppEvents?: {
                data?: Array<{
                    type: 'appEvents';
                    id: string;
                }>;
            };
            supportedTerritories?: {
                data?: Array<{
                    type: 'territories';
                    id: string;
                }>;
            };
        };
    };
};

export type PerfPowerMetric = {
    type: 'perfPowerMetrics';
    id: string;
    attributes?: {
        platform?: 'IOS';
        metricType?: 'DISK' | 'HANG' | 'BATTERY' | 'LAUNCH' | 'MEMORY' | 'ANIMATION' | 'TERMINATION';
        deviceType?: string;
    };
    links?: ResourceLinks;
};

export type PrereleaseVersion = {
    type: 'preReleaseVersions';
    id: string;
    attributes?: {
        version?: string;
        platform?: Platform;
    };
    relationships?: {
        builds?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'builds';
                id: string;
            }>;
        };
        app?: {
            links?: RelationshipLinks;
            data?: {
                type: 'apps';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type PreReleaseVersionsResponse = {
    data: Array<PrereleaseVersion>;
    included?: Array<Build | App>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type PrereleaseVersionResponse = {
    data: PrereleaseVersion;
    included?: Array<Build | App>;
    links: DocumentLinks;
};

export type Profile = {
    type: 'profiles';
    id: string;
    attributes?: {
        name?: string;
        platform?: BundleIdPlatform;
        profileType?: 'IOS_APP_DEVELOPMENT' | 'IOS_APP_STORE' | 'IOS_APP_ADHOC' | 'IOS_APP_INHOUSE' | 'MAC_APP_DEVELOPMENT' | 'MAC_APP_STORE' | 'MAC_APP_DIRECT' | 'TVOS_APP_DEVELOPMENT' | 'TVOS_APP_STORE' | 'TVOS_APP_ADHOC' | 'TVOS_APP_INHOUSE' | 'MAC_CATALYST_APP_DEVELOPMENT' | 'MAC_CATALYST_APP_STORE' | 'MAC_CATALYST_APP_DIRECT';
        profileState?: 'ACTIVE' | 'INVALID';
        profileContent?: string;
        uuid?: string;
        createdDate?: string;
        expirationDate?: string;
    };
    relationships?: {
        bundleId?: {
            links?: RelationshipLinks;
            data?: {
                type: 'bundleIds';
                id: string;
            };
        };
        devices?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'devices';
                id: string;
            }>;
        };
        certificates?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'certificates';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type ProfilesResponse = {
    data: Array<Profile>;
    included?: Array<BundleId | Device | Certificate>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type ProfileResponse = {
    data: Profile;
    included?: Array<BundleId | Device | Certificate>;
    links: DocumentLinks;
};

export type ProfileCreateRequest = {
    data: {
        type: 'profiles';
        attributes: {
            name: string;
            profileType: 'IOS_APP_DEVELOPMENT' | 'IOS_APP_STORE' | 'IOS_APP_ADHOC' | 'IOS_APP_INHOUSE' | 'MAC_APP_DEVELOPMENT' | 'MAC_APP_STORE' | 'MAC_APP_DIRECT' | 'TVOS_APP_DEVELOPMENT' | 'TVOS_APP_STORE' | 'TVOS_APP_ADHOC' | 'TVOS_APP_INHOUSE' | 'MAC_CATALYST_APP_DEVELOPMENT' | 'MAC_CATALYST_APP_STORE' | 'MAC_CATALYST_APP_DIRECT';
        };
        relationships: {
            bundleId: {
                data: {
                    type: 'bundleIds';
                    id: string;
                };
            };
            devices?: {
                data?: Array<{
                    type: 'devices';
                    id: string;
                }>;
            };
            certificates: {
                data: Array<{
                    type: 'certificates';
                    id: string;
                }>;
            };
        };
    };
};

export type PromotedPurchase = {
    type: 'promotedPurchases';
    id: string;
    attributes?: {
        visibleForAllUsers?: boolean;
        enabled?: boolean;
        state?: 'APPROVED' | 'IN_REVIEW' | 'PREPARE_FOR_SUBMISSION' | 'REJECTED';
    };
    relationships?: {
        inAppPurchaseV2?: {
            data?: {
                type: 'inAppPurchases';
                id: string;
            };
        };
        subscription?: {
            data?: {
                type: 'subscriptions';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type PromotedPurchasesResponse = {
    data: Array<PromotedPurchase>;
    included?: Array<InAppPurchaseV2 | Subscription>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type PromotedPurchaseResponse = {
    data: PromotedPurchase;
    included?: Array<InAppPurchaseV2 | Subscription>;
    links: DocumentLinks;
};

export type PromotedPurchaseCreateRequest = {
    data: {
        type: 'promotedPurchases';
        attributes: {
            visibleForAllUsers: boolean;
            enabled?: boolean;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
            inAppPurchaseV2?: {
                data?: {
                    type: 'inAppPurchases';
                    id: string;
                };
            };
            subscription?: {
                data?: {
                    type: 'subscriptions';
                    id: string;
                };
            };
        };
    };
};

export type PromotedPurchaseUpdateRequest = {
    data: {
        type: 'promotedPurchases';
        id: string;
        attributes?: {
            visibleForAllUsers?: boolean;
            enabled?: boolean;
        };
    };
};

export type ReviewSubmissionItem = {
    type: 'reviewSubmissionItems';
    id: string;
    attributes?: {
        state?: 'READY_FOR_REVIEW' | 'ACCEPTED' | 'APPROVED' | 'REJECTED' | 'REMOVED';
    };
    relationships?: {
        appStoreVersion?: {
            data?: {
                type: 'appStoreVersions';
                id: string;
            };
        };
        appCustomProductPageVersion?: {
            data?: {
                type: 'appCustomProductPageVersions';
                id: string;
            };
        };
        appStoreVersionExperiment?: {
            data?: {
                type: 'appStoreVersionExperiments';
                id: string;
            };
        };
        appStoreVersionExperimentV2?: {
            data?: {
                type: 'appStoreVersionExperiments';
                id: string;
            };
        };
        appEvent?: {
            data?: {
                type: 'appEvents';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type ReviewSubmissionItemsResponse = {
    data: Array<ReviewSubmissionItem>;
    included?: Array<AppStoreVersion | AppCustomProductPageVersion | AppStoreVersionExperiment | AppStoreVersionExperimentV2 | AppEvent>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type ReviewSubmissionItemResponse = {
    data: ReviewSubmissionItem;
    included?: Array<AppStoreVersion | AppCustomProductPageVersion | AppStoreVersionExperiment | AppStoreVersionExperimentV2 | AppEvent>;
    links: DocumentLinks;
};

export type ReviewSubmissionItemCreateRequest = {
    data: {
        type: 'reviewSubmissionItems';
        relationships: {
            reviewSubmission: {
                data: {
                    type: 'reviewSubmissions';
                    id: string;
                };
            };
            appStoreVersion?: {
                data?: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
            appCustomProductPageVersion?: {
                data?: {
                    type: 'appCustomProductPageVersions';
                    id: string;
                };
            };
            appStoreVersionExperiment?: {
                data?: {
                    type: 'appStoreVersionExperiments';
                    id: string;
                };
            };
            appStoreVersionExperimentV2?: {
                data?: {
                    type: 'appStoreVersionExperiments';
                    id: string;
                };
            };
            appEvent?: {
                data?: {
                    type: 'appEvents';
                    id: string;
                };
            };
        };
    };
};

export type ReviewSubmissionItemUpdateRequest = {
    data: {
        type: 'reviewSubmissionItems';
        id: string;
        attributes?: {
            resolved?: boolean;
            removed?: boolean;
        };
    };
};

export type ReviewSubmission = {
    type: 'reviewSubmissions';
    id: string;
    attributes?: {
        platform?: Platform;
        submittedDate?: string;
        state?: 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'UNRESOLVED_ISSUES' | 'CANCELING' | 'COMPLETING' | 'COMPLETE';
    };
    relationships?: {
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
        items?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'reviewSubmissionItems';
                id: string;
            }>;
        };
        appStoreVersionForReview?: {
            data?: {
                type: 'appStoreVersions';
                id: string;
            };
        };
        submittedByActor?: {
            data?: {
                type: 'actors';
                id: string;
            };
        };
        lastUpdatedByActor?: {
            data?: {
                type: 'actors';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type ReviewSubmissionsResponse = {
    data: Array<ReviewSubmission>;
    included?: Array<App | ReviewSubmissionItem | AppStoreVersion | Actor>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type ReviewSubmissionResponse = {
    data: ReviewSubmission;
    included?: Array<App | ReviewSubmissionItem | AppStoreVersion | Actor>;
    links: DocumentLinks;
};

export type ReviewSubmissionCreateRequest = {
    data: {
        type: 'reviewSubmissions';
        attributes: {
            platform: Platform;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type ReviewSubmissionUpdateRequest = {
    data: {
        type: 'reviewSubmissions';
        id: string;
        attributes?: {
            submitted?: boolean;
            canceled?: boolean;
        };
    };
};

export type RoutingAppCoverage = {
    type: 'routingAppCoverages';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        sourceFileChecksum?: string;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
    };
    relationships?: {
        appStoreVersion?: {
            data?: {
                type: 'appStoreVersions';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type RoutingAppCoverageResponse = {
    data: RoutingAppCoverage;
    included?: Array<AppStoreVersion>;
    links: DocumentLinks;
};

export type RoutingAppCoverageCreateRequest = {
    data: {
        type: 'routingAppCoverages';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            appStoreVersion: {
                data: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
        };
    };
};

export type RoutingAppCoverageUpdateRequest = {
    data: {
        type: 'routingAppCoverages';
        id: string;
        attributes?: {
            sourceFileChecksum?: string;
            uploaded?: boolean;
        };
    };
};

export type SandboxTesterV2 = {
    type: 'sandboxTesters';
    id: string;
    attributes?: {
        firstName?: string;
        lastName?: string;
        acAccountName?: string;
        territory?: TerritoryCode;
        applePayCompatible?: boolean;
        interruptPurchases?: boolean;
        subscriptionRenewalRate?: 'MONTHLY_RENEWAL_EVERY_ONE_HOUR' | 'MONTHLY_RENEWAL_EVERY_THIRTY_MINUTES' | 'MONTHLY_RENEWAL_EVERY_FIFTEEN_MINUTES' | 'MONTHLY_RENEWAL_EVERY_FIVE_MINUTES' | 'MONTHLY_RENEWAL_EVERY_THREE_MINUTES';
    };
    links?: ResourceLinks;
};

export type SandboxTestersV2Response = {
    data: Array<SandboxTesterV2>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SandboxTesterV2Response = {
    data: SandboxTesterV2;
    links: DocumentLinks;
};

export type SandboxTesterV2UpdateRequest = {
    data: {
        type: 'sandboxTesters';
        id: string;
        attributes?: {
            territory?: TerritoryCode;
            interruptPurchases?: boolean;
            subscriptionRenewalRate?: 'MONTHLY_RENEWAL_EVERY_ONE_HOUR' | 'MONTHLY_RENEWAL_EVERY_THIRTY_MINUTES' | 'MONTHLY_RENEWAL_EVERY_FIFTEEN_MINUTES' | 'MONTHLY_RENEWAL_EVERY_FIVE_MINUTES' | 'MONTHLY_RENEWAL_EVERY_THREE_MINUTES';
        };
    };
};

export type SandboxTestersClearPurchaseHistoryRequestV2 = {
    type: 'sandboxTestersClearPurchaseHistoryRequest';
    id: string;
    links?: ResourceLinks;
};

export type SandboxTestersClearPurchaseHistoryRequestV2Response = {
    data: SandboxTestersClearPurchaseHistoryRequestV2;
    links: DocumentLinks;
};

export type SandboxTestersClearPurchaseHistoryRequestV2CreateRequest = {
    data: {
        type: 'sandboxTestersClearPurchaseHistoryRequest';
        relationships: {
            sandboxTesters: {
                data: Array<{
                    type: 'sandboxTesters';
                    id: string;
                }>;
            };
        };
    };
};

export type ScmGitReference = {
    type: 'scmGitReferences';
    id: string;
    attributes?: {
        name?: string;
        canonicalName?: string;
        isDeleted?: boolean;
        kind?: CiGitRefKind;
    };
    relationships?: {
        repository?: {
            data?: {
                type: 'scmRepositories';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type ScmGitReferencesResponse = {
    data: Array<ScmGitReference>;
    included?: Array<ScmRepository>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type ScmGitReferenceResponse = {
    data: ScmGitReference;
    included?: Array<ScmRepository>;
    links: DocumentLinks;
};

export type ScmProvider = {
    type: 'scmProviders';
    id: string;
    attributes?: {
        scmProviderType?: ScmProviderType;
        url?: string;
    };
    relationships?: {
        repositories?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type ScmProvidersResponse = {
    data: Array<ScmProvider>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type ScmProviderResponse = {
    data: ScmProvider;
    links: DocumentLinks;
};

export type ScmPullRequest = {
    type: 'scmPullRequests';
    id: string;
    attributes?: {
        title?: string;
        number?: number;
        webUrl?: string;
        sourceRepositoryOwner?: string;
        sourceRepositoryName?: string;
        sourceBranchName?: string;
        destinationRepositoryOwner?: string;
        destinationRepositoryName?: string;
        destinationBranchName?: string;
        isClosed?: boolean;
        isCrossRepository?: boolean;
    };
    relationships?: {
        repository?: {
            data?: {
                type: 'scmRepositories';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type ScmPullRequestsResponse = {
    data: Array<ScmPullRequest>;
    included?: Array<ScmRepository>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type ScmPullRequestResponse = {
    data: ScmPullRequest;
    included?: Array<ScmRepository>;
    links: DocumentLinks;
};

export type ScmRepository = {
    type: 'scmRepositories';
    id: string;
    attributes?: {
        lastAccessedDate?: string;
        httpCloneUrl?: string;
        sshCloneUrl?: string;
        ownerName?: string;
        repositoryName?: string;
    };
    relationships?: {
        scmProvider?: {
            data?: {
                type: 'scmProviders';
                id: string;
            };
        };
        defaultBranch?: {
            data?: {
                type: 'scmGitReferences';
                id: string;
            };
        };
        gitReferences?: {
            links?: RelationshipLinks;
        };
        pullRequests?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type ScmRepositoriesResponse = {
    data: Array<ScmRepository>;
    included?: Array<ScmProvider | ScmGitReference>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type ScmRepositoryResponse = {
    data: ScmRepository;
    included?: Array<ScmProvider | ScmGitReference>;
    links: DocumentLinks;
};

export type SubscriptionAppStoreReviewScreenshot = {
    type: 'subscriptionAppStoreReviewScreenshots';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        sourceFileChecksum?: string;
        imageAsset?: ImageAsset;
        assetToken?: string;
        assetType?: string;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
    };
    relationships?: {
        subscription?: {
            data?: {
                type: 'subscriptions';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type SubscriptionAppStoreReviewScreenshotResponse = {
    data: SubscriptionAppStoreReviewScreenshot;
    included?: Array<Subscription>;
    links: DocumentLinks;
};

export type SubscriptionAppStoreReviewScreenshotCreateRequest = {
    data: {
        type: 'subscriptionAppStoreReviewScreenshots';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            subscription: {
                data: {
                    type: 'subscriptions';
                    id: string;
                };
            };
        };
    };
};

export type SubscriptionAppStoreReviewScreenshotUpdateRequest = {
    data: {
        type: 'subscriptionAppStoreReviewScreenshots';
        id: string;
        attributes?: {
            sourceFileChecksum?: string;
            uploaded?: boolean;
        };
    };
};

export type SubscriptionAvailability = {
    type: 'subscriptionAvailabilities';
    id: string;
    attributes?: {
        availableInNewTerritories?: boolean;
    };
    relationships?: {
        availableTerritories?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'territories';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type SubscriptionAvailabilityResponse = {
    data: SubscriptionAvailability;
    included?: Array<Territory>;
    links: DocumentLinks;
};

export type SubscriptionAvailabilityCreateRequest = {
    data: {
        type: 'subscriptionAvailabilities';
        attributes: {
            availableInNewTerritories: boolean;
        };
        relationships: {
            subscription: {
                data: {
                    type: 'subscriptions';
                    id: string;
                };
            };
            availableTerritories: {
                data: Array<{
                    type: 'territories';
                    id: string;
                }>;
            };
        };
    };
};

export type SubscriptionGracePeriod = {
    type: 'subscriptionGracePeriods';
    id: string;
    attributes?: {
        optIn?: boolean;
        sandboxOptIn?: boolean;
        duration?: SubscriptionGracePeriodDuration;
        renewalType?: 'ALL_RENEWALS' | 'PAID_TO_PAID_ONLY';
    };
    links?: ResourceLinks;
};

export type SubscriptionGracePeriodResponse = {
    data: SubscriptionGracePeriod;
    links: DocumentLinks;
};

export type SubscriptionGracePeriodUpdateRequest = {
    data: {
        type: 'subscriptionGracePeriods';
        id: string;
        attributes?: {
            optIn?: boolean;
            sandboxOptIn?: boolean;
            duration?: SubscriptionGracePeriodDuration;
            renewalType?: 'ALL_RENEWALS' | 'PAID_TO_PAID_ONLY';
        };
    };
};

export type SubscriptionGroupLocalization = {
    type: 'subscriptionGroupLocalizations';
    id: string;
    attributes?: {
        name?: string;
        customAppName?: string;
        locale?: string;
        state?: 'PREPARE_FOR_SUBMISSION' | 'WAITING_FOR_REVIEW' | 'APPROVED' | 'REJECTED';
    };
    relationships?: {
        subscriptionGroup?: {
            data?: {
                type: 'subscriptionGroups';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type SubscriptionGroupLocalizationsResponse = {
    data: Array<SubscriptionGroupLocalization>;
    included?: Array<SubscriptionGroup>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionGroupLocalizationResponse = {
    data: SubscriptionGroupLocalization;
    included?: Array<SubscriptionGroup>;
    links: DocumentLinks;
};

export type SubscriptionGroupLocalizationCreateRequest = {
    data: {
        type: 'subscriptionGroupLocalizations';
        attributes: {
            name: string;
            customAppName?: string;
            locale: string;
        };
        relationships: {
            subscriptionGroup: {
                data: {
                    type: 'subscriptionGroups';
                    id: string;
                };
            };
        };
    };
};

export type SubscriptionGroupLocalizationUpdateRequest = {
    data: {
        type: 'subscriptionGroupLocalizations';
        id: string;
        attributes?: {
            name?: string;
            customAppName?: string;
        };
    };
};

export type SubscriptionGroupSubmission = {
    type: 'subscriptionGroupSubmissions';
    id: string;
    links?: ResourceLinks;
};

export type SubscriptionGroupSubmissionResponse = {
    data: SubscriptionGroupSubmission;
    links: DocumentLinks;
};

export type SubscriptionGroupSubmissionCreateRequest = {
    data: {
        type: 'subscriptionGroupSubmissions';
        relationships: {
            subscriptionGroup: {
                data: {
                    type: 'subscriptionGroups';
                    id: string;
                };
            };
        };
    };
};

export type SubscriptionGroup = {
    type: 'subscriptionGroups';
    id: string;
    attributes?: {
        referenceName?: string;
    };
    relationships?: {
        subscriptions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptions';
                id: string;
            }>;
        };
        subscriptionGroupLocalizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionGroupLocalizations';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type SubscriptionGroupsResponse = {
    data: Array<SubscriptionGroup>;
    included?: Array<Subscription | SubscriptionGroupLocalization>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionGroupResponse = {
    data: SubscriptionGroup;
    included?: Array<Subscription | SubscriptionGroupLocalization>;
    links: DocumentLinks;
};

export type SubscriptionGroupCreateRequest = {
    data: {
        type: 'subscriptionGroups';
        attributes: {
            referenceName: string;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type SubscriptionGroupUpdateRequest = {
    data: {
        type: 'subscriptionGroups';
        id: string;
        attributes?: {
            referenceName?: string;
        };
    };
};

export type SubscriptionImage = {
    type: 'subscriptionImages';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        sourceFileChecksum?: string;
        assetToken?: string;
        imageAsset?: ImageAsset;
        uploadOperations?: Array<UploadOperation>;
        state?: 'AWAITING_UPLOAD' | 'UPLOAD_COMPLETE' | 'FAILED' | 'PREPARE_FOR_SUBMISSION' | 'WAITING_FOR_REVIEW' | 'APPROVED' | 'REJECTED';
    };
    relationships?: {
        subscription?: {
            data?: {
                type: 'subscriptions';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type SubscriptionImagesResponse = {
    data: Array<SubscriptionImage>;
    included?: Array<Subscription>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionImageResponse = {
    data: SubscriptionImage;
    included?: Array<Subscription>;
    links: DocumentLinks;
};

export type SubscriptionImageCreateRequest = {
    data: {
        type: 'subscriptionImages';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            subscription: {
                data: {
                    type: 'subscriptions';
                    id: string;
                };
            };
        };
    };
};

export type SubscriptionImageUpdateRequest = {
    data: {
        type: 'subscriptionImages';
        id: string;
        attributes?: {
            sourceFileChecksum?: string;
            uploaded?: boolean;
        };
    };
};

export type SubscriptionIntroductoryOffer = {
    type: 'subscriptionIntroductoryOffers';
    id: string;
    attributes?: {
        startDate?: string;
        endDate?: string;
        duration?: SubscriptionOfferDuration;
        offerMode?: SubscriptionOfferMode;
        numberOfPeriods?: number;
    };
    relationships?: {
        subscription?: {
            data?: {
                type: 'subscriptions';
                id: string;
            };
        };
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
        subscriptionPricePoint?: {
            data?: {
                type: 'subscriptionPricePoints';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type SubscriptionIntroductoryOfferInlineCreate = {
    type: 'subscriptionIntroductoryOffers';
    id?: string;
    attributes: {
        startDate?: string;
        endDate?: string;
        duration: SubscriptionOfferDuration;
        offerMode: SubscriptionOfferMode;
        numberOfPeriods: number;
    };
    relationships?: {
        subscription?: {
            data?: {
                type: 'subscriptions';
                id: string;
            };
        };
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
        subscriptionPricePoint?: {
            data?: {
                type: 'subscriptionPricePoints';
                id: string;
            };
        };
    };
};

export type SubscriptionIntroductoryOffersResponse = {
    data: Array<SubscriptionIntroductoryOffer>;
    included?: Array<Subscription | Territory | SubscriptionPricePoint>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionIntroductoryOfferResponse = {
    data: SubscriptionIntroductoryOffer;
    included?: Array<Subscription | Territory | SubscriptionPricePoint>;
    links: DocumentLinks;
};

export type SubscriptionIntroductoryOfferCreateRequest = {
    data: {
        type: 'subscriptionIntroductoryOffers';
        attributes: {
            startDate?: string;
            endDate?: string;
            duration: SubscriptionOfferDuration;
            offerMode: SubscriptionOfferMode;
            numberOfPeriods: number;
        };
        relationships: {
            subscription: {
                data: {
                    type: 'subscriptions';
                    id: string;
                };
            };
            territory?: {
                data?: {
                    type: 'territories';
                    id: string;
                };
            };
            subscriptionPricePoint?: {
                data?: {
                    type: 'subscriptionPricePoints';
                    id: string;
                };
            };
        };
    };
    included?: Array<SubscriptionPricePointInlineCreate>;
};

export type SubscriptionIntroductoryOfferUpdateRequest = {
    data: {
        type: 'subscriptionIntroductoryOffers';
        id: string;
        attributes?: {
            endDate?: string;
        };
    };
};

export type SubscriptionLocalization = {
    type: 'subscriptionLocalizations';
    id: string;
    attributes?: {
        name?: string;
        locale?: string;
        description?: string;
        state?: 'PREPARE_FOR_SUBMISSION' | 'WAITING_FOR_REVIEW' | 'APPROVED' | 'REJECTED';
    };
    relationships?: {
        subscription?: {
            data?: {
                type: 'subscriptions';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type SubscriptionLocalizationsResponse = {
    data: Array<SubscriptionLocalization>;
    included?: Array<Subscription>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionLocalizationResponse = {
    data: SubscriptionLocalization;
    included?: Array<Subscription>;
    links: DocumentLinks;
};

export type SubscriptionLocalizationCreateRequest = {
    data: {
        type: 'subscriptionLocalizations';
        attributes: {
            name: string;
            locale: string;
            description?: string;
        };
        relationships: {
            subscription: {
                data: {
                    type: 'subscriptions';
                    id: string;
                };
            };
        };
    };
};

export type SubscriptionLocalizationUpdateRequest = {
    data: {
        type: 'subscriptionLocalizations';
        id: string;
        attributes?: {
            name?: string;
            description?: string;
        };
    };
};

export type SubscriptionOfferCodeCustomCode = {
    type: 'subscriptionOfferCodeCustomCodes';
    id: string;
    attributes?: {
        customCode?: string;
        numberOfCodes?: number;
        createdDate?: string;
        expirationDate?: string;
        active?: boolean;
    };
    relationships?: {
        offerCode?: {
            data?: {
                type: 'subscriptionOfferCodes';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type SubscriptionOfferCodeCustomCodesResponse = {
    data: Array<SubscriptionOfferCodeCustomCode>;
    included?: Array<SubscriptionOfferCode>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionOfferCodeCustomCodeResponse = {
    data: SubscriptionOfferCodeCustomCode;
    included?: Array<SubscriptionOfferCode>;
    links: DocumentLinks;
};

export type SubscriptionOfferCodeCustomCodeCreateRequest = {
    data: {
        type: 'subscriptionOfferCodeCustomCodes';
        attributes: {
            customCode: string;
            numberOfCodes: number;
            expirationDate?: string;
        };
        relationships: {
            offerCode: {
                data: {
                    type: 'subscriptionOfferCodes';
                    id: string;
                };
            };
        };
    };
};

export type SubscriptionOfferCodeCustomCodeUpdateRequest = {
    data: {
        type: 'subscriptionOfferCodeCustomCodes';
        id: string;
        attributes?: {
            active?: boolean;
        };
    };
};

export type SubscriptionOfferCodeOneTimeUseCodeValue = {
    type: 'subscriptionOfferCodeOneTimeUseCodeValues';
    id: string;
    links?: ResourceLinks;
};

export type SubscriptionOfferCodeOneTimeUseCode = {
    type: 'subscriptionOfferCodeOneTimeUseCodes';
    id: string;
    attributes?: {
        numberOfCodes?: number;
        createdDate?: string;
        expirationDate?: string;
        active?: boolean;
    };
    relationships?: {
        offerCode?: {
            data?: {
                type: 'subscriptionOfferCodes';
                id: string;
            };
        };
        values?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type SubscriptionOfferCodeOneTimeUseCodesResponse = {
    data: Array<SubscriptionOfferCodeOneTimeUseCode>;
    included?: Array<SubscriptionOfferCode>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionOfferCodeOneTimeUseCodeResponse = {
    data: SubscriptionOfferCodeOneTimeUseCode;
    included?: Array<SubscriptionOfferCode>;
    links: DocumentLinks;
};

export type SubscriptionOfferCodeOneTimeUseCodeCreateRequest = {
    data: {
        type: 'subscriptionOfferCodeOneTimeUseCodes';
        attributes: {
            numberOfCodes: number;
            expirationDate: string;
        };
        relationships: {
            offerCode: {
                data: {
                    type: 'subscriptionOfferCodes';
                    id: string;
                };
            };
        };
    };
};

export type SubscriptionOfferCodeOneTimeUseCodeUpdateRequest = {
    data: {
        type: 'subscriptionOfferCodeOneTimeUseCodes';
        id: string;
        attributes?: {
            active?: boolean;
        };
    };
};

export type SubscriptionOfferCodePrice = {
    type: 'subscriptionOfferCodePrices';
    id: string;
    relationships?: {
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
        subscriptionPricePoint?: {
            data?: {
                type: 'subscriptionPricePoints';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type SubscriptionOfferCodePriceInlineCreate = {
    type: 'subscriptionOfferCodePrices';
    id?: string;
    relationships?: {
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
        subscriptionPricePoint?: {
            data?: {
                type: 'subscriptionPricePoints';
                id: string;
            };
        };
    };
};

export type SubscriptionOfferCodePricesResponse = {
    data: Array<SubscriptionOfferCodePrice>;
    included?: Array<Territory | SubscriptionPricePoint>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionOfferCode = {
    type: 'subscriptionOfferCodes';
    id: string;
    attributes?: {
        name?: string;
        customerEligibilities?: Array<SubscriptionCustomerEligibility>;
        offerEligibility?: SubscriptionOfferEligibility;
        duration?: SubscriptionOfferDuration;
        offerMode?: SubscriptionOfferMode;
        numberOfPeriods?: number;
        totalNumberOfCodes?: number;
        active?: boolean;
    };
    relationships?: {
        subscription?: {
            data?: {
                type: 'subscriptions';
                id: string;
            };
        };
        oneTimeUseCodes?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionOfferCodeOneTimeUseCodes';
                id: string;
            }>;
        };
        customCodes?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionOfferCodeCustomCodes';
                id: string;
            }>;
        };
        prices?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionOfferCodePrices';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type SubscriptionOfferCodesResponse = {
    data: Array<SubscriptionOfferCode>;
    included?: Array<Subscription | SubscriptionOfferCodeOneTimeUseCode | SubscriptionOfferCodeCustomCode | SubscriptionOfferCodePrice>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionOfferCodeResponse = {
    data: SubscriptionOfferCode;
    included?: Array<Subscription | SubscriptionOfferCodeOneTimeUseCode | SubscriptionOfferCodeCustomCode | SubscriptionOfferCodePrice>;
    links: DocumentLinks;
};

export type SubscriptionOfferCodeCreateRequest = {
    data: {
        type: 'subscriptionOfferCodes';
        attributes: {
            name: string;
            customerEligibilities: Array<SubscriptionCustomerEligibility>;
            offerEligibility: SubscriptionOfferEligibility;
            duration: SubscriptionOfferDuration;
            offerMode: SubscriptionOfferMode;
            numberOfPeriods: number;
        };
        relationships: {
            subscription: {
                data: {
                    type: 'subscriptions';
                    id: string;
                };
            };
            prices: {
                data: Array<{
                    type: 'subscriptionOfferCodePrices';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<SubscriptionOfferCodePriceInlineCreate>;
};

export type SubscriptionOfferCodeUpdateRequest = {
    data: {
        type: 'subscriptionOfferCodes';
        id: string;
        attributes?: {
            active?: boolean;
        };
    };
};

export type SubscriptionPricePoint = {
    type: 'subscriptionPricePoints';
    id: string;
    attributes?: {
        customerPrice?: string;
        proceeds?: string;
        proceedsYear2?: string;
    };
    relationships?: {
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
        equalizations?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type SubscriptionPricePointInlineCreate = {
    type: 'subscriptionPricePoints';
    id?: string;
};

export type SubscriptionPricePointsResponse = {
    data: Array<SubscriptionPricePoint>;
    included?: Array<Territory>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionPricePointResponse = {
    data: SubscriptionPricePoint;
    included?: Array<Territory>;
    links: DocumentLinks;
};

export type SubscriptionPrice = {
    type: 'subscriptionPrices';
    id: string;
    attributes?: {
        startDate?: string;
        preserved?: boolean;
    };
    relationships?: {
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
        subscriptionPricePoint?: {
            data?: {
                type: 'subscriptionPricePoints';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type SubscriptionPriceInlineCreate = {
    type: 'subscriptionPrices';
    id?: string;
    attributes?: {
        startDate?: string;
        preserveCurrentPrice?: boolean;
    };
    relationships?: {
        subscription?: {
            data?: {
                type: 'subscriptions';
                id: string;
            };
        };
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
        subscriptionPricePoint?: {
            data?: {
                type: 'subscriptionPricePoints';
                id: string;
            };
        };
    };
};

export type SubscriptionPricesResponse = {
    data: Array<SubscriptionPrice>;
    included?: Array<Territory | SubscriptionPricePoint>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionPriceResponse = {
    data: SubscriptionPrice;
    included?: Array<Territory | SubscriptionPricePoint>;
    links: DocumentLinks;
};

export type SubscriptionPriceCreateRequest = {
    data: {
        type: 'subscriptionPrices';
        attributes?: {
            startDate?: string;
            preserveCurrentPrice?: boolean;
        };
        relationships: {
            subscription: {
                data: {
                    type: 'subscriptions';
                    id: string;
                };
            };
            territory?: {
                data?: {
                    type: 'territories';
                    id: string;
                };
            };
            subscriptionPricePoint: {
                data: {
                    type: 'subscriptionPricePoints';
                    id: string;
                };
            };
        };
    };
};

export type SubscriptionPromotionalOfferPrice = {
    type: 'subscriptionPromotionalOfferPrices';
    id: string;
    relationships?: {
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
        subscriptionPricePoint?: {
            data?: {
                type: 'subscriptionPricePoints';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type SubscriptionPromotionalOfferPriceInlineCreate = {
    type: 'subscriptionPromotionalOfferPrices';
    id?: string;
    relationships?: {
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
        subscriptionPricePoint?: {
            data?: {
                type: 'subscriptionPricePoints';
                id: string;
            };
        };
    };
};

export type SubscriptionPromotionalOfferPricesResponse = {
    data: Array<SubscriptionPromotionalOfferPrice>;
    included?: Array<Territory | SubscriptionPricePoint>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionPromotionalOffer = {
    type: 'subscriptionPromotionalOffers';
    id: string;
    attributes?: {
        name?: string;
        offerCode?: string;
        duration?: SubscriptionOfferDuration;
        offerMode?: SubscriptionOfferMode;
        numberOfPeriods?: number;
    };
    relationships?: {
        subscription?: {
            data?: {
                type: 'subscriptions';
                id: string;
            };
        };
        prices?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionPromotionalOfferPrices';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type SubscriptionPromotionalOfferInlineCreate = {
    type: 'subscriptionPromotionalOffers';
    id?: string;
    attributes: {
        name: string;
        offerCode: string;
        duration: SubscriptionOfferDuration;
        offerMode: SubscriptionOfferMode;
        numberOfPeriods: number;
    };
    relationships?: {
        subscription?: {
            data?: {
                type: 'subscriptions';
                id: string;
            };
        };
        prices?: {
            data?: Array<{
                type: 'subscriptionPromotionalOfferPrices';
                id: string;
            }>;
        };
    };
};

export type SubscriptionPromotionalOffersResponse = {
    data: Array<SubscriptionPromotionalOffer>;
    included?: Array<Subscription | SubscriptionPromotionalOfferPrice>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionPromotionalOfferResponse = {
    data: SubscriptionPromotionalOffer;
    included?: Array<Subscription | SubscriptionPromotionalOfferPrice>;
    links: DocumentLinks;
};

export type SubscriptionPromotionalOfferCreateRequest = {
    data: {
        type: 'subscriptionPromotionalOffers';
        attributes: {
            name: string;
            offerCode: string;
            duration: SubscriptionOfferDuration;
            offerMode: SubscriptionOfferMode;
            numberOfPeriods: number;
        };
        relationships: {
            subscription: {
                data: {
                    type: 'subscriptions';
                    id: string;
                };
            };
            prices: {
                data: Array<{
                    type: 'subscriptionPromotionalOfferPrices';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<SubscriptionPromotionalOfferPriceInlineCreate>;
};

export type SubscriptionPromotionalOfferUpdateRequest = {
    data: {
        type: 'subscriptionPromotionalOffers';
        id: string;
        relationships?: {
            prices?: {
                data?: Array<{
                    type: 'subscriptionPromotionalOfferPrices';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<SubscriptionPromotionalOfferPriceInlineCreate>;
};

export type SubscriptionSubmission = {
    type: 'subscriptionSubmissions';
    id: string;
    relationships?: {
        subscription?: {
            data?: {
                type: 'subscriptions';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type SubscriptionSubmissionResponse = {
    data: SubscriptionSubmission;
    included?: Array<Subscription>;
    links: DocumentLinks;
};

export type SubscriptionSubmissionCreateRequest = {
    data: {
        type: 'subscriptionSubmissions';
        relationships: {
            subscription: {
                data: {
                    type: 'subscriptions';
                    id: string;
                };
            };
        };
    };
};

export type Subscription = {
    type: 'subscriptions';
    id: string;
    attributes?: {
        name?: string;
        productId?: string;
        familySharable?: boolean;
        state?: 'MISSING_METADATA' | 'READY_TO_SUBMIT' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'DEVELOPER_ACTION_NEEDED' | 'PENDING_BINARY_APPROVAL' | 'APPROVED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'REMOVED_FROM_SALE' | 'REJECTED';
        subscriptionPeriod?: 'ONE_WEEK' | 'ONE_MONTH' | 'TWO_MONTHS' | 'THREE_MONTHS' | 'SIX_MONTHS' | 'ONE_YEAR';
        reviewNote?: string;
        groupLevel?: number;
    };
    relationships?: {
        subscriptionLocalizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionLocalizations';
                id: string;
            }>;
        };
        appStoreReviewScreenshot?: {
            links?: RelationshipLinks;
            data?: {
                type: 'subscriptionAppStoreReviewScreenshots';
                id: string;
            };
        };
        group?: {
            data?: {
                type: 'subscriptionGroups';
                id: string;
            };
        };
        introductoryOffers?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionIntroductoryOffers';
                id: string;
            }>;
        };
        promotionalOffers?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionPromotionalOffers';
                id: string;
            }>;
        };
        offerCodes?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionOfferCodes';
                id: string;
            }>;
        };
        prices?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionPrices';
                id: string;
            }>;
        };
        pricePoints?: {
            links?: RelationshipLinks;
        };
        promotedPurchase?: {
            links?: RelationshipLinks;
            data?: {
                type: 'promotedPurchases';
                id: string;
            };
        };
        subscriptionAvailability?: {
            links?: RelationshipLinks;
            data?: {
                type: 'subscriptionAvailabilities';
                id: string;
            };
        };
        winBackOffers?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'winBackOffers';
                id: string;
            }>;
        };
        images?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionImages';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type SubscriptionsResponse = {
    data: Array<Subscription>;
    included?: Array<SubscriptionLocalization | SubscriptionAppStoreReviewScreenshot | SubscriptionGroup | SubscriptionIntroductoryOffer | SubscriptionPromotionalOffer | SubscriptionOfferCode | SubscriptionPrice | PromotedPurchase | SubscriptionAvailability | WinBackOffer | SubscriptionImage>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionResponse = {
    data: Subscription;
    included?: Array<SubscriptionLocalization | SubscriptionAppStoreReviewScreenshot | SubscriptionGroup | SubscriptionIntroductoryOffer | SubscriptionPromotionalOffer | SubscriptionOfferCode | SubscriptionPrice | PromotedPurchase | SubscriptionAvailability | WinBackOffer | SubscriptionImage>;
    links: DocumentLinks;
};

export type SubscriptionCreateRequest = {
    data: {
        type: 'subscriptions';
        attributes: {
            name: string;
            productId: string;
            familySharable?: boolean;
            subscriptionPeriod?: 'ONE_WEEK' | 'ONE_MONTH' | 'TWO_MONTHS' | 'THREE_MONTHS' | 'SIX_MONTHS' | 'ONE_YEAR';
            reviewNote?: string;
            groupLevel?: number;
        };
        relationships: {
            group: {
                data: {
                    type: 'subscriptionGroups';
                    id: string;
                };
            };
        };
    };
};

export type SubscriptionUpdateRequest = {
    data: {
        type: 'subscriptions';
        id: string;
        attributes?: {
            name?: string;
            familySharable?: boolean;
            subscriptionPeriod?: 'ONE_WEEK' | 'ONE_MONTH' | 'TWO_MONTHS' | 'THREE_MONTHS' | 'SIX_MONTHS' | 'ONE_YEAR';
            reviewNote?: string;
            groupLevel?: number;
        };
        relationships?: {
            introductoryOffers?: {
                data?: Array<{
                    type: 'subscriptionIntroductoryOffers';
                    id: string;
                }>;
            };
            promotionalOffers?: {
                data?: Array<{
                    type: 'subscriptionPromotionalOffers';
                    id: string;
                }>;
            };
            prices?: {
                data?: Array<{
                    type: 'subscriptionPrices';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<SubscriptionPromotionalOfferInlineCreate | SubscriptionPriceInlineCreate | SubscriptionIntroductoryOfferInlineCreate>;
};

export type Territory = {
    type: 'territories';
    id: string;
    attributes?: {
        currency?: string;
    };
    links?: ResourceLinks;
};

export type TerritoryInlineCreate = {
    type: 'territories';
    id?: string;
};

export type TerritoriesResponse = {
    data: Array<Territory>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type TerritoryResponse = {
    data: Territory;
    links: DocumentLinks;
};

export type TerritoryAvailability = {
    type: 'territoryAvailabilities';
    id: string;
    attributes?: {
        available?: boolean;
        releaseDate?: string;
        preOrderEnabled?: boolean;
        preOrderPublishDate?: string;
        contentStatuses?: Array<'AVAILABLE' | 'AVAILABLE_FOR_PREORDER_ON_DATE' | 'PROCESSING_TO_NOT_AVAILABLE' | 'PROCESSING_TO_AVAILABLE' | 'PROCESSING_TO_PRE_ORDER' | 'AVAILABLE_FOR_SALE_UNRELEASED_APP' | 'PREORDER_ON_UNRELEASED_APP' | 'AVAILABLE_FOR_PREORDER' | 'MISSING_RATING' | 'CANNOT_SELL_RESTRICTED_RATING' | 'BRAZIL_REQUIRED_TAX_ID' | 'MISSING_GRN' | 'UNVERIFIED_GRN' | 'ICP_NUMBER_INVALID' | 'ICP_NUMBER_MISSING' | 'TRADER_STATUS_NOT_PROVIDED' | 'TRADER_STATUS_VERIFICATION_FAILED' | 'TRADER_STATUS_VERIFICATION_STATUS_MISSING' | 'CANNOT_SELL_SEVENTEEN_PLUS_APPS' | 'CANNOT_SELL_SEXUALLY_EXPLICIT' | 'CANNOT_SELL_NON_IOS_GAMES' | 'CANNOT_SELL_SEVENTEEN_PLUS_GAMES' | 'CANNOT_SELL_FREQUENT_INTENSE_GAMBLING' | 'CANNOT_SELL_CASINO' | 'CANNOT_SELL_CASINO_WITHOUT_GRAC' | 'CANNOT_SELL_CASINO_WITHOUT_AGE_VERIFICATION' | 'CANNOT_SELL_FREQUENT_INTENSE_ALCOHOL_TOBACCO_DRUGS' | 'CANNOT_SELL_FREQUENT_INTENSE_VIOLENCE' | 'CANNOT_SELL_FREQUENT_INTENSE_SEXUAL_CONTENT_NUDITY' | 'CANNOT_SELL_INFREQUENT_MILD_ALCOHOL_TOBACCO_DRUGS' | 'CANNOT_SELL_INFREQUENT_MILD_SEXUAL_CONTENT_NUDITY' | 'CANNOT_SELL_ADULT_ONLY' | 'CANNOT_SELL_FREQUENT_INTENSE' | 'CANNOT_SELL_FREQUENT_INTENSE_WITHOUT_GRAC' | 'CANNOT_SELL_GAMBLING_CONTESTS' | 'CANNOT_SELL_GAMBLING' | 'CANNOT_SELL_CONTESTS' | 'CANNOT_SELL'>;
    };
    relationships?: {
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type TerritoryAvailabilityInlineCreate = {
    type: 'territoryAvailabilities';
    id?: string;
};

export type TerritoryAvailabilitiesResponse = {
    data: Array<TerritoryAvailability>;
    included?: Array<Territory>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type TerritoryAvailabilityResponse = {
    data: TerritoryAvailability;
    included?: Array<Territory>;
    links: DocumentLinks;
};

export type TerritoryAvailabilityUpdateRequest = {
    data: {
        type: 'territoryAvailabilities';
        id: string;
        attributes?: {
            available?: boolean;
            releaseDate?: string;
            preOrderEnabled?: boolean;
        };
    };
};

export type UserInvitation = {
    type: 'userInvitations';
    id: string;
    attributes?: {
        email?: string;
        firstName?: string;
        lastName?: string;
        expirationDate?: string;
        roles?: Array<UserRole>;
        allAppsVisible?: boolean;
        provisioningAllowed?: boolean;
    };
    relationships?: {
        visibleApps?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'apps';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type UserInvitationsResponse = {
    data: Array<UserInvitation>;
    included?: Array<App>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type UserInvitationResponse = {
    data: UserInvitation;
    included?: Array<App>;
    links: DocumentLinks;
};

export type UserInvitationCreateRequest = {
    data: {
        type: 'userInvitations';
        attributes: {
            email: string;
            firstName: string;
            lastName: string;
            roles: Array<UserRole>;
            allAppsVisible?: boolean;
            provisioningAllowed?: boolean;
        };
        relationships?: {
            visibleApps?: {
                data?: Array<{
                    type: 'apps';
                    id: string;
                }>;
            };
        };
    };
};

export type User = {
    type: 'users';
    id: string;
    attributes?: {
        username?: string;
        firstName?: string;
        lastName?: string;
        roles?: Array<UserRole>;
        allAppsVisible?: boolean;
        provisioningAllowed?: boolean;
    };
    relationships?: {
        visibleApps?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'apps';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type UsersResponse = {
    data: Array<User>;
    included?: Array<App>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type UserResponse = {
    data: User;
    included?: Array<App>;
    links: DocumentLinks;
};

export type UserUpdateRequest = {
    data: {
        type: 'users';
        id: string;
        attributes?: {
            roles?: Array<UserRole>;
            allAppsVisible?: boolean;
            provisioningAllowed?: boolean;
        };
        relationships?: {
            visibleApps?: {
                data?: Array<{
                    type: 'apps';
                    id: string;
                }>;
            };
        };
    };
};

export type WinBackOfferPrice = {
    type: 'winBackOfferPrices';
    id: string;
    relationships?: {
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
        subscriptionPricePoint?: {
            data?: {
                type: 'subscriptionPricePoints';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type WinBackOfferPriceInlineCreate = {
    type: 'winBackOfferPrices';
    id?: string;
};

export type WinBackOfferPricesResponse = {
    data: Array<WinBackOfferPrice>;
    included?: Array<Territory | SubscriptionPricePoint>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type WinBackOffer = {
    type: 'winBackOffers';
    id: string;
    attributes?: {
        referenceName?: string;
        offerId?: string;
        duration?: SubscriptionOfferDuration;
        offerMode?: SubscriptionOfferMode;
        periodCount?: number;
        customerEligibilityPaidSubscriptionDurationInMonths?: number;
        customerEligibilityTimeSinceLastSubscribedInMonths?: IntegerRange;
        customerEligibilityWaitBetweenOffersInMonths?: number;
        startDate?: string;
        endDate?: string;
        priority?: 'HIGH' | 'NORMAL';
        promotionIntent?: 'NOT_PROMOTED' | 'USE_AUTO_GENERATED_ASSETS';
    };
    relationships?: {
        prices?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'winBackOfferPrices';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type WinBackOffersResponse = {
    data: Array<WinBackOffer>;
    included?: Array<WinBackOfferPrice>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type WinBackOfferResponse = {
    data: WinBackOffer;
    included?: Array<WinBackOfferPrice>;
    links: DocumentLinks;
};

export type WinBackOfferCreateRequest = {
    data: {
        type: 'winBackOffers';
        attributes: {
            referenceName: string;
            offerId: string;
            duration: SubscriptionOfferDuration;
            offerMode: SubscriptionOfferMode;
            periodCount: number;
            customerEligibilityPaidSubscriptionDurationInMonths: number;
            customerEligibilityTimeSinceLastSubscribedInMonths: IntegerRange;
            customerEligibilityWaitBetweenOffersInMonths?: number;
            startDate: string;
            endDate?: string;
            priority: 'HIGH' | 'NORMAL';
            promotionIntent?: 'NOT_PROMOTED' | 'USE_AUTO_GENERATED_ASSETS';
        };
        relationships: {
            subscription: {
                data: {
                    type: 'subscriptions';
                    id: string;
                };
            };
            prices: {
                data: Array<{
                    type: 'winBackOfferPrices';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<WinBackOfferPriceInlineCreate>;
};

export type WinBackOfferUpdateRequest = {
    data: {
        type: 'winBackOffers';
        id: string;
        attributes?: {
            customerEligibilityPaidSubscriptionDurationInMonths?: number;
            customerEligibilityTimeSinceLastSubscribedInMonths?: IntegerRange;
            customerEligibilityWaitBetweenOffersInMonths?: number;
            startDate?: string;
            endDate?: string;
            priority?: 'HIGH' | 'NORMAL';
            promotionIntent?: 'NOT_PROMOTED' | 'USE_AUTO_GENERATED_ASSETS';
        };
    };
};

export type AppCategoryWithoutIncludesResponse = {
    data: AppCategory;
    links: DocumentLinks;
};

export type AppCategoriesWithoutIncludesResponse = {
    data: Array<AppCategory>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse = {
    data: {
        type: 'appStoreVersions';
        id: string;
    };
    links: DocumentLinks;
};

export type AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest = {
    data: {
        type: 'appStoreVersions';
        id: string;
    };
};

export type AppWithoutIncludesResponse = {
    data: App;
    links: DocumentLinks;
};

/**
 * @deprecated
 */
export type AppEncryptionDeclarationBuildsLinkagesRequest = {
    data: Array<{
        type: 'builds';
        id: string;
    }>;
};

export type AppPreviewSetAppPreviewsLinkagesResponse = {
    data: Array<{
        type: 'appPreviews';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppPreviewSetAppPreviewsLinkagesRequest = {
    data: Array<{
        type: 'appPreviews';
        id: string;
    }>;
};

export type AppScreenshotSetAppScreenshotsLinkagesResponse = {
    data: Array<{
        type: 'appScreenshots';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppScreenshotSetAppScreenshotsLinkagesRequest = {
    data: Array<{
        type: 'appScreenshots';
        id: string;
    }>;
};

export type AgeRatingDeclarationWithoutIncludesResponse = {
    data: AgeRatingDeclaration;
    links: DocumentLinks;
};

export type AppStoreVersionAppClipDefaultExperienceLinkageResponse = {
    data: {
        type: 'appClipDefaultExperiences';
        id: string;
    };
    links: DocumentLinks;
};

export type AppStoreVersionAppClipDefaultExperienceLinkageRequest = {
    data: {
        type: 'appClipDefaultExperiences';
        id: string;
    };
};

export type AppStoreVersionPhasedReleaseWithoutIncludesResponse = {
    data: AppStoreVersionPhasedRelease;
    links: DocumentLinks;
};

export type BuildWithoutIncludesResponse = {
    data: Build;
    links: DocumentLinks;
};

export type AppStoreVersionBuildLinkageResponse = {
    data: {
        type: 'builds';
        id: string;
    };
    links: DocumentLinks;
};

export type AppStoreVersionBuildLinkageRequest = {
    data: {
        type: 'builds';
        id: string;
    };
};

export type RoutingAppCoverageWithoutIncludesResponse = {
    data: RoutingAppCoverage;
    links: DocumentLinks;
};

export type BetaAppLocalizationsWithoutIncludesResponse = {
    data: Array<BetaAppLocalization>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaAppReviewDetailWithoutIncludesResponse = {
    data: BetaAppReviewDetail;
    links: DocumentLinks;
};

export type BetaGroupsWithoutIncludesResponse = {
    data: Array<BetaGroup>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaLicenseAgreementWithoutIncludesResponse = {
    data: BetaLicenseAgreement;
    links: DocumentLinks;
};

export type AppBetaTestersLinkagesRequest = {
    data: Array<{
        type: 'betaTesters';
        id: string;
    }>;
};

export type BuildsWithoutIncludesResponse = {
    data: Array<Build>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type EndUserLicenseAgreementWithoutIncludesResponse = {
    data: EndUserLicenseAgreement;
    links: DocumentLinks;
};

export type PreReleaseVersionsWithoutIncludesResponse = {
    data: Array<PrereleaseVersion>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppPromotedPurchasesLinkagesResponse = {
    data: Array<{
        type: 'promotedPurchases';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppPromotedPurchasesLinkagesRequest = {
    data: Array<{
        type: 'promotedPurchases';
        id: string;
    }>;
};

export type BetaTestersWithoutIncludesResponse = {
    data: Array<BetaTester>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaGroupBetaTestersLinkagesResponse = {
    data: Array<{
        type: 'betaTesters';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaGroupBetaTestersLinkagesRequest = {
    data: Array<{
        type: 'betaTesters';
        id: string;
    }>;
};

export type BetaGroupBuildsLinkagesResponse = {
    data: Array<{
        type: 'builds';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaGroupBuildsLinkagesRequest = {
    data: Array<{
        type: 'builds';
        id: string;
    }>;
};

export type AppsWithoutIncludesResponse = {
    data: Array<App>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaTesterAppsLinkagesResponse = {
    data: Array<{
        type: 'apps';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaTesterAppsLinkagesRequest = {
    data: Array<{
        type: 'apps';
        id: string;
    }>;
};

export type BetaTesterBetaGroupsLinkagesResponse = {
    data: Array<{
        type: 'betaGroups';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaTesterBetaGroupsLinkagesRequest = {
    data: Array<{
        type: 'betaGroups';
        id: string;
    }>;
};

export type BetaTesterBuildsLinkagesResponse = {
    data: Array<{
        type: 'builds';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaTesterBuildsLinkagesRequest = {
    data: Array<{
        type: 'builds';
        id: string;
    }>;
};

export type AppEncryptionDeclarationWithoutIncludesResponse = {
    data: AppEncryptionDeclaration;
    links: DocumentLinks;
};

export type BuildAppEncryptionDeclarationLinkageResponse = {
    data: {
        type: 'appEncryptionDeclarations';
        id: string;
    };
    links: DocumentLinks;
};

export type BuildAppEncryptionDeclarationLinkageRequest = {
    data: {
        type: 'appEncryptionDeclarations';
        id: string;
    };
};

export type BetaAppReviewSubmissionWithoutIncludesResponse = {
    data: BetaAppReviewSubmission;
    links: DocumentLinks;
};

export type BetaBuildLocalizationsWithoutIncludesResponse = {
    data: Array<BetaBuildLocalization>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BuildBetaGroupsLinkagesRequest = {
    data: Array<{
        type: 'betaGroups';
        id: string;
    }>;
};

export type BuildIconsWithoutIncludesResponse = {
    data: Array<BuildIcon>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BuildIndividualTestersLinkagesResponse = {
    data: Array<{
        type: 'betaTesters';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BuildIndividualTestersLinkagesRequest = {
    data: Array<{
        type: 'betaTesters';
        id: string;
    }>;
};

export type PrereleaseVersionWithoutIncludesResponse = {
    data: PrereleaseVersion;
    links: DocumentLinks;
};

export type BundleIdCapabilitiesWithoutIncludesResponse = {
    data: Array<BundleIdCapability>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type ProfilesWithoutIncludesResponse = {
    data: Array<Profile>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type TerritoriesWithoutIncludesResponse = {
    data: Array<Territory>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

/**
 * @deprecated
 */
export type GameCenterAchievementGroupAchievementLinkageResponse = {
    data: {
        type: 'gameCenterAchievements';
        id: string;
    };
    links: DocumentLinks;
};

/**
 * @deprecated
 */
export type GameCenterAchievementGroupAchievementLinkageRequest = {
    data: {
        type: 'gameCenterAchievements';
        id: string;
    };
};

export type GameCenterAppVersionCompatibilityVersionsLinkagesResponse = {
    data: Array<{
        type: 'gameCenterAppVersions';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterAppVersionCompatibilityVersionsLinkagesRequest = {
    data: Array<{
        type: 'gameCenterAppVersions';
        id: string;
    }>;
};

export type GameCenterDetailGameCenterAchievementsLinkagesResponse = {
    data: Array<{
        type: 'gameCenterAchievements';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterDetailGameCenterAchievementsLinkagesRequest = {
    data: Array<{
        type: 'gameCenterAchievements';
        id: string;
    }>;
};

export type GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse = {
    data: Array<{
        type: 'gameCenterLeaderboardSets';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest = {
    data: Array<{
        type: 'gameCenterLeaderboardSets';
        id: string;
    }>;
};

export type GameCenterDetailGameCenterLeaderboardsLinkagesResponse = {
    data: Array<{
        type: 'gameCenterLeaderboards';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterDetailGameCenterLeaderboardsLinkagesRequest = {
    data: Array<{
        type: 'gameCenterLeaderboards';
        id: string;
    }>;
};

/**
 * @deprecated
 */
export type GameCenterEnabledVersionCompatibleVersionsLinkagesResponse = {
    data: Array<{
        type: 'gameCenterEnabledVersions';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

/**
 * @deprecated
 */
export type GameCenterEnabledVersionCompatibleVersionsLinkagesRequest = {
    data: Array<{
        type: 'gameCenterEnabledVersions';
        id: string;
    }>;
};

export type GameCenterGroupGameCenterAchievementsLinkagesResponse = {
    data: Array<{
        type: 'gameCenterAchievements';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterGroupGameCenterAchievementsLinkagesRequest = {
    data: Array<{
        type: 'gameCenterAchievements';
        id: string;
    }>;
};

export type GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse = {
    data: Array<{
        type: 'gameCenterLeaderboardSets';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest = {
    data: Array<{
        type: 'gameCenterLeaderboardSets';
        id: string;
    }>;
};

export type GameCenterGroupGameCenterLeaderboardsLinkagesResponse = {
    data: Array<{
        type: 'gameCenterLeaderboards';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterGroupGameCenterLeaderboardsLinkagesRequest = {
    data: Array<{
        type: 'gameCenterLeaderboards';
        id: string;
    }>;
};

export type GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse = {
    data: Array<{
        type: 'gameCenterLeaderboards';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest = {
    data: Array<{
        type: 'gameCenterLeaderboards';
        id: string;
    }>;
};

/**
 * @deprecated
 */
export type GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse = {
    data: {
        type: 'gameCenterLeaderboardSets';
        id: string;
    };
    links: DocumentLinks;
};

/**
 * @deprecated
 */
export type GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest = {
    data: {
        type: 'gameCenterLeaderboardSets';
        id: string;
    };
};

/**
 * @deprecated
 */
export type GameCenterLeaderboardGroupLeaderboardLinkageResponse = {
    data: {
        type: 'gameCenterLeaderboards';
        id: string;
    };
    links: DocumentLinks;
};

/**
 * @deprecated
 */
export type GameCenterLeaderboardGroupLeaderboardLinkageRequest = {
    data: {
        type: 'gameCenterLeaderboards';
        id: string;
    };
};

export type BundleIdWithoutIncludesResponse = {
    data: BundleId;
    links: DocumentLinks;
};

export type CertificatesWithoutIncludesResponse = {
    data: Array<Certificate>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type DevicesWithoutIncludesResponse = {
    data: Array<Device>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionIntroductoryOffersLinkagesResponse = {
    data: Array<{
        type: 'subscriptionIntroductoryOffers';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionIntroductoryOffersLinkagesRequest = {
    data: Array<{
        type: 'subscriptionIntroductoryOffers';
        id: string;
    }>;
};

export type SubscriptionPricesLinkagesResponse = {
    data: Array<{
        type: 'subscriptionPrices';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionPricesLinkagesRequest = {
    data: Array<{
        type: 'subscriptionPrices';
        id: string;
    }>;
};

export type UserVisibleAppsLinkagesResponse = {
    data: Array<{
        type: 'apps';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type UserVisibleAppsLinkagesRequest = {
    data: Array<{
        type: 'apps';
        id: string;
    }>;
};

export type AppsBetaTesterUsagesV1MetricResponse = {
    data: Array<{
        dataPoints?: {
            start?: string;
            end?: string;
            values?: {
                crashCount?: number;
                sessionCount?: number;
                feedbackCount?: number;
            };
        };
        dimensions?: {
            betaTesters?: {
                links?: {
                    groupBy?: string;
                    related?: string;
                };
                data?: string;
            };
        };
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
    included?: Array<BetaTester>;
};

export type BetaPublicLinkUsagesV1MetricResponse = {
    data: Array<{
        dataPoints?: {
            start?: string;
            end?: string;
            values?: {
                viewCount?: number;
                acceptedCount?: number;
                didNotAcceptCount?: number;
                didNotMeetCriteriaCount?: number;
                notRelevantRatio?: number;
                notClearRatio?: number;
                notInterestingRatio?: number;
            };
        };
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaTesterUsagesV1MetricResponse = {
    data: Array<{
        dataPoints?: {
            start?: string;
            end?: string;
            values?: {
                crashCount?: number;
                sessionCount?: number;
                feedbackCount?: number;
            };
        };
        dimensions?: {
            apps?: {
                links?: {
                    groupBy?: string;
                    related?: string;
                };
                data?: string;
            };
        };
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaBuildUsagesV1MetricResponse = {
    data: Array<{
        dataPoints?: {
            start?: string;
            end?: string;
            values?: {
                crashCount?: number;
                installCount?: number;
                sessionCount?: number;
                feedbackCount?: number;
                inviteCount?: number;
            };
        };
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterMatchmakingAppRequestsV1MetricResponse = {
    data: Array<{
        dataPoints?: {
            start?: string;
            end?: string;
            values?: {
                count?: number;
                averageSecondsInQueue?: number;
                p50SecondsInQueue?: number;
                p95SecondsInQueue?: number;
            };
        };
        dimensions?: {
            result?: {
                links?: {
                    groupBy?: string;
                };
                data?: 'MATCHED' | 'CANCELED' | 'EXPIRED';
            };
        };
        granularity?: 'P1D' | 'PT1H' | 'PT15M';
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterMatchmakingQueueSizesV1MetricResponse = {
    data: Array<{
        dataPoints?: {
            start?: string;
            end?: string;
            values?: {
                count?: number;
                averageNumberOfRequests?: number;
                p50NumberOfRequests?: number;
                p95NumberOfRequests?: number;
            };
        };
        granularity?: 'P1D' | 'PT1H' | 'PT15M';
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterMatchmakingQueueRequestsV1MetricResponse = {
    data: Array<{
        dataPoints?: {
            start?: string;
            end?: string;
            values?: {
                count?: number;
                averageSecondsInQueue?: number;
                p50SecondsInQueue?: number;
                p95SecondsInQueue?: number;
            };
        };
        dimensions?: {
            result?: {
                links?: {
                    groupBy?: string;
                };
                data?: 'MATCHED' | 'CANCELED' | 'EXPIRED';
            };
            gameCenterDetail?: {
                links?: {
                    groupBy?: string;
                    related?: string;
                };
                data?: string;
            };
        };
        granularity?: 'P1D' | 'PT1H' | 'PT15M';
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterMatchmakingSessionsV1MetricResponse = {
    data: Array<{
        dataPoints?: {
            start?: string;
            end?: string;
            values?: {
                count?: number;
                averagePlayerCount?: number;
                p50PlayerCount?: number;
                p95PlayerCount?: number;
            };
        };
        granularity?: 'P1D' | 'PT1H' | 'PT15M';
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterMatchmakingBooleanRuleResultsV1MetricResponse = {
    data: Array<{
        dataPoints?: {
            start?: string;
            end?: string;
            values?: {
                count?: number;
            };
        };
        dimensions?: {
            result?: {
                links?: {
                    groupBy?: string;
                };
                data?: string;
            };
            gameCenterMatchmakingQueue?: {
                links?: {
                    groupBy?: string;
                    related?: string;
                };
                data?: string;
            };
        };
        granularity?: 'P1D' | 'PT1H' | 'PT15M';
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterMatchmakingNumberRuleResultsV1MetricResponse = {
    data: Array<{
        dataPoints?: {
            start?: string;
            end?: string;
            values?: {
                count?: number;
                averageResult?: number;
                p50Result?: number;
                p95Result?: number;
            };
        };
        dimensions?: {
            gameCenterMatchmakingQueue?: {
                links?: {
                    groupBy?: string;
                    related?: string;
                };
                data?: string;
            };
        };
        granularity?: 'P1D' | 'PT1H' | 'PT15M';
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterMatchmakingRuleErrorsV1MetricResponse = {
    data: Array<{
        dataPoints?: {
            start?: string;
            end?: string;
            values?: {
                count?: number;
            };
        };
        dimensions?: {
            gameCenterMatchmakingQueue?: {
                links?: {
                    groupBy?: string;
                    related?: string;
                };
                data?: string;
            };
        };
        granularity?: 'P1D' | 'PT1H' | 'PT15M';
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type ErrorResponse = {
    errors?: Array<{
        id?: string;
        status: string;
        code: string;
        title: string;
        detail: string;
        source?: ErrorSourcePointer | ErrorSourceParameter;
        links?: ErrorLinks;
        meta?: {};
    }>;
};

export type ErrorSourceParameter = {
    parameter: string;
};

export type ErrorSourcePointer = {
    pointer: string;
};

export type ErrorLinks = {
    about?: string;
    associated?: string | {
        href?: string;
        meta?: {
            source?: string;
        };
    };
};

export type PagedDocumentLinks = {
    self: string;
    first?: string;
    next?: string;
};

export type PagingInformation = {
    paging: {
        total?: number;
        limit: number;
    };
};

export type DocumentLinks = {
    self: string;
};

export type ResourceLinks = {
    self?: string;
};

export type RelationshipLinks = {
    self?: string;
    related?: string;
};

export type AppClipAction = 'OPEN' | 'VIEW' | 'PLAY';

export const AppClipAction = {
    OPEN: 'OPEN',
    VIEW: 'VIEW',
    PLAY: 'PLAY'
} as const;

export type AppClipAdvancedExperienceLanguage = 'AR' | 'CA' | 'CS' | 'DA' | 'DE' | 'EL' | 'EN' | 'ES' | 'FI' | 'FR' | 'HE' | 'HI' | 'HR' | 'HU' | 'ID' | 'IT' | 'JA' | 'KO' | 'MS' | 'NL' | 'NO' | 'PL' | 'PT' | 'RO' | 'RU' | 'SK' | 'SV' | 'TH' | 'TR' | 'UK' | 'VI' | 'ZH';

export const AppClipAdvancedExperienceLanguage = {
    AR: 'AR',
    CA: 'CA',
    CS: 'CS',
    DA: 'DA',
    DE: 'DE',
    EL: 'EL',
    EN: 'EN',
    ES: 'ES',
    FI: 'FI',
    FR: 'FR',
    HE: 'HE',
    HI: 'HI',
    HR: 'HR',
    HU: 'HU',
    ID: 'ID',
    IT: 'IT',
    JA: 'JA',
    KO: 'KO',
    MS: 'MS',
    NL: 'NL',
    NO: 'NO',
    PL: 'PL',
    PT: 'PT',
    RO: 'RO',
    RU: 'RU',
    SK: 'SK',
    SV: 'SV',
    TH: 'TH',
    TR: 'TR',
    UK: 'UK',
    VI: 'VI',
    ZH: 'ZH'
} as const;

export type AppEncryptionDeclarationState = 'CREATED' | 'IN_REVIEW' | 'APPROVED' | 'REJECTED' | 'INVALID' | 'EXPIRED';

export const AppEncryptionDeclarationState = {
    CREATED: 'CREATED',
    IN_REVIEW: 'IN_REVIEW',
    APPROVED: 'APPROVED',
    REJECTED: 'REJECTED',
    INVALID: 'INVALID',
    EXPIRED: 'EXPIRED'
} as const;

export type AppEventAssetType = 'EVENT_CARD' | 'EVENT_DETAILS_PAGE';

export const AppEventAssetType = {
    EVENT_CARD: 'EVENT_CARD',
    EVENT_DETAILS_PAGE: 'EVENT_DETAILS_PAGE'
} as const;

export type AppMediaAssetState = {
    errors?: Array<AppMediaStateError>;
    warnings?: Array<AppMediaStateError>;
    state?: 'AWAITING_UPLOAD' | 'UPLOAD_COMPLETE' | 'COMPLETE' | 'FAILED';
};

export type AppMediaPreviewFrameImageState = {
    errors?: Array<AppMediaStateError>;
    warnings?: Array<AppMediaStateError>;
    state?: 'PROCESSING' | 'COMPLETE' | 'FAILED';
};

export type AppMediaStateError = {
    code?: string;
    description?: string;
};

export type AppMediaVideoState = {
    errors?: Array<AppMediaStateError>;
    warnings?: Array<AppMediaStateError>;
    state?: 'AWAITING_UPLOAD' | 'UPLOAD_COMPLETE' | 'PROCESSING' | 'COMPLETE' | 'FAILED';
};

export type AppStoreAgeRating = 'FOUR_PLUS' | 'NINE_PLUS' | 'TWELVE_PLUS' | 'SEVENTEEN_PLUS' | 'UNRATED';

export const AppStoreAgeRating = {
    FOUR_PLUS: 'FOUR_PLUS',
    NINE_PLUS: 'NINE_PLUS',
    TWELVE_PLUS: 'TWELVE_PLUS',
    SEVENTEEN_PLUS: 'SEVENTEEN_PLUS',
    UNRATED: 'UNRATED'
} as const;

export type AppStoreVersionState = 'ACCEPTED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'DEVELOPER_REJECTED' | 'IN_REVIEW' | 'INVALID_BINARY' | 'METADATA_REJECTED' | 'PENDING_APPLE_RELEASE' | 'PENDING_CONTRACT' | 'PENDING_DEVELOPER_RELEASE' | 'PREPARE_FOR_SUBMISSION' | 'PREORDER_READY_FOR_SALE' | 'PROCESSING_FOR_APP_STORE' | 'READY_FOR_REVIEW' | 'READY_FOR_SALE' | 'REJECTED' | 'REMOVED_FROM_SALE' | 'WAITING_FOR_EXPORT_COMPLIANCE' | 'WAITING_FOR_REVIEW' | 'REPLACED_WITH_NEW_VERSION' | 'NOT_APPLICABLE';

export const AppStoreVersionState = {
    ACCEPTED: 'ACCEPTED',
    DEVELOPER_REMOVED_FROM_SALE: 'DEVELOPER_REMOVED_FROM_SALE',
    DEVELOPER_REJECTED: 'DEVELOPER_REJECTED',
    IN_REVIEW: 'IN_REVIEW',
    INVALID_BINARY: 'INVALID_BINARY',
    METADATA_REJECTED: 'METADATA_REJECTED',
    PENDING_APPLE_RELEASE: 'PENDING_APPLE_RELEASE',
    PENDING_CONTRACT: 'PENDING_CONTRACT',
    PENDING_DEVELOPER_RELEASE: 'PENDING_DEVELOPER_RELEASE',
    PREPARE_FOR_SUBMISSION: 'PREPARE_FOR_SUBMISSION',
    PREORDER_READY_FOR_SALE: 'PREORDER_READY_FOR_SALE',
    PROCESSING_FOR_APP_STORE: 'PROCESSING_FOR_APP_STORE',
    READY_FOR_REVIEW: 'READY_FOR_REVIEW',
    READY_FOR_SALE: 'READY_FOR_SALE',
    REJECTED: 'REJECTED',
    REMOVED_FROM_SALE: 'REMOVED_FROM_SALE',
    WAITING_FOR_EXPORT_COMPLIANCE: 'WAITING_FOR_EXPORT_COMPLIANCE',
    WAITING_FOR_REVIEW: 'WAITING_FOR_REVIEW',
    REPLACED_WITH_NEW_VERSION: 'REPLACED_WITH_NEW_VERSION',
    NOT_APPLICABLE: 'NOT_APPLICABLE'
} as const;

export type AppVersionState = 'ACCEPTED' | 'DEVELOPER_REJECTED' | 'IN_REVIEW' | 'INVALID_BINARY' | 'METADATA_REJECTED' | 'PENDING_APPLE_RELEASE' | 'PENDING_DEVELOPER_RELEASE' | 'PREPARE_FOR_SUBMISSION' | 'PROCESSING_FOR_DISTRIBUTION' | 'READY_FOR_DISTRIBUTION' | 'READY_FOR_REVIEW' | 'REJECTED' | 'REPLACED_WITH_NEW_VERSION' | 'WAITING_FOR_EXPORT_COMPLIANCE' | 'WAITING_FOR_REVIEW';

export const AppVersionState = {
    ACCEPTED: 'ACCEPTED',
    DEVELOPER_REJECTED: 'DEVELOPER_REJECTED',
    IN_REVIEW: 'IN_REVIEW',
    INVALID_BINARY: 'INVALID_BINARY',
    METADATA_REJECTED: 'METADATA_REJECTED',
    PENDING_APPLE_RELEASE: 'PENDING_APPLE_RELEASE',
    PENDING_DEVELOPER_RELEASE: 'PENDING_DEVELOPER_RELEASE',
    PREPARE_FOR_SUBMISSION: 'PREPARE_FOR_SUBMISSION',
    PROCESSING_FOR_DISTRIBUTION: 'PROCESSING_FOR_DISTRIBUTION',
    READY_FOR_DISTRIBUTION: 'READY_FOR_DISTRIBUTION',
    READY_FOR_REVIEW: 'READY_FOR_REVIEW',
    REJECTED: 'REJECTED',
    REPLACED_WITH_NEW_VERSION: 'REPLACED_WITH_NEW_VERSION',
    WAITING_FOR_EXPORT_COMPLIANCE: 'WAITING_FOR_EXPORT_COMPLIANCE',
    WAITING_FOR_REVIEW: 'WAITING_FOR_REVIEW'
} as const;

export type BetaInviteType = 'EMAIL' | 'PUBLIC_LINK';

export const BetaInviteType = {
    EMAIL: 'EMAIL',
    PUBLIC_LINK: 'PUBLIC_LINK'
} as const;

export type BetaReviewState = 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'REJECTED' | 'APPROVED';

export const BetaReviewState = {
    WAITING_FOR_REVIEW: 'WAITING_FOR_REVIEW',
    IN_REVIEW: 'IN_REVIEW',
    REJECTED: 'REJECTED',
    APPROVED: 'APPROVED'
} as const;

export type BetaTesterState = 'NOT_INVITED' | 'INVITED' | 'ACCEPTED' | 'INSTALLED' | 'REVOKED';

export const BetaTesterState = {
    NOT_INVITED: 'NOT_INVITED',
    INVITED: 'INVITED',
    ACCEPTED: 'ACCEPTED',
    INSTALLED: 'INSTALLED',
    REVOKED: 'REVOKED'
} as const;

export type BrazilAgeRating = 'L' | 'TEN' | 'TWELVE' | 'FOURTEEN' | 'SIXTEEN' | 'EIGHTEEN';

export const BrazilAgeRating = {
    L: 'L',
    TEN: 'TEN',
    TWELVE: 'TWELVE',
    FOURTEEN: 'FOURTEEN',
    SIXTEEN: 'SIXTEEN',
    EIGHTEEN: 'EIGHTEEN'
} as const;

export type BuildAudienceType = 'INTERNAL_ONLY' | 'APP_STORE_ELIGIBLE';

export const BuildAudienceType = {
    INTERNAL_ONLY: 'INTERNAL_ONLY',
    APP_STORE_ELIGIBLE: 'APP_STORE_ELIGIBLE'
} as const;

export type BundleIdPlatform = 'IOS' | 'MAC_OS' | 'UNIVERSAL';

export const BundleIdPlatform = {
    IOS: 'IOS',
    MAC_OS: 'MAC_OS',
    UNIVERSAL: 'UNIVERSAL'
} as const;

export type CapabilityOption = {
    key?: 'XCODE_5' | 'XCODE_6' | 'COMPLETE_PROTECTION' | 'PROTECTED_UNLESS_OPEN' | 'PROTECTED_UNTIL_FIRST_USER_AUTH' | 'PRIMARY_APP_CONSENT';
    name?: string;
    description?: string;
    enabledByDefault?: boolean;
    enabled?: boolean;
    supportsWildcard?: boolean;
};

export type CapabilitySetting = {
    key?: 'ICLOUD_VERSION' | 'DATA_PROTECTION_PERMISSION_LEVEL' | 'APPLE_ID_AUTH_APP_CONSENT';
    name?: string;
    description?: string;
    enabledByDefault?: boolean;
    visible?: boolean;
    allowedInstances?: 'ENTRY' | 'SINGLE' | 'MULTIPLE';
    minInstances?: number;
    options?: Array<CapabilityOption>;
};

export type CapabilityType = 'ICLOUD' | 'IN_APP_PURCHASE' | 'GAME_CENTER' | 'PUSH_NOTIFICATIONS' | 'WALLET' | 'INTER_APP_AUDIO' | 'MAPS' | 'ASSOCIATED_DOMAINS' | 'PERSONAL_VPN' | 'APP_GROUPS' | 'HEALTHKIT' | 'HOMEKIT' | 'WIRELESS_ACCESSORY_CONFIGURATION' | 'APPLE_PAY' | 'DATA_PROTECTION' | 'SIRIKIT' | 'NETWORK_EXTENSIONS' | 'MULTIPATH' | 'HOT_SPOT' | 'NFC_TAG_READING' | 'CLASSKIT' | 'AUTOFILL_CREDENTIAL_PROVIDER' | 'ACCESS_WIFI_INFORMATION' | 'NETWORK_CUSTOM_PROTOCOL' | 'COREMEDIA_HLS_LOW_LATENCY' | 'SYSTEM_EXTENSION_INSTALL' | 'USER_MANAGEMENT' | 'APPLE_ID_AUTH';

export const CapabilityType = {
    ICLOUD: 'ICLOUD',
    IN_APP_PURCHASE: 'IN_APP_PURCHASE',
    GAME_CENTER: 'GAME_CENTER',
    PUSH_NOTIFICATIONS: 'PUSH_NOTIFICATIONS',
    WALLET: 'WALLET',
    INTER_APP_AUDIO: 'INTER_APP_AUDIO',
    MAPS: 'MAPS',
    ASSOCIATED_DOMAINS: 'ASSOCIATED_DOMAINS',
    PERSONAL_VPN: 'PERSONAL_VPN',
    APP_GROUPS: 'APP_GROUPS',
    HEALTHKIT: 'HEALTHKIT',
    HOMEKIT: 'HOMEKIT',
    WIRELESS_ACCESSORY_CONFIGURATION: 'WIRELESS_ACCESSORY_CONFIGURATION',
    APPLE_PAY: 'APPLE_PAY',
    DATA_PROTECTION: 'DATA_PROTECTION',
    SIRIKIT: 'SIRIKIT',
    NETWORK_EXTENSIONS: 'NETWORK_EXTENSIONS',
    MULTIPATH: 'MULTIPATH',
    HOT_SPOT: 'HOT_SPOT',
    NFC_TAG_READING: 'NFC_TAG_READING',
    CLASSKIT: 'CLASSKIT',
    AUTOFILL_CREDENTIAL_PROVIDER: 'AUTOFILL_CREDENTIAL_PROVIDER',
    ACCESS_WIFI_INFORMATION: 'ACCESS_WIFI_INFORMATION',
    NETWORK_CUSTOM_PROTOCOL: 'NETWORK_CUSTOM_PROTOCOL',
    COREMEDIA_HLS_LOW_LATENCY: 'COREMEDIA_HLS_LOW_LATENCY',
    SYSTEM_EXTENSION_INSTALL: 'SYSTEM_EXTENSION_INSTALL',
    USER_MANAGEMENT: 'USER_MANAGEMENT',
    APPLE_ID_AUTH: 'APPLE_ID_AUTH'
} as const;

export type CertificateType = 'APPLE_PAY' | 'APPLE_PAY_MERCHANT_IDENTITY' | 'APPLE_PAY_PSP_IDENTITY' | 'APPLE_PAY_RSA' | 'DEVELOPER_ID_KEXT' | 'DEVELOPER_ID_KEXT_G2' | 'DEVELOPER_ID_APPLICATION' | 'DEVELOPER_ID_APPLICATION_G2' | 'DEVELOPMENT' | 'DISTRIBUTION' | 'IDENTITY_ACCESS' | 'IOS_DEVELOPMENT' | 'IOS_DISTRIBUTION' | 'MAC_APP_DISTRIBUTION' | 'MAC_INSTALLER_DISTRIBUTION' | 'MAC_APP_DEVELOPMENT' | 'PASS_TYPE_ID' | 'PASS_TYPE_ID_WITH_NFC';

export const CertificateType = {
    APPLE_PAY: 'APPLE_PAY',
    APPLE_PAY_MERCHANT_IDENTITY: 'APPLE_PAY_MERCHANT_IDENTITY',
    APPLE_PAY_PSP_IDENTITY: 'APPLE_PAY_PSP_IDENTITY',
    APPLE_PAY_RSA: 'APPLE_PAY_RSA',
    DEVELOPER_ID_KEXT: 'DEVELOPER_ID_KEXT',
    DEVELOPER_ID_KEXT_G2: 'DEVELOPER_ID_KEXT_G2',
    DEVELOPER_ID_APPLICATION: 'DEVELOPER_ID_APPLICATION',
    DEVELOPER_ID_APPLICATION_G2: 'DEVELOPER_ID_APPLICATION_G2',
    DEVELOPMENT: 'DEVELOPMENT',
    DISTRIBUTION: 'DISTRIBUTION',
    IDENTITY_ACCESS: 'IDENTITY_ACCESS',
    IOS_DEVELOPMENT: 'IOS_DEVELOPMENT',
    IOS_DISTRIBUTION: 'IOS_DISTRIBUTION',
    MAC_APP_DISTRIBUTION: 'MAC_APP_DISTRIBUTION',
    MAC_INSTALLER_DISTRIBUTION: 'MAC_INSTALLER_DISTRIBUTION',
    MAC_APP_DEVELOPMENT: 'MAC_APP_DEVELOPMENT',
    PASS_TYPE_ID: 'PASS_TYPE_ID',
    PASS_TYPE_ID_WITH_NFC: 'PASS_TYPE_ID_WITH_NFC'
} as const;

export type CiAction = {
    name?: string;
    actionType?: CiActionType;
    destination?: 'ANY_IOS_DEVICE' | 'ANY_IOS_SIMULATOR' | 'ANY_TVOS_DEVICE' | 'ANY_TVOS_SIMULATOR' | 'ANY_WATCHOS_DEVICE' | 'ANY_WATCHOS_SIMULATOR' | 'ANY_MAC' | 'ANY_MAC_CATALYST' | 'ANY_VISIONOS_DEVICE' | 'ANY_VISIONOS_SIMULATOR';
    buildDistributionAudience?: BuildAudienceType;
    testConfiguration?: {
        kind?: 'USE_SCHEME_SETTINGS' | 'SPECIFIC_TEST_PLANS';
        testPlanName?: string;
        testDestinations?: Array<CiTestDestination>;
    };
    scheme?: string;
    platform?: 'MACOS' | 'IOS' | 'TVOS' | 'WATCHOS' | 'VISIONOS';
    isRequiredToPass?: boolean;
};

export type CiActionType = 'BUILD' | 'ANALYZE' | 'TEST' | 'ARCHIVE';

export const CiActionType = {
    BUILD: 'BUILD',
    ANALYZE: 'ANALYZE',
    TEST: 'TEST',
    ARCHIVE: 'ARCHIVE'
} as const;

export type CiBranchPatterns = {
    isAllMatch?: boolean;
    patterns?: Array<{
        pattern?: string;
        isPrefix?: boolean;
    }>;
};

export type CiBranchStartCondition = {
    source?: CiBranchPatterns;
    filesAndFoldersRule?: CiFilesAndFoldersRule;
    autoCancel?: boolean;
};

export type CiCompletionStatus = 'SUCCEEDED' | 'FAILED' | 'ERRORED' | 'CANCELED' | 'SKIPPED';

export const CiCompletionStatus = {
    SUCCEEDED: 'SUCCEEDED',
    FAILED: 'FAILED',
    ERRORED: 'ERRORED',
    CANCELED: 'CANCELED',
    SKIPPED: 'SKIPPED'
} as const;

export type CiExecutionProgress = 'PENDING' | 'RUNNING' | 'COMPLETE';

export const CiExecutionProgress = {
    PENDING: 'PENDING',
    RUNNING: 'RUNNING',
    COMPLETE: 'COMPLETE'
} as const;

export type CiFilesAndFoldersRule = {
    mode?: 'START_IF_ANY_FILE_MATCHES' | 'DO_NOT_START_IF_ALL_FILES_MATCH';
    matchers?: Array<CiStartConditionFileMatcher>;
};

export type CiGitRefKind = 'BRANCH' | 'TAG';

export const CiGitRefKind = {
    BRANCH: 'BRANCH',
    TAG: 'TAG'
} as const;

export type CiGitUser = {
    displayName?: string;
    avatarUrl?: string;
};

export type CiIssueCounts = {
    analyzerWarnings?: number;
    errors?: number;
    testFailures?: number;
    warnings?: number;
};

export type CiManualBranchStartCondition = {
    source?: CiBranchPatterns;
};

export type CiManualPullRequestStartCondition = {
    source?: CiBranchPatterns;
    destination?: CiBranchPatterns;
};

export type CiManualTagStartCondition = {
    source?: CiTagPatterns;
};

export type CiPullRequestStartCondition = {
    source?: CiBranchPatterns;
    destination?: CiBranchPatterns;
    filesAndFoldersRule?: CiFilesAndFoldersRule;
    autoCancel?: boolean;
};

export type CiScheduledStartCondition = {
    source?: CiBranchPatterns;
    schedule?: {
        frequency?: 'WEEKLY' | 'DAILY' | 'HOURLY';
        days?: Array<'SUNDAY' | 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY'>;
        hour?: number;
        minute?: number;
        timezone?: string;
    };
};

export type CiStartConditionFileMatcher = {
    directory?: string;
    fileExtension?: string;
    fileName?: string;
};

export type CiTagPatterns = {
    isAllMatch?: boolean;
    patterns?: Array<{
        pattern?: string;
        isPrefix?: boolean;
    }>;
};

export type CiTagStartCondition = {
    source?: CiTagPatterns;
    filesAndFoldersRule?: CiFilesAndFoldersRule;
    autoCancel?: boolean;
};

export type CiTestDestination = {
    deviceTypeName?: string;
    deviceTypeIdentifier?: string;
    runtimeName?: string;
    runtimeIdentifier?: string;
    kind?: CiTestDestinationKind;
};

export type CiTestDestinationKind = 'SIMULATOR' | 'MAC';

export const CiTestDestinationKind = {
    SIMULATOR: 'SIMULATOR',
    MAC: 'MAC'
} as const;

export type CiTestStatus = 'SUCCESS' | 'FAILURE' | 'MIXED' | 'SKIPPED' | 'EXPECTED_FAILURE';

export const CiTestStatus = {
    SUCCESS: 'SUCCESS',
    FAILURE: 'FAILURE',
    MIXED: 'MIXED',
    SKIPPED: 'SKIPPED',
    EXPECTED_FAILURE: 'EXPECTED_FAILURE'
} as const;

export type DeviceFamily = 'IPHONE' | 'IPAD' | 'APPLE_TV' | 'APPLE_WATCH' | 'MAC' | 'VISION';

export const DeviceFamily = {
    IPHONE: 'IPHONE',
    IPAD: 'IPAD',
    APPLE_TV: 'APPLE_TV',
    APPLE_WATCH: 'APPLE_WATCH',
    MAC: 'MAC',
    VISION: 'VISION'
} as const;

export type DeviceFamilyOsVersionFilter = {
    deviceFamily?: DeviceFamily;
    minimumOsInclusive?: string;
    maximumOsInclusive?: string;
};

export type DiagnosticInsight = {
    insightType?: DiagnosticInsightType;
    direction?: DiagnosticInsightDirection;
    referenceVersions?: Array<{
        version?: string;
        value?: number;
    }>;
};

export type DiagnosticInsightDirection = 'UP' | 'DOWN' | 'UNDEFINED';

export const DiagnosticInsightDirection = {
    UP: 'UP',
    DOWN: 'DOWN',
    UNDEFINED: 'UNDEFINED'
} as const;

export type DiagnosticInsightType = 'TREND';

export const DiagnosticInsightType = {
    TREND: 'TREND'
} as const;

export type DiagnosticLogCallStackNode = {
    sampleCount?: number;
    isBlameFrame?: boolean;
    symbolName?: string;
    insightsCategory?: string;
    offsetIntoSymbol?: string;
    binaryName?: string;
    fileName?: string;
    binaryUUID?: string;
    lineNumber?: string;
    address?: string;
    offsetIntoBinaryTextSegment?: string;
    rawFrame?: string;
    subFrames?: Array<DiagnosticLogCallStackNode>;
};

export type ExternalBetaState = 'PROCESSING' | 'PROCESSING_EXCEPTION' | 'MISSING_EXPORT_COMPLIANCE' | 'READY_FOR_BETA_TESTING' | 'IN_BETA_TESTING' | 'EXPIRED' | 'READY_FOR_BETA_SUBMISSION' | 'IN_EXPORT_COMPLIANCE_REVIEW' | 'WAITING_FOR_BETA_REVIEW' | 'IN_BETA_REVIEW' | 'BETA_REJECTED' | 'BETA_APPROVED';

export const ExternalBetaState = {
    PROCESSING: 'PROCESSING',
    PROCESSING_EXCEPTION: 'PROCESSING_EXCEPTION',
    MISSING_EXPORT_COMPLIANCE: 'MISSING_EXPORT_COMPLIANCE',
    READY_FOR_BETA_TESTING: 'READY_FOR_BETA_TESTING',
    IN_BETA_TESTING: 'IN_BETA_TESTING',
    EXPIRED: 'EXPIRED',
    READY_FOR_BETA_SUBMISSION: 'READY_FOR_BETA_SUBMISSION',
    IN_EXPORT_COMPLIANCE_REVIEW: 'IN_EXPORT_COMPLIANCE_REVIEW',
    WAITING_FOR_BETA_REVIEW: 'WAITING_FOR_BETA_REVIEW',
    IN_BETA_REVIEW: 'IN_BETA_REVIEW',
    BETA_REJECTED: 'BETA_REJECTED',
    BETA_APPROVED: 'BETA_APPROVED'
} as const;

export type FileLocation = {
    path?: string;
    lineNumber?: number;
};

export type GameCenterLeaderboardFormatter = 'INTEGER' | 'DECIMAL_POINT_1_PLACE' | 'DECIMAL_POINT_2_PLACE' | 'DECIMAL_POINT_3_PLACE' | 'ELAPSED_TIME_CENTISECOND' | 'ELAPSED_TIME_MINUTE' | 'ELAPSED_TIME_SECOND' | 'MONEY_POUND_DECIMAL' | 'MONEY_POUND' | 'MONEY_DOLLAR_DECIMAL' | 'MONEY_DOLLAR' | 'MONEY_EURO_DECIMAL' | 'MONEY_EURO' | 'MONEY_FRANC_DECIMAL' | 'MONEY_FRANC' | 'MONEY_KRONER_DECIMAL' | 'MONEY_KRONER' | 'MONEY_YEN';

export const GameCenterLeaderboardFormatter = {
    INTEGER: 'INTEGER',
    DECIMAL_POINT_1_PLACE: 'DECIMAL_POINT_1_PLACE',
    DECIMAL_POINT_2_PLACE: 'DECIMAL_POINT_2_PLACE',
    DECIMAL_POINT_3_PLACE: 'DECIMAL_POINT_3_PLACE',
    ELAPSED_TIME_CENTISECOND: 'ELAPSED_TIME_CENTISECOND',
    ELAPSED_TIME_MINUTE: 'ELAPSED_TIME_MINUTE',
    ELAPSED_TIME_SECOND: 'ELAPSED_TIME_SECOND',
    MONEY_POUND_DECIMAL: 'MONEY_POUND_DECIMAL',
    MONEY_POUND: 'MONEY_POUND',
    MONEY_DOLLAR_DECIMAL: 'MONEY_DOLLAR_DECIMAL',
    MONEY_DOLLAR: 'MONEY_DOLLAR',
    MONEY_EURO_DECIMAL: 'MONEY_EURO_DECIMAL',
    MONEY_EURO: 'MONEY_EURO',
    MONEY_FRANC_DECIMAL: 'MONEY_FRANC_DECIMAL',
    MONEY_FRANC: 'MONEY_FRANC',
    MONEY_KRONER_DECIMAL: 'MONEY_KRONER_DECIMAL',
    MONEY_KRONER: 'MONEY_KRONER',
    MONEY_YEN: 'MONEY_YEN'
} as const;

export type GameCenterMatchmakingTeamAssignment = {
    playerId?: string;
    team?: string;
};

export type HttpHeader = {
    name?: string;
    value?: string;
};

export type IconAssetType = 'APP_STORE' | 'MESSAGES_APP_STORE' | 'WATCH_APP_STORE' | 'TV_OS_HOME_SCREEN' | 'TV_OS_TOP_SHELF' | 'ALTERNATE_EXPERIMENT';

export const IconAssetType = {
    APP_STORE: 'APP_STORE',
    MESSAGES_APP_STORE: 'MESSAGES_APP_STORE',
    WATCH_APP_STORE: 'WATCH_APP_STORE',
    TV_OS_HOME_SCREEN: 'TV_OS_HOME_SCREEN',
    TV_OS_TOP_SHELF: 'TV_OS_TOP_SHELF',
    ALTERNATE_EXPERIMENT: 'ALTERNATE_EXPERIMENT'
} as const;

export type ImageAsset = {
    templateUrl?: string;
    width?: number;
    height?: number;
};

export type InAppPurchaseState = 'MISSING_METADATA' | 'WAITING_FOR_UPLOAD' | 'PROCESSING_CONTENT' | 'READY_TO_SUBMIT' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'DEVELOPER_ACTION_NEEDED' | 'PENDING_BINARY_APPROVAL' | 'APPROVED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'REMOVED_FROM_SALE' | 'REJECTED';

export const InAppPurchaseState = {
    MISSING_METADATA: 'MISSING_METADATA',
    WAITING_FOR_UPLOAD: 'WAITING_FOR_UPLOAD',
    PROCESSING_CONTENT: 'PROCESSING_CONTENT',
    READY_TO_SUBMIT: 'READY_TO_SUBMIT',
    WAITING_FOR_REVIEW: 'WAITING_FOR_REVIEW',
    IN_REVIEW: 'IN_REVIEW',
    DEVELOPER_ACTION_NEEDED: 'DEVELOPER_ACTION_NEEDED',
    PENDING_BINARY_APPROVAL: 'PENDING_BINARY_APPROVAL',
    APPROVED: 'APPROVED',
    DEVELOPER_REMOVED_FROM_SALE: 'DEVELOPER_REMOVED_FROM_SALE',
    REMOVED_FROM_SALE: 'REMOVED_FROM_SALE',
    REJECTED: 'REJECTED'
} as const;

export type InAppPurchaseType = 'CONSUMABLE' | 'NON_CONSUMABLE' | 'NON_RENEWING_SUBSCRIPTION';

export const InAppPurchaseType = {
    CONSUMABLE: 'CONSUMABLE',
    NON_CONSUMABLE: 'NON_CONSUMABLE',
    NON_RENEWING_SUBSCRIPTION: 'NON_RENEWING_SUBSCRIPTION'
} as const;

export type IntegerRange = {
    minimum?: number;
    maximum?: number;
};

export type InternalBetaState = 'PROCESSING' | 'PROCESSING_EXCEPTION' | 'MISSING_EXPORT_COMPLIANCE' | 'READY_FOR_BETA_TESTING' | 'IN_BETA_TESTING' | 'EXPIRED' | 'IN_EXPORT_COMPLIANCE_REVIEW';

export const InternalBetaState = {
    PROCESSING: 'PROCESSING',
    PROCESSING_EXCEPTION: 'PROCESSING_EXCEPTION',
    MISSING_EXPORT_COMPLIANCE: 'MISSING_EXPORT_COMPLIANCE',
    READY_FOR_BETA_TESTING: 'READY_FOR_BETA_TESTING',
    IN_BETA_TESTING: 'IN_BETA_TESTING',
    EXPIRED: 'EXPIRED',
    IN_EXPORT_COMPLIANCE_REVIEW: 'IN_EXPORT_COMPLIANCE_REVIEW'
} as const;

export type KidsAgeBand = 'FIVE_AND_UNDER' | 'SIX_TO_EIGHT' | 'NINE_TO_ELEVEN';

export const KidsAgeBand = {
    FIVE_AND_UNDER: 'FIVE_AND_UNDER',
    SIX_TO_EIGHT: 'SIX_TO_EIGHT',
    NINE_TO_ELEVEN: 'NINE_TO_ELEVEN'
} as const;

export type Location = {
    latitude?: number;
    longitude?: number;
};

export type MetricCategory = 'HANG' | 'LAUNCH' | 'MEMORY' | 'DISK' | 'BATTERY' | 'TERMINATION' | 'ANIMATION';

export const MetricCategory = {
    HANG: 'HANG',
    LAUNCH: 'LAUNCH',
    MEMORY: 'MEMORY',
    DISK: 'DISK',
    BATTERY: 'BATTERY',
    TERMINATION: 'TERMINATION',
    ANIMATION: 'ANIMATION'
} as const;

export type MetricsInsight = {
    metricCategory?: MetricCategory;
    latestVersion?: string;
    metric?: string;
    summaryString?: string;
    referenceVersions?: string;
    maxLatestVersionValue?: number;
    subSystemLabel?: string;
    highImpact?: boolean;
    populations?: Array<{
        deltaPercentage?: number;
        percentile?: string;
        summaryString?: string;
        referenceAverageValue?: number;
        latestVersionValue?: number;
        device?: string;
    }>;
};

export type PhasedReleaseState = 'INACTIVE' | 'ACTIVE' | 'PAUSED' | 'COMPLETE';

export const PhasedReleaseState = {
    INACTIVE: 'INACTIVE',
    ACTIVE: 'ACTIVE',
    PAUSED: 'PAUSED',
    COMPLETE: 'COMPLETE'
} as const;

export type Platform = 'IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS';

export const Platform = {
    IOS: 'IOS',
    MAC_OS: 'MAC_OS',
    TV_OS: 'TV_OS',
    VISION_OS: 'VISION_OS'
} as const;

export type PreviewFrameImage = {
    image?: ImageAsset;
    state?: AppMediaPreviewFrameImageState;
};

export type PreviewType = 'IPHONE_67' | 'IPHONE_61' | 'IPHONE_65' | 'IPHONE_58' | 'IPHONE_55' | 'IPHONE_47' | 'IPHONE_40' | 'IPHONE_35' | 'IPAD_PRO_3GEN_129' | 'IPAD_PRO_3GEN_11' | 'IPAD_PRO_129' | 'IPAD_105' | 'IPAD_97' | 'DESKTOP' | 'APPLE_TV' | 'APPLE_VISION_PRO';

export const PreviewType = {
    IPHONE_67: 'IPHONE_67',
    IPHONE_61: 'IPHONE_61',
    IPHONE_65: 'IPHONE_65',
    IPHONE_58: 'IPHONE_58',
    IPHONE_55: 'IPHONE_55',
    IPHONE_47: 'IPHONE_47',
    IPHONE_40: 'IPHONE_40',
    IPHONE_35: 'IPHONE_35',
    IPAD_PRO_3GEN_129: 'IPAD_PRO_3GEN_129',
    IPAD_PRO_3GEN_11: 'IPAD_PRO_3GEN_11',
    IPAD_PRO_129: 'IPAD_PRO_129',
    IPAD_105: 'IPAD_105',
    IPAD_97: 'IPAD_97',
    DESKTOP: 'DESKTOP',
    APPLE_TV: 'APPLE_TV',
    APPLE_VISION_PRO: 'APPLE_VISION_PRO'
} as const;

export type Property = {
    key?: string;
    value?: string;
};

export type ScmProviderType = {
    kind?: 'BITBUCKET_CLOUD' | 'BITBUCKET_SERVER' | 'GITHUB_CLOUD' | 'GITHUB_ENTERPRISE' | 'GITLAB_CLOUD' | 'GITLAB_SELF_MANAGED';
    displayName?: string;
    isOnPremise?: boolean;
};

export type ScreenshotDisplayType = 'APP_IPHONE_67' | 'APP_IPHONE_61' | 'APP_IPHONE_65' | 'APP_IPHONE_58' | 'APP_IPHONE_55' | 'APP_IPHONE_47' | 'APP_IPHONE_40' | 'APP_IPHONE_35' | 'APP_IPAD_PRO_3GEN_129' | 'APP_IPAD_PRO_3GEN_11' | 'APP_IPAD_PRO_129' | 'APP_IPAD_105' | 'APP_IPAD_97' | 'APP_DESKTOP' | 'APP_WATCH_ULTRA' | 'APP_WATCH_SERIES_10' | 'APP_WATCH_SERIES_7' | 'APP_WATCH_SERIES_4' | 'APP_WATCH_SERIES_3' | 'APP_APPLE_TV' | 'APP_APPLE_VISION_PRO' | 'IMESSAGE_APP_IPHONE_67' | 'IMESSAGE_APP_IPHONE_61' | 'IMESSAGE_APP_IPHONE_65' | 'IMESSAGE_APP_IPHONE_58' | 'IMESSAGE_APP_IPHONE_55' | 'IMESSAGE_APP_IPHONE_47' | 'IMESSAGE_APP_IPHONE_40' | 'IMESSAGE_APP_IPAD_PRO_3GEN_129' | 'IMESSAGE_APP_IPAD_PRO_3GEN_11' | 'IMESSAGE_APP_IPAD_PRO_129' | 'IMESSAGE_APP_IPAD_105' | 'IMESSAGE_APP_IPAD_97';

export const ScreenshotDisplayType = {
    APP_IPHONE_67: 'APP_IPHONE_67',
    APP_IPHONE_61: 'APP_IPHONE_61',
    APP_IPHONE_65: 'APP_IPHONE_65',
    APP_IPHONE_58: 'APP_IPHONE_58',
    APP_IPHONE_55: 'APP_IPHONE_55',
    APP_IPHONE_47: 'APP_IPHONE_47',
    APP_IPHONE_40: 'APP_IPHONE_40',
    APP_IPHONE_35: 'APP_IPHONE_35',
    APP_IPAD_PRO_3GEN_129: 'APP_IPAD_PRO_3GEN_129',
    APP_IPAD_PRO_3GEN_11: 'APP_IPAD_PRO_3GEN_11',
    APP_IPAD_PRO_129: 'APP_IPAD_PRO_129',
    APP_IPAD_105: 'APP_IPAD_105',
    APP_IPAD_97: 'APP_IPAD_97',
    APP_DESKTOP: 'APP_DESKTOP',
    APP_WATCH_ULTRA: 'APP_WATCH_ULTRA',
    APP_WATCH_SERIES_10: 'APP_WATCH_SERIES_10',
    APP_WATCH_SERIES_7: 'APP_WATCH_SERIES_7',
    APP_WATCH_SERIES_4: 'APP_WATCH_SERIES_4',
    APP_WATCH_SERIES_3: 'APP_WATCH_SERIES_3',
    APP_APPLE_TV: 'APP_APPLE_TV',
    APP_APPLE_VISION_PRO: 'APP_APPLE_VISION_PRO',
    IMESSAGE_APP_IPHONE_67: 'IMESSAGE_APP_IPHONE_67',
    IMESSAGE_APP_IPHONE_61: 'IMESSAGE_APP_IPHONE_61',
    IMESSAGE_APP_IPHONE_65: 'IMESSAGE_APP_IPHONE_65',
    IMESSAGE_APP_IPHONE_58: 'IMESSAGE_APP_IPHONE_58',
    IMESSAGE_APP_IPHONE_55: 'IMESSAGE_APP_IPHONE_55',
    IMESSAGE_APP_IPHONE_47: 'IMESSAGE_APP_IPHONE_47',
    IMESSAGE_APP_IPHONE_40: 'IMESSAGE_APP_IPHONE_40',
    IMESSAGE_APP_IPAD_PRO_3GEN_129: 'IMESSAGE_APP_IPAD_PRO_3GEN_129',
    IMESSAGE_APP_IPAD_PRO_3GEN_11: 'IMESSAGE_APP_IPAD_PRO_3GEN_11',
    IMESSAGE_APP_IPAD_PRO_129: 'IMESSAGE_APP_IPAD_PRO_129',
    IMESSAGE_APP_IPAD_105: 'IMESSAGE_APP_IPAD_105',
    IMESSAGE_APP_IPAD_97: 'IMESSAGE_APP_IPAD_97'
} as const;

export type SubscriptionCustomerEligibility = 'NEW' | 'EXISTING' | 'EXPIRED';

export const SubscriptionCustomerEligibility = {
    NEW: 'NEW',
    EXISTING: 'EXISTING',
    EXPIRED: 'EXPIRED'
} as const;

export type SubscriptionGracePeriodDuration = 'THREE_DAYS' | 'SIXTEEN_DAYS' | 'TWENTY_EIGHT_DAYS';

export const SubscriptionGracePeriodDuration = {
    THREE_DAYS: 'THREE_DAYS',
    SIXTEEN_DAYS: 'SIXTEEN_DAYS',
    TWENTY_EIGHT_DAYS: 'TWENTY_EIGHT_DAYS'
} as const;

export type SubscriptionOfferDuration = 'THREE_DAYS' | 'ONE_WEEK' | 'TWO_WEEKS' | 'ONE_MONTH' | 'TWO_MONTHS' | 'THREE_MONTHS' | 'SIX_MONTHS' | 'ONE_YEAR';

export const SubscriptionOfferDuration = {
    THREE_DAYS: 'THREE_DAYS',
    ONE_WEEK: 'ONE_WEEK',
    TWO_WEEKS: 'TWO_WEEKS',
    ONE_MONTH: 'ONE_MONTH',
    TWO_MONTHS: 'TWO_MONTHS',
    THREE_MONTHS: 'THREE_MONTHS',
    SIX_MONTHS: 'SIX_MONTHS',
    ONE_YEAR: 'ONE_YEAR'
} as const;

export type SubscriptionOfferEligibility = 'STACK_WITH_INTRO_OFFERS' | 'REPLACE_INTRO_OFFERS';

export const SubscriptionOfferEligibility = {
    STACK_WITH_INTRO_OFFERS: 'STACK_WITH_INTRO_OFFERS',
    REPLACE_INTRO_OFFERS: 'REPLACE_INTRO_OFFERS'
} as const;

export type SubscriptionOfferMode = 'PAY_AS_YOU_GO' | 'PAY_UP_FRONT' | 'FREE_TRIAL';

export const SubscriptionOfferMode = {
    PAY_AS_YOU_GO: 'PAY_AS_YOU_GO',
    PAY_UP_FRONT: 'PAY_UP_FRONT',
    FREE_TRIAL: 'FREE_TRIAL'
} as const;

export type SubscriptionStatusUrlVersion = 'V1' | 'V2';

export const SubscriptionStatusUrlVersion = {
    V1: 'V1',
    V2: 'V2'
} as const;

export type TerritoryCode = 'ABW' | 'AFG' | 'AGO' | 'AIA' | 'ALB' | 'AND' | 'ANT' | 'ARE' | 'ARG' | 'ARM' | 'ASM' | 'ATG' | 'AUS' | 'AUT' | 'AZE' | 'BDI' | 'BEL' | 'BEN' | 'BES' | 'BFA' | 'BGD' | 'BGR' | 'BHR' | 'BHS' | 'BIH' | 'BLR' | 'BLZ' | 'BMU' | 'BOL' | 'BRA' | 'BRB' | 'BRN' | 'BTN' | 'BWA' | 'CAF' | 'CAN' | 'CHE' | 'CHL' | 'CHN' | 'CIV' | 'CMR' | 'COD' | 'COG' | 'COK' | 'COL' | 'COM' | 'CPV' | 'CRI' | 'CUB' | 'CUW' | 'CXR' | 'CYM' | 'CYP' | 'CZE' | 'DEU' | 'DJI' | 'DMA' | 'DNK' | 'DOM' | 'DZA' | 'ECU' | 'EGY' | 'ERI' | 'ESP' | 'EST' | 'ETH' | 'FIN' | 'FJI' | 'FLK' | 'FRA' | 'FRO' | 'FSM' | 'GAB' | 'GBR' | 'GEO' | 'GGY' | 'GHA' | 'GIB' | 'GIN' | 'GLP' | 'GMB' | 'GNB' | 'GNQ' | 'GRC' | 'GRD' | 'GRL' | 'GTM' | 'GUF' | 'GUM' | 'GUY' | 'HKG' | 'HND' | 'HRV' | 'HTI' | 'HUN' | 'IDN' | 'IMN' | 'IND' | 'IRL' | 'IRQ' | 'ISL' | 'ISR' | 'ITA' | 'JAM' | 'JEY' | 'JOR' | 'JPN' | 'KAZ' | 'KEN' | 'KGZ' | 'KHM' | 'KIR' | 'KNA' | 'KOR' | 'KWT' | 'LAO' | 'LBN' | 'LBR' | 'LBY' | 'LCA' | 'LIE' | 'LKA' | 'LSO' | 'LTU' | 'LUX' | 'LVA' | 'MAC' | 'MAR' | 'MCO' | 'MDA' | 'MDG' | 'MDV' | 'MEX' | 'MHL' | 'MKD' | 'MLI' | 'MLT' | 'MMR' | 'MNE' | 'MNG' | 'MNP' | 'MOZ' | 'MRT' | 'MSR' | 'MTQ' | 'MUS' | 'MWI' | 'MYS' | 'MYT' | 'NAM' | 'NCL' | 'NER' | 'NFK' | 'NGA' | 'NIC' | 'NIU' | 'NLD' | 'NOR' | 'NPL' | 'NRU' | 'NZL' | 'OMN' | 'PAK' | 'PAN' | 'PER' | 'PHL' | 'PLW' | 'PNG' | 'POL' | 'PRI' | 'PRT' | 'PRY' | 'PSE' | 'PYF' | 'QAT' | 'REU' | 'ROU' | 'RUS' | 'RWA' | 'SAU' | 'SEN' | 'SGP' | 'SHN' | 'SLB' | 'SLE' | 'SLV' | 'SMR' | 'SOM' | 'SPM' | 'SRB' | 'SSD' | 'STP' | 'SUR' | 'SVK' | 'SVN' | 'SWE' | 'SWZ' | 'SXM' | 'SYC' | 'TCA' | 'TCD' | 'TGO' | 'THA' | 'TJK' | 'TKM' | 'TLS' | 'TON' | 'TTO' | 'TUN' | 'TUR' | 'TUV' | 'TWN' | 'TZA' | 'UGA' | 'UKR' | 'UMI' | 'URY' | 'USA' | 'UZB' | 'VAT' | 'VCT' | 'VEN' | 'VGB' | 'VIR' | 'VNM' | 'VUT' | 'WLF' | 'WSM' | 'YEM' | 'ZAF' | 'ZMB' | 'ZWE';

export const TerritoryCode = {
    ABW: 'ABW',
    AFG: 'AFG',
    AGO: 'AGO',
    AIA: 'AIA',
    ALB: 'ALB',
    AND: 'AND',
    ANT: 'ANT',
    ARE: 'ARE',
    ARG: 'ARG',
    ARM: 'ARM',
    ASM: 'ASM',
    ATG: 'ATG',
    AUS: 'AUS',
    AUT: 'AUT',
    AZE: 'AZE',
    BDI: 'BDI',
    BEL: 'BEL',
    BEN: 'BEN',
    BES: 'BES',
    BFA: 'BFA',
    BGD: 'BGD',
    BGR: 'BGR',
    BHR: 'BHR',
    BHS: 'BHS',
    BIH: 'BIH',
    BLR: 'BLR',
    BLZ: 'BLZ',
    BMU: 'BMU',
    BOL: 'BOL',
    BRA: 'BRA',
    BRB: 'BRB',
    BRN: 'BRN',
    BTN: 'BTN',
    BWA: 'BWA',
    CAF: 'CAF',
    CAN: 'CAN',
    CHE: 'CHE',
    CHL: 'CHL',
    CHN: 'CHN',
    CIV: 'CIV',
    CMR: 'CMR',
    COD: 'COD',
    COG: 'COG',
    COK: 'COK',
    COL: 'COL',
    COM: 'COM',
    CPV: 'CPV',
    CRI: 'CRI',
    CUB: 'CUB',
    CUW: 'CUW',
    CXR: 'CXR',
    CYM: 'CYM',
    CYP: 'CYP',
    CZE: 'CZE',
    DEU: 'DEU',
    DJI: 'DJI',
    DMA: 'DMA',
    DNK: 'DNK',
    DOM: 'DOM',
    DZA: 'DZA',
    ECU: 'ECU',
    EGY: 'EGY',
    ERI: 'ERI',
    ESP: 'ESP',
    EST: 'EST',
    ETH: 'ETH',
    FIN: 'FIN',
    FJI: 'FJI',
    FLK: 'FLK',
    FRA: 'FRA',
    FRO: 'FRO',
    FSM: 'FSM',
    GAB: 'GAB',
    GBR: 'GBR',
    GEO: 'GEO',
    GGY: 'GGY',
    GHA: 'GHA',
    GIB: 'GIB',
    GIN: 'GIN',
    GLP: 'GLP',
    GMB: 'GMB',
    GNB: 'GNB',
    GNQ: 'GNQ',
    GRC: 'GRC',
    GRD: 'GRD',
    GRL: 'GRL',
    GTM: 'GTM',
    GUF: 'GUF',
    GUM: 'GUM',
    GUY: 'GUY',
    HKG: 'HKG',
    HND: 'HND',
    HRV: 'HRV',
    HTI: 'HTI',
    HUN: 'HUN',
    IDN: 'IDN',
    IMN: 'IMN',
    IND: 'IND',
    IRL: 'IRL',
    IRQ: 'IRQ',
    ISL: 'ISL',
    ISR: 'ISR',
    ITA: 'ITA',
    JAM: 'JAM',
    JEY: 'JEY',
    JOR: 'JOR',
    JPN: 'JPN',
    KAZ: 'KAZ',
    KEN: 'KEN',
    KGZ: 'KGZ',
    KHM: 'KHM',
    KIR: 'KIR',
    KNA: 'KNA',
    KOR: 'KOR',
    KWT: 'KWT',
    LAO: 'LAO',
    LBN: 'LBN',
    LBR: 'LBR',
    LBY: 'LBY',
    LCA: 'LCA',
    LIE: 'LIE',
    LKA: 'LKA',
    LSO: 'LSO',
    LTU: 'LTU',
    LUX: 'LUX',
    LVA: 'LVA',
    MAC: 'MAC',
    MAR: 'MAR',
    MCO: 'MCO',
    MDA: 'MDA',
    MDG: 'MDG',
    MDV: 'MDV',
    MEX: 'MEX',
    MHL: 'MHL',
    MKD: 'MKD',
    MLI: 'MLI',
    MLT: 'MLT',
    MMR: 'MMR',
    MNE: 'MNE',
    MNG: 'MNG',
    MNP: 'MNP',
    MOZ: 'MOZ',
    MRT: 'MRT',
    MSR: 'MSR',
    MTQ: 'MTQ',
    MUS: 'MUS',
    MWI: 'MWI',
    MYS: 'MYS',
    MYT: 'MYT',
    NAM: 'NAM',
    NCL: 'NCL',
    NER: 'NER',
    NFK: 'NFK',
    NGA: 'NGA',
    NIC: 'NIC',
    NIU: 'NIU',
    NLD: 'NLD',
    NOR: 'NOR',
    NPL: 'NPL',
    NRU: 'NRU',
    NZL: 'NZL',
    OMN: 'OMN',
    PAK: 'PAK',
    PAN: 'PAN',
    PER: 'PER',
    PHL: 'PHL',
    PLW: 'PLW',
    PNG: 'PNG',
    POL: 'POL',
    PRI: 'PRI',
    PRT: 'PRT',
    PRY: 'PRY',
    PSE: 'PSE',
    PYF: 'PYF',
    QAT: 'QAT',
    REU: 'REU',
    ROU: 'ROU',
    RUS: 'RUS',
    RWA: 'RWA',
    SAU: 'SAU',
    SEN: 'SEN',
    SGP: 'SGP',
    SHN: 'SHN',
    SLB: 'SLB',
    SLE: 'SLE',
    SLV: 'SLV',
    SMR: 'SMR',
    SOM: 'SOM',
    SPM: 'SPM',
    SRB: 'SRB',
    SSD: 'SSD',
    STP: 'STP',
    SUR: 'SUR',
    SVK: 'SVK',
    SVN: 'SVN',
    SWE: 'SWE',
    SWZ: 'SWZ',
    SXM: 'SXM',
    SYC: 'SYC',
    TCA: 'TCA',
    TCD: 'TCD',
    TGO: 'TGO',
    THA: 'THA',
    TJK: 'TJK',
    TKM: 'TKM',
    TLS: 'TLS',
    TON: 'TON',
    TTO: 'TTO',
    TUN: 'TUN',
    TUR: 'TUR',
    TUV: 'TUV',
    TWN: 'TWN',
    TZA: 'TZA',
    UGA: 'UGA',
    UKR: 'UKR',
    UMI: 'UMI',
    URY: 'URY',
    USA: 'USA',
    UZB: 'UZB',
    VAT: 'VAT',
    VCT: 'VCT',
    VEN: 'VEN',
    VGB: 'VGB',
    VIR: 'VIR',
    VNM: 'VNM',
    VUT: 'VUT',
    WLF: 'WLF',
    WSM: 'WSM',
    YEM: 'YEM',
    ZAF: 'ZAF',
    ZMB: 'ZMB',
    ZWE: 'ZWE'
} as const;

export type UploadOperation = {
    method?: string;
    url?: string;
    length?: number;
    offset?: number;
    requestHeaders?: Array<HttpHeader>;
};

export type UserRole = 'ADMIN' | 'FINANCE' | 'ACCOUNT_HOLDER' | 'SALES' | 'MARKETING' | 'APP_MANAGER' | 'DEVELOPER' | 'ACCESS_TO_REPORTS' | 'CUSTOMER_SUPPORT' | 'CREATE_APPS' | 'CLOUD_MANAGED_DEVELOPER_ID' | 'CLOUD_MANAGED_APP_DISTRIBUTION' | 'GENERATE_INDIVIDUAL_KEYS';

export const UserRole = {
    ADMIN: 'ADMIN',
    FINANCE: 'FINANCE',
    ACCOUNT_HOLDER: 'ACCOUNT_HOLDER',
    SALES: 'SALES',
    MARKETING: 'MARKETING',
    APP_MANAGER: 'APP_MANAGER',
    DEVELOPER: 'DEVELOPER',
    ACCESS_TO_REPORTS: 'ACCESS_TO_REPORTS',
    CUSTOMER_SUPPORT: 'CUSTOMER_SUPPORT',
    CREATE_APPS: 'CREATE_APPS',
    CLOUD_MANAGED_DEVELOPER_ID: 'CLOUD_MANAGED_DEVELOPER_ID',
    CLOUD_MANAGED_APP_DISTRIBUTION: 'CLOUD_MANAGED_APP_DISTRIBUTION',
    GENERATE_INDIVIDUAL_KEYS: 'GENERATE_INDIVIDUAL_KEYS'
} as const;

export type Csv = string;

export type DiagnosticLogs = {
    productData?: Array<{
        signatureId?: string;
        diagnosticInsights?: Array<{
            insightsURL?: string;
            insightsCategory?: string;
            insightsString?: string;
        }>;
        diagnosticLogs?: Array<{
            callStackTree?: Array<{
                callStackPerThread?: boolean;
                callStacks?: Array<{
                    callStackRootFrames?: Array<DiagnosticLogCallStackNode>;
                }>;
            }>;
            diagnosticMetaData?: {
                bundleId?: string;
                event?: string;
                osVersion?: string;
                appVersion?: string;
                writesCaused?: string;
                deviceType?: string;
                platformArchitecture?: string;
                eventDetail?: string;
                buildVersion?: string;
            };
        }>;
    }>;
    version?: string;
};

export type Gzip = Blob | File;

export type XcodeMetrics = {
    version?: string;
    insights?: {
        trendingUp?: Array<MetricsInsight>;
        regressions?: Array<MetricsInsight>;
    };
    productData?: Array<{
        platform?: string;
        metricCategories?: Array<{
            identifier?: MetricCategory;
            metrics?: Array<{
                identifier?: string;
                goalKeys?: Array<{
                    goalKey?: string;
                    lowerBound?: number;
                    upperBound?: number;
                }>;
                unit?: {
                    identifier?: string;
                    displayName?: string;
                };
                datasets?: Array<{
                    filterCriteria?: {
                        percentile?: string;
                        device?: string;
                        deviceMarketingName?: string;
                    };
                    points?: Array<{
                        version?: string;
                        value?: number;
                        errorMargin?: number;
                        percentageBreakdown?: {
                            value?: number;
                            subSystemLabel?: string;
                        };
                        goal?: string;
                    }>;
                }>;
            }>;
        }>;
    }>;
};

export type ActorsGetCollectionData = {
    body?: never;
    path?: never;
    query: {
        /**
         * filter by id(s)
         */
        'filter[id]': Array<string>;
        /**
         * the fields to include for returned resources of type actors
         */
        'fields[actors]'?: Array<'actorType' | 'userFirstName' | 'userLastName' | 'userEmail' | 'apiKeyId'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/actors';
};

export type ActorsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type ActorsGetCollectionError = ActorsGetCollectionErrors[keyof ActorsGetCollectionErrors];

export type ActorsGetCollectionResponses = {
    /**
     * List of Actors
     */
    200: ActorsResponse;
};

export type ActorsGetCollectionResponse = ActorsGetCollectionResponses[keyof ActorsGetCollectionResponses];

export type ActorsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type actors
         */
        'fields[actors]'?: Array<'actorType' | 'userFirstName' | 'userLastName' | 'userEmail' | 'apiKeyId'>;
    };
    url: '/v1/actors/{id}';
};

export type ActorsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type ActorsGetInstanceError = ActorsGetInstanceErrors[keyof ActorsGetInstanceErrors];

export type ActorsGetInstanceResponses = {
    /**
     * Single Actor
     */
    200: ActorResponse;
};

export type ActorsGetInstanceResponse = ActorsGetInstanceResponses[keyof ActorsGetInstanceResponses];

export type AgeRatingDeclarationsUpdateInstanceData = {
    /**
     * AgeRatingDeclaration representation
     */
    body: AgeRatingDeclarationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/ageRatingDeclarations/{id}';
};

export type AgeRatingDeclarationsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AgeRatingDeclarationsUpdateInstanceError = AgeRatingDeclarationsUpdateInstanceErrors[keyof AgeRatingDeclarationsUpdateInstanceErrors];

export type AgeRatingDeclarationsUpdateInstanceResponses = {
    /**
     * Single AgeRatingDeclaration
     */
    200: AgeRatingDeclarationResponse;
};

export type AgeRatingDeclarationsUpdateInstanceResponse = AgeRatingDeclarationsUpdateInstanceResponses[keyof AgeRatingDeclarationsUpdateInstanceResponses];

export type AlternativeDistributionDomainsGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * the fields to include for returned resources of type alternativeDistributionDomains
         */
        'fields[alternativeDistributionDomains]'?: Array<'domain' | 'referenceName' | 'createdDate'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/alternativeDistributionDomains';
};

export type AlternativeDistributionDomainsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type AlternativeDistributionDomainsGetCollectionError = AlternativeDistributionDomainsGetCollectionErrors[keyof AlternativeDistributionDomainsGetCollectionErrors];

export type AlternativeDistributionDomainsGetCollectionResponses = {
    /**
     * List of AlternativeDistributionDomains
     */
    200: AlternativeDistributionDomainsResponse;
};

export type AlternativeDistributionDomainsGetCollectionResponse = AlternativeDistributionDomainsGetCollectionResponses[keyof AlternativeDistributionDomainsGetCollectionResponses];

export type AlternativeDistributionDomainsCreateInstanceData = {
    /**
     * AlternativeDistributionDomain representation
     */
    body: AlternativeDistributionDomainCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/alternativeDistributionDomains';
};

export type AlternativeDistributionDomainsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AlternativeDistributionDomainsCreateInstanceError = AlternativeDistributionDomainsCreateInstanceErrors[keyof AlternativeDistributionDomainsCreateInstanceErrors];

export type AlternativeDistributionDomainsCreateInstanceResponses = {
    /**
     * Single AlternativeDistributionDomain
     */
    201: AlternativeDistributionDomainResponse;
};

export type AlternativeDistributionDomainsCreateInstanceResponse = AlternativeDistributionDomainsCreateInstanceResponses[keyof AlternativeDistributionDomainsCreateInstanceResponses];

export type AlternativeDistributionDomainsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/alternativeDistributionDomains/{id}';
};

export type AlternativeDistributionDomainsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AlternativeDistributionDomainsDeleteInstanceError = AlternativeDistributionDomainsDeleteInstanceErrors[keyof AlternativeDistributionDomainsDeleteInstanceErrors];

export type AlternativeDistributionDomainsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AlternativeDistributionDomainsDeleteInstanceResponse = AlternativeDistributionDomainsDeleteInstanceResponses[keyof AlternativeDistributionDomainsDeleteInstanceResponses];

export type AlternativeDistributionDomainsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type alternativeDistributionDomains
         */
        'fields[alternativeDistributionDomains]'?: Array<'domain' | 'referenceName' | 'createdDate'>;
    };
    url: '/v1/alternativeDistributionDomains/{id}';
};

export type AlternativeDistributionDomainsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AlternativeDistributionDomainsGetInstanceError = AlternativeDistributionDomainsGetInstanceErrors[keyof AlternativeDistributionDomainsGetInstanceErrors];

export type AlternativeDistributionDomainsGetInstanceResponses = {
    /**
     * Single AlternativeDistributionDomain
     */
    200: AlternativeDistributionDomainResponse;
};

export type AlternativeDistributionDomainsGetInstanceResponse = AlternativeDistributionDomainsGetInstanceResponses[keyof AlternativeDistributionDomainsGetInstanceResponses];

export type AlternativeDistributionKeysGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * filter by existence or non-existence of related 'app'
         */
        'exists[app]'?: boolean;
        /**
         * the fields to include for returned resources of type alternativeDistributionKeys
         */
        'fields[alternativeDistributionKeys]'?: Array<'publicKey'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/alternativeDistributionKeys';
};

export type AlternativeDistributionKeysGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type AlternativeDistributionKeysGetCollectionError = AlternativeDistributionKeysGetCollectionErrors[keyof AlternativeDistributionKeysGetCollectionErrors];

export type AlternativeDistributionKeysGetCollectionResponses = {
    /**
     * List of AlternativeDistributionKeys
     */
    200: AlternativeDistributionKeysResponse;
};

export type AlternativeDistributionKeysGetCollectionResponse = AlternativeDistributionKeysGetCollectionResponses[keyof AlternativeDistributionKeysGetCollectionResponses];

export type AlternativeDistributionKeysCreateInstanceData = {
    /**
     * AlternativeDistributionKey representation
     */
    body: AlternativeDistributionKeyCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/alternativeDistributionKeys';
};

export type AlternativeDistributionKeysCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AlternativeDistributionKeysCreateInstanceError = AlternativeDistributionKeysCreateInstanceErrors[keyof AlternativeDistributionKeysCreateInstanceErrors];

export type AlternativeDistributionKeysCreateInstanceResponses = {
    /**
     * Single AlternativeDistributionKey
     */
    201: AlternativeDistributionKeyResponse;
};

export type AlternativeDistributionKeysCreateInstanceResponse = AlternativeDistributionKeysCreateInstanceResponses[keyof AlternativeDistributionKeysCreateInstanceResponses];

export type AlternativeDistributionKeysDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/alternativeDistributionKeys/{id}';
};

export type AlternativeDistributionKeysDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AlternativeDistributionKeysDeleteInstanceError = AlternativeDistributionKeysDeleteInstanceErrors[keyof AlternativeDistributionKeysDeleteInstanceErrors];

export type AlternativeDistributionKeysDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AlternativeDistributionKeysDeleteInstanceResponse = AlternativeDistributionKeysDeleteInstanceResponses[keyof AlternativeDistributionKeysDeleteInstanceResponses];

export type AlternativeDistributionKeysGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type alternativeDistributionKeys
         */
        'fields[alternativeDistributionKeys]'?: Array<'publicKey'>;
    };
    url: '/v1/alternativeDistributionKeys/{id}';
};

export type AlternativeDistributionKeysGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AlternativeDistributionKeysGetInstanceError = AlternativeDistributionKeysGetInstanceErrors[keyof AlternativeDistributionKeysGetInstanceErrors];

export type AlternativeDistributionKeysGetInstanceResponses = {
    /**
     * Single AlternativeDistributionKey
     */
    200: AlternativeDistributionKeyResponse;
};

export type AlternativeDistributionKeysGetInstanceResponse = AlternativeDistributionKeysGetInstanceResponses[keyof AlternativeDistributionKeysGetInstanceResponses];

export type AlternativeDistributionPackageDeltasGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageDeltas
         */
        'fields[alternativeDistributionPackageDeltas]'?: Array<'url' | 'urlExpirationDate' | 'alternativeDistributionKeyBlob' | 'fileChecksum'>;
    };
    url: '/v1/alternativeDistributionPackageDeltas/{id}';
};

export type AlternativeDistributionPackageDeltasGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AlternativeDistributionPackageDeltasGetInstanceError = AlternativeDistributionPackageDeltasGetInstanceErrors[keyof AlternativeDistributionPackageDeltasGetInstanceErrors];

export type AlternativeDistributionPackageDeltasGetInstanceResponses = {
    /**
     * Single AlternativeDistributionPackageDelta
     */
    200: AlternativeDistributionPackageDeltaResponse;
};

export type AlternativeDistributionPackageDeltasGetInstanceResponse = AlternativeDistributionPackageDeltasGetInstanceResponses[keyof AlternativeDistributionPackageDeltasGetInstanceResponses];

export type AlternativeDistributionPackageVariantsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageVariants
         */
        'fields[alternativeDistributionPackageVariants]'?: Array<'url' | 'urlExpirationDate' | 'alternativeDistributionKeyBlob' | 'fileChecksum'>;
    };
    url: '/v1/alternativeDistributionPackageVariants/{id}';
};

export type AlternativeDistributionPackageVariantsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AlternativeDistributionPackageVariantsGetInstanceError = AlternativeDistributionPackageVariantsGetInstanceErrors[keyof AlternativeDistributionPackageVariantsGetInstanceErrors];

export type AlternativeDistributionPackageVariantsGetInstanceResponses = {
    /**
     * Single AlternativeDistributionPackageVariant
     */
    200: AlternativeDistributionPackageVariantResponse;
};

export type AlternativeDistributionPackageVariantsGetInstanceResponse = AlternativeDistributionPackageVariantsGetInstanceResponses[keyof AlternativeDistributionPackageVariantsGetInstanceResponses];

export type AlternativeDistributionPackageVersionsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageVersions
         */
        'fields[alternativeDistributionPackageVersions]'?: Array<'url' | 'urlExpirationDate' | 'version' | 'fileChecksum' | 'state' | 'variants' | 'deltas' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageVariants
         */
        'fields[alternativeDistributionPackageVariants]'?: Array<'url' | 'urlExpirationDate' | 'alternativeDistributionKeyBlob' | 'fileChecksum'>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageDeltas
         */
        'fields[alternativeDistributionPackageDeltas]'?: Array<'url' | 'urlExpirationDate' | 'alternativeDistributionKeyBlob' | 'fileChecksum'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'variants' | 'deltas' | 'alternativeDistributionPackage'>;
        /**
         * maximum number of related deltas returned (when they are included)
         */
        'limit[deltas]'?: number;
        /**
         * maximum number of related variants returned (when they are included)
         */
        'limit[variants]'?: number;
    };
    url: '/v1/alternativeDistributionPackageVersions/{id}';
};

export type AlternativeDistributionPackageVersionsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AlternativeDistributionPackageVersionsGetInstanceError = AlternativeDistributionPackageVersionsGetInstanceErrors[keyof AlternativeDistributionPackageVersionsGetInstanceErrors];

export type AlternativeDistributionPackageVersionsGetInstanceResponses = {
    /**
     * Single AlternativeDistributionPackageVersion
     */
    200: AlternativeDistributionPackageVersionResponse;
};

export type AlternativeDistributionPackageVersionsGetInstanceResponse = AlternativeDistributionPackageVersionsGetInstanceResponses[keyof AlternativeDistributionPackageVersionsGetInstanceResponses];

export type AlternativeDistributionPackagesCreateInstanceData = {
    /**
     * AlternativeDistributionPackage representation
     */
    body: AlternativeDistributionPackageCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/alternativeDistributionPackages';
};

export type AlternativeDistributionPackagesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AlternativeDistributionPackagesCreateInstanceError = AlternativeDistributionPackagesCreateInstanceErrors[keyof AlternativeDistributionPackagesCreateInstanceErrors];

export type AlternativeDistributionPackagesCreateInstanceResponses = {
    /**
     * Single AlternativeDistributionPackage
     */
    201: AlternativeDistributionPackageResponse;
};

export type AlternativeDistributionPackagesCreateInstanceResponse = AlternativeDistributionPackagesCreateInstanceResponses[keyof AlternativeDistributionPackagesCreateInstanceResponses];

export type AlternativeDistributionPackagesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type alternativeDistributionPackages
         */
        'fields[alternativeDistributionPackages]'?: Array<'versions'>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageVersions
         */
        'fields[alternativeDistributionPackageVersions]'?: Array<'url' | 'urlExpirationDate' | 'version' | 'fileChecksum' | 'state' | 'variants' | 'deltas' | 'alternativeDistributionPackage'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'versions'>;
        /**
         * maximum number of related versions returned (when they are included)
         */
        'limit[versions]'?: number;
    };
    url: '/v1/alternativeDistributionPackages/{id}';
};

export type AlternativeDistributionPackagesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AlternativeDistributionPackagesGetInstanceError = AlternativeDistributionPackagesGetInstanceErrors[keyof AlternativeDistributionPackagesGetInstanceErrors];

export type AlternativeDistributionPackagesGetInstanceResponses = {
    /**
     * Single AlternativeDistributionPackage
     */
    200: AlternativeDistributionPackageResponse;
};

export type AlternativeDistributionPackagesGetInstanceResponse = AlternativeDistributionPackagesGetInstanceResponses[keyof AlternativeDistributionPackagesGetInstanceResponses];

export type AnalyticsReportInstancesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type analyticsReportInstances
         */
        'fields[analyticsReportInstances]'?: Array<'granularity' | 'processingDate' | 'segments'>;
    };
    url: '/v1/analyticsReportInstances/{id}';
};

export type AnalyticsReportInstancesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AnalyticsReportInstancesGetInstanceError = AnalyticsReportInstancesGetInstanceErrors[keyof AnalyticsReportInstancesGetInstanceErrors];

export type AnalyticsReportInstancesGetInstanceResponses = {
    /**
     * Single AnalyticsReportInstance
     */
    200: AnalyticsReportInstanceResponse;
};

export type AnalyticsReportInstancesGetInstanceResponse = AnalyticsReportInstancesGetInstanceResponses[keyof AnalyticsReportInstancesGetInstanceResponses];

export type AnalyticsReportRequestsCreateInstanceData = {
    /**
     * AnalyticsReportRequest representation
     */
    body: AnalyticsReportRequestCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/analyticsReportRequests';
};

export type AnalyticsReportRequestsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AnalyticsReportRequestsCreateInstanceError = AnalyticsReportRequestsCreateInstanceErrors[keyof AnalyticsReportRequestsCreateInstanceErrors];

export type AnalyticsReportRequestsCreateInstanceResponses = {
    /**
     * Single AnalyticsReportRequest
     */
    201: AnalyticsReportRequestResponse;
};

export type AnalyticsReportRequestsCreateInstanceResponse = AnalyticsReportRequestsCreateInstanceResponses[keyof AnalyticsReportRequestsCreateInstanceResponses];

export type AnalyticsReportRequestsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/analyticsReportRequests/{id}';
};

export type AnalyticsReportRequestsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AnalyticsReportRequestsDeleteInstanceError = AnalyticsReportRequestsDeleteInstanceErrors[keyof AnalyticsReportRequestsDeleteInstanceErrors];

export type AnalyticsReportRequestsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AnalyticsReportRequestsDeleteInstanceResponse = AnalyticsReportRequestsDeleteInstanceResponses[keyof AnalyticsReportRequestsDeleteInstanceResponses];

export type AnalyticsReportRequestsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type analyticsReportRequests
         */
        'fields[analyticsReportRequests]'?: Array<'accessType' | 'stoppedDueToInactivity' | 'reports'>;
        /**
         * the fields to include for returned resources of type analyticsReports
         */
        'fields[analyticsReports]'?: Array<'name' | 'category' | 'instances'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'reports'>;
        /**
         * maximum number of related reports returned (when they are included)
         */
        'limit[reports]'?: number;
    };
    url: '/v1/analyticsReportRequests/{id}';
};

export type AnalyticsReportRequestsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AnalyticsReportRequestsGetInstanceError = AnalyticsReportRequestsGetInstanceErrors[keyof AnalyticsReportRequestsGetInstanceErrors];

export type AnalyticsReportRequestsGetInstanceResponses = {
    /**
     * Single AnalyticsReportRequest
     */
    200: AnalyticsReportRequestResponse;
};

export type AnalyticsReportRequestsGetInstanceResponse = AnalyticsReportRequestsGetInstanceResponses[keyof AnalyticsReportRequestsGetInstanceResponses];

export type AnalyticsReportSegmentsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type analyticsReportSegments
         */
        'fields[analyticsReportSegments]'?: Array<'checksum' | 'sizeInBytes' | 'url'>;
    };
    url: '/v1/analyticsReportSegments/{id}';
};

export type AnalyticsReportSegmentsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AnalyticsReportSegmentsGetInstanceError = AnalyticsReportSegmentsGetInstanceErrors[keyof AnalyticsReportSegmentsGetInstanceErrors];

export type AnalyticsReportSegmentsGetInstanceResponses = {
    /**
     * Single AnalyticsReportSegment
     */
    200: AnalyticsReportSegmentResponse;
};

export type AnalyticsReportSegmentsGetInstanceResponse = AnalyticsReportSegmentsGetInstanceResponses[keyof AnalyticsReportSegmentsGetInstanceResponses];

export type AnalyticsReportsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type analyticsReports
         */
        'fields[analyticsReports]'?: Array<'name' | 'category' | 'instances'>;
    };
    url: '/v1/analyticsReports/{id}';
};

export type AnalyticsReportsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AnalyticsReportsGetInstanceError = AnalyticsReportsGetInstanceErrors[keyof AnalyticsReportsGetInstanceErrors];

export type AnalyticsReportsGetInstanceResponses = {
    /**
     * Single AnalyticsReport
     */
    200: AnalyticsReportResponse;
};

export type AnalyticsReportsGetInstanceResponse = AnalyticsReportsGetInstanceResponses[keyof AnalyticsReportsGetInstanceResponses];

export type AppAvailabilitiesV2CreateInstanceData = {
    /**
     * AppAvailability representation
     */
    body: AppAvailabilityV2CreateRequest;
    path?: never;
    query?: never;
    url: '/v2/appAvailabilities';
};

export type AppAvailabilitiesV2CreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppAvailabilitiesV2CreateInstanceError = AppAvailabilitiesV2CreateInstanceErrors[keyof AppAvailabilitiesV2CreateInstanceErrors];

export type AppAvailabilitiesV2CreateInstanceResponses = {
    /**
     * Single AppAvailability
     */
    201: AppAvailabilityV2Response;
};

export type AppAvailabilitiesV2CreateInstanceResponse = AppAvailabilitiesV2CreateInstanceResponses[keyof AppAvailabilitiesV2CreateInstanceResponses];

export type AppAvailabilitiesV2GetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appAvailabilities
         */
        'fields[appAvailabilities]'?: Array<'availableInNewTerritories' | 'territoryAvailabilities'>;
        /**
         * the fields to include for returned resources of type territoryAvailabilities
         */
        'fields[territoryAvailabilities]'?: Array<'available' | 'releaseDate' | 'preOrderEnabled' | 'preOrderPublishDate' | 'contentStatuses' | 'territory'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'territoryAvailabilities'>;
        /**
         * maximum number of related territoryAvailabilities returned (when they are included)
         */
        'limit[territoryAvailabilities]'?: number;
    };
    url: '/v2/appAvailabilities/{id}';
};

export type AppAvailabilitiesV2GetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppAvailabilitiesV2GetInstanceError = AppAvailabilitiesV2GetInstanceErrors[keyof AppAvailabilitiesV2GetInstanceErrors];

export type AppAvailabilitiesV2GetInstanceResponses = {
    /**
     * Single AppAvailability
     */
    200: AppAvailabilityV2Response;
};

export type AppAvailabilitiesV2GetInstanceResponse = AppAvailabilitiesV2GetInstanceResponses[keyof AppAvailabilitiesV2GetInstanceResponses];

export type AppCategoriesGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * filter by attribute 'platforms'
         */
        'filter[platforms]'?: Array<'IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS'>;
        /**
         * filter by existence or non-existence of related 'parent'
         */
        'exists[parent]'?: boolean;
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<'platforms' | 'subcategories' | 'parent'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subcategories' | 'parent'>;
        /**
         * maximum number of related subcategories returned (when they are included)
         */
        'limit[subcategories]'?: number;
    };
    url: '/v1/appCategories';
};

export type AppCategoriesGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type AppCategoriesGetCollectionError = AppCategoriesGetCollectionErrors[keyof AppCategoriesGetCollectionErrors];

export type AppCategoriesGetCollectionResponses = {
    /**
     * List of AppCategories
     */
    200: AppCategoriesResponse;
};

export type AppCategoriesGetCollectionResponse = AppCategoriesGetCollectionResponses[keyof AppCategoriesGetCollectionResponses];

export type AppCategoriesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<'platforms' | 'subcategories' | 'parent'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subcategories' | 'parent'>;
        /**
         * maximum number of related subcategories returned (when they are included)
         */
        'limit[subcategories]'?: number;
    };
    url: '/v1/appCategories/{id}';
};

export type AppCategoriesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppCategoriesGetInstanceError = AppCategoriesGetInstanceErrors[keyof AppCategoriesGetInstanceErrors];

export type AppCategoriesGetInstanceResponses = {
    /**
     * Single AppCategory
     */
    200: AppCategoryResponse;
};

export type AppCategoriesGetInstanceResponse = AppCategoriesGetInstanceResponses[keyof AppCategoriesGetInstanceResponses];

export type AppClipAdvancedExperienceImagesCreateInstanceData = {
    /**
     * AppClipAdvancedExperienceImage representation
     */
    body: AppClipAdvancedExperienceImageCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appClipAdvancedExperienceImages';
};

export type AppClipAdvancedExperienceImagesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppClipAdvancedExperienceImagesCreateInstanceError = AppClipAdvancedExperienceImagesCreateInstanceErrors[keyof AppClipAdvancedExperienceImagesCreateInstanceErrors];

export type AppClipAdvancedExperienceImagesCreateInstanceResponses = {
    /**
     * Single AppClipAdvancedExperienceImage
     */
    201: AppClipAdvancedExperienceImageResponse;
};

export type AppClipAdvancedExperienceImagesCreateInstanceResponse = AppClipAdvancedExperienceImagesCreateInstanceResponses[keyof AppClipAdvancedExperienceImagesCreateInstanceResponses];

export type AppClipAdvancedExperienceImagesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipAdvancedExperienceImages
         */
        'fields[appClipAdvancedExperienceImages]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState'>;
    };
    url: '/v1/appClipAdvancedExperienceImages/{id}';
};

export type AppClipAdvancedExperienceImagesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppClipAdvancedExperienceImagesGetInstanceError = AppClipAdvancedExperienceImagesGetInstanceErrors[keyof AppClipAdvancedExperienceImagesGetInstanceErrors];

export type AppClipAdvancedExperienceImagesGetInstanceResponses = {
    /**
     * Single AppClipAdvancedExperienceImage
     */
    200: AppClipAdvancedExperienceImageResponse;
};

export type AppClipAdvancedExperienceImagesGetInstanceResponse = AppClipAdvancedExperienceImagesGetInstanceResponses[keyof AppClipAdvancedExperienceImagesGetInstanceResponses];

export type AppClipAdvancedExperienceImagesUpdateInstanceData = {
    /**
     * AppClipAdvancedExperienceImage representation
     */
    body: AppClipAdvancedExperienceImageUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appClipAdvancedExperienceImages/{id}';
};

export type AppClipAdvancedExperienceImagesUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppClipAdvancedExperienceImagesUpdateInstanceError = AppClipAdvancedExperienceImagesUpdateInstanceErrors[keyof AppClipAdvancedExperienceImagesUpdateInstanceErrors];

export type AppClipAdvancedExperienceImagesUpdateInstanceResponses = {
    /**
     * Single AppClipAdvancedExperienceImage
     */
    200: AppClipAdvancedExperienceImageResponse;
};

export type AppClipAdvancedExperienceImagesUpdateInstanceResponse = AppClipAdvancedExperienceImagesUpdateInstanceResponses[keyof AppClipAdvancedExperienceImagesUpdateInstanceResponses];

export type AppClipAdvancedExperiencesCreateInstanceData = {
    /**
     * AppClipAdvancedExperience representation
     */
    body: AppClipAdvancedExperienceCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appClipAdvancedExperiences';
};

export type AppClipAdvancedExperiencesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppClipAdvancedExperiencesCreateInstanceError = AppClipAdvancedExperiencesCreateInstanceErrors[keyof AppClipAdvancedExperiencesCreateInstanceErrors];

export type AppClipAdvancedExperiencesCreateInstanceResponses = {
    /**
     * Single AppClipAdvancedExperience
     */
    201: AppClipAdvancedExperienceResponse;
};

export type AppClipAdvancedExperiencesCreateInstanceResponse = AppClipAdvancedExperiencesCreateInstanceResponses[keyof AppClipAdvancedExperiencesCreateInstanceResponses];

export type AppClipAdvancedExperiencesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipAdvancedExperiences
         */
        'fields[appClipAdvancedExperiences]'?: Array<'link' | 'version' | 'status' | 'action' | 'isPoweredBy' | 'place' | 'placeStatus' | 'businessCategory' | 'defaultLanguage' | 'appClip' | 'headerImage' | 'localizations'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appClip' | 'headerImage' | 'localizations'>;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
    };
    url: '/v1/appClipAdvancedExperiences/{id}';
};

export type AppClipAdvancedExperiencesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppClipAdvancedExperiencesGetInstanceError = AppClipAdvancedExperiencesGetInstanceErrors[keyof AppClipAdvancedExperiencesGetInstanceErrors];

export type AppClipAdvancedExperiencesGetInstanceResponses = {
    /**
     * Single AppClipAdvancedExperience
     */
    200: AppClipAdvancedExperienceResponse;
};

export type AppClipAdvancedExperiencesGetInstanceResponse = AppClipAdvancedExperiencesGetInstanceResponses[keyof AppClipAdvancedExperiencesGetInstanceResponses];

export type AppClipAdvancedExperiencesUpdateInstanceData = {
    /**
     * AppClipAdvancedExperience representation
     */
    body: AppClipAdvancedExperienceUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appClipAdvancedExperiences/{id}';
};

export type AppClipAdvancedExperiencesUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppClipAdvancedExperiencesUpdateInstanceError = AppClipAdvancedExperiencesUpdateInstanceErrors[keyof AppClipAdvancedExperiencesUpdateInstanceErrors];

export type AppClipAdvancedExperiencesUpdateInstanceResponses = {
    /**
     * Single AppClipAdvancedExperience
     */
    200: AppClipAdvancedExperienceResponse;
};

export type AppClipAdvancedExperiencesUpdateInstanceResponse = AppClipAdvancedExperiencesUpdateInstanceResponses[keyof AppClipAdvancedExperiencesUpdateInstanceResponses];

export type AppClipAppStoreReviewDetailsCreateInstanceData = {
    /**
     * AppClipAppStoreReviewDetail representation
     */
    body: AppClipAppStoreReviewDetailCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appClipAppStoreReviewDetails';
};

export type AppClipAppStoreReviewDetailsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppClipAppStoreReviewDetailsCreateInstanceError = AppClipAppStoreReviewDetailsCreateInstanceErrors[keyof AppClipAppStoreReviewDetailsCreateInstanceErrors];

export type AppClipAppStoreReviewDetailsCreateInstanceResponses = {
    /**
     * Single AppClipAppStoreReviewDetail
     */
    201: AppClipAppStoreReviewDetailResponse;
};

export type AppClipAppStoreReviewDetailsCreateInstanceResponse = AppClipAppStoreReviewDetailsCreateInstanceResponses[keyof AppClipAppStoreReviewDetailsCreateInstanceResponses];

export type AppClipAppStoreReviewDetailsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipAppStoreReviewDetails
         */
        'fields[appClipAppStoreReviewDetails]'?: Array<'invocationUrls' | 'appClipDefaultExperience'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appClipDefaultExperience'>;
    };
    url: '/v1/appClipAppStoreReviewDetails/{id}';
};

export type AppClipAppStoreReviewDetailsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppClipAppStoreReviewDetailsGetInstanceError = AppClipAppStoreReviewDetailsGetInstanceErrors[keyof AppClipAppStoreReviewDetailsGetInstanceErrors];

export type AppClipAppStoreReviewDetailsGetInstanceResponses = {
    /**
     * Single AppClipAppStoreReviewDetail
     */
    200: AppClipAppStoreReviewDetailResponse;
};

export type AppClipAppStoreReviewDetailsGetInstanceResponse = AppClipAppStoreReviewDetailsGetInstanceResponses[keyof AppClipAppStoreReviewDetailsGetInstanceResponses];

export type AppClipAppStoreReviewDetailsUpdateInstanceData = {
    /**
     * AppClipAppStoreReviewDetail representation
     */
    body: AppClipAppStoreReviewDetailUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appClipAppStoreReviewDetails/{id}';
};

export type AppClipAppStoreReviewDetailsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppClipAppStoreReviewDetailsUpdateInstanceError = AppClipAppStoreReviewDetailsUpdateInstanceErrors[keyof AppClipAppStoreReviewDetailsUpdateInstanceErrors];

export type AppClipAppStoreReviewDetailsUpdateInstanceResponses = {
    /**
     * Single AppClipAppStoreReviewDetail
     */
    200: AppClipAppStoreReviewDetailResponse;
};

export type AppClipAppStoreReviewDetailsUpdateInstanceResponse = AppClipAppStoreReviewDetailsUpdateInstanceResponses[keyof AppClipAppStoreReviewDetailsUpdateInstanceResponses];

export type AppClipDefaultExperienceLocalizationsCreateInstanceData = {
    /**
     * AppClipDefaultExperienceLocalization representation
     */
    body: AppClipDefaultExperienceLocalizationCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appClipDefaultExperienceLocalizations';
};

export type AppClipDefaultExperienceLocalizationsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppClipDefaultExperienceLocalizationsCreateInstanceError = AppClipDefaultExperienceLocalizationsCreateInstanceErrors[keyof AppClipDefaultExperienceLocalizationsCreateInstanceErrors];

export type AppClipDefaultExperienceLocalizationsCreateInstanceResponses = {
    /**
     * Single AppClipDefaultExperienceLocalization
     */
    201: AppClipDefaultExperienceLocalizationResponse;
};

export type AppClipDefaultExperienceLocalizationsCreateInstanceResponse = AppClipDefaultExperienceLocalizationsCreateInstanceResponses[keyof AppClipDefaultExperienceLocalizationsCreateInstanceResponses];

export type AppClipDefaultExperienceLocalizationsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appClipDefaultExperienceLocalizations/{id}';
};

export type AppClipDefaultExperienceLocalizationsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AppClipDefaultExperienceLocalizationsDeleteInstanceError = AppClipDefaultExperienceLocalizationsDeleteInstanceErrors[keyof AppClipDefaultExperienceLocalizationsDeleteInstanceErrors];

export type AppClipDefaultExperienceLocalizationsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppClipDefaultExperienceLocalizationsDeleteInstanceResponse = AppClipDefaultExperienceLocalizationsDeleteInstanceResponses[keyof AppClipDefaultExperienceLocalizationsDeleteInstanceResponses];

export type AppClipDefaultExperienceLocalizationsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipDefaultExperienceLocalizations
         */
        'fields[appClipDefaultExperienceLocalizations]'?: Array<'locale' | 'subtitle' | 'appClipDefaultExperience' | 'appClipHeaderImage'>;
        /**
         * the fields to include for returned resources of type appClipHeaderImages
         */
        'fields[appClipHeaderImages]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'appClipDefaultExperienceLocalization'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appClipDefaultExperience' | 'appClipHeaderImage'>;
    };
    url: '/v1/appClipDefaultExperienceLocalizations/{id}';
};

export type AppClipDefaultExperienceLocalizationsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppClipDefaultExperienceLocalizationsGetInstanceError = AppClipDefaultExperienceLocalizationsGetInstanceErrors[keyof AppClipDefaultExperienceLocalizationsGetInstanceErrors];

export type AppClipDefaultExperienceLocalizationsGetInstanceResponses = {
    /**
     * Single AppClipDefaultExperienceLocalization
     */
    200: AppClipDefaultExperienceLocalizationResponse;
};

export type AppClipDefaultExperienceLocalizationsGetInstanceResponse = AppClipDefaultExperienceLocalizationsGetInstanceResponses[keyof AppClipDefaultExperienceLocalizationsGetInstanceResponses];

export type AppClipDefaultExperienceLocalizationsUpdateInstanceData = {
    /**
     * AppClipDefaultExperienceLocalization representation
     */
    body: AppClipDefaultExperienceLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appClipDefaultExperienceLocalizations/{id}';
};

export type AppClipDefaultExperienceLocalizationsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppClipDefaultExperienceLocalizationsUpdateInstanceError = AppClipDefaultExperienceLocalizationsUpdateInstanceErrors[keyof AppClipDefaultExperienceLocalizationsUpdateInstanceErrors];

export type AppClipDefaultExperienceLocalizationsUpdateInstanceResponses = {
    /**
     * Single AppClipDefaultExperienceLocalization
     */
    200: AppClipDefaultExperienceLocalizationResponse;
};

export type AppClipDefaultExperienceLocalizationsUpdateInstanceResponse = AppClipDefaultExperienceLocalizationsUpdateInstanceResponses[keyof AppClipDefaultExperienceLocalizationsUpdateInstanceResponses];

export type AppClipDefaultExperiencesCreateInstanceData = {
    /**
     * AppClipDefaultExperience representation
     */
    body: AppClipDefaultExperienceCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appClipDefaultExperiences';
};

export type AppClipDefaultExperiencesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppClipDefaultExperiencesCreateInstanceError = AppClipDefaultExperiencesCreateInstanceErrors[keyof AppClipDefaultExperiencesCreateInstanceErrors];

export type AppClipDefaultExperiencesCreateInstanceResponses = {
    /**
     * Single AppClipDefaultExperience
     */
    201: AppClipDefaultExperienceResponse;
};

export type AppClipDefaultExperiencesCreateInstanceResponse = AppClipDefaultExperiencesCreateInstanceResponses[keyof AppClipDefaultExperiencesCreateInstanceResponses];

export type AppClipDefaultExperiencesDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appClipDefaultExperiences/{id}';
};

export type AppClipDefaultExperiencesDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AppClipDefaultExperiencesDeleteInstanceError = AppClipDefaultExperiencesDeleteInstanceErrors[keyof AppClipDefaultExperiencesDeleteInstanceErrors];

export type AppClipDefaultExperiencesDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppClipDefaultExperiencesDeleteInstanceResponse = AppClipDefaultExperiencesDeleteInstanceResponses[keyof AppClipDefaultExperiencesDeleteInstanceResponses];

export type AppClipDefaultExperiencesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<'action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail'>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperienceLocalizations
         */
        'fields[appClipDefaultExperienceLocalizations]'?: Array<'locale' | 'subtitle' | 'appClipDefaultExperience' | 'appClipHeaderImage'>;
        /**
         * the fields to include for returned resources of type appClipAppStoreReviewDetails
         */
        'fields[appClipAppStoreReviewDetails]'?: Array<'invocationUrls' | 'appClipDefaultExperience'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail'>;
        /**
         * maximum number of related appClipDefaultExperienceLocalizations returned (when they are included)
         */
        'limit[appClipDefaultExperienceLocalizations]'?: number;
    };
    url: '/v1/appClipDefaultExperiences/{id}';
};

export type AppClipDefaultExperiencesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppClipDefaultExperiencesGetInstanceError = AppClipDefaultExperiencesGetInstanceErrors[keyof AppClipDefaultExperiencesGetInstanceErrors];

export type AppClipDefaultExperiencesGetInstanceResponses = {
    /**
     * Single AppClipDefaultExperience
     */
    200: AppClipDefaultExperienceResponse;
};

export type AppClipDefaultExperiencesGetInstanceResponse = AppClipDefaultExperiencesGetInstanceResponses[keyof AppClipDefaultExperiencesGetInstanceResponses];

export type AppClipDefaultExperiencesUpdateInstanceData = {
    /**
     * AppClipDefaultExperience representation
     */
    body: AppClipDefaultExperienceUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appClipDefaultExperiences/{id}';
};

export type AppClipDefaultExperiencesUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppClipDefaultExperiencesUpdateInstanceError = AppClipDefaultExperiencesUpdateInstanceErrors[keyof AppClipDefaultExperiencesUpdateInstanceErrors];

export type AppClipDefaultExperiencesUpdateInstanceResponses = {
    /**
     * Single AppClipDefaultExperience
     */
    200: AppClipDefaultExperienceResponse;
};

export type AppClipDefaultExperiencesUpdateInstanceResponse = AppClipDefaultExperiencesUpdateInstanceResponses[keyof AppClipDefaultExperiencesUpdateInstanceResponses];

export type AppClipHeaderImagesCreateInstanceData = {
    /**
     * AppClipHeaderImage representation
     */
    body: AppClipHeaderImageCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appClipHeaderImages';
};

export type AppClipHeaderImagesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppClipHeaderImagesCreateInstanceError = AppClipHeaderImagesCreateInstanceErrors[keyof AppClipHeaderImagesCreateInstanceErrors];

export type AppClipHeaderImagesCreateInstanceResponses = {
    /**
     * Single AppClipHeaderImage
     */
    201: AppClipHeaderImageResponse;
};

export type AppClipHeaderImagesCreateInstanceResponse = AppClipHeaderImagesCreateInstanceResponses[keyof AppClipHeaderImagesCreateInstanceResponses];

export type AppClipHeaderImagesDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appClipHeaderImages/{id}';
};

export type AppClipHeaderImagesDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AppClipHeaderImagesDeleteInstanceError = AppClipHeaderImagesDeleteInstanceErrors[keyof AppClipHeaderImagesDeleteInstanceErrors];

export type AppClipHeaderImagesDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppClipHeaderImagesDeleteInstanceResponse = AppClipHeaderImagesDeleteInstanceResponses[keyof AppClipHeaderImagesDeleteInstanceResponses];

export type AppClipHeaderImagesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipHeaderImages
         */
        'fields[appClipHeaderImages]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'appClipDefaultExperienceLocalization'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appClipDefaultExperienceLocalization'>;
    };
    url: '/v1/appClipHeaderImages/{id}';
};

export type AppClipHeaderImagesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppClipHeaderImagesGetInstanceError = AppClipHeaderImagesGetInstanceErrors[keyof AppClipHeaderImagesGetInstanceErrors];

export type AppClipHeaderImagesGetInstanceResponses = {
    /**
     * Single AppClipHeaderImage
     */
    200: AppClipHeaderImageResponse;
};

export type AppClipHeaderImagesGetInstanceResponse = AppClipHeaderImagesGetInstanceResponses[keyof AppClipHeaderImagesGetInstanceResponses];

export type AppClipHeaderImagesUpdateInstanceData = {
    /**
     * AppClipHeaderImage representation
     */
    body: AppClipHeaderImageUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appClipHeaderImages/{id}';
};

export type AppClipHeaderImagesUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppClipHeaderImagesUpdateInstanceError = AppClipHeaderImagesUpdateInstanceErrors[keyof AppClipHeaderImagesUpdateInstanceErrors];

export type AppClipHeaderImagesUpdateInstanceResponses = {
    /**
     * Single AppClipHeaderImage
     */
    200: AppClipHeaderImageResponse;
};

export type AppClipHeaderImagesUpdateInstanceResponse = AppClipHeaderImagesUpdateInstanceResponses[keyof AppClipHeaderImagesUpdateInstanceResponses];

export type AppClipsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClips
         */
        'fields[appClips]'?: Array<'bundleId' | 'app' | 'appClipDefaultExperiences' | 'appClipAdvancedExperiences'>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<'action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'appClipDefaultExperiences'>;
        /**
         * maximum number of related appClipDefaultExperiences returned (when they are included)
         */
        'limit[appClipDefaultExperiences]'?: number;
    };
    url: '/v1/appClips/{id}';
};

export type AppClipsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppClipsGetInstanceError = AppClipsGetInstanceErrors[keyof AppClipsGetInstanceErrors];

export type AppClipsGetInstanceResponses = {
    /**
     * Single AppClip
     */
    200: AppClipResponse;
};

export type AppClipsGetInstanceResponse = AppClipsGetInstanceResponses[keyof AppClipsGetInstanceResponses];

export type AppCustomProductPageLocalizationsCreateInstanceData = {
    /**
     * AppCustomProductPageLocalization representation
     */
    body: AppCustomProductPageLocalizationCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appCustomProductPageLocalizations';
};

export type AppCustomProductPageLocalizationsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppCustomProductPageLocalizationsCreateInstanceError = AppCustomProductPageLocalizationsCreateInstanceErrors[keyof AppCustomProductPageLocalizationsCreateInstanceErrors];

export type AppCustomProductPageLocalizationsCreateInstanceResponses = {
    /**
     * Single AppCustomProductPageLocalization
     */
    201: AppCustomProductPageLocalizationResponse;
};

export type AppCustomProductPageLocalizationsCreateInstanceResponse = AppCustomProductPageLocalizationsCreateInstanceResponses[keyof AppCustomProductPageLocalizationsCreateInstanceResponses];

export type AppCustomProductPageLocalizationsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appCustomProductPageLocalizations/{id}';
};

export type AppCustomProductPageLocalizationsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AppCustomProductPageLocalizationsDeleteInstanceError = AppCustomProductPageLocalizationsDeleteInstanceErrors[keyof AppCustomProductPageLocalizationsDeleteInstanceErrors];

export type AppCustomProductPageLocalizationsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppCustomProductPageLocalizationsDeleteInstanceResponse = AppCustomProductPageLocalizationsDeleteInstanceResponses[keyof AppCustomProductPageLocalizationsDeleteInstanceResponses];

export type AppCustomProductPageLocalizationsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCustomProductPageLocalizations
         */
        'fields[appCustomProductPageLocalizations]'?: Array<'locale' | 'promotionalText' | 'appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appScreenshotSets
         */
        'fields[appScreenshotSets]'?: Array<'screenshotDisplayType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots'>;
        /**
         * the fields to include for returned resources of type appPreviewSets
         */
        'fields[appPreviewSets]'?: Array<'previewType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * maximum number of related appPreviewSets returned (when they are included)
         */
        'limit[appPreviewSets]'?: number;
        /**
         * maximum number of related appScreenshotSets returned (when they are included)
         */
        'limit[appScreenshotSets]'?: number;
    };
    url: '/v1/appCustomProductPageLocalizations/{id}';
};

export type AppCustomProductPageLocalizationsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppCustomProductPageLocalizationsGetInstanceError = AppCustomProductPageLocalizationsGetInstanceErrors[keyof AppCustomProductPageLocalizationsGetInstanceErrors];

export type AppCustomProductPageLocalizationsGetInstanceResponses = {
    /**
     * Single AppCustomProductPageLocalization
     */
    200: AppCustomProductPageLocalizationResponse;
};

export type AppCustomProductPageLocalizationsGetInstanceResponse = AppCustomProductPageLocalizationsGetInstanceResponses[keyof AppCustomProductPageLocalizationsGetInstanceResponses];

export type AppCustomProductPageLocalizationsUpdateInstanceData = {
    /**
     * AppCustomProductPageLocalization representation
     */
    body: AppCustomProductPageLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appCustomProductPageLocalizations/{id}';
};

export type AppCustomProductPageLocalizationsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppCustomProductPageLocalizationsUpdateInstanceError = AppCustomProductPageLocalizationsUpdateInstanceErrors[keyof AppCustomProductPageLocalizationsUpdateInstanceErrors];

export type AppCustomProductPageLocalizationsUpdateInstanceResponses = {
    /**
     * Single AppCustomProductPageLocalization
     */
    200: AppCustomProductPageLocalizationResponse;
};

export type AppCustomProductPageLocalizationsUpdateInstanceResponse = AppCustomProductPageLocalizationsUpdateInstanceResponses[keyof AppCustomProductPageLocalizationsUpdateInstanceResponses];

export type AppCustomProductPageVersionsCreateInstanceData = {
    /**
     * AppCustomProductPageVersion representation
     */
    body: AppCustomProductPageVersionCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appCustomProductPageVersions';
};

export type AppCustomProductPageVersionsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppCustomProductPageVersionsCreateInstanceError = AppCustomProductPageVersionsCreateInstanceErrors[keyof AppCustomProductPageVersionsCreateInstanceErrors];

export type AppCustomProductPageVersionsCreateInstanceResponses = {
    /**
     * Single AppCustomProductPageVersion
     */
    201: AppCustomProductPageVersionResponse;
};

export type AppCustomProductPageVersionsCreateInstanceResponse = AppCustomProductPageVersionsCreateInstanceResponses[keyof AppCustomProductPageVersionsCreateInstanceResponses];

export type AppCustomProductPageVersionsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCustomProductPageVersions
         */
        'fields[appCustomProductPageVersions]'?: Array<'version' | 'state' | 'deepLink' | 'appCustomProductPage' | 'appCustomProductPageLocalizations'>;
        /**
         * the fields to include for returned resources of type appCustomProductPageLocalizations
         */
        'fields[appCustomProductPageLocalizations]'?: Array<'locale' | 'promotionalText' | 'appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appCustomProductPage' | 'appCustomProductPageLocalizations'>;
        /**
         * maximum number of related appCustomProductPageLocalizations returned (when they are included)
         */
        'limit[appCustomProductPageLocalizations]'?: number;
    };
    url: '/v1/appCustomProductPageVersions/{id}';
};

export type AppCustomProductPageVersionsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppCustomProductPageVersionsGetInstanceError = AppCustomProductPageVersionsGetInstanceErrors[keyof AppCustomProductPageVersionsGetInstanceErrors];

export type AppCustomProductPageVersionsGetInstanceResponses = {
    /**
     * Single AppCustomProductPageVersion
     */
    200: AppCustomProductPageVersionResponse;
};

export type AppCustomProductPageVersionsGetInstanceResponse = AppCustomProductPageVersionsGetInstanceResponses[keyof AppCustomProductPageVersionsGetInstanceResponses];

export type AppCustomProductPageVersionsUpdateInstanceData = {
    /**
     * AppCustomProductPageVersion representation
     */
    body: AppCustomProductPageVersionUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appCustomProductPageVersions/{id}';
};

export type AppCustomProductPageVersionsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppCustomProductPageVersionsUpdateInstanceError = AppCustomProductPageVersionsUpdateInstanceErrors[keyof AppCustomProductPageVersionsUpdateInstanceErrors];

export type AppCustomProductPageVersionsUpdateInstanceResponses = {
    /**
     * Single AppCustomProductPageVersion
     */
    200: AppCustomProductPageVersionResponse;
};

export type AppCustomProductPageVersionsUpdateInstanceResponse = AppCustomProductPageVersionsUpdateInstanceResponses[keyof AppCustomProductPageVersionsUpdateInstanceResponses];

export type AppCustomProductPagesCreateInstanceData = {
    /**
     * AppCustomProductPage representation
     */
    body: AppCustomProductPageCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appCustomProductPages';
};

export type AppCustomProductPagesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppCustomProductPagesCreateInstanceError = AppCustomProductPagesCreateInstanceErrors[keyof AppCustomProductPagesCreateInstanceErrors];

export type AppCustomProductPagesCreateInstanceResponses = {
    /**
     * Single AppCustomProductPage
     */
    201: AppCustomProductPageResponse;
};

export type AppCustomProductPagesCreateInstanceResponse = AppCustomProductPagesCreateInstanceResponses[keyof AppCustomProductPagesCreateInstanceResponses];

export type AppCustomProductPagesDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appCustomProductPages/{id}';
};

export type AppCustomProductPagesDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AppCustomProductPagesDeleteInstanceError = AppCustomProductPagesDeleteInstanceErrors[keyof AppCustomProductPagesDeleteInstanceErrors];

export type AppCustomProductPagesDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppCustomProductPagesDeleteInstanceResponse = AppCustomProductPagesDeleteInstanceResponses[keyof AppCustomProductPagesDeleteInstanceResponses];

export type AppCustomProductPagesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCustomProductPages
         */
        'fields[appCustomProductPages]'?: Array<'name' | 'url' | 'visible' | 'app' | 'appCustomProductPageVersions'>;
        /**
         * the fields to include for returned resources of type appCustomProductPageVersions
         */
        'fields[appCustomProductPageVersions]'?: Array<'version' | 'state' | 'deepLink' | 'appCustomProductPage' | 'appCustomProductPageLocalizations'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'appCustomProductPageVersions'>;
        /**
         * maximum number of related appCustomProductPageVersions returned (when they are included)
         */
        'limit[appCustomProductPageVersions]'?: number;
    };
    url: '/v1/appCustomProductPages/{id}';
};

export type AppCustomProductPagesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppCustomProductPagesGetInstanceError = AppCustomProductPagesGetInstanceErrors[keyof AppCustomProductPagesGetInstanceErrors];

export type AppCustomProductPagesGetInstanceResponses = {
    /**
     * Single AppCustomProductPage
     */
    200: AppCustomProductPageResponse;
};

export type AppCustomProductPagesGetInstanceResponse = AppCustomProductPagesGetInstanceResponses[keyof AppCustomProductPagesGetInstanceResponses];

export type AppCustomProductPagesUpdateInstanceData = {
    /**
     * AppCustomProductPage representation
     */
    body: AppCustomProductPageUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appCustomProductPages/{id}';
};

export type AppCustomProductPagesUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppCustomProductPagesUpdateInstanceError = AppCustomProductPagesUpdateInstanceErrors[keyof AppCustomProductPagesUpdateInstanceErrors];

export type AppCustomProductPagesUpdateInstanceResponses = {
    /**
     * Single AppCustomProductPage
     */
    200: AppCustomProductPageResponse;
};

export type AppCustomProductPagesUpdateInstanceResponse = AppCustomProductPagesUpdateInstanceResponses[keyof AppCustomProductPagesUpdateInstanceResponses];

export type AppEncryptionDeclarationDocumentsCreateInstanceData = {
    /**
     * AppEncryptionDeclarationDocument representation
     */
    body: AppEncryptionDeclarationDocumentCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appEncryptionDeclarationDocuments';
};

export type AppEncryptionDeclarationDocumentsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppEncryptionDeclarationDocumentsCreateInstanceError = AppEncryptionDeclarationDocumentsCreateInstanceErrors[keyof AppEncryptionDeclarationDocumentsCreateInstanceErrors];

export type AppEncryptionDeclarationDocumentsCreateInstanceResponses = {
    /**
     * Single AppEncryptionDeclarationDocument
     */
    201: AppEncryptionDeclarationDocumentResponse;
};

export type AppEncryptionDeclarationDocumentsCreateInstanceResponse = AppEncryptionDeclarationDocumentsCreateInstanceResponses[keyof AppEncryptionDeclarationDocumentsCreateInstanceResponses];

export type AppEncryptionDeclarationDocumentsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEncryptionDeclarationDocuments
         */
        'fields[appEncryptionDeclarationDocuments]'?: Array<'fileSize' | 'fileName' | 'assetToken' | 'downloadUrl' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState'>;
    };
    url: '/v1/appEncryptionDeclarationDocuments/{id}';
};

export type AppEncryptionDeclarationDocumentsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppEncryptionDeclarationDocumentsGetInstanceError = AppEncryptionDeclarationDocumentsGetInstanceErrors[keyof AppEncryptionDeclarationDocumentsGetInstanceErrors];

export type AppEncryptionDeclarationDocumentsGetInstanceResponses = {
    /**
     * Single AppEncryptionDeclarationDocument
     */
    200: AppEncryptionDeclarationDocumentResponse;
};

export type AppEncryptionDeclarationDocumentsGetInstanceResponse = AppEncryptionDeclarationDocumentsGetInstanceResponses[keyof AppEncryptionDeclarationDocumentsGetInstanceResponses];

export type AppEncryptionDeclarationDocumentsUpdateInstanceData = {
    /**
     * AppEncryptionDeclarationDocument representation
     */
    body: AppEncryptionDeclarationDocumentUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appEncryptionDeclarationDocuments/{id}';
};

export type AppEncryptionDeclarationDocumentsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppEncryptionDeclarationDocumentsUpdateInstanceError = AppEncryptionDeclarationDocumentsUpdateInstanceErrors[keyof AppEncryptionDeclarationDocumentsUpdateInstanceErrors];

export type AppEncryptionDeclarationDocumentsUpdateInstanceResponses = {
    /**
     * Single AppEncryptionDeclarationDocument
     */
    200: AppEncryptionDeclarationDocumentResponse;
};

export type AppEncryptionDeclarationDocumentsUpdateInstanceResponse = AppEncryptionDeclarationDocumentsUpdateInstanceResponses[keyof AppEncryptionDeclarationDocumentsUpdateInstanceResponses];

export type AppEncryptionDeclarationsGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * filter by attribute 'platform'
         * @deprecated
         */
        'filter[platform]'?: Array<'IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS'>;
        /**
         * filter by id(s) of related 'app'
         */
        'filter[app]'?: Array<string>;
        /**
         * filter by id(s) of related 'builds'
         */
        'filter[builds]'?: Array<string>;
        /**
         * the fields to include for returned resources of type appEncryptionDeclarations
         */
        'fields[appEncryptionDeclarations]'?: Array<'appDescription' | 'createdDate' | 'usesEncryption' | 'exempt' | 'containsProprietaryCryptography' | 'containsThirdPartyCryptography' | 'availableOnFrenchStore' | 'platform' | 'uploadedDate' | 'documentUrl' | 'documentName' | 'documentType' | 'appEncryptionDeclarationState' | 'codeValue' | 'app' | 'builds' | 'appEncryptionDeclarationDocument'>;
        /**
         * the fields to include for returned resources of type apps
         * @deprecated
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type appEncryptionDeclarationDocuments
         */
        'fields[appEncryptionDeclarationDocuments]'?: Array<'fileSize' | 'fileName' | 'assetToken' | 'downloadUrl' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'builds' | 'appEncryptionDeclarationDocument'>;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
    };
    url: '/v1/appEncryptionDeclarations';
};

export type AppEncryptionDeclarationsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type AppEncryptionDeclarationsGetCollectionError = AppEncryptionDeclarationsGetCollectionErrors[keyof AppEncryptionDeclarationsGetCollectionErrors];

export type AppEncryptionDeclarationsGetCollectionResponses = {
    /**
     * List of AppEncryptionDeclarations
     */
    200: AppEncryptionDeclarationsResponse;
};

export type AppEncryptionDeclarationsGetCollectionResponse = AppEncryptionDeclarationsGetCollectionResponses[keyof AppEncryptionDeclarationsGetCollectionResponses];

export type AppEncryptionDeclarationsCreateInstanceData = {
    /**
     * AppEncryptionDeclaration representation
     */
    body: AppEncryptionDeclarationCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appEncryptionDeclarations';
};

export type AppEncryptionDeclarationsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppEncryptionDeclarationsCreateInstanceError = AppEncryptionDeclarationsCreateInstanceErrors[keyof AppEncryptionDeclarationsCreateInstanceErrors];

export type AppEncryptionDeclarationsCreateInstanceResponses = {
    /**
     * Single AppEncryptionDeclaration
     */
    201: AppEncryptionDeclarationResponse;
};

export type AppEncryptionDeclarationsCreateInstanceResponse = AppEncryptionDeclarationsCreateInstanceResponses[keyof AppEncryptionDeclarationsCreateInstanceResponses];

export type AppEncryptionDeclarationsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEncryptionDeclarations
         */
        'fields[appEncryptionDeclarations]'?: Array<'appDescription' | 'createdDate' | 'usesEncryption' | 'exempt' | 'containsProprietaryCryptography' | 'containsThirdPartyCryptography' | 'availableOnFrenchStore' | 'platform' | 'uploadedDate' | 'documentUrl' | 'documentName' | 'documentType' | 'appEncryptionDeclarationState' | 'codeValue' | 'app' | 'builds' | 'appEncryptionDeclarationDocument'>;
        /**
         * the fields to include for returned resources of type apps
         * @deprecated
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type appEncryptionDeclarationDocuments
         */
        'fields[appEncryptionDeclarationDocuments]'?: Array<'fileSize' | 'fileName' | 'assetToken' | 'downloadUrl' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'builds' | 'appEncryptionDeclarationDocument'>;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
    };
    url: '/v1/appEncryptionDeclarations/{id}';
};

export type AppEncryptionDeclarationsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppEncryptionDeclarationsGetInstanceError = AppEncryptionDeclarationsGetInstanceErrors[keyof AppEncryptionDeclarationsGetInstanceErrors];

export type AppEncryptionDeclarationsGetInstanceResponses = {
    /**
     * Single AppEncryptionDeclaration
     */
    200: AppEncryptionDeclarationResponse;
};

export type AppEncryptionDeclarationsGetInstanceResponse = AppEncryptionDeclarationsGetInstanceResponses[keyof AppEncryptionDeclarationsGetInstanceResponses];

export type AppEventLocalizationsCreateInstanceData = {
    /**
     * AppEventLocalization representation
     */
    body: AppEventLocalizationCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appEventLocalizations';
};

export type AppEventLocalizationsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppEventLocalizationsCreateInstanceError = AppEventLocalizationsCreateInstanceErrors[keyof AppEventLocalizationsCreateInstanceErrors];

export type AppEventLocalizationsCreateInstanceResponses = {
    /**
     * Single AppEventLocalization
     */
    201: AppEventLocalizationResponse;
};

export type AppEventLocalizationsCreateInstanceResponse = AppEventLocalizationsCreateInstanceResponses[keyof AppEventLocalizationsCreateInstanceResponses];

export type AppEventLocalizationsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appEventLocalizations/{id}';
};

export type AppEventLocalizationsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AppEventLocalizationsDeleteInstanceError = AppEventLocalizationsDeleteInstanceErrors[keyof AppEventLocalizationsDeleteInstanceErrors];

export type AppEventLocalizationsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppEventLocalizationsDeleteInstanceResponse = AppEventLocalizationsDeleteInstanceResponses[keyof AppEventLocalizationsDeleteInstanceResponses];

export type AppEventLocalizationsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEventLocalizations
         */
        'fields[appEventLocalizations]'?: Array<'locale' | 'name' | 'shortDescription' | 'longDescription' | 'appEvent' | 'appEventScreenshots' | 'appEventVideoClips'>;
        /**
         * the fields to include for returned resources of type appEventScreenshots
         */
        'fields[appEventScreenshots]'?: Array<'fileSize' | 'fileName' | 'imageAsset' | 'assetToken' | 'uploadOperations' | 'assetDeliveryState' | 'appEventAssetType' | 'appEventLocalization'>;
        /**
         * the fields to include for returned resources of type appEventVideoClips
         */
        'fields[appEventVideoClips]'?: Array<'fileSize' | 'fileName' | 'previewFrameTimeCode' | 'videoUrl' | 'previewFrameImage' | 'previewImage' | 'uploadOperations' | 'assetDeliveryState' | 'videoDeliveryState' | 'appEventAssetType' | 'appEventLocalization'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appEvent' | 'appEventScreenshots' | 'appEventVideoClips'>;
        /**
         * maximum number of related appEventScreenshots returned (when they are included)
         */
        'limit[appEventScreenshots]'?: number;
        /**
         * maximum number of related appEventVideoClips returned (when they are included)
         */
        'limit[appEventVideoClips]'?: number;
    };
    url: '/v1/appEventLocalizations/{id}';
};

export type AppEventLocalizationsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppEventLocalizationsGetInstanceError = AppEventLocalizationsGetInstanceErrors[keyof AppEventLocalizationsGetInstanceErrors];

export type AppEventLocalizationsGetInstanceResponses = {
    /**
     * Single AppEventLocalization
     */
    200: AppEventLocalizationResponse;
};

export type AppEventLocalizationsGetInstanceResponse = AppEventLocalizationsGetInstanceResponses[keyof AppEventLocalizationsGetInstanceResponses];

export type AppEventLocalizationsUpdateInstanceData = {
    /**
     * AppEventLocalization representation
     */
    body: AppEventLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appEventLocalizations/{id}';
};

export type AppEventLocalizationsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppEventLocalizationsUpdateInstanceError = AppEventLocalizationsUpdateInstanceErrors[keyof AppEventLocalizationsUpdateInstanceErrors];

export type AppEventLocalizationsUpdateInstanceResponses = {
    /**
     * Single AppEventLocalization
     */
    200: AppEventLocalizationResponse;
};

export type AppEventLocalizationsUpdateInstanceResponse = AppEventLocalizationsUpdateInstanceResponses[keyof AppEventLocalizationsUpdateInstanceResponses];

export type AppEventScreenshotsCreateInstanceData = {
    /**
     * AppEventScreenshot representation
     */
    body: AppEventScreenshotCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appEventScreenshots';
};

export type AppEventScreenshotsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppEventScreenshotsCreateInstanceError = AppEventScreenshotsCreateInstanceErrors[keyof AppEventScreenshotsCreateInstanceErrors];

export type AppEventScreenshotsCreateInstanceResponses = {
    /**
     * Single AppEventScreenshot
     */
    201: AppEventScreenshotResponse;
};

export type AppEventScreenshotsCreateInstanceResponse = AppEventScreenshotsCreateInstanceResponses[keyof AppEventScreenshotsCreateInstanceResponses];

export type AppEventScreenshotsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appEventScreenshots/{id}';
};

export type AppEventScreenshotsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AppEventScreenshotsDeleteInstanceError = AppEventScreenshotsDeleteInstanceErrors[keyof AppEventScreenshotsDeleteInstanceErrors];

export type AppEventScreenshotsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppEventScreenshotsDeleteInstanceResponse = AppEventScreenshotsDeleteInstanceResponses[keyof AppEventScreenshotsDeleteInstanceResponses];

export type AppEventScreenshotsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEventScreenshots
         */
        'fields[appEventScreenshots]'?: Array<'fileSize' | 'fileName' | 'imageAsset' | 'assetToken' | 'uploadOperations' | 'assetDeliveryState' | 'appEventAssetType' | 'appEventLocalization'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appEventLocalization'>;
    };
    url: '/v1/appEventScreenshots/{id}';
};

export type AppEventScreenshotsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppEventScreenshotsGetInstanceError = AppEventScreenshotsGetInstanceErrors[keyof AppEventScreenshotsGetInstanceErrors];

export type AppEventScreenshotsGetInstanceResponses = {
    /**
     * Single AppEventScreenshot
     */
    200: AppEventScreenshotResponse;
};

export type AppEventScreenshotsGetInstanceResponse = AppEventScreenshotsGetInstanceResponses[keyof AppEventScreenshotsGetInstanceResponses];

export type AppEventScreenshotsUpdateInstanceData = {
    /**
     * AppEventScreenshot representation
     */
    body: AppEventScreenshotUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appEventScreenshots/{id}';
};

export type AppEventScreenshotsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppEventScreenshotsUpdateInstanceError = AppEventScreenshotsUpdateInstanceErrors[keyof AppEventScreenshotsUpdateInstanceErrors];

export type AppEventScreenshotsUpdateInstanceResponses = {
    /**
     * Single AppEventScreenshot
     */
    200: AppEventScreenshotResponse;
};

export type AppEventScreenshotsUpdateInstanceResponse = AppEventScreenshotsUpdateInstanceResponses[keyof AppEventScreenshotsUpdateInstanceResponses];

export type AppEventVideoClipsCreateInstanceData = {
    /**
     * AppEventVideoClip representation
     */
    body: AppEventVideoClipCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appEventVideoClips';
};

export type AppEventVideoClipsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppEventVideoClipsCreateInstanceError = AppEventVideoClipsCreateInstanceErrors[keyof AppEventVideoClipsCreateInstanceErrors];

export type AppEventVideoClipsCreateInstanceResponses = {
    /**
     * Single AppEventVideoClip
     */
    201: AppEventVideoClipResponse;
};

export type AppEventVideoClipsCreateInstanceResponse = AppEventVideoClipsCreateInstanceResponses[keyof AppEventVideoClipsCreateInstanceResponses];

export type AppEventVideoClipsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appEventVideoClips/{id}';
};

export type AppEventVideoClipsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AppEventVideoClipsDeleteInstanceError = AppEventVideoClipsDeleteInstanceErrors[keyof AppEventVideoClipsDeleteInstanceErrors];

export type AppEventVideoClipsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppEventVideoClipsDeleteInstanceResponse = AppEventVideoClipsDeleteInstanceResponses[keyof AppEventVideoClipsDeleteInstanceResponses];

export type AppEventVideoClipsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEventVideoClips
         */
        'fields[appEventVideoClips]'?: Array<'fileSize' | 'fileName' | 'previewFrameTimeCode' | 'videoUrl' | 'previewFrameImage' | 'previewImage' | 'uploadOperations' | 'assetDeliveryState' | 'videoDeliveryState' | 'appEventAssetType' | 'appEventLocalization'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appEventLocalization'>;
    };
    url: '/v1/appEventVideoClips/{id}';
};

export type AppEventVideoClipsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppEventVideoClipsGetInstanceError = AppEventVideoClipsGetInstanceErrors[keyof AppEventVideoClipsGetInstanceErrors];

export type AppEventVideoClipsGetInstanceResponses = {
    /**
     * Single AppEventVideoClip
     */
    200: AppEventVideoClipResponse;
};

export type AppEventVideoClipsGetInstanceResponse = AppEventVideoClipsGetInstanceResponses[keyof AppEventVideoClipsGetInstanceResponses];

export type AppEventVideoClipsUpdateInstanceData = {
    /**
     * AppEventVideoClip representation
     */
    body: AppEventVideoClipUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appEventVideoClips/{id}';
};

export type AppEventVideoClipsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppEventVideoClipsUpdateInstanceError = AppEventVideoClipsUpdateInstanceErrors[keyof AppEventVideoClipsUpdateInstanceErrors];

export type AppEventVideoClipsUpdateInstanceResponses = {
    /**
     * Single AppEventVideoClip
     */
    200: AppEventVideoClipResponse;
};

export type AppEventVideoClipsUpdateInstanceResponse = AppEventVideoClipsUpdateInstanceResponses[keyof AppEventVideoClipsUpdateInstanceResponses];

export type AppEventsCreateInstanceData = {
    /**
     * AppEvent representation
     */
    body: AppEventCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appEvents';
};

export type AppEventsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppEventsCreateInstanceError = AppEventsCreateInstanceErrors[keyof AppEventsCreateInstanceErrors];

export type AppEventsCreateInstanceResponses = {
    /**
     * Single AppEvent
     */
    201: AppEventResponse;
};

export type AppEventsCreateInstanceResponse = AppEventsCreateInstanceResponses[keyof AppEventsCreateInstanceResponses];

export type AppEventsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appEvents/{id}';
};

export type AppEventsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AppEventsDeleteInstanceError = AppEventsDeleteInstanceErrors[keyof AppEventsDeleteInstanceErrors];

export type AppEventsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppEventsDeleteInstanceResponse = AppEventsDeleteInstanceResponses[keyof AppEventsDeleteInstanceResponses];

export type AppEventsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEvents
         */
        'fields[appEvents]'?: Array<'referenceName' | 'badge' | 'eventState' | 'deepLink' | 'purchaseRequirement' | 'primaryLocale' | 'priority' | 'purpose' | 'territorySchedules' | 'archivedTerritorySchedules' | 'localizations'>;
        /**
         * the fields to include for returned resources of type appEventLocalizations
         */
        'fields[appEventLocalizations]'?: Array<'locale' | 'name' | 'shortDescription' | 'longDescription' | 'appEvent' | 'appEventScreenshots' | 'appEventVideoClips'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'localizations'>;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
    };
    url: '/v1/appEvents/{id}';
};

export type AppEventsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppEventsGetInstanceError = AppEventsGetInstanceErrors[keyof AppEventsGetInstanceErrors];

export type AppEventsGetInstanceResponses = {
    /**
     * Single AppEvent
     */
    200: AppEventResponse;
};

export type AppEventsGetInstanceResponse = AppEventsGetInstanceResponses[keyof AppEventsGetInstanceResponses];

export type AppEventsUpdateInstanceData = {
    /**
     * AppEvent representation
     */
    body: AppEventUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appEvents/{id}';
};

export type AppEventsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppEventsUpdateInstanceError = AppEventsUpdateInstanceErrors[keyof AppEventsUpdateInstanceErrors];

export type AppEventsUpdateInstanceResponses = {
    /**
     * Single AppEvent
     */
    200: AppEventResponse;
};

export type AppEventsUpdateInstanceResponse = AppEventsUpdateInstanceResponses[keyof AppEventsUpdateInstanceResponses];

export type AppInfoLocalizationsCreateInstanceData = {
    /**
     * AppInfoLocalization representation
     */
    body: AppInfoLocalizationCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appInfoLocalizations';
};

export type AppInfoLocalizationsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppInfoLocalizationsCreateInstanceError = AppInfoLocalizationsCreateInstanceErrors[keyof AppInfoLocalizationsCreateInstanceErrors];

export type AppInfoLocalizationsCreateInstanceResponses = {
    /**
     * Single AppInfoLocalization
     */
    201: AppInfoLocalizationResponse;
};

export type AppInfoLocalizationsCreateInstanceResponse = AppInfoLocalizationsCreateInstanceResponses[keyof AppInfoLocalizationsCreateInstanceResponses];

export type AppInfoLocalizationsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appInfoLocalizations/{id}';
};

export type AppInfoLocalizationsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AppInfoLocalizationsDeleteInstanceError = AppInfoLocalizationsDeleteInstanceErrors[keyof AppInfoLocalizationsDeleteInstanceErrors];

export type AppInfoLocalizationsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppInfoLocalizationsDeleteInstanceResponse = AppInfoLocalizationsDeleteInstanceResponses[keyof AppInfoLocalizationsDeleteInstanceResponses];

export type AppInfoLocalizationsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appInfoLocalizations
         */
        'fields[appInfoLocalizations]'?: Array<'locale' | 'name' | 'subtitle' | 'privacyPolicyUrl' | 'privacyChoicesUrl' | 'privacyPolicyText' | 'appInfo'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appInfo'>;
    };
    url: '/v1/appInfoLocalizations/{id}';
};

export type AppInfoLocalizationsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppInfoLocalizationsGetInstanceError = AppInfoLocalizationsGetInstanceErrors[keyof AppInfoLocalizationsGetInstanceErrors];

export type AppInfoLocalizationsGetInstanceResponses = {
    /**
     * Single AppInfoLocalization
     */
    200: AppInfoLocalizationResponse;
};

export type AppInfoLocalizationsGetInstanceResponse = AppInfoLocalizationsGetInstanceResponses[keyof AppInfoLocalizationsGetInstanceResponses];

export type AppInfoLocalizationsUpdateInstanceData = {
    /**
     * AppInfoLocalization representation
     */
    body: AppInfoLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appInfoLocalizations/{id}';
};

export type AppInfoLocalizationsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppInfoLocalizationsUpdateInstanceError = AppInfoLocalizationsUpdateInstanceErrors[keyof AppInfoLocalizationsUpdateInstanceErrors];

export type AppInfoLocalizationsUpdateInstanceResponses = {
    /**
     * Single AppInfoLocalization
     */
    200: AppInfoLocalizationResponse;
};

export type AppInfoLocalizationsUpdateInstanceResponse = AppInfoLocalizationsUpdateInstanceResponses[keyof AppInfoLocalizationsUpdateInstanceResponses];

export type AppInfosGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appInfos
         */
        'fields[appInfos]'?: Array<'appStoreState' | 'state' | 'appStoreAgeRating' | 'australiaAgeRating' | 'brazilAgeRating' | 'brazilAgeRatingV2' | 'franceAgeRating' | 'koreaAgeRating' | 'kidsAgeBand' | 'app' | 'ageRatingDeclaration' | 'appInfoLocalizations' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo'>;
        /**
         * the fields to include for returned resources of type ageRatingDeclarations
         */
        'fields[ageRatingDeclarations]'?: Array<'alcoholTobaccoOrDrugUseOrReferences' | 'contests' | 'gamblingAndContests' | 'gambling' | 'gamblingSimulated' | 'kidsAgeBand' | 'lootBox' | 'medicalOrTreatmentInformation' | 'profanityOrCrudeHumor' | 'sexualContentGraphicAndNudity' | 'sexualContentOrNudity' | 'horrorOrFearThemes' | 'matureOrSuggestiveThemes' | 'unrestrictedWebAccess' | 'violenceCartoonOrFantasy' | 'violenceRealisticProlongedGraphicOrSadistic' | 'violenceRealistic' | 'ageRatingOverride' | 'koreaAgeRatingOverride' | 'seventeenPlus'>;
        /**
         * the fields to include for returned resources of type appInfoLocalizations
         */
        'fields[appInfoLocalizations]'?: Array<'locale' | 'name' | 'subtitle' | 'privacyPolicyUrl' | 'privacyChoicesUrl' | 'privacyPolicyText' | 'appInfo'>;
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<'platforms' | 'subcategories' | 'parent'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'ageRatingDeclaration' | 'appInfoLocalizations' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo'>;
        /**
         * maximum number of related appInfoLocalizations returned (when they are included)
         */
        'limit[appInfoLocalizations]'?: number;
    };
    url: '/v1/appInfos/{id}';
};

export type AppInfosGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppInfosGetInstanceError = AppInfosGetInstanceErrors[keyof AppInfosGetInstanceErrors];

export type AppInfosGetInstanceResponses = {
    /**
     * Single AppInfo
     */
    200: AppInfoResponse;
};

export type AppInfosGetInstanceResponse = AppInfosGetInstanceResponses[keyof AppInfosGetInstanceResponses];

export type AppInfosUpdateInstanceData = {
    /**
     * AppInfo representation
     */
    body: AppInfoUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appInfos/{id}';
};

export type AppInfosUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppInfosUpdateInstanceError = AppInfosUpdateInstanceErrors[keyof AppInfosUpdateInstanceErrors];

export type AppInfosUpdateInstanceResponses = {
    /**
     * Single AppInfo
     */
    200: AppInfoResponse;
};

export type AppInfosUpdateInstanceResponse = AppInfosUpdateInstanceResponses[keyof AppInfosUpdateInstanceResponses];

export type AppPreviewSetsCreateInstanceData = {
    /**
     * AppPreviewSet representation
     */
    body: AppPreviewSetCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appPreviewSets';
};

export type AppPreviewSetsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppPreviewSetsCreateInstanceError = AppPreviewSetsCreateInstanceErrors[keyof AppPreviewSetsCreateInstanceErrors];

export type AppPreviewSetsCreateInstanceResponses = {
    /**
     * Single AppPreviewSet
     */
    201: AppPreviewSetResponse;
};

export type AppPreviewSetsCreateInstanceResponse = AppPreviewSetsCreateInstanceResponses[keyof AppPreviewSetsCreateInstanceResponses];

export type AppPreviewSetsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appPreviewSets/{id}';
};

export type AppPreviewSetsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AppPreviewSetsDeleteInstanceError = AppPreviewSetsDeleteInstanceErrors[keyof AppPreviewSetsDeleteInstanceErrors];

export type AppPreviewSetsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppPreviewSetsDeleteInstanceResponse = AppPreviewSetsDeleteInstanceResponses[keyof AppPreviewSetsDeleteInstanceResponses];

export type AppPreviewSetsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appPreviewSets
         */
        'fields[appPreviewSets]'?: Array<'previewType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews'>;
        /**
         * the fields to include for returned resources of type appPreviews
         */
        'fields[appPreviews]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'previewFrameTimeCode' | 'mimeType' | 'videoUrl' | 'previewFrameImage' | 'previewImage' | 'uploadOperations' | 'assetDeliveryState' | 'videoDeliveryState' | 'appPreviewSet'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews'>;
        /**
         * maximum number of related appPreviews returned (when they are included)
         */
        'limit[appPreviews]'?: number;
    };
    url: '/v1/appPreviewSets/{id}';
};

export type AppPreviewSetsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppPreviewSetsGetInstanceError = AppPreviewSetsGetInstanceErrors[keyof AppPreviewSetsGetInstanceErrors];

export type AppPreviewSetsGetInstanceResponses = {
    /**
     * Single AppPreviewSet
     */
    200: AppPreviewSetResponse;
};

export type AppPreviewSetsGetInstanceResponse = AppPreviewSetsGetInstanceResponses[keyof AppPreviewSetsGetInstanceResponses];

export type AppPreviewsCreateInstanceData = {
    /**
     * AppPreview representation
     */
    body: AppPreviewCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appPreviews';
};

export type AppPreviewsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppPreviewsCreateInstanceError = AppPreviewsCreateInstanceErrors[keyof AppPreviewsCreateInstanceErrors];

export type AppPreviewsCreateInstanceResponses = {
    /**
     * Single AppPreview
     */
    201: AppPreviewResponse;
};

export type AppPreviewsCreateInstanceResponse = AppPreviewsCreateInstanceResponses[keyof AppPreviewsCreateInstanceResponses];

export type AppPreviewsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appPreviews/{id}';
};

export type AppPreviewsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AppPreviewsDeleteInstanceError = AppPreviewsDeleteInstanceErrors[keyof AppPreviewsDeleteInstanceErrors];

export type AppPreviewsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppPreviewsDeleteInstanceResponse = AppPreviewsDeleteInstanceResponses[keyof AppPreviewsDeleteInstanceResponses];

export type AppPreviewsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appPreviews
         */
        'fields[appPreviews]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'previewFrameTimeCode' | 'mimeType' | 'videoUrl' | 'previewFrameImage' | 'previewImage' | 'uploadOperations' | 'assetDeliveryState' | 'videoDeliveryState' | 'appPreviewSet'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appPreviewSet'>;
    };
    url: '/v1/appPreviews/{id}';
};

export type AppPreviewsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppPreviewsGetInstanceError = AppPreviewsGetInstanceErrors[keyof AppPreviewsGetInstanceErrors];

export type AppPreviewsGetInstanceResponses = {
    /**
     * Single AppPreview
     */
    200: AppPreviewResponse;
};

export type AppPreviewsGetInstanceResponse = AppPreviewsGetInstanceResponses[keyof AppPreviewsGetInstanceResponses];

export type AppPreviewsUpdateInstanceData = {
    /**
     * AppPreview representation
     */
    body: AppPreviewUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appPreviews/{id}';
};

export type AppPreviewsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppPreviewsUpdateInstanceError = AppPreviewsUpdateInstanceErrors[keyof AppPreviewsUpdateInstanceErrors];

export type AppPreviewsUpdateInstanceResponses = {
    /**
     * Single AppPreview
     */
    200: AppPreviewResponse;
};

export type AppPreviewsUpdateInstanceResponse = AppPreviewsUpdateInstanceResponses[keyof AppPreviewsUpdateInstanceResponses];

export type AppPricePointsV3GetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appPricePoints
         */
        'fields[appPricePoints]'?: Array<'customerPrice' | 'proceeds' | 'app' | 'equalizations' | 'territory'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'territory'>;
    };
    url: '/v3/appPricePoints/{id}';
};

export type AppPricePointsV3GetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppPricePointsV3GetInstanceError = AppPricePointsV3GetInstanceErrors[keyof AppPricePointsV3GetInstanceErrors];

export type AppPricePointsV3GetInstanceResponses = {
    /**
     * Single AppPricePoint
     */
    200: AppPricePointV3Response;
};

export type AppPricePointsV3GetInstanceResponse = AppPricePointsV3GetInstanceResponses[keyof AppPricePointsV3GetInstanceResponses];

export type AppPriceSchedulesCreateInstanceData = {
    /**
     * AppPriceSchedule representation
     */
    body: AppPriceScheduleCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appPriceSchedules';
};

export type AppPriceSchedulesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppPriceSchedulesCreateInstanceError = AppPriceSchedulesCreateInstanceErrors[keyof AppPriceSchedulesCreateInstanceErrors];

export type AppPriceSchedulesCreateInstanceResponses = {
    /**
     * Single AppPriceSchedule
     */
    201: AppPriceScheduleResponse;
};

export type AppPriceSchedulesCreateInstanceResponse = AppPriceSchedulesCreateInstanceResponses[keyof AppPriceSchedulesCreateInstanceResponses];

export type AppPriceSchedulesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appPriceSchedules
         */
        'fields[appPriceSchedules]'?: Array<'app' | 'baseTerritory' | 'manualPrices' | 'automaticPrices'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * the fields to include for returned resources of type appPrices
         */
        'fields[appPrices]'?: Array<'manual' | 'startDate' | 'endDate' | 'appPricePoint' | 'territory'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'baseTerritory' | 'manualPrices' | 'automaticPrices'>;
        /**
         * maximum number of related automaticPrices returned (when they are included)
         */
        'limit[automaticPrices]'?: number;
        /**
         * maximum number of related manualPrices returned (when they are included)
         */
        'limit[manualPrices]'?: number;
    };
    url: '/v1/appPriceSchedules/{id}';
};

export type AppPriceSchedulesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppPriceSchedulesGetInstanceError = AppPriceSchedulesGetInstanceErrors[keyof AppPriceSchedulesGetInstanceErrors];

export type AppPriceSchedulesGetInstanceResponses = {
    /**
     * Single AppPriceSchedule
     */
    200: AppPriceScheduleResponse;
};

export type AppPriceSchedulesGetInstanceResponse = AppPriceSchedulesGetInstanceResponses[keyof AppPriceSchedulesGetInstanceResponses];

export type AppScreenshotSetsCreateInstanceData = {
    /**
     * AppScreenshotSet representation
     */
    body: AppScreenshotSetCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appScreenshotSets';
};

export type AppScreenshotSetsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppScreenshotSetsCreateInstanceError = AppScreenshotSetsCreateInstanceErrors[keyof AppScreenshotSetsCreateInstanceErrors];

export type AppScreenshotSetsCreateInstanceResponses = {
    /**
     * Single AppScreenshotSet
     */
    201: AppScreenshotSetResponse;
};

export type AppScreenshotSetsCreateInstanceResponse = AppScreenshotSetsCreateInstanceResponses[keyof AppScreenshotSetsCreateInstanceResponses];

export type AppScreenshotSetsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appScreenshotSets/{id}';
};

export type AppScreenshotSetsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AppScreenshotSetsDeleteInstanceError = AppScreenshotSetsDeleteInstanceErrors[keyof AppScreenshotSetsDeleteInstanceErrors];

export type AppScreenshotSetsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppScreenshotSetsDeleteInstanceResponse = AppScreenshotSetsDeleteInstanceResponses[keyof AppScreenshotSetsDeleteInstanceResponses];

export type AppScreenshotSetsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appScreenshotSets
         */
        'fields[appScreenshotSets]'?: Array<'screenshotDisplayType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots'>;
        /**
         * the fields to include for returned resources of type appScreenshots
         */
        'fields[appScreenshots]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'appScreenshotSet'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots'>;
        /**
         * maximum number of related appScreenshots returned (when they are included)
         */
        'limit[appScreenshots]'?: number;
    };
    url: '/v1/appScreenshotSets/{id}';
};

export type AppScreenshotSetsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppScreenshotSetsGetInstanceError = AppScreenshotSetsGetInstanceErrors[keyof AppScreenshotSetsGetInstanceErrors];

export type AppScreenshotSetsGetInstanceResponses = {
    /**
     * Single AppScreenshotSet
     */
    200: AppScreenshotSetResponse;
};

export type AppScreenshotSetsGetInstanceResponse = AppScreenshotSetsGetInstanceResponses[keyof AppScreenshotSetsGetInstanceResponses];

export type AppScreenshotsCreateInstanceData = {
    /**
     * AppScreenshot representation
     */
    body: AppScreenshotCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appScreenshots';
};

export type AppScreenshotsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppScreenshotsCreateInstanceError = AppScreenshotsCreateInstanceErrors[keyof AppScreenshotsCreateInstanceErrors];

export type AppScreenshotsCreateInstanceResponses = {
    /**
     * Single AppScreenshot
     */
    201: AppScreenshotResponse;
};

export type AppScreenshotsCreateInstanceResponse = AppScreenshotsCreateInstanceResponses[keyof AppScreenshotsCreateInstanceResponses];

export type AppScreenshotsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appScreenshots/{id}';
};

export type AppScreenshotsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AppScreenshotsDeleteInstanceError = AppScreenshotsDeleteInstanceErrors[keyof AppScreenshotsDeleteInstanceErrors];

export type AppScreenshotsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppScreenshotsDeleteInstanceResponse = AppScreenshotsDeleteInstanceResponses[keyof AppScreenshotsDeleteInstanceResponses];

export type AppScreenshotsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appScreenshots
         */
        'fields[appScreenshots]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'appScreenshotSet'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appScreenshotSet'>;
    };
    url: '/v1/appScreenshots/{id}';
};

export type AppScreenshotsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppScreenshotsGetInstanceError = AppScreenshotsGetInstanceErrors[keyof AppScreenshotsGetInstanceErrors];

export type AppScreenshotsGetInstanceResponses = {
    /**
     * Single AppScreenshot
     */
    200: AppScreenshotResponse;
};

export type AppScreenshotsGetInstanceResponse = AppScreenshotsGetInstanceResponses[keyof AppScreenshotsGetInstanceResponses];

export type AppScreenshotsUpdateInstanceData = {
    /**
     * AppScreenshot representation
     */
    body: AppScreenshotUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appScreenshots/{id}';
};

export type AppScreenshotsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppScreenshotsUpdateInstanceError = AppScreenshotsUpdateInstanceErrors[keyof AppScreenshotsUpdateInstanceErrors];

export type AppScreenshotsUpdateInstanceResponses = {
    /**
     * Single AppScreenshot
     */
    200: AppScreenshotResponse;
};

export type AppScreenshotsUpdateInstanceResponse = AppScreenshotsUpdateInstanceResponses[keyof AppScreenshotsUpdateInstanceResponses];

export type AppStoreReviewAttachmentsCreateInstanceData = {
    /**
     * AppStoreReviewAttachment representation
     */
    body: AppStoreReviewAttachmentCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appStoreReviewAttachments';
};

export type AppStoreReviewAttachmentsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppStoreReviewAttachmentsCreateInstanceError = AppStoreReviewAttachmentsCreateInstanceErrors[keyof AppStoreReviewAttachmentsCreateInstanceErrors];

export type AppStoreReviewAttachmentsCreateInstanceResponses = {
    /**
     * Single AppStoreReviewAttachment
     */
    201: AppStoreReviewAttachmentResponse;
};

export type AppStoreReviewAttachmentsCreateInstanceResponse = AppStoreReviewAttachmentsCreateInstanceResponses[keyof AppStoreReviewAttachmentsCreateInstanceResponses];

export type AppStoreReviewAttachmentsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appStoreReviewAttachments/{id}';
};

export type AppStoreReviewAttachmentsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AppStoreReviewAttachmentsDeleteInstanceError = AppStoreReviewAttachmentsDeleteInstanceErrors[keyof AppStoreReviewAttachmentsDeleteInstanceErrors];

export type AppStoreReviewAttachmentsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppStoreReviewAttachmentsDeleteInstanceResponse = AppStoreReviewAttachmentsDeleteInstanceResponses[keyof AppStoreReviewAttachmentsDeleteInstanceResponses];

export type AppStoreReviewAttachmentsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreReviewAttachments
         */
        'fields[appStoreReviewAttachments]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'appStoreReviewDetail'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreReviewDetail'>;
    };
    url: '/v1/appStoreReviewAttachments/{id}';
};

export type AppStoreReviewAttachmentsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreReviewAttachmentsGetInstanceError = AppStoreReviewAttachmentsGetInstanceErrors[keyof AppStoreReviewAttachmentsGetInstanceErrors];

export type AppStoreReviewAttachmentsGetInstanceResponses = {
    /**
     * Single AppStoreReviewAttachment
     */
    200: AppStoreReviewAttachmentResponse;
};

export type AppStoreReviewAttachmentsGetInstanceResponse = AppStoreReviewAttachmentsGetInstanceResponses[keyof AppStoreReviewAttachmentsGetInstanceResponses];

export type AppStoreReviewAttachmentsUpdateInstanceData = {
    /**
     * AppStoreReviewAttachment representation
     */
    body: AppStoreReviewAttachmentUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appStoreReviewAttachments/{id}';
};

export type AppStoreReviewAttachmentsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppStoreReviewAttachmentsUpdateInstanceError = AppStoreReviewAttachmentsUpdateInstanceErrors[keyof AppStoreReviewAttachmentsUpdateInstanceErrors];

export type AppStoreReviewAttachmentsUpdateInstanceResponses = {
    /**
     * Single AppStoreReviewAttachment
     */
    200: AppStoreReviewAttachmentResponse;
};

export type AppStoreReviewAttachmentsUpdateInstanceResponse = AppStoreReviewAttachmentsUpdateInstanceResponses[keyof AppStoreReviewAttachmentsUpdateInstanceResponses];

export type AppStoreReviewDetailsCreateInstanceData = {
    /**
     * AppStoreReviewDetail representation
     */
    body: AppStoreReviewDetailCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appStoreReviewDetails';
};

export type AppStoreReviewDetailsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppStoreReviewDetailsCreateInstanceError = AppStoreReviewDetailsCreateInstanceErrors[keyof AppStoreReviewDetailsCreateInstanceErrors];

export type AppStoreReviewDetailsCreateInstanceResponses = {
    /**
     * Single AppStoreReviewDetail
     */
    201: AppStoreReviewDetailResponse;
};

export type AppStoreReviewDetailsCreateInstanceResponse = AppStoreReviewDetailsCreateInstanceResponses[keyof AppStoreReviewDetailsCreateInstanceResponses];

export type AppStoreReviewDetailsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreReviewDetails
         */
        'fields[appStoreReviewDetails]'?: Array<'contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'appStoreVersion' | 'appStoreReviewAttachments'>;
        /**
         * the fields to include for returned resources of type appStoreReviewAttachments
         */
        'fields[appStoreReviewAttachments]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'appStoreReviewDetail'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreVersion' | 'appStoreReviewAttachments'>;
        /**
         * maximum number of related appStoreReviewAttachments returned (when they are included)
         */
        'limit[appStoreReviewAttachments]'?: number;
    };
    url: '/v1/appStoreReviewDetails/{id}';
};

export type AppStoreReviewDetailsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreReviewDetailsGetInstanceError = AppStoreReviewDetailsGetInstanceErrors[keyof AppStoreReviewDetailsGetInstanceErrors];

export type AppStoreReviewDetailsGetInstanceResponses = {
    /**
     * Single AppStoreReviewDetail
     */
    200: AppStoreReviewDetailResponse;
};

export type AppStoreReviewDetailsGetInstanceResponse = AppStoreReviewDetailsGetInstanceResponses[keyof AppStoreReviewDetailsGetInstanceResponses];

export type AppStoreReviewDetailsUpdateInstanceData = {
    /**
     * AppStoreReviewDetail representation
     */
    body: AppStoreReviewDetailUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appStoreReviewDetails/{id}';
};

export type AppStoreReviewDetailsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppStoreReviewDetailsUpdateInstanceError = AppStoreReviewDetailsUpdateInstanceErrors[keyof AppStoreReviewDetailsUpdateInstanceErrors];

export type AppStoreReviewDetailsUpdateInstanceResponses = {
    /**
     * Single AppStoreReviewDetail
     */
    200: AppStoreReviewDetailResponse;
};

export type AppStoreReviewDetailsUpdateInstanceResponse = AppStoreReviewDetailsUpdateInstanceResponses[keyof AppStoreReviewDetailsUpdateInstanceResponses];

export type AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceData = {
    /**
     * AppStoreVersionExperimentTreatmentLocalization representation
     */
    body: AppStoreVersionExperimentTreatmentLocalizationCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appStoreVersionExperimentTreatmentLocalizations';
};

export type AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceError = AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceErrors[keyof AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceErrors];

export type AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceResponses = {
    /**
     * Single AppStoreVersionExperimentTreatmentLocalization
     */
    201: AppStoreVersionExperimentTreatmentLocalizationResponse;
};

export type AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceResponse = AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceResponses[keyof AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceResponses];

export type AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appStoreVersionExperimentTreatmentLocalizations/{id}';
};

export type AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceError = AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceErrors[keyof AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceErrors];

export type AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceResponse = AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceResponses[keyof AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceResponses];

export type AppStoreVersionExperimentTreatmentLocalizationsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
         */
        'fields[appStoreVersionExperimentTreatmentLocalizations]'?: Array<'locale' | 'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appScreenshotSets
         */
        'fields[appScreenshotSets]'?: Array<'screenshotDisplayType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots'>;
        /**
         * the fields to include for returned resources of type appPreviewSets
         */
        'fields[appPreviewSets]'?: Array<'previewType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * maximum number of related appPreviewSets returned (when they are included)
         */
        'limit[appPreviewSets]'?: number;
        /**
         * maximum number of related appScreenshotSets returned (when they are included)
         */
        'limit[appScreenshotSets]'?: number;
    };
    url: '/v1/appStoreVersionExperimentTreatmentLocalizations/{id}';
};

export type AppStoreVersionExperimentTreatmentLocalizationsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionExperimentTreatmentLocalizationsGetInstanceError = AppStoreVersionExperimentTreatmentLocalizationsGetInstanceErrors[keyof AppStoreVersionExperimentTreatmentLocalizationsGetInstanceErrors];

export type AppStoreVersionExperimentTreatmentLocalizationsGetInstanceResponses = {
    /**
     * Single AppStoreVersionExperimentTreatmentLocalization
     */
    200: AppStoreVersionExperimentTreatmentLocalizationResponse;
};

export type AppStoreVersionExperimentTreatmentLocalizationsGetInstanceResponse = AppStoreVersionExperimentTreatmentLocalizationsGetInstanceResponses[keyof AppStoreVersionExperimentTreatmentLocalizationsGetInstanceResponses];

export type AppStoreVersionExperimentTreatmentsCreateInstanceData = {
    /**
     * AppStoreVersionExperimentTreatment representation
     */
    body: AppStoreVersionExperimentTreatmentCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appStoreVersionExperimentTreatments';
};

export type AppStoreVersionExperimentTreatmentsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppStoreVersionExperimentTreatmentsCreateInstanceError = AppStoreVersionExperimentTreatmentsCreateInstanceErrors[keyof AppStoreVersionExperimentTreatmentsCreateInstanceErrors];

export type AppStoreVersionExperimentTreatmentsCreateInstanceResponses = {
    /**
     * Single AppStoreVersionExperimentTreatment
     */
    201: AppStoreVersionExperimentTreatmentResponse;
};

export type AppStoreVersionExperimentTreatmentsCreateInstanceResponse = AppStoreVersionExperimentTreatmentsCreateInstanceResponses[keyof AppStoreVersionExperimentTreatmentsCreateInstanceResponses];

export type AppStoreVersionExperimentTreatmentsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appStoreVersionExperimentTreatments/{id}';
};

export type AppStoreVersionExperimentTreatmentsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AppStoreVersionExperimentTreatmentsDeleteInstanceError = AppStoreVersionExperimentTreatmentsDeleteInstanceErrors[keyof AppStoreVersionExperimentTreatmentsDeleteInstanceErrors];

export type AppStoreVersionExperimentTreatmentsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppStoreVersionExperimentTreatmentsDeleteInstanceResponse = AppStoreVersionExperimentTreatmentsDeleteInstanceResponses[keyof AppStoreVersionExperimentTreatmentsDeleteInstanceResponses];

export type AppStoreVersionExperimentTreatmentsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatments
         */
        'fields[appStoreVersionExperimentTreatments]'?: Array<'name' | 'appIcon' | 'appIconName' | 'promotedDate' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
         */
        'fields[appStoreVersionExperimentTreatmentLocalizations]'?: Array<'locale' | 'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations'>;
        /**
         * maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included)
         */
        'limit[appStoreVersionExperimentTreatmentLocalizations]'?: number;
    };
    url: '/v1/appStoreVersionExperimentTreatments/{id}';
};

export type AppStoreVersionExperimentTreatmentsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionExperimentTreatmentsGetInstanceError = AppStoreVersionExperimentTreatmentsGetInstanceErrors[keyof AppStoreVersionExperimentTreatmentsGetInstanceErrors];

export type AppStoreVersionExperimentTreatmentsGetInstanceResponses = {
    /**
     * Single AppStoreVersionExperimentTreatment
     */
    200: AppStoreVersionExperimentTreatmentResponse;
};

export type AppStoreVersionExperimentTreatmentsGetInstanceResponse = AppStoreVersionExperimentTreatmentsGetInstanceResponses[keyof AppStoreVersionExperimentTreatmentsGetInstanceResponses];

export type AppStoreVersionExperimentTreatmentsUpdateInstanceData = {
    /**
     * AppStoreVersionExperimentTreatment representation
     */
    body: AppStoreVersionExperimentTreatmentUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appStoreVersionExperimentTreatments/{id}';
};

export type AppStoreVersionExperimentTreatmentsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppStoreVersionExperimentTreatmentsUpdateInstanceError = AppStoreVersionExperimentTreatmentsUpdateInstanceErrors[keyof AppStoreVersionExperimentTreatmentsUpdateInstanceErrors];

export type AppStoreVersionExperimentTreatmentsUpdateInstanceResponses = {
    /**
     * Single AppStoreVersionExperimentTreatment
     */
    200: AppStoreVersionExperimentTreatmentResponse;
};

export type AppStoreVersionExperimentTreatmentsUpdateInstanceResponse = AppStoreVersionExperimentTreatmentsUpdateInstanceResponses[keyof AppStoreVersionExperimentTreatmentsUpdateInstanceResponses];

export type AppStoreVersionExperimentsV2CreateInstanceData = {
    /**
     * AppStoreVersionExperiment representation
     */
    body: AppStoreVersionExperimentV2CreateRequest;
    path?: never;
    query?: never;
    url: '/v2/appStoreVersionExperiments';
};

export type AppStoreVersionExperimentsV2CreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppStoreVersionExperimentsV2CreateInstanceError = AppStoreVersionExperimentsV2CreateInstanceErrors[keyof AppStoreVersionExperimentsV2CreateInstanceErrors];

export type AppStoreVersionExperimentsV2CreateInstanceResponses = {
    /**
     * Single AppStoreVersionExperiment
     */
    201: AppStoreVersionExperimentV2Response;
};

export type AppStoreVersionExperimentsV2CreateInstanceResponse = AppStoreVersionExperimentsV2CreateInstanceResponses[keyof AppStoreVersionExperimentsV2CreateInstanceResponses];

export type AppStoreVersionExperimentsV2DeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v2/appStoreVersionExperiments/{id}';
};

export type AppStoreVersionExperimentsV2DeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AppStoreVersionExperimentsV2DeleteInstanceError = AppStoreVersionExperimentsV2DeleteInstanceErrors[keyof AppStoreVersionExperimentsV2DeleteInstanceErrors];

export type AppStoreVersionExperimentsV2DeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppStoreVersionExperimentsV2DeleteInstanceResponse = AppStoreVersionExperimentsV2DeleteInstanceResponses[keyof AppStoreVersionExperimentsV2DeleteInstanceResponses];

export type AppStoreVersionExperimentsV2GetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<'name' | 'platform' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'app' | 'latestControlVersion' | 'controlVersions' | 'appStoreVersionExperimentTreatments'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatments
         */
        'fields[appStoreVersionExperimentTreatments]'?: Array<'name' | 'appIcon' | 'appIconName' | 'promotedDate' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'latestControlVersion' | 'controlVersions' | 'appStoreVersionExperimentTreatments'>;
        /**
         * maximum number of related appStoreVersionExperimentTreatments returned (when they are included)
         */
        'limit[appStoreVersionExperimentTreatments]'?: number;
        /**
         * maximum number of related controlVersions returned (when they are included)
         */
        'limit[controlVersions]'?: number;
    };
    url: '/v2/appStoreVersionExperiments/{id}';
};

export type AppStoreVersionExperimentsV2GetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionExperimentsV2GetInstanceError = AppStoreVersionExperimentsV2GetInstanceErrors[keyof AppStoreVersionExperimentsV2GetInstanceErrors];

export type AppStoreVersionExperimentsV2GetInstanceResponses = {
    /**
     * Single AppStoreVersionExperiment
     */
    200: AppStoreVersionExperimentV2Response;
};

export type AppStoreVersionExperimentsV2GetInstanceResponse = AppStoreVersionExperimentsV2GetInstanceResponses[keyof AppStoreVersionExperimentsV2GetInstanceResponses];

export type AppStoreVersionExperimentsV2UpdateInstanceData = {
    /**
     * AppStoreVersionExperiment representation
     */
    body: AppStoreVersionExperimentV2UpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v2/appStoreVersionExperiments/{id}';
};

export type AppStoreVersionExperimentsV2UpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppStoreVersionExperimentsV2UpdateInstanceError = AppStoreVersionExperimentsV2UpdateInstanceErrors[keyof AppStoreVersionExperimentsV2UpdateInstanceErrors];

export type AppStoreVersionExperimentsV2UpdateInstanceResponses = {
    /**
     * Single AppStoreVersionExperiment
     */
    200: AppStoreVersionExperimentV2Response;
};

export type AppStoreVersionExperimentsV2UpdateInstanceResponse = AppStoreVersionExperimentsV2UpdateInstanceResponses[keyof AppStoreVersionExperimentsV2UpdateInstanceResponses];

export type AppStoreVersionExperimentsCreateInstanceData = {
    /**
     * AppStoreVersionExperiment representation
     */
    body: AppStoreVersionExperimentCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appStoreVersionExperiments';
};

export type AppStoreVersionExperimentsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppStoreVersionExperimentsCreateInstanceError = AppStoreVersionExperimentsCreateInstanceErrors[keyof AppStoreVersionExperimentsCreateInstanceErrors];

export type AppStoreVersionExperimentsCreateInstanceResponses = {
    /**
     * Single AppStoreVersionExperiment
     */
    201: AppStoreVersionExperimentResponse;
};

export type AppStoreVersionExperimentsCreateInstanceResponse = AppStoreVersionExperimentsCreateInstanceResponses[keyof AppStoreVersionExperimentsCreateInstanceResponses];

export type AppStoreVersionExperimentsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appStoreVersionExperiments/{id}';
};

export type AppStoreVersionExperimentsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AppStoreVersionExperimentsDeleteInstanceError = AppStoreVersionExperimentsDeleteInstanceErrors[keyof AppStoreVersionExperimentsDeleteInstanceErrors];

export type AppStoreVersionExperimentsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppStoreVersionExperimentsDeleteInstanceResponse = AppStoreVersionExperimentsDeleteInstanceResponses[keyof AppStoreVersionExperimentsDeleteInstanceResponses];

export type AppStoreVersionExperimentsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<'name' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'appStoreVersion' | 'appStoreVersionExperimentTreatments'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatments
         */
        'fields[appStoreVersionExperimentTreatments]'?: Array<'name' | 'appIcon' | 'appIconName' | 'promotedDate' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreVersion' | 'appStoreVersionExperimentTreatments'>;
        /**
         * maximum number of related appStoreVersionExperimentTreatments returned (when they are included)
         */
        'limit[appStoreVersionExperimentTreatments]'?: number;
    };
    url: '/v1/appStoreVersionExperiments/{id}';
};

export type AppStoreVersionExperimentsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionExperimentsGetInstanceError = AppStoreVersionExperimentsGetInstanceErrors[keyof AppStoreVersionExperimentsGetInstanceErrors];

export type AppStoreVersionExperimentsGetInstanceResponses = {
    /**
     * Single AppStoreVersionExperiment
     */
    200: AppStoreVersionExperimentResponse;
};

export type AppStoreVersionExperimentsGetInstanceResponse = AppStoreVersionExperimentsGetInstanceResponses[keyof AppStoreVersionExperimentsGetInstanceResponses];

export type AppStoreVersionExperimentsUpdateInstanceData = {
    /**
     * AppStoreVersionExperiment representation
     */
    body: AppStoreVersionExperimentUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appStoreVersionExperiments/{id}';
};

export type AppStoreVersionExperimentsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppStoreVersionExperimentsUpdateInstanceError = AppStoreVersionExperimentsUpdateInstanceErrors[keyof AppStoreVersionExperimentsUpdateInstanceErrors];

export type AppStoreVersionExperimentsUpdateInstanceResponses = {
    /**
     * Single AppStoreVersionExperiment
     */
    200: AppStoreVersionExperimentResponse;
};

export type AppStoreVersionExperimentsUpdateInstanceResponse = AppStoreVersionExperimentsUpdateInstanceResponses[keyof AppStoreVersionExperimentsUpdateInstanceResponses];

export type AppStoreVersionLocalizationsCreateInstanceData = {
    /**
     * AppStoreVersionLocalization representation
     */
    body: AppStoreVersionLocalizationCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appStoreVersionLocalizations';
};

export type AppStoreVersionLocalizationsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppStoreVersionLocalizationsCreateInstanceError = AppStoreVersionLocalizationsCreateInstanceErrors[keyof AppStoreVersionLocalizationsCreateInstanceErrors];

export type AppStoreVersionLocalizationsCreateInstanceResponses = {
    /**
     * Single AppStoreVersionLocalization
     */
    201: AppStoreVersionLocalizationResponse;
};

export type AppStoreVersionLocalizationsCreateInstanceResponse = AppStoreVersionLocalizationsCreateInstanceResponses[keyof AppStoreVersionLocalizationsCreateInstanceResponses];

export type AppStoreVersionLocalizationsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appStoreVersionLocalizations/{id}';
};

export type AppStoreVersionLocalizationsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AppStoreVersionLocalizationsDeleteInstanceError = AppStoreVersionLocalizationsDeleteInstanceErrors[keyof AppStoreVersionLocalizationsDeleteInstanceErrors];

export type AppStoreVersionLocalizationsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppStoreVersionLocalizationsDeleteInstanceResponse = AppStoreVersionLocalizationsDeleteInstanceResponses[keyof AppStoreVersionLocalizationsDeleteInstanceResponses];

export type AppStoreVersionLocalizationsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<'description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appScreenshotSets
         */
        'fields[appScreenshotSets]'?: Array<'screenshotDisplayType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots'>;
        /**
         * the fields to include for returned resources of type appPreviewSets
         */
        'fields[appPreviewSets]'?: Array<'previewType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * maximum number of related appPreviewSets returned (when they are included)
         */
        'limit[appPreviewSets]'?: number;
        /**
         * maximum number of related appScreenshotSets returned (when they are included)
         */
        'limit[appScreenshotSets]'?: number;
    };
    url: '/v1/appStoreVersionLocalizations/{id}';
};

export type AppStoreVersionLocalizationsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionLocalizationsGetInstanceError = AppStoreVersionLocalizationsGetInstanceErrors[keyof AppStoreVersionLocalizationsGetInstanceErrors];

export type AppStoreVersionLocalizationsGetInstanceResponses = {
    /**
     * Single AppStoreVersionLocalization
     */
    200: AppStoreVersionLocalizationResponse;
};

export type AppStoreVersionLocalizationsGetInstanceResponse = AppStoreVersionLocalizationsGetInstanceResponses[keyof AppStoreVersionLocalizationsGetInstanceResponses];

export type AppStoreVersionLocalizationsUpdateInstanceData = {
    /**
     * AppStoreVersionLocalization representation
     */
    body: AppStoreVersionLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appStoreVersionLocalizations/{id}';
};

export type AppStoreVersionLocalizationsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppStoreVersionLocalizationsUpdateInstanceError = AppStoreVersionLocalizationsUpdateInstanceErrors[keyof AppStoreVersionLocalizationsUpdateInstanceErrors];

export type AppStoreVersionLocalizationsUpdateInstanceResponses = {
    /**
     * Single AppStoreVersionLocalization
     */
    200: AppStoreVersionLocalizationResponse;
};

export type AppStoreVersionLocalizationsUpdateInstanceResponse = AppStoreVersionLocalizationsUpdateInstanceResponses[keyof AppStoreVersionLocalizationsUpdateInstanceResponses];

export type AppStoreVersionPhasedReleasesCreateInstanceData = {
    /**
     * AppStoreVersionPhasedRelease representation
     */
    body: AppStoreVersionPhasedReleaseCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appStoreVersionPhasedReleases';
};

export type AppStoreVersionPhasedReleasesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppStoreVersionPhasedReleasesCreateInstanceError = AppStoreVersionPhasedReleasesCreateInstanceErrors[keyof AppStoreVersionPhasedReleasesCreateInstanceErrors];

export type AppStoreVersionPhasedReleasesCreateInstanceResponses = {
    /**
     * Single AppStoreVersionPhasedRelease
     */
    201: AppStoreVersionPhasedReleaseResponse;
};

export type AppStoreVersionPhasedReleasesCreateInstanceResponse = AppStoreVersionPhasedReleasesCreateInstanceResponses[keyof AppStoreVersionPhasedReleasesCreateInstanceResponses];

export type AppStoreVersionPhasedReleasesDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appStoreVersionPhasedReleases/{id}';
};

export type AppStoreVersionPhasedReleasesDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AppStoreVersionPhasedReleasesDeleteInstanceError = AppStoreVersionPhasedReleasesDeleteInstanceErrors[keyof AppStoreVersionPhasedReleasesDeleteInstanceErrors];

export type AppStoreVersionPhasedReleasesDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppStoreVersionPhasedReleasesDeleteInstanceResponse = AppStoreVersionPhasedReleasesDeleteInstanceResponses[keyof AppStoreVersionPhasedReleasesDeleteInstanceResponses];

export type AppStoreVersionPhasedReleasesUpdateInstanceData = {
    /**
     * AppStoreVersionPhasedRelease representation
     */
    body: AppStoreVersionPhasedReleaseUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appStoreVersionPhasedReleases/{id}';
};

export type AppStoreVersionPhasedReleasesUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppStoreVersionPhasedReleasesUpdateInstanceError = AppStoreVersionPhasedReleasesUpdateInstanceErrors[keyof AppStoreVersionPhasedReleasesUpdateInstanceErrors];

export type AppStoreVersionPhasedReleasesUpdateInstanceResponses = {
    /**
     * Single AppStoreVersionPhasedRelease
     */
    200: AppStoreVersionPhasedReleaseResponse;
};

export type AppStoreVersionPhasedReleasesUpdateInstanceResponse = AppStoreVersionPhasedReleasesUpdateInstanceResponses[keyof AppStoreVersionPhasedReleasesUpdateInstanceResponses];

export type AppStoreVersionPromotionsCreateInstanceData = {
    /**
     * AppStoreVersionPromotion representation
     */
    body: AppStoreVersionPromotionCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appStoreVersionPromotions';
};

export type AppStoreVersionPromotionsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppStoreVersionPromotionsCreateInstanceError = AppStoreVersionPromotionsCreateInstanceErrors[keyof AppStoreVersionPromotionsCreateInstanceErrors];

export type AppStoreVersionPromotionsCreateInstanceResponses = {
    /**
     * Single AppStoreVersionPromotion
     */
    201: AppStoreVersionPromotionResponse;
};

export type AppStoreVersionPromotionsCreateInstanceResponse = AppStoreVersionPromotionsCreateInstanceResponses[keyof AppStoreVersionPromotionsCreateInstanceResponses];

export type AppStoreVersionReleaseRequestsCreateInstanceData = {
    /**
     * AppStoreVersionReleaseRequest representation
     */
    body: AppStoreVersionReleaseRequestCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appStoreVersionReleaseRequests';
};

export type AppStoreVersionReleaseRequestsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppStoreVersionReleaseRequestsCreateInstanceError = AppStoreVersionReleaseRequestsCreateInstanceErrors[keyof AppStoreVersionReleaseRequestsCreateInstanceErrors];

export type AppStoreVersionReleaseRequestsCreateInstanceResponses = {
    /**
     * Single AppStoreVersionReleaseRequest
     */
    201: AppStoreVersionReleaseRequestResponse;
};

export type AppStoreVersionReleaseRequestsCreateInstanceResponse = AppStoreVersionReleaseRequestsCreateInstanceResponses[keyof AppStoreVersionReleaseRequestsCreateInstanceResponses];

export type AppStoreVersionSubmissionsCreateInstanceData = {
    /**
     * AppStoreVersionSubmission representation
     */
    body: AppStoreVersionSubmissionCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appStoreVersionSubmissions';
};

export type AppStoreVersionSubmissionsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppStoreVersionSubmissionsCreateInstanceError = AppStoreVersionSubmissionsCreateInstanceErrors[keyof AppStoreVersionSubmissionsCreateInstanceErrors];

export type AppStoreVersionSubmissionsCreateInstanceResponses = {
    /**
     * Single AppStoreVersionSubmission
     */
    201: AppStoreVersionSubmissionResponse;
};

export type AppStoreVersionSubmissionsCreateInstanceResponse = AppStoreVersionSubmissionsCreateInstanceResponses[keyof AppStoreVersionSubmissionsCreateInstanceResponses];

export type AppStoreVersionSubmissionsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appStoreVersionSubmissions/{id}';
};

export type AppStoreVersionSubmissionsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AppStoreVersionSubmissionsDeleteInstanceError = AppStoreVersionSubmissionsDeleteInstanceErrors[keyof AppStoreVersionSubmissionsDeleteInstanceErrors];

export type AppStoreVersionSubmissionsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppStoreVersionSubmissionsDeleteInstanceResponse = AppStoreVersionSubmissionsDeleteInstanceResponses[keyof AppStoreVersionSubmissionsDeleteInstanceResponses];

export type AppStoreVersionsCreateInstanceData = {
    /**
     * AppStoreVersion representation
     */
    body: AppStoreVersionCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/appStoreVersions';
};

export type AppStoreVersionsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppStoreVersionsCreateInstanceError = AppStoreVersionsCreateInstanceErrors[keyof AppStoreVersionsCreateInstanceErrors];

export type AppStoreVersionsCreateInstanceResponses = {
    /**
     * Single AppStoreVersion
     */
    201: AppStoreVersionResponse;
};

export type AppStoreVersionsCreateInstanceResponse = AppStoreVersionsCreateInstanceResponses[keyof AppStoreVersionsCreateInstanceResponses];

export type AppStoreVersionsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appStoreVersions/{id}';
};

export type AppStoreVersionsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type AppStoreVersionsDeleteInstanceError = AppStoreVersionsDeleteInstanceErrors[keyof AppStoreVersionsDeleteInstanceErrors];

export type AppStoreVersionsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppStoreVersionsDeleteInstanceResponse = AppStoreVersionsDeleteInstanceResponses[keyof AppStoreVersionsDeleteInstanceResponses];

export type AppStoreVersionsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type ageRatingDeclarations
         * @deprecated
         */
        'fields[ageRatingDeclarations]'?: Array<'alcoholTobaccoOrDrugUseOrReferences' | 'contests' | 'gamblingAndContests' | 'gambling' | 'gamblingSimulated' | 'kidsAgeBand' | 'lootBox' | 'medicalOrTreatmentInformation' | 'profanityOrCrudeHumor' | 'sexualContentGraphicAndNudity' | 'sexualContentOrNudity' | 'horrorOrFearThemes' | 'matureOrSuggestiveThemes' | 'unrestrictedWebAccess' | 'violenceCartoonOrFantasy' | 'violenceRealisticProlongedGraphicOrSadistic' | 'violenceRealistic' | 'ageRatingOverride' | 'koreaAgeRatingOverride' | 'seventeenPlus'>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<'description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * the fields to include for returned resources of type appStoreVersionPhasedReleases
         */
        'fields[appStoreVersionPhasedReleases]'?: Array<'phasedReleaseState' | 'startDate' | 'totalPauseDuration' | 'currentDayNumber'>;
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<'enabled' | 'compatibilityVersions' | 'appStoreVersion'>;
        /**
         * the fields to include for returned resources of type routingAppCoverages
         */
        'fields[routingAppCoverages]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'appStoreVersion'>;
        /**
         * the fields to include for returned resources of type appStoreReviewDetails
         */
        'fields[appStoreReviewDetails]'?: Array<'contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'appStoreVersion' | 'appStoreReviewAttachments'>;
        /**
         * the fields to include for returned resources of type appStoreVersionSubmissions
         * @deprecated
         */
        'fields[appStoreVersionSubmissions]'?: Array<'appStoreVersion'>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<'action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<'name' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'appStoreVersion' | 'appStoreVersionExperimentTreatments' | 'platform' | 'app' | 'latestControlVersion' | 'controlVersions'>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackages
         */
        'fields[alternativeDistributionPackages]'?: Array<'versions'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionPackage'>;
        /**
         * maximum number of related appStoreVersionExperiments returned (when they are included)
         * @deprecated
         */
        'limit[appStoreVersionExperiments]'?: number;
        /**
         * maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
         */
        'limit[appStoreVersionExperimentsV2]'?: number;
        /**
         * maximum number of related appStoreVersionLocalizations returned (when they are included)
         */
        'limit[appStoreVersionLocalizations]'?: number;
    };
    url: '/v1/appStoreVersions/{id}';
};

export type AppStoreVersionsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionsGetInstanceError = AppStoreVersionsGetInstanceErrors[keyof AppStoreVersionsGetInstanceErrors];

export type AppStoreVersionsGetInstanceResponses = {
    /**
     * Single AppStoreVersion
     */
    200: AppStoreVersionResponse;
};

export type AppStoreVersionsGetInstanceResponse = AppStoreVersionsGetInstanceResponses[keyof AppStoreVersionsGetInstanceResponses];

export type AppStoreVersionsUpdateInstanceData = {
    /**
     * AppStoreVersion representation
     */
    body: AppStoreVersionUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appStoreVersions/{id}';
};

export type AppStoreVersionsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppStoreVersionsUpdateInstanceError = AppStoreVersionsUpdateInstanceErrors[keyof AppStoreVersionsUpdateInstanceErrors];

export type AppStoreVersionsUpdateInstanceResponses = {
    /**
     * Single AppStoreVersion
     */
    200: AppStoreVersionResponse;
};

export type AppStoreVersionsUpdateInstanceResponse = AppStoreVersionsUpdateInstanceResponses[keyof AppStoreVersionsUpdateInstanceResponses];

export type AppsGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * filter by attribute 'name'
         */
        'filter[name]'?: Array<string>;
        /**
         * filter by attribute 'bundleId'
         */
        'filter[bundleId]'?: Array<string>;
        /**
         * filter by attribute 'sku'
         */
        'filter[sku]'?: Array<string>;
        /**
         * filter by attribute 'appStoreVersions.appStoreState'
         * @deprecated
         */
        'filter[appStoreVersions.appStoreState]'?: Array<'ACCEPTED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'DEVELOPER_REJECTED' | 'IN_REVIEW' | 'INVALID_BINARY' | 'METADATA_REJECTED' | 'PENDING_APPLE_RELEASE' | 'PENDING_CONTRACT' | 'PENDING_DEVELOPER_RELEASE' | 'PREPARE_FOR_SUBMISSION' | 'PREORDER_READY_FOR_SALE' | 'PROCESSING_FOR_APP_STORE' | 'READY_FOR_REVIEW' | 'READY_FOR_SALE' | 'REJECTED' | 'REMOVED_FROM_SALE' | 'WAITING_FOR_EXPORT_COMPLIANCE' | 'WAITING_FOR_REVIEW' | 'REPLACED_WITH_NEW_VERSION' | 'NOT_APPLICABLE'>;
        /**
         * filter by attribute 'appStoreVersions.platform'
         */
        'filter[appStoreVersions.platform]'?: Array<'IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS'>;
        /**
         * filter by attribute 'appStoreVersions.appVersionState'
         */
        'filter[appStoreVersions.appVersionState]'?: Array<'ACCEPTED' | 'DEVELOPER_REJECTED' | 'IN_REVIEW' | 'INVALID_BINARY' | 'METADATA_REJECTED' | 'PENDING_APPLE_RELEASE' | 'PENDING_DEVELOPER_RELEASE' | 'PREPARE_FOR_SUBMISSION' | 'PROCESSING_FOR_DISTRIBUTION' | 'READY_FOR_DISTRIBUTION' | 'READY_FOR_REVIEW' | 'REJECTED' | 'REPLACED_WITH_NEW_VERSION' | 'WAITING_FOR_EXPORT_COMPLIANCE' | 'WAITING_FOR_REVIEW'>;
        /**
         * filter by attribute 'reviewSubmissions.state'
         */
        'filter[reviewSubmissions.state]'?: Array<'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'UNRESOLVED_ISSUES' | 'CANCELING' | 'COMPLETING' | 'COMPLETE'>;
        /**
         * filter by attribute 'reviewSubmissions.platform'
         */
        'filter[reviewSubmissions.platform]'?: Array<'IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS'>;
        /**
         * filter by id(s) of related 'appStoreVersions'
         */
        'filter[appStoreVersions]'?: Array<string>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * filter by existence or non-existence of related 'gameCenterEnabledVersions'
         * @deprecated
         */
        'exists[gameCenterEnabledVersions]'?: boolean;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'name' | '-name' | 'bundleId' | '-bundleId' | 'sku' | '-sku'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type appEncryptionDeclarations
         */
        'fields[appEncryptionDeclarations]'?: Array<'appDescription' | 'createdDate' | 'usesEncryption' | 'exempt' | 'containsProprietaryCryptography' | 'containsThirdPartyCryptography' | 'availableOnFrenchStore' | 'platform' | 'uploadedDate' | 'documentUrl' | 'documentName' | 'documentType' | 'appEncryptionDeclarationState' | 'codeValue' | 'app' | 'builds' | 'appEncryptionDeclarationDocument'>;
        /**
         * the fields to include for returned resources of type ciProducts
         */
        'fields[ciProducts]'?: Array<'name' | 'createdDate' | 'productType' | 'app' | 'bundleId' | 'workflows' | 'primaryRepositories' | 'additionalRepositories' | 'buildRuns'>;
        /**
         * the fields to include for returned resources of type betaGroups
         */
        'fields[betaGroups]'?: Array<'name' | 'createdDate' | 'isInternalGroup' | 'hasAccessToAllBuilds' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimitEnabled' | 'publicLinkLimit' | 'publicLink' | 'feedbackEnabled' | 'iosBuildsAvailableForAppleSiliconMac' | 'iosBuildsAvailableForAppleVision' | 'app' | 'builds' | 'betaTesters' | 'betaRecruitmentCriteria' | 'betaRecruitmentCriterionCompatibleBuildCheck'>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type preReleaseVersions
         */
        'fields[preReleaseVersions]'?: Array<'version' | 'platform' | 'builds' | 'app'>;
        /**
         * the fields to include for returned resources of type betaAppLocalizations
         */
        'fields[betaAppLocalizations]'?: Array<'feedbackEmail' | 'marketingUrl' | 'privacyPolicyUrl' | 'tvOsPrivacyPolicy' | 'description' | 'locale' | 'app'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * the fields to include for returned resources of type betaLicenseAgreements
         */
        'fields[betaLicenseAgreements]'?: Array<'agreementText' | 'app'>;
        /**
         * the fields to include for returned resources of type betaAppReviewDetails
         */
        'fields[betaAppReviewDetails]'?: Array<'contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'app'>;
        /**
         * the fields to include for returned resources of type appInfos
         */
        'fields[appInfos]'?: Array<'appStoreState' | 'state' | 'appStoreAgeRating' | 'australiaAgeRating' | 'brazilAgeRating' | 'brazilAgeRatingV2' | 'franceAgeRating' | 'koreaAgeRating' | 'kidsAgeBand' | 'app' | 'ageRatingDeclaration' | 'appInfoLocalizations' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo'>;
        /**
         * the fields to include for returned resources of type appClips
         */
        'fields[appClips]'?: Array<'bundleId' | 'app' | 'appClipDefaultExperiences' | 'appClipAdvancedExperiences'>;
        /**
         * the fields to include for returned resources of type endUserLicenseAgreements
         */
        'fields[endUserLicenseAgreements]'?: Array<'agreementText' | 'app' | 'territories'>;
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<'referenceName' | 'productId' | 'inAppPurchaseType' | 'state' | 'apps' | 'name' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images'>;
        /**
         * the fields to include for returned resources of type subscriptionGroups
         */
        'fields[subscriptionGroups]'?: Array<'referenceName' | 'subscriptions' | 'subscriptionGroupLocalizations'>;
        /**
         * the fields to include for returned resources of type gameCenterEnabledVersions
         * @deprecated
         */
        'fields[gameCenterEnabledVersions]'?: Array<'platform' | 'versionString' | 'iconAsset' | 'compatibleVersions' | 'app'>;
        /**
         * the fields to include for returned resources of type appCustomProductPages
         */
        'fields[appCustomProductPages]'?: Array<'name' | 'url' | 'visible' | 'app' | 'appCustomProductPageVersions'>;
        /**
         * the fields to include for returned resources of type promotedPurchases
         */
        'fields[promotedPurchases]'?: Array<'visibleForAllUsers' | 'enabled' | 'state' | 'inAppPurchaseV2' | 'subscription'>;
        /**
         * the fields to include for returned resources of type appEvents
         */
        'fields[appEvents]'?: Array<'referenceName' | 'badge' | 'eventState' | 'deepLink' | 'purchaseRequirement' | 'primaryLocale' | 'priority' | 'purpose' | 'territorySchedules' | 'archivedTerritorySchedules' | 'localizations'>;
        /**
         * the fields to include for returned resources of type reviewSubmissions
         */
        'fields[reviewSubmissions]'?: Array<'platform' | 'submittedDate' | 'state' | 'app' | 'items' | 'appStoreVersionForReview' | 'submittedByActor' | 'lastUpdatedByActor'>;
        /**
         * the fields to include for returned resources of type subscriptionGracePeriods
         */
        'fields[subscriptionGracePeriods]'?: Array<'optIn' | 'sandboxOptIn' | 'duration' | 'renewalType'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<'name' | 'platform' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'app' | 'latestControlVersion' | 'controlVersions' | 'appStoreVersionExperimentTreatments'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appEncryptionDeclarations' | 'ciProduct' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'endUserLicenseAgreement' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2'>;
        /**
         * maximum number of related appClips returned (when they are included)
         */
        'limit[appClips]'?: number;
        /**
         * maximum number of related appCustomProductPages returned (when they are included)
         */
        'limit[appCustomProductPages]'?: number;
        /**
         * maximum number of related appEncryptionDeclarations returned (when they are included)
         */
        'limit[appEncryptionDeclarations]'?: number;
        /**
         * maximum number of related appEvents returned (when they are included)
         */
        'limit[appEvents]'?: number;
        /**
         * maximum number of related appInfos returned (when they are included)
         */
        'limit[appInfos]'?: number;
        /**
         * maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
         */
        'limit[appStoreVersionExperimentsV2]'?: number;
        /**
         * maximum number of related appStoreVersions returned (when they are included)
         */
        'limit[appStoreVersions]'?: number;
        /**
         * maximum number of related betaAppLocalizations returned (when they are included)
         */
        'limit[betaAppLocalizations]'?: number;
        /**
         * maximum number of related betaGroups returned (when they are included)
         */
        'limit[betaGroups]'?: number;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
        /**
         * maximum number of related gameCenterEnabledVersions returned (when they are included)
         * @deprecated
         */
        'limit[gameCenterEnabledVersions]'?: number;
        /**
         * maximum number of related inAppPurchases returned (when they are included)
         * @deprecated
         */
        'limit[inAppPurchases]'?: number;
        /**
         * maximum number of related inAppPurchasesV2 returned (when they are included)
         */
        'limit[inAppPurchasesV2]'?: number;
        /**
         * maximum number of related preReleaseVersions returned (when they are included)
         */
        'limit[preReleaseVersions]'?: number;
        /**
         * maximum number of related promotedPurchases returned (when they are included)
         */
        'limit[promotedPurchases]'?: number;
        /**
         * maximum number of related reviewSubmissions returned (when they are included)
         */
        'limit[reviewSubmissions]'?: number;
        /**
         * maximum number of related subscriptionGroups returned (when they are included)
         */
        'limit[subscriptionGroups]'?: number;
    };
    url: '/v1/apps';
};

export type AppsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type AppsGetCollectionError = AppsGetCollectionErrors[keyof AppsGetCollectionErrors];

export type AppsGetCollectionResponses = {
    /**
     * List of Apps
     */
    200: AppsResponse;
};

export type AppsGetCollectionResponse = AppsGetCollectionResponses[keyof AppsGetCollectionResponses];

export type AppsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type appEncryptionDeclarations
         */
        'fields[appEncryptionDeclarations]'?: Array<'appDescription' | 'createdDate' | 'usesEncryption' | 'exempt' | 'containsProprietaryCryptography' | 'containsThirdPartyCryptography' | 'availableOnFrenchStore' | 'platform' | 'uploadedDate' | 'documentUrl' | 'documentName' | 'documentType' | 'appEncryptionDeclarationState' | 'codeValue' | 'app' | 'builds' | 'appEncryptionDeclarationDocument'>;
        /**
         * the fields to include for returned resources of type ciProducts
         */
        'fields[ciProducts]'?: Array<'name' | 'createdDate' | 'productType' | 'app' | 'bundleId' | 'workflows' | 'primaryRepositories' | 'additionalRepositories' | 'buildRuns'>;
        /**
         * the fields to include for returned resources of type betaGroups
         */
        'fields[betaGroups]'?: Array<'name' | 'createdDate' | 'isInternalGroup' | 'hasAccessToAllBuilds' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimitEnabled' | 'publicLinkLimit' | 'publicLink' | 'feedbackEnabled' | 'iosBuildsAvailableForAppleSiliconMac' | 'iosBuildsAvailableForAppleVision' | 'app' | 'builds' | 'betaTesters' | 'betaRecruitmentCriteria' | 'betaRecruitmentCriterionCompatibleBuildCheck'>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type preReleaseVersions
         */
        'fields[preReleaseVersions]'?: Array<'version' | 'platform' | 'builds' | 'app'>;
        /**
         * the fields to include for returned resources of type betaAppLocalizations
         */
        'fields[betaAppLocalizations]'?: Array<'feedbackEmail' | 'marketingUrl' | 'privacyPolicyUrl' | 'tvOsPrivacyPolicy' | 'description' | 'locale' | 'app'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * the fields to include for returned resources of type betaLicenseAgreements
         */
        'fields[betaLicenseAgreements]'?: Array<'agreementText' | 'app'>;
        /**
         * the fields to include for returned resources of type betaAppReviewDetails
         */
        'fields[betaAppReviewDetails]'?: Array<'contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'app'>;
        /**
         * the fields to include for returned resources of type appInfos
         */
        'fields[appInfos]'?: Array<'appStoreState' | 'state' | 'appStoreAgeRating' | 'australiaAgeRating' | 'brazilAgeRating' | 'brazilAgeRatingV2' | 'franceAgeRating' | 'koreaAgeRating' | 'kidsAgeBand' | 'app' | 'ageRatingDeclaration' | 'appInfoLocalizations' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo'>;
        /**
         * the fields to include for returned resources of type appClips
         */
        'fields[appClips]'?: Array<'bundleId' | 'app' | 'appClipDefaultExperiences' | 'appClipAdvancedExperiences'>;
        /**
         * the fields to include for returned resources of type endUserLicenseAgreements
         */
        'fields[endUserLicenseAgreements]'?: Array<'agreementText' | 'app' | 'territories'>;
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<'referenceName' | 'productId' | 'inAppPurchaseType' | 'state' | 'apps' | 'name' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images'>;
        /**
         * the fields to include for returned resources of type subscriptionGroups
         */
        'fields[subscriptionGroups]'?: Array<'referenceName' | 'subscriptions' | 'subscriptionGroupLocalizations'>;
        /**
         * the fields to include for returned resources of type gameCenterEnabledVersions
         * @deprecated
         */
        'fields[gameCenterEnabledVersions]'?: Array<'platform' | 'versionString' | 'iconAsset' | 'compatibleVersions' | 'app'>;
        /**
         * the fields to include for returned resources of type appCustomProductPages
         */
        'fields[appCustomProductPages]'?: Array<'name' | 'url' | 'visible' | 'app' | 'appCustomProductPageVersions'>;
        /**
         * the fields to include for returned resources of type promotedPurchases
         */
        'fields[promotedPurchases]'?: Array<'visibleForAllUsers' | 'enabled' | 'state' | 'inAppPurchaseV2' | 'subscription'>;
        /**
         * the fields to include for returned resources of type appEvents
         */
        'fields[appEvents]'?: Array<'referenceName' | 'badge' | 'eventState' | 'deepLink' | 'purchaseRequirement' | 'primaryLocale' | 'priority' | 'purpose' | 'territorySchedules' | 'archivedTerritorySchedules' | 'localizations'>;
        /**
         * the fields to include for returned resources of type reviewSubmissions
         */
        'fields[reviewSubmissions]'?: Array<'platform' | 'submittedDate' | 'state' | 'app' | 'items' | 'appStoreVersionForReview' | 'submittedByActor' | 'lastUpdatedByActor'>;
        /**
         * the fields to include for returned resources of type subscriptionGracePeriods
         */
        'fields[subscriptionGracePeriods]'?: Array<'optIn' | 'sandboxOptIn' | 'duration' | 'renewalType'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<'name' | 'platform' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'app' | 'latestControlVersion' | 'controlVersions' | 'appStoreVersionExperimentTreatments'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appEncryptionDeclarations' | 'ciProduct' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'endUserLicenseAgreement' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2'>;
        /**
         * maximum number of related appClips returned (when they are included)
         */
        'limit[appClips]'?: number;
        /**
         * maximum number of related appCustomProductPages returned (when they are included)
         */
        'limit[appCustomProductPages]'?: number;
        /**
         * maximum number of related appEncryptionDeclarations returned (when they are included)
         */
        'limit[appEncryptionDeclarations]'?: number;
        /**
         * maximum number of related appEvents returned (when they are included)
         */
        'limit[appEvents]'?: number;
        /**
         * maximum number of related appInfos returned (when they are included)
         */
        'limit[appInfos]'?: number;
        /**
         * maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
         */
        'limit[appStoreVersionExperimentsV2]'?: number;
        /**
         * maximum number of related appStoreVersions returned (when they are included)
         */
        'limit[appStoreVersions]'?: number;
        /**
         * maximum number of related betaAppLocalizations returned (when they are included)
         */
        'limit[betaAppLocalizations]'?: number;
        /**
         * maximum number of related betaGroups returned (when they are included)
         */
        'limit[betaGroups]'?: number;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
        /**
         * maximum number of related gameCenterEnabledVersions returned (when they are included)
         * @deprecated
         */
        'limit[gameCenterEnabledVersions]'?: number;
        /**
         * maximum number of related inAppPurchases returned (when they are included)
         * @deprecated
         */
        'limit[inAppPurchases]'?: number;
        /**
         * maximum number of related inAppPurchasesV2 returned (when they are included)
         */
        'limit[inAppPurchasesV2]'?: number;
        /**
         * maximum number of related preReleaseVersions returned (when they are included)
         */
        'limit[preReleaseVersions]'?: number;
        /**
         * maximum number of related promotedPurchases returned (when they are included)
         */
        'limit[promotedPurchases]'?: number;
        /**
         * maximum number of related reviewSubmissions returned (when they are included)
         */
        'limit[reviewSubmissions]'?: number;
        /**
         * maximum number of related subscriptionGroups returned (when they are included)
         */
        'limit[subscriptionGroups]'?: number;
    };
    url: '/v1/apps/{id}';
};

export type AppsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsGetInstanceError = AppsGetInstanceErrors[keyof AppsGetInstanceErrors];

export type AppsGetInstanceResponses = {
    /**
     * Single App
     */
    200: AppResponse;
};

export type AppsGetInstanceResponse = AppsGetInstanceResponses[keyof AppsGetInstanceResponses];

export type AppsUpdateInstanceData = {
    /**
     * App representation
     */
    body: AppUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/apps/{id}';
};

export type AppsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppsUpdateInstanceError = AppsUpdateInstanceErrors[keyof AppsUpdateInstanceErrors];

export type AppsUpdateInstanceResponses = {
    /**
     * Single App
     */
    200: AppResponse;
};

export type AppsUpdateInstanceResponse = AppsUpdateInstanceResponses[keyof AppsUpdateInstanceResponses];

export type BetaAppClipInvocationLocalizationsCreateInstanceData = {
    /**
     * BetaAppClipInvocationLocalization representation
     */
    body: BetaAppClipInvocationLocalizationCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/betaAppClipInvocationLocalizations';
};

export type BetaAppClipInvocationLocalizationsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaAppClipInvocationLocalizationsCreateInstanceError = BetaAppClipInvocationLocalizationsCreateInstanceErrors[keyof BetaAppClipInvocationLocalizationsCreateInstanceErrors];

export type BetaAppClipInvocationLocalizationsCreateInstanceResponses = {
    /**
     * Single BetaAppClipInvocationLocalization
     */
    201: BetaAppClipInvocationLocalizationResponse;
};

export type BetaAppClipInvocationLocalizationsCreateInstanceResponse = BetaAppClipInvocationLocalizationsCreateInstanceResponses[keyof BetaAppClipInvocationLocalizationsCreateInstanceResponses];

export type BetaAppClipInvocationLocalizationsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaAppClipInvocationLocalizations/{id}';
};

export type BetaAppClipInvocationLocalizationsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type BetaAppClipInvocationLocalizationsDeleteInstanceError = BetaAppClipInvocationLocalizationsDeleteInstanceErrors[keyof BetaAppClipInvocationLocalizationsDeleteInstanceErrors];

export type BetaAppClipInvocationLocalizationsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type BetaAppClipInvocationLocalizationsDeleteInstanceResponse = BetaAppClipInvocationLocalizationsDeleteInstanceResponses[keyof BetaAppClipInvocationLocalizationsDeleteInstanceResponses];

export type BetaAppClipInvocationLocalizationsUpdateInstanceData = {
    /**
     * BetaAppClipInvocationLocalization representation
     */
    body: BetaAppClipInvocationLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaAppClipInvocationLocalizations/{id}';
};

export type BetaAppClipInvocationLocalizationsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaAppClipInvocationLocalizationsUpdateInstanceError = BetaAppClipInvocationLocalizationsUpdateInstanceErrors[keyof BetaAppClipInvocationLocalizationsUpdateInstanceErrors];

export type BetaAppClipInvocationLocalizationsUpdateInstanceResponses = {
    /**
     * Single BetaAppClipInvocationLocalization
     */
    200: BetaAppClipInvocationLocalizationResponse;
};

export type BetaAppClipInvocationLocalizationsUpdateInstanceResponse = BetaAppClipInvocationLocalizationsUpdateInstanceResponses[keyof BetaAppClipInvocationLocalizationsUpdateInstanceResponses];

export type BetaAppClipInvocationsCreateInstanceData = {
    /**
     * BetaAppClipInvocation representation
     */
    body: BetaAppClipInvocationCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/betaAppClipInvocations';
};

export type BetaAppClipInvocationsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaAppClipInvocationsCreateInstanceError = BetaAppClipInvocationsCreateInstanceErrors[keyof BetaAppClipInvocationsCreateInstanceErrors];

export type BetaAppClipInvocationsCreateInstanceResponses = {
    /**
     * Single BetaAppClipInvocation
     */
    201: BetaAppClipInvocationResponse;
};

export type BetaAppClipInvocationsCreateInstanceResponse = BetaAppClipInvocationsCreateInstanceResponses[keyof BetaAppClipInvocationsCreateInstanceResponses];

export type BetaAppClipInvocationsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaAppClipInvocations/{id}';
};

export type BetaAppClipInvocationsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type BetaAppClipInvocationsDeleteInstanceError = BetaAppClipInvocationsDeleteInstanceErrors[keyof BetaAppClipInvocationsDeleteInstanceErrors];

export type BetaAppClipInvocationsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type BetaAppClipInvocationsDeleteInstanceResponse = BetaAppClipInvocationsDeleteInstanceResponses[keyof BetaAppClipInvocationsDeleteInstanceResponses];

export type BetaAppClipInvocationsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaAppClipInvocations
         */
        'fields[betaAppClipInvocations]'?: Array<'url' | 'betaAppClipInvocationLocalizations'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'betaAppClipInvocationLocalizations'>;
        /**
         * maximum number of related betaAppClipInvocationLocalizations returned (when they are included)
         */
        'limit[betaAppClipInvocationLocalizations]'?: number;
    };
    url: '/v1/betaAppClipInvocations/{id}';
};

export type BetaAppClipInvocationsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaAppClipInvocationsGetInstanceError = BetaAppClipInvocationsGetInstanceErrors[keyof BetaAppClipInvocationsGetInstanceErrors];

export type BetaAppClipInvocationsGetInstanceResponses = {
    /**
     * Single BetaAppClipInvocation
     */
    200: BetaAppClipInvocationResponse;
};

export type BetaAppClipInvocationsGetInstanceResponse = BetaAppClipInvocationsGetInstanceResponses[keyof BetaAppClipInvocationsGetInstanceResponses];

export type BetaAppClipInvocationsUpdateInstanceData = {
    /**
     * BetaAppClipInvocation representation
     */
    body: BetaAppClipInvocationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaAppClipInvocations/{id}';
};

export type BetaAppClipInvocationsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaAppClipInvocationsUpdateInstanceError = BetaAppClipInvocationsUpdateInstanceErrors[keyof BetaAppClipInvocationsUpdateInstanceErrors];

export type BetaAppClipInvocationsUpdateInstanceResponses = {
    /**
     * Single BetaAppClipInvocation
     */
    200: BetaAppClipInvocationResponse;
};

export type BetaAppClipInvocationsUpdateInstanceResponse = BetaAppClipInvocationsUpdateInstanceResponses[keyof BetaAppClipInvocationsUpdateInstanceResponses];

export type BetaAppLocalizationsGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * filter by attribute 'locale'
         */
        'filter[locale]'?: Array<string>;
        /**
         * filter by id(s) of related 'app'
         */
        'filter[app]'?: Array<string>;
        /**
         * the fields to include for returned resources of type betaAppLocalizations
         */
        'fields[betaAppLocalizations]'?: Array<'feedbackEmail' | 'marketingUrl' | 'privacyPolicyUrl' | 'tvOsPrivacyPolicy' | 'description' | 'locale' | 'app'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app'>;
    };
    url: '/v1/betaAppLocalizations';
};

export type BetaAppLocalizationsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type BetaAppLocalizationsGetCollectionError = BetaAppLocalizationsGetCollectionErrors[keyof BetaAppLocalizationsGetCollectionErrors];

export type BetaAppLocalizationsGetCollectionResponses = {
    /**
     * List of BetaAppLocalizations
     */
    200: BetaAppLocalizationsResponse;
};

export type BetaAppLocalizationsGetCollectionResponse = BetaAppLocalizationsGetCollectionResponses[keyof BetaAppLocalizationsGetCollectionResponses];

export type BetaAppLocalizationsCreateInstanceData = {
    /**
     * BetaAppLocalization representation
     */
    body: BetaAppLocalizationCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/betaAppLocalizations';
};

export type BetaAppLocalizationsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaAppLocalizationsCreateInstanceError = BetaAppLocalizationsCreateInstanceErrors[keyof BetaAppLocalizationsCreateInstanceErrors];

export type BetaAppLocalizationsCreateInstanceResponses = {
    /**
     * Single BetaAppLocalization
     */
    201: BetaAppLocalizationResponse;
};

export type BetaAppLocalizationsCreateInstanceResponse = BetaAppLocalizationsCreateInstanceResponses[keyof BetaAppLocalizationsCreateInstanceResponses];

export type BetaAppLocalizationsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaAppLocalizations/{id}';
};

export type BetaAppLocalizationsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type BetaAppLocalizationsDeleteInstanceError = BetaAppLocalizationsDeleteInstanceErrors[keyof BetaAppLocalizationsDeleteInstanceErrors];

export type BetaAppLocalizationsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type BetaAppLocalizationsDeleteInstanceResponse = BetaAppLocalizationsDeleteInstanceResponses[keyof BetaAppLocalizationsDeleteInstanceResponses];

export type BetaAppLocalizationsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaAppLocalizations
         */
        'fields[betaAppLocalizations]'?: Array<'feedbackEmail' | 'marketingUrl' | 'privacyPolicyUrl' | 'tvOsPrivacyPolicy' | 'description' | 'locale' | 'app'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app'>;
    };
    url: '/v1/betaAppLocalizations/{id}';
};

export type BetaAppLocalizationsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaAppLocalizationsGetInstanceError = BetaAppLocalizationsGetInstanceErrors[keyof BetaAppLocalizationsGetInstanceErrors];

export type BetaAppLocalizationsGetInstanceResponses = {
    /**
     * Single BetaAppLocalization
     */
    200: BetaAppLocalizationResponse;
};

export type BetaAppLocalizationsGetInstanceResponse = BetaAppLocalizationsGetInstanceResponses[keyof BetaAppLocalizationsGetInstanceResponses];

export type BetaAppLocalizationsUpdateInstanceData = {
    /**
     * BetaAppLocalization representation
     */
    body: BetaAppLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaAppLocalizations/{id}';
};

export type BetaAppLocalizationsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaAppLocalizationsUpdateInstanceError = BetaAppLocalizationsUpdateInstanceErrors[keyof BetaAppLocalizationsUpdateInstanceErrors];

export type BetaAppLocalizationsUpdateInstanceResponses = {
    /**
     * Single BetaAppLocalization
     */
    200: BetaAppLocalizationResponse;
};

export type BetaAppLocalizationsUpdateInstanceResponse = BetaAppLocalizationsUpdateInstanceResponses[keyof BetaAppLocalizationsUpdateInstanceResponses];

export type BetaAppReviewDetailsGetCollectionData = {
    body?: never;
    path?: never;
    query: {
        /**
         * filter by id(s) of related 'app'
         */
        'filter[app]': Array<string>;
        /**
         * the fields to include for returned resources of type betaAppReviewDetails
         */
        'fields[betaAppReviewDetails]'?: Array<'contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'app'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app'>;
    };
    url: '/v1/betaAppReviewDetails';
};

export type BetaAppReviewDetailsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type BetaAppReviewDetailsGetCollectionError = BetaAppReviewDetailsGetCollectionErrors[keyof BetaAppReviewDetailsGetCollectionErrors];

export type BetaAppReviewDetailsGetCollectionResponses = {
    /**
     * List of BetaAppReviewDetails
     */
    200: BetaAppReviewDetailsResponse;
};

export type BetaAppReviewDetailsGetCollectionResponse = BetaAppReviewDetailsGetCollectionResponses[keyof BetaAppReviewDetailsGetCollectionResponses];

export type BetaAppReviewDetailsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaAppReviewDetails
         */
        'fields[betaAppReviewDetails]'?: Array<'contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'app'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app'>;
    };
    url: '/v1/betaAppReviewDetails/{id}';
};

export type BetaAppReviewDetailsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaAppReviewDetailsGetInstanceError = BetaAppReviewDetailsGetInstanceErrors[keyof BetaAppReviewDetailsGetInstanceErrors];

export type BetaAppReviewDetailsGetInstanceResponses = {
    /**
     * Single BetaAppReviewDetail
     */
    200: BetaAppReviewDetailResponse;
};

export type BetaAppReviewDetailsGetInstanceResponse = BetaAppReviewDetailsGetInstanceResponses[keyof BetaAppReviewDetailsGetInstanceResponses];

export type BetaAppReviewDetailsUpdateInstanceData = {
    /**
     * BetaAppReviewDetail representation
     */
    body: BetaAppReviewDetailUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaAppReviewDetails/{id}';
};

export type BetaAppReviewDetailsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaAppReviewDetailsUpdateInstanceError = BetaAppReviewDetailsUpdateInstanceErrors[keyof BetaAppReviewDetailsUpdateInstanceErrors];

export type BetaAppReviewDetailsUpdateInstanceResponses = {
    /**
     * Single BetaAppReviewDetail
     */
    200: BetaAppReviewDetailResponse;
};

export type BetaAppReviewDetailsUpdateInstanceResponse = BetaAppReviewDetailsUpdateInstanceResponses[keyof BetaAppReviewDetailsUpdateInstanceResponses];

export type BetaAppReviewSubmissionsGetCollectionData = {
    body?: never;
    path?: never;
    query: {
        /**
         * filter by attribute 'betaReviewState'
         */
        'filter[betaReviewState]'?: Array<'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'REJECTED' | 'APPROVED'>;
        /**
         * filter by id(s) of related 'build'
         */
        'filter[build]': Array<string>;
        /**
         * the fields to include for returned resources of type betaAppReviewSubmissions
         */
        'fields[betaAppReviewSubmissions]'?: Array<'betaReviewState' | 'submittedDate' | 'build'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'build'>;
    };
    url: '/v1/betaAppReviewSubmissions';
};

export type BetaAppReviewSubmissionsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type BetaAppReviewSubmissionsGetCollectionError = BetaAppReviewSubmissionsGetCollectionErrors[keyof BetaAppReviewSubmissionsGetCollectionErrors];

export type BetaAppReviewSubmissionsGetCollectionResponses = {
    /**
     * List of BetaAppReviewSubmissions
     */
    200: BetaAppReviewSubmissionsResponse;
};

export type BetaAppReviewSubmissionsGetCollectionResponse = BetaAppReviewSubmissionsGetCollectionResponses[keyof BetaAppReviewSubmissionsGetCollectionResponses];

export type BetaAppReviewSubmissionsCreateInstanceData = {
    /**
     * BetaAppReviewSubmission representation
     */
    body: BetaAppReviewSubmissionCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/betaAppReviewSubmissions';
};

export type BetaAppReviewSubmissionsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaAppReviewSubmissionsCreateInstanceError = BetaAppReviewSubmissionsCreateInstanceErrors[keyof BetaAppReviewSubmissionsCreateInstanceErrors];

export type BetaAppReviewSubmissionsCreateInstanceResponses = {
    /**
     * Single BetaAppReviewSubmission
     */
    201: BetaAppReviewSubmissionResponse;
};

export type BetaAppReviewSubmissionsCreateInstanceResponse = BetaAppReviewSubmissionsCreateInstanceResponses[keyof BetaAppReviewSubmissionsCreateInstanceResponses];

export type BetaAppReviewSubmissionsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaAppReviewSubmissions
         */
        'fields[betaAppReviewSubmissions]'?: Array<'betaReviewState' | 'submittedDate' | 'build'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'build'>;
    };
    url: '/v1/betaAppReviewSubmissions/{id}';
};

export type BetaAppReviewSubmissionsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaAppReviewSubmissionsGetInstanceError = BetaAppReviewSubmissionsGetInstanceErrors[keyof BetaAppReviewSubmissionsGetInstanceErrors];

export type BetaAppReviewSubmissionsGetInstanceResponses = {
    /**
     * Single BetaAppReviewSubmission
     */
    200: BetaAppReviewSubmissionResponse;
};

export type BetaAppReviewSubmissionsGetInstanceResponse = BetaAppReviewSubmissionsGetInstanceResponses[keyof BetaAppReviewSubmissionsGetInstanceResponses];

export type BetaBuildLocalizationsGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * filter by attribute 'locale'
         */
        'filter[locale]'?: Array<string>;
        /**
         * filter by id(s) of related 'build'
         */
        'filter[build]'?: Array<string>;
        /**
         * the fields to include for returned resources of type betaBuildLocalizations
         */
        'fields[betaBuildLocalizations]'?: Array<'whatsNew' | 'locale' | 'build'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'build'>;
    };
    url: '/v1/betaBuildLocalizations';
};

export type BetaBuildLocalizationsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type BetaBuildLocalizationsGetCollectionError = BetaBuildLocalizationsGetCollectionErrors[keyof BetaBuildLocalizationsGetCollectionErrors];

export type BetaBuildLocalizationsGetCollectionResponses = {
    /**
     * List of BetaBuildLocalizations
     */
    200: BetaBuildLocalizationsResponse;
};

export type BetaBuildLocalizationsGetCollectionResponse = BetaBuildLocalizationsGetCollectionResponses[keyof BetaBuildLocalizationsGetCollectionResponses];

export type BetaBuildLocalizationsCreateInstanceData = {
    /**
     * BetaBuildLocalization representation
     */
    body: BetaBuildLocalizationCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/betaBuildLocalizations';
};

export type BetaBuildLocalizationsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaBuildLocalizationsCreateInstanceError = BetaBuildLocalizationsCreateInstanceErrors[keyof BetaBuildLocalizationsCreateInstanceErrors];

export type BetaBuildLocalizationsCreateInstanceResponses = {
    /**
     * Single BetaBuildLocalization
     */
    201: BetaBuildLocalizationResponse;
};

export type BetaBuildLocalizationsCreateInstanceResponse = BetaBuildLocalizationsCreateInstanceResponses[keyof BetaBuildLocalizationsCreateInstanceResponses];

export type BetaBuildLocalizationsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaBuildLocalizations/{id}';
};

export type BetaBuildLocalizationsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type BetaBuildLocalizationsDeleteInstanceError = BetaBuildLocalizationsDeleteInstanceErrors[keyof BetaBuildLocalizationsDeleteInstanceErrors];

export type BetaBuildLocalizationsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type BetaBuildLocalizationsDeleteInstanceResponse = BetaBuildLocalizationsDeleteInstanceResponses[keyof BetaBuildLocalizationsDeleteInstanceResponses];

export type BetaBuildLocalizationsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaBuildLocalizations
         */
        'fields[betaBuildLocalizations]'?: Array<'whatsNew' | 'locale' | 'build'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'build'>;
    };
    url: '/v1/betaBuildLocalizations/{id}';
};

export type BetaBuildLocalizationsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaBuildLocalizationsGetInstanceError = BetaBuildLocalizationsGetInstanceErrors[keyof BetaBuildLocalizationsGetInstanceErrors];

export type BetaBuildLocalizationsGetInstanceResponses = {
    /**
     * Single BetaBuildLocalization
     */
    200: BetaBuildLocalizationResponse;
};

export type BetaBuildLocalizationsGetInstanceResponse = BetaBuildLocalizationsGetInstanceResponses[keyof BetaBuildLocalizationsGetInstanceResponses];

export type BetaBuildLocalizationsUpdateInstanceData = {
    /**
     * BetaBuildLocalization representation
     */
    body: BetaBuildLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaBuildLocalizations/{id}';
};

export type BetaBuildLocalizationsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaBuildLocalizationsUpdateInstanceError = BetaBuildLocalizationsUpdateInstanceErrors[keyof BetaBuildLocalizationsUpdateInstanceErrors];

export type BetaBuildLocalizationsUpdateInstanceResponses = {
    /**
     * Single BetaBuildLocalization
     */
    200: BetaBuildLocalizationResponse;
};

export type BetaBuildLocalizationsUpdateInstanceResponse = BetaBuildLocalizationsUpdateInstanceResponses[keyof BetaBuildLocalizationsUpdateInstanceResponses];

export type BetaGroupsGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * filter by attribute 'name'
         */
        'filter[name]'?: Array<string>;
        /**
         * filter by attribute 'isInternalGroup'
         */
        'filter[isInternalGroup]'?: Array<string>;
        /**
         * filter by attribute 'publicLinkEnabled'
         */
        'filter[publicLinkEnabled]'?: Array<string>;
        /**
         * filter by attribute 'publicLinkLimitEnabled'
         */
        'filter[publicLinkLimitEnabled]'?: Array<string>;
        /**
         * filter by attribute 'publicLink'
         */
        'filter[publicLink]'?: Array<string>;
        /**
         * filter by id(s) of related 'app'
         */
        'filter[app]'?: Array<string>;
        /**
         * filter by id(s) of related 'builds'
         */
        'filter[builds]'?: Array<string>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'name' | '-name' | 'createdDate' | '-createdDate' | 'publicLinkEnabled' | '-publicLinkEnabled' | 'publicLinkLimit' | '-publicLinkLimit'>;
        /**
         * the fields to include for returned resources of type betaGroups
         */
        'fields[betaGroups]'?: Array<'name' | 'createdDate' | 'isInternalGroup' | 'hasAccessToAllBuilds' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimitEnabled' | 'publicLinkLimit' | 'publicLink' | 'feedbackEnabled' | 'iosBuildsAvailableForAppleSiliconMac' | 'iosBuildsAvailableForAppleVision' | 'app' | 'builds' | 'betaTesters' | 'betaRecruitmentCriteria' | 'betaRecruitmentCriterionCompatibleBuildCheck'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * the fields to include for returned resources of type betaTesters
         */
        'fields[betaTesters]'?: Array<'firstName' | 'lastName' | 'email' | 'inviteType' | 'state' | 'apps' | 'betaGroups' | 'builds'>;
        /**
         * the fields to include for returned resources of type betaRecruitmentCriteria
         */
        'fields[betaRecruitmentCriteria]'?: Array<'lastModifiedDate' | 'deviceFamilyOsVersionFilters'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'builds' | 'betaTesters' | 'betaRecruitmentCriteria'>;
        /**
         * maximum number of related betaTesters returned (when they are included)
         */
        'limit[betaTesters]'?: number;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
    };
    url: '/v1/betaGroups';
};

export type BetaGroupsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type BetaGroupsGetCollectionError = BetaGroupsGetCollectionErrors[keyof BetaGroupsGetCollectionErrors];

export type BetaGroupsGetCollectionResponses = {
    /**
     * List of BetaGroups
     */
    200: BetaGroupsResponse;
};

export type BetaGroupsGetCollectionResponse = BetaGroupsGetCollectionResponses[keyof BetaGroupsGetCollectionResponses];

export type BetaGroupsCreateInstanceData = {
    /**
     * BetaGroup representation
     */
    body: BetaGroupCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/betaGroups';
};

export type BetaGroupsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaGroupsCreateInstanceError = BetaGroupsCreateInstanceErrors[keyof BetaGroupsCreateInstanceErrors];

export type BetaGroupsCreateInstanceResponses = {
    /**
     * Single BetaGroup
     */
    201: BetaGroupResponse;
};

export type BetaGroupsCreateInstanceResponse = BetaGroupsCreateInstanceResponses[keyof BetaGroupsCreateInstanceResponses];

export type BetaGroupsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaGroups/{id}';
};

export type BetaGroupsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type BetaGroupsDeleteInstanceError = BetaGroupsDeleteInstanceErrors[keyof BetaGroupsDeleteInstanceErrors];

export type BetaGroupsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type BetaGroupsDeleteInstanceResponse = BetaGroupsDeleteInstanceResponses[keyof BetaGroupsDeleteInstanceResponses];

export type BetaGroupsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaGroups
         */
        'fields[betaGroups]'?: Array<'name' | 'createdDate' | 'isInternalGroup' | 'hasAccessToAllBuilds' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimitEnabled' | 'publicLinkLimit' | 'publicLink' | 'feedbackEnabled' | 'iosBuildsAvailableForAppleSiliconMac' | 'iosBuildsAvailableForAppleVision' | 'app' | 'builds' | 'betaTesters' | 'betaRecruitmentCriteria' | 'betaRecruitmentCriterionCompatibleBuildCheck'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * the fields to include for returned resources of type betaTesters
         */
        'fields[betaTesters]'?: Array<'firstName' | 'lastName' | 'email' | 'inviteType' | 'state' | 'apps' | 'betaGroups' | 'builds'>;
        /**
         * the fields to include for returned resources of type betaRecruitmentCriteria
         */
        'fields[betaRecruitmentCriteria]'?: Array<'lastModifiedDate' | 'deviceFamilyOsVersionFilters'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'builds' | 'betaTesters' | 'betaRecruitmentCriteria'>;
        /**
         * maximum number of related betaTesters returned (when they are included)
         */
        'limit[betaTesters]'?: number;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
    };
    url: '/v1/betaGroups/{id}';
};

export type BetaGroupsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaGroupsGetInstanceError = BetaGroupsGetInstanceErrors[keyof BetaGroupsGetInstanceErrors];

export type BetaGroupsGetInstanceResponses = {
    /**
     * Single BetaGroup
     */
    200: BetaGroupResponse;
};

export type BetaGroupsGetInstanceResponse = BetaGroupsGetInstanceResponses[keyof BetaGroupsGetInstanceResponses];

export type BetaGroupsUpdateInstanceData = {
    /**
     * BetaGroup representation
     */
    body: BetaGroupUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaGroups/{id}';
};

export type BetaGroupsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaGroupsUpdateInstanceError = BetaGroupsUpdateInstanceErrors[keyof BetaGroupsUpdateInstanceErrors];

export type BetaGroupsUpdateInstanceResponses = {
    /**
     * Single BetaGroup
     */
    200: BetaGroupResponse;
};

export type BetaGroupsUpdateInstanceResponse = BetaGroupsUpdateInstanceResponses[keyof BetaGroupsUpdateInstanceResponses];

export type BetaLicenseAgreementsGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * filter by id(s) of related 'app'
         */
        'filter[app]'?: Array<string>;
        /**
         * the fields to include for returned resources of type betaLicenseAgreements
         */
        'fields[betaLicenseAgreements]'?: Array<'agreementText' | 'app'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app'>;
    };
    url: '/v1/betaLicenseAgreements';
};

export type BetaLicenseAgreementsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type BetaLicenseAgreementsGetCollectionError = BetaLicenseAgreementsGetCollectionErrors[keyof BetaLicenseAgreementsGetCollectionErrors];

export type BetaLicenseAgreementsGetCollectionResponses = {
    /**
     * List of BetaLicenseAgreements
     */
    200: BetaLicenseAgreementsResponse;
};

export type BetaLicenseAgreementsGetCollectionResponse = BetaLicenseAgreementsGetCollectionResponses[keyof BetaLicenseAgreementsGetCollectionResponses];

export type BetaLicenseAgreementsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaLicenseAgreements
         */
        'fields[betaLicenseAgreements]'?: Array<'agreementText' | 'app'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app'>;
    };
    url: '/v1/betaLicenseAgreements/{id}';
};

export type BetaLicenseAgreementsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaLicenseAgreementsGetInstanceError = BetaLicenseAgreementsGetInstanceErrors[keyof BetaLicenseAgreementsGetInstanceErrors];

export type BetaLicenseAgreementsGetInstanceResponses = {
    /**
     * Single BetaLicenseAgreement
     */
    200: BetaLicenseAgreementResponse;
};

export type BetaLicenseAgreementsGetInstanceResponse = BetaLicenseAgreementsGetInstanceResponses[keyof BetaLicenseAgreementsGetInstanceResponses];

export type BetaLicenseAgreementsUpdateInstanceData = {
    /**
     * BetaLicenseAgreement representation
     */
    body: BetaLicenseAgreementUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaLicenseAgreements/{id}';
};

export type BetaLicenseAgreementsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaLicenseAgreementsUpdateInstanceError = BetaLicenseAgreementsUpdateInstanceErrors[keyof BetaLicenseAgreementsUpdateInstanceErrors];

export type BetaLicenseAgreementsUpdateInstanceResponses = {
    /**
     * Single BetaLicenseAgreement
     */
    200: BetaLicenseAgreementResponse;
};

export type BetaLicenseAgreementsUpdateInstanceResponse = BetaLicenseAgreementsUpdateInstanceResponses[keyof BetaLicenseAgreementsUpdateInstanceResponses];

export type BetaRecruitmentCriteriaCreateInstanceData = {
    /**
     * BetaRecruitmentCriterion representation
     */
    body: BetaRecruitmentCriterionCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/betaRecruitmentCriteria';
};

export type BetaRecruitmentCriteriaCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaRecruitmentCriteriaCreateInstanceError = BetaRecruitmentCriteriaCreateInstanceErrors[keyof BetaRecruitmentCriteriaCreateInstanceErrors];

export type BetaRecruitmentCriteriaCreateInstanceResponses = {
    /**
     * Single BetaRecruitmentCriterion
     */
    201: BetaRecruitmentCriterionResponse;
};

export type BetaRecruitmentCriteriaCreateInstanceResponse = BetaRecruitmentCriteriaCreateInstanceResponses[keyof BetaRecruitmentCriteriaCreateInstanceResponses];

export type BetaRecruitmentCriteriaDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaRecruitmentCriteria/{id}';
};

export type BetaRecruitmentCriteriaDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type BetaRecruitmentCriteriaDeleteInstanceError = BetaRecruitmentCriteriaDeleteInstanceErrors[keyof BetaRecruitmentCriteriaDeleteInstanceErrors];

export type BetaRecruitmentCriteriaDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type BetaRecruitmentCriteriaDeleteInstanceResponse = BetaRecruitmentCriteriaDeleteInstanceResponses[keyof BetaRecruitmentCriteriaDeleteInstanceResponses];

export type BetaRecruitmentCriteriaUpdateInstanceData = {
    /**
     * BetaRecruitmentCriterion representation
     */
    body: BetaRecruitmentCriterionUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaRecruitmentCriteria/{id}';
};

export type BetaRecruitmentCriteriaUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaRecruitmentCriteriaUpdateInstanceError = BetaRecruitmentCriteriaUpdateInstanceErrors[keyof BetaRecruitmentCriteriaUpdateInstanceErrors];

export type BetaRecruitmentCriteriaUpdateInstanceResponses = {
    /**
     * Single BetaRecruitmentCriterion
     */
    200: BetaRecruitmentCriterionResponse;
};

export type BetaRecruitmentCriteriaUpdateInstanceResponse = BetaRecruitmentCriteriaUpdateInstanceResponses[keyof BetaRecruitmentCriteriaUpdateInstanceResponses];

export type BetaRecruitmentCriterionOptionsGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * the fields to include for returned resources of type betaRecruitmentCriterionOptions
         */
        'fields[betaRecruitmentCriterionOptions]'?: Array<'deviceFamilyOsVersions'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/betaRecruitmentCriterionOptions';
};

export type BetaRecruitmentCriterionOptionsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type BetaRecruitmentCriterionOptionsGetCollectionError = BetaRecruitmentCriterionOptionsGetCollectionErrors[keyof BetaRecruitmentCriterionOptionsGetCollectionErrors];

export type BetaRecruitmentCriterionOptionsGetCollectionResponses = {
    /**
     * List of BetaRecruitmentCriterionOptions
     */
    200: BetaRecruitmentCriterionOptionsResponse;
};

export type BetaRecruitmentCriterionOptionsGetCollectionResponse = BetaRecruitmentCriterionOptionsGetCollectionResponses[keyof BetaRecruitmentCriterionOptionsGetCollectionResponses];

export type BetaTesterInvitationsCreateInstanceData = {
    /**
     * BetaTesterInvitation representation
     */
    body: BetaTesterInvitationCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/betaTesterInvitations';
};

export type BetaTesterInvitationsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaTesterInvitationsCreateInstanceError = BetaTesterInvitationsCreateInstanceErrors[keyof BetaTesterInvitationsCreateInstanceErrors];

export type BetaTesterInvitationsCreateInstanceResponses = {
    /**
     * Single BetaTesterInvitation
     */
    201: BetaTesterInvitationResponse;
};

export type BetaTesterInvitationsCreateInstanceResponse = BetaTesterInvitationsCreateInstanceResponses[keyof BetaTesterInvitationsCreateInstanceResponses];

export type BetaTestersGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * filter by attribute 'firstName'
         */
        'filter[firstName]'?: Array<string>;
        /**
         * filter by attribute 'lastName'
         */
        'filter[lastName]'?: Array<string>;
        /**
         * filter by attribute 'email'
         */
        'filter[email]'?: Array<string>;
        /**
         * filter by attribute 'inviteType'
         */
        'filter[inviteType]'?: Array<'EMAIL' | 'PUBLIC_LINK'>;
        /**
         * filter by id(s) of related 'apps'
         */
        'filter[apps]'?: Array<string>;
        /**
         * filter by id(s) of related 'betaGroups'
         */
        'filter[betaGroups]'?: Array<string>;
        /**
         * filter by id(s) of related 'builds'
         */
        'filter[builds]'?: Array<string>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'firstName' | '-firstName' | 'lastName' | '-lastName' | 'email' | '-email' | 'inviteType' | '-inviteType' | 'state' | '-state'>;
        /**
         * the fields to include for returned resources of type betaTesters
         */
        'fields[betaTesters]'?: Array<'firstName' | 'lastName' | 'email' | 'inviteType' | 'state' | 'apps' | 'betaGroups' | 'builds'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type betaGroups
         */
        'fields[betaGroups]'?: Array<'name' | 'createdDate' | 'isInternalGroup' | 'hasAccessToAllBuilds' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimitEnabled' | 'publicLinkLimit' | 'publicLink' | 'feedbackEnabled' | 'iosBuildsAvailableForAppleSiliconMac' | 'iosBuildsAvailableForAppleVision' | 'app' | 'builds' | 'betaTesters' | 'betaRecruitmentCriteria' | 'betaRecruitmentCriterionCompatibleBuildCheck'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'apps' | 'betaGroups' | 'builds'>;
        /**
         * maximum number of related apps returned (when they are included)
         */
        'limit[apps]'?: number;
        /**
         * maximum number of related betaGroups returned (when they are included)
         */
        'limit[betaGroups]'?: number;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
    };
    url: '/v1/betaTesters';
};

export type BetaTestersGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type BetaTestersGetCollectionError = BetaTestersGetCollectionErrors[keyof BetaTestersGetCollectionErrors];

export type BetaTestersGetCollectionResponses = {
    /**
     * List of BetaTesters
     */
    200: BetaTestersResponse;
};

export type BetaTestersGetCollectionResponse = BetaTestersGetCollectionResponses[keyof BetaTestersGetCollectionResponses];

export type BetaTestersCreateInstanceData = {
    /**
     * BetaTester representation
     */
    body: BetaTesterCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/betaTesters';
};

export type BetaTestersCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaTestersCreateInstanceError = BetaTestersCreateInstanceErrors[keyof BetaTestersCreateInstanceErrors];

export type BetaTestersCreateInstanceResponses = {
    /**
     * Single BetaTester
     */
    201: BetaTesterResponse;
};

export type BetaTestersCreateInstanceResponse = BetaTestersCreateInstanceResponses[keyof BetaTestersCreateInstanceResponses];

export type BetaTestersDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaTesters/{id}';
};

export type BetaTestersDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type BetaTestersDeleteInstanceError = BetaTestersDeleteInstanceErrors[keyof BetaTestersDeleteInstanceErrors];

export type BetaTestersDeleteInstanceResponses = {
    /**
     * Accepted for future completion
     */
    202: unknown;
    /**
     * Success (no content)
     */
    204: void;
};

export type BetaTestersDeleteInstanceResponse = BetaTestersDeleteInstanceResponses[keyof BetaTestersDeleteInstanceResponses];

export type BetaTestersGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaTesters
         */
        'fields[betaTesters]'?: Array<'firstName' | 'lastName' | 'email' | 'inviteType' | 'state' | 'apps' | 'betaGroups' | 'builds'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type betaGroups
         */
        'fields[betaGroups]'?: Array<'name' | 'createdDate' | 'isInternalGroup' | 'hasAccessToAllBuilds' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimitEnabled' | 'publicLinkLimit' | 'publicLink' | 'feedbackEnabled' | 'iosBuildsAvailableForAppleSiliconMac' | 'iosBuildsAvailableForAppleVision' | 'app' | 'builds' | 'betaTesters' | 'betaRecruitmentCriteria' | 'betaRecruitmentCriterionCompatibleBuildCheck'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'apps' | 'betaGroups' | 'builds'>;
        /**
         * maximum number of related apps returned (when they are included)
         */
        'limit[apps]'?: number;
        /**
         * maximum number of related betaGroups returned (when they are included)
         */
        'limit[betaGroups]'?: number;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
    };
    url: '/v1/betaTesters/{id}';
};

export type BetaTestersGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaTestersGetInstanceError = BetaTestersGetInstanceErrors[keyof BetaTestersGetInstanceErrors];

export type BetaTestersGetInstanceResponses = {
    /**
     * Single BetaTester
     */
    200: BetaTesterResponse;
};

export type BetaTestersGetInstanceResponse = BetaTestersGetInstanceResponses[keyof BetaTestersGetInstanceResponses];

export type BuildBetaDetailsGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * filter by id(s) of related 'build'
         */
        'filter[build]'?: Array<string>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * the fields to include for returned resources of type buildBetaDetails
         */
        'fields[buildBetaDetails]'?: Array<'autoNotifyEnabled' | 'internalBuildState' | 'externalBuildState' | 'build'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'build'>;
    };
    url: '/v1/buildBetaDetails';
};

export type BuildBetaDetailsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type BuildBetaDetailsGetCollectionError = BuildBetaDetailsGetCollectionErrors[keyof BuildBetaDetailsGetCollectionErrors];

export type BuildBetaDetailsGetCollectionResponses = {
    /**
     * List of BuildBetaDetails
     */
    200: BuildBetaDetailsResponse;
};

export type BuildBetaDetailsGetCollectionResponse = BuildBetaDetailsGetCollectionResponses[keyof BuildBetaDetailsGetCollectionResponses];

export type BuildBetaDetailsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type buildBetaDetails
         */
        'fields[buildBetaDetails]'?: Array<'autoNotifyEnabled' | 'internalBuildState' | 'externalBuildState' | 'build'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'build'>;
    };
    url: '/v1/buildBetaDetails/{id}';
};

export type BuildBetaDetailsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BuildBetaDetailsGetInstanceError = BuildBetaDetailsGetInstanceErrors[keyof BuildBetaDetailsGetInstanceErrors];

export type BuildBetaDetailsGetInstanceResponses = {
    /**
     * Single BuildBetaDetail
     */
    200: BuildBetaDetailResponse;
};

export type BuildBetaDetailsGetInstanceResponse = BuildBetaDetailsGetInstanceResponses[keyof BuildBetaDetailsGetInstanceResponses];

export type BuildBetaDetailsUpdateInstanceData = {
    /**
     * BuildBetaDetail representation
     */
    body: BuildBetaDetailUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/buildBetaDetails/{id}';
};

export type BuildBetaDetailsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BuildBetaDetailsUpdateInstanceError = BuildBetaDetailsUpdateInstanceErrors[keyof BuildBetaDetailsUpdateInstanceErrors];

export type BuildBetaDetailsUpdateInstanceResponses = {
    /**
     * Single BuildBetaDetail
     */
    200: BuildBetaDetailResponse;
};

export type BuildBetaDetailsUpdateInstanceResponse = BuildBetaDetailsUpdateInstanceResponses[keyof BuildBetaDetailsUpdateInstanceResponses];

export type BuildBetaNotificationsCreateInstanceData = {
    /**
     * BuildBetaNotification representation
     */
    body: BuildBetaNotificationCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/buildBetaNotifications';
};

export type BuildBetaNotificationsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BuildBetaNotificationsCreateInstanceError = BuildBetaNotificationsCreateInstanceErrors[keyof BuildBetaNotificationsCreateInstanceErrors];

export type BuildBetaNotificationsCreateInstanceResponses = {
    /**
     * Single BuildBetaNotification
     */
    201: BuildBetaNotificationResponse;
};

export type BuildBetaNotificationsCreateInstanceResponse = BuildBetaNotificationsCreateInstanceResponses[keyof BuildBetaNotificationsCreateInstanceResponses];

export type BuildsGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * filter by attribute 'version'
         */
        'filter[version]'?: Array<string>;
        /**
         * filter by attribute 'expired'
         */
        'filter[expired]'?: Array<string>;
        /**
         * filter by attribute 'processingState'
         */
        'filter[processingState]'?: Array<'PROCESSING' | 'FAILED' | 'INVALID' | 'VALID'>;
        /**
         * filter by attribute 'betaAppReviewSubmission.betaReviewState'
         */
        'filter[betaAppReviewSubmission.betaReviewState]'?: Array<'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'REJECTED' | 'APPROVED'>;
        /**
         * filter by attribute 'usesNonExemptEncryption'
         */
        'filter[usesNonExemptEncryption]'?: Array<string>;
        /**
         * filter by attribute 'preReleaseVersion.version'
         */
        'filter[preReleaseVersion.version]'?: Array<string>;
        /**
         * filter by attribute 'preReleaseVersion.platform'
         */
        'filter[preReleaseVersion.platform]'?: Array<'IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS'>;
        /**
         * filter by attribute 'buildAudienceType'
         */
        'filter[buildAudienceType]'?: Array<'INTERNAL_ONLY' | 'APP_STORE_ELIGIBLE'>;
        /**
         * filter by id(s) of related 'preReleaseVersion'
         */
        'filter[preReleaseVersion]'?: Array<string>;
        /**
         * filter by id(s) of related 'app'
         */
        'filter[app]'?: Array<string>;
        /**
         * filter by id(s) of related 'betaGroups'
         */
        'filter[betaGroups]'?: Array<string>;
        /**
         * filter by id(s) of related 'appStoreVersion'
         */
        'filter[appStoreVersion]'?: Array<string>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'version' | '-version' | 'uploadedDate' | '-uploadedDate' | 'preReleaseVersion' | '-preReleaseVersion'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * the fields to include for returned resources of type preReleaseVersions
         */
        'fields[preReleaseVersions]'?: Array<'version' | 'platform' | 'builds' | 'app'>;
        /**
         * the fields to include for returned resources of type betaTesters
         */
        'fields[betaTesters]'?: Array<'firstName' | 'lastName' | 'email' | 'inviteType' | 'state' | 'apps' | 'betaGroups' | 'builds'>;
        /**
         * the fields to include for returned resources of type betaBuildLocalizations
         */
        'fields[betaBuildLocalizations]'?: Array<'whatsNew' | 'locale' | 'build'>;
        /**
         * the fields to include for returned resources of type appEncryptionDeclarations
         */
        'fields[appEncryptionDeclarations]'?: Array<'appDescription' | 'createdDate' | 'usesEncryption' | 'exempt' | 'containsProprietaryCryptography' | 'containsThirdPartyCryptography' | 'availableOnFrenchStore' | 'platform' | 'uploadedDate' | 'documentUrl' | 'documentName' | 'documentType' | 'appEncryptionDeclarationState' | 'codeValue' | 'app' | 'builds' | 'appEncryptionDeclarationDocument'>;
        /**
         * the fields to include for returned resources of type betaAppReviewSubmissions
         */
        'fields[betaAppReviewSubmissions]'?: Array<'betaReviewState' | 'submittedDate' | 'build'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type buildBetaDetails
         */
        'fields[buildBetaDetails]'?: Array<'autoNotifyEnabled' | 'internalBuildState' | 'externalBuildState' | 'build'>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type buildIcons
         */
        'fields[buildIcons]'?: Array<'name' | 'iconAsset' | 'iconType'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles'>;
        /**
         * maximum number of related betaBuildLocalizations returned (when they are included)
         */
        'limit[betaBuildLocalizations]'?: number;
        /**
         * maximum number of related betaGroups returned (when they are included)
         */
        'limit[betaGroups]'?: number;
        /**
         * maximum number of related buildBundles returned (when they are included)
         */
        'limit[buildBundles]'?: number;
        /**
         * maximum number of related icons returned (when they are included)
         */
        'limit[icons]'?: number;
        /**
         * maximum number of related individualTesters returned (when they are included)
         */
        'limit[individualTesters]'?: number;
    };
    url: '/v1/builds';
};

export type BuildsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type BuildsGetCollectionError = BuildsGetCollectionErrors[keyof BuildsGetCollectionErrors];

export type BuildsGetCollectionResponses = {
    /**
     * List of Builds
     */
    200: BuildsResponse;
};

export type BuildsGetCollectionResponse = BuildsGetCollectionResponses[keyof BuildsGetCollectionResponses];

export type BuildsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * the fields to include for returned resources of type preReleaseVersions
         */
        'fields[preReleaseVersions]'?: Array<'version' | 'platform' | 'builds' | 'app'>;
        /**
         * the fields to include for returned resources of type betaTesters
         */
        'fields[betaTesters]'?: Array<'firstName' | 'lastName' | 'email' | 'inviteType' | 'state' | 'apps' | 'betaGroups' | 'builds'>;
        /**
         * the fields to include for returned resources of type betaBuildLocalizations
         */
        'fields[betaBuildLocalizations]'?: Array<'whatsNew' | 'locale' | 'build'>;
        /**
         * the fields to include for returned resources of type appEncryptionDeclarations
         */
        'fields[appEncryptionDeclarations]'?: Array<'appDescription' | 'createdDate' | 'usesEncryption' | 'exempt' | 'containsProprietaryCryptography' | 'containsThirdPartyCryptography' | 'availableOnFrenchStore' | 'platform' | 'uploadedDate' | 'documentUrl' | 'documentName' | 'documentType' | 'appEncryptionDeclarationState' | 'codeValue' | 'app' | 'builds' | 'appEncryptionDeclarationDocument'>;
        /**
         * the fields to include for returned resources of type betaAppReviewSubmissions
         */
        'fields[betaAppReviewSubmissions]'?: Array<'betaReviewState' | 'submittedDate' | 'build'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type buildBetaDetails
         */
        'fields[buildBetaDetails]'?: Array<'autoNotifyEnabled' | 'internalBuildState' | 'externalBuildState' | 'build'>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type buildIcons
         */
        'fields[buildIcons]'?: Array<'name' | 'iconAsset' | 'iconType'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles'>;
        /**
         * maximum number of related betaBuildLocalizations returned (when they are included)
         */
        'limit[betaBuildLocalizations]'?: number;
        /**
         * maximum number of related betaGroups returned (when they are included)
         */
        'limit[betaGroups]'?: number;
        /**
         * maximum number of related buildBundles returned (when they are included)
         */
        'limit[buildBundles]'?: number;
        /**
         * maximum number of related icons returned (when they are included)
         */
        'limit[icons]'?: number;
        /**
         * maximum number of related individualTesters returned (when they are included)
         */
        'limit[individualTesters]'?: number;
    };
    url: '/v1/builds/{id}';
};

export type BuildsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BuildsGetInstanceError = BuildsGetInstanceErrors[keyof BuildsGetInstanceErrors];

export type BuildsGetInstanceResponses = {
    /**
     * Single Build
     */
    200: BuildResponse;
};

export type BuildsGetInstanceResponse = BuildsGetInstanceResponses[keyof BuildsGetInstanceResponses];

export type BuildsUpdateInstanceData = {
    /**
     * Build representation
     */
    body: BuildUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/builds/{id}';
};

export type BuildsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BuildsUpdateInstanceError = BuildsUpdateInstanceErrors[keyof BuildsUpdateInstanceErrors];

export type BuildsUpdateInstanceResponses = {
    /**
     * Single Build
     */
    200: BuildResponse;
};

export type BuildsUpdateInstanceResponse = BuildsUpdateInstanceResponses[keyof BuildsUpdateInstanceResponses];

export type BundleIdCapabilitiesCreateInstanceData = {
    /**
     * BundleIdCapability representation
     */
    body: BundleIdCapabilityCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/bundleIdCapabilities';
};

export type BundleIdCapabilitiesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BundleIdCapabilitiesCreateInstanceError = BundleIdCapabilitiesCreateInstanceErrors[keyof BundleIdCapabilitiesCreateInstanceErrors];

export type BundleIdCapabilitiesCreateInstanceResponses = {
    /**
     * Single BundleIdCapability
     */
    201: BundleIdCapabilityResponse;
};

export type BundleIdCapabilitiesCreateInstanceResponse = BundleIdCapabilitiesCreateInstanceResponses[keyof BundleIdCapabilitiesCreateInstanceResponses];

export type BundleIdCapabilitiesDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/bundleIdCapabilities/{id}';
};

export type BundleIdCapabilitiesDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type BundleIdCapabilitiesDeleteInstanceError = BundleIdCapabilitiesDeleteInstanceErrors[keyof BundleIdCapabilitiesDeleteInstanceErrors];

export type BundleIdCapabilitiesDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type BundleIdCapabilitiesDeleteInstanceResponse = BundleIdCapabilitiesDeleteInstanceResponses[keyof BundleIdCapabilitiesDeleteInstanceResponses];

export type BundleIdCapabilitiesUpdateInstanceData = {
    /**
     * BundleIdCapability representation
     */
    body: BundleIdCapabilityUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/bundleIdCapabilities/{id}';
};

export type BundleIdCapabilitiesUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BundleIdCapabilitiesUpdateInstanceError = BundleIdCapabilitiesUpdateInstanceErrors[keyof BundleIdCapabilitiesUpdateInstanceErrors];

export type BundleIdCapabilitiesUpdateInstanceResponses = {
    /**
     * Single BundleIdCapability
     */
    200: BundleIdCapabilityResponse;
};

export type BundleIdCapabilitiesUpdateInstanceResponse = BundleIdCapabilitiesUpdateInstanceResponses[keyof BundleIdCapabilitiesUpdateInstanceResponses];

export type BundleIdsGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * filter by attribute 'name'
         */
        'filter[name]'?: Array<string>;
        /**
         * filter by attribute 'platform'
         */
        'filter[platform]'?: Array<'IOS' | 'MAC_OS' | 'UNIVERSAL'>;
        /**
         * filter by attribute 'identifier'
         */
        'filter[identifier]'?: Array<string>;
        /**
         * filter by attribute 'seedId'
         */
        'filter[seedId]'?: Array<string>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'name' | '-name' | 'platform' | '-platform' | 'identifier' | '-identifier' | 'seedId' | '-seedId' | 'id' | '-id'>;
        /**
         * the fields to include for returned resources of type bundleIds
         */
        'fields[bundleIds]'?: Array<'name' | 'platform' | 'identifier' | 'seedId' | 'profiles' | 'bundleIdCapabilities' | 'app'>;
        /**
         * the fields to include for returned resources of type profiles
         */
        'fields[profiles]'?: Array<'name' | 'platform' | 'profileType' | 'profileState' | 'profileContent' | 'uuid' | 'createdDate' | 'expirationDate' | 'bundleId' | 'devices' | 'certificates'>;
        /**
         * the fields to include for returned resources of type bundleIdCapabilities
         */
        'fields[bundleIdCapabilities]'?: Array<'capabilityType' | 'settings'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'profiles' | 'bundleIdCapabilities' | 'app'>;
        /**
         * maximum number of related bundleIdCapabilities returned (when they are included)
         */
        'limit[bundleIdCapabilities]'?: number;
        /**
         * maximum number of related profiles returned (when they are included)
         */
        'limit[profiles]'?: number;
    };
    url: '/v1/bundleIds';
};

export type BundleIdsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type BundleIdsGetCollectionError = BundleIdsGetCollectionErrors[keyof BundleIdsGetCollectionErrors];

export type BundleIdsGetCollectionResponses = {
    /**
     * List of BundleIds
     */
    200: BundleIdsResponse;
};

export type BundleIdsGetCollectionResponse = BundleIdsGetCollectionResponses[keyof BundleIdsGetCollectionResponses];

export type BundleIdsCreateInstanceData = {
    /**
     * BundleId representation
     */
    body: BundleIdCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/bundleIds';
};

export type BundleIdsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BundleIdsCreateInstanceError = BundleIdsCreateInstanceErrors[keyof BundleIdsCreateInstanceErrors];

export type BundleIdsCreateInstanceResponses = {
    /**
     * Single BundleId
     */
    201: BundleIdResponse;
};

export type BundleIdsCreateInstanceResponse = BundleIdsCreateInstanceResponses[keyof BundleIdsCreateInstanceResponses];

export type BundleIdsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/bundleIds/{id}';
};

export type BundleIdsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type BundleIdsDeleteInstanceError = BundleIdsDeleteInstanceErrors[keyof BundleIdsDeleteInstanceErrors];

export type BundleIdsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type BundleIdsDeleteInstanceResponse = BundleIdsDeleteInstanceResponses[keyof BundleIdsDeleteInstanceResponses];

export type BundleIdsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type bundleIds
         */
        'fields[bundleIds]'?: Array<'name' | 'platform' | 'identifier' | 'seedId' | 'profiles' | 'bundleIdCapabilities' | 'app'>;
        /**
         * the fields to include for returned resources of type profiles
         */
        'fields[profiles]'?: Array<'name' | 'platform' | 'profileType' | 'profileState' | 'profileContent' | 'uuid' | 'createdDate' | 'expirationDate' | 'bundleId' | 'devices' | 'certificates'>;
        /**
         * the fields to include for returned resources of type bundleIdCapabilities
         */
        'fields[bundleIdCapabilities]'?: Array<'capabilityType' | 'settings'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'profiles' | 'bundleIdCapabilities' | 'app'>;
        /**
         * maximum number of related bundleIdCapabilities returned (when they are included)
         */
        'limit[bundleIdCapabilities]'?: number;
        /**
         * maximum number of related profiles returned (when they are included)
         */
        'limit[profiles]'?: number;
    };
    url: '/v1/bundleIds/{id}';
};

export type BundleIdsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BundleIdsGetInstanceError = BundleIdsGetInstanceErrors[keyof BundleIdsGetInstanceErrors];

export type BundleIdsGetInstanceResponses = {
    /**
     * Single BundleId
     */
    200: BundleIdResponse;
};

export type BundleIdsGetInstanceResponse = BundleIdsGetInstanceResponses[keyof BundleIdsGetInstanceResponses];

export type BundleIdsUpdateInstanceData = {
    /**
     * BundleId representation
     */
    body: BundleIdUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/bundleIds/{id}';
};

export type BundleIdsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BundleIdsUpdateInstanceError = BundleIdsUpdateInstanceErrors[keyof BundleIdsUpdateInstanceErrors];

export type BundleIdsUpdateInstanceResponses = {
    /**
     * Single BundleId
     */
    200: BundleIdResponse;
};

export type BundleIdsUpdateInstanceResponse = BundleIdsUpdateInstanceResponses[keyof BundleIdsUpdateInstanceResponses];

export type CertificatesGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * filter by attribute 'displayName'
         */
        'filter[displayName]'?: Array<string>;
        /**
         * filter by attribute 'certificateType'
         */
        'filter[certificateType]'?: Array<'APPLE_PAY' | 'APPLE_PAY_MERCHANT_IDENTITY' | 'APPLE_PAY_PSP_IDENTITY' | 'APPLE_PAY_RSA' | 'DEVELOPER_ID_KEXT' | 'DEVELOPER_ID_KEXT_G2' | 'DEVELOPER_ID_APPLICATION' | 'DEVELOPER_ID_APPLICATION_G2' | 'DEVELOPMENT' | 'DISTRIBUTION' | 'IDENTITY_ACCESS' | 'IOS_DEVELOPMENT' | 'IOS_DISTRIBUTION' | 'MAC_APP_DISTRIBUTION' | 'MAC_INSTALLER_DISTRIBUTION' | 'MAC_APP_DEVELOPMENT' | 'PASS_TYPE_ID' | 'PASS_TYPE_ID_WITH_NFC'>;
        /**
         * filter by attribute 'serialNumber'
         */
        'filter[serialNumber]'?: Array<string>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'displayName' | '-displayName' | 'certificateType' | '-certificateType' | 'serialNumber' | '-serialNumber' | 'id' | '-id'>;
        /**
         * the fields to include for returned resources of type certificates
         */
        'fields[certificates]'?: Array<'name' | 'certificateType' | 'displayName' | 'serialNumber' | 'platform' | 'expirationDate' | 'certificateContent' | 'activated'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/certificates';
};

export type CertificatesGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type CertificatesGetCollectionError = CertificatesGetCollectionErrors[keyof CertificatesGetCollectionErrors];

export type CertificatesGetCollectionResponses = {
    /**
     * List of Certificates
     */
    200: CertificatesResponse;
};

export type CertificatesGetCollectionResponse = CertificatesGetCollectionResponses[keyof CertificatesGetCollectionResponses];

export type CertificatesCreateInstanceData = {
    /**
     * Certificate representation
     */
    body: CertificateCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/certificates';
};

export type CertificatesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type CertificatesCreateInstanceError = CertificatesCreateInstanceErrors[keyof CertificatesCreateInstanceErrors];

export type CertificatesCreateInstanceResponses = {
    /**
     * Single Certificate
     */
    201: CertificateResponse;
};

export type CertificatesCreateInstanceResponse = CertificatesCreateInstanceResponses[keyof CertificatesCreateInstanceResponses];

export type CertificatesDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/certificates/{id}';
};

export type CertificatesDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type CertificatesDeleteInstanceError = CertificatesDeleteInstanceErrors[keyof CertificatesDeleteInstanceErrors];

export type CertificatesDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type CertificatesDeleteInstanceResponse = CertificatesDeleteInstanceResponses[keyof CertificatesDeleteInstanceResponses];

export type CertificatesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type certificates
         */
        'fields[certificates]'?: Array<'name' | 'certificateType' | 'displayName' | 'serialNumber' | 'platform' | 'expirationDate' | 'certificateContent' | 'activated'>;
    };
    url: '/v1/certificates/{id}';
};

export type CertificatesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CertificatesGetInstanceError = CertificatesGetInstanceErrors[keyof CertificatesGetInstanceErrors];

export type CertificatesGetInstanceResponses = {
    /**
     * Single Certificate
     */
    200: CertificateResponse;
};

export type CertificatesGetInstanceResponse = CertificatesGetInstanceResponses[keyof CertificatesGetInstanceResponses];

export type CertificatesUpdateInstanceData = {
    /**
     * Certificate representation
     */
    body: CertificateUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/certificates/{id}';
};

export type CertificatesUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type CertificatesUpdateInstanceError = CertificatesUpdateInstanceErrors[keyof CertificatesUpdateInstanceErrors];

export type CertificatesUpdateInstanceResponses = {
    /**
     * Single Certificate
     */
    200: CertificateResponse;
};

export type CertificatesUpdateInstanceResponse = CertificatesUpdateInstanceResponses[keyof CertificatesUpdateInstanceResponses];

export type CiArtifactsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciArtifacts
         */
        'fields[ciArtifacts]'?: Array<'fileType' | 'fileName' | 'fileSize' | 'downloadUrl'>;
    };
    url: '/v1/ciArtifacts/{id}';
};

export type CiArtifactsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiArtifactsGetInstanceError = CiArtifactsGetInstanceErrors[keyof CiArtifactsGetInstanceErrors];

export type CiArtifactsGetInstanceResponses = {
    /**
     * Single CiArtifact
     */
    200: CiArtifactResponse;
};

export type CiArtifactsGetInstanceResponse = CiArtifactsGetInstanceResponses[keyof CiArtifactsGetInstanceResponses];

export type CiBuildActionsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciBuildActions
         */
        'fields[ciBuildActions]'?: Array<'name' | 'actionType' | 'startedDate' | 'finishedDate' | 'issueCounts' | 'executionProgress' | 'completionStatus' | 'isRequiredToPass' | 'buildRun' | 'artifacts' | 'issues' | 'testResults'>;
        /**
         * the fields to include for returned resources of type ciBuildRuns
         */
        'fields[ciBuildRuns]'?: Array<'number' | 'createdDate' | 'startedDate' | 'finishedDate' | 'sourceCommit' | 'destinationCommit' | 'isPullRequestBuild' | 'issueCounts' | 'executionProgress' | 'completionStatus' | 'startReason' | 'cancelReason' | 'builds' | 'workflow' | 'product' | 'sourceBranchOrTag' | 'destinationBranch' | 'actions' | 'pullRequest'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'buildRun'>;
    };
    url: '/v1/ciBuildActions/{id}';
};

export type CiBuildActionsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiBuildActionsGetInstanceError = CiBuildActionsGetInstanceErrors[keyof CiBuildActionsGetInstanceErrors];

export type CiBuildActionsGetInstanceResponses = {
    /**
     * Single CiBuildAction
     */
    200: CiBuildActionResponse;
};

export type CiBuildActionsGetInstanceResponse = CiBuildActionsGetInstanceResponses[keyof CiBuildActionsGetInstanceResponses];

export type CiBuildRunsCreateInstanceData = {
    /**
     * CiBuildRun representation
     */
    body: CiBuildRunCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/ciBuildRuns';
};

export type CiBuildRunsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type CiBuildRunsCreateInstanceError = CiBuildRunsCreateInstanceErrors[keyof CiBuildRunsCreateInstanceErrors];

export type CiBuildRunsCreateInstanceResponses = {
    /**
     * Single CiBuildRun
     */
    201: CiBuildRunResponse;
};

export type CiBuildRunsCreateInstanceResponse = CiBuildRunsCreateInstanceResponses[keyof CiBuildRunsCreateInstanceResponses];

export type CiBuildRunsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciBuildRuns
         */
        'fields[ciBuildRuns]'?: Array<'number' | 'createdDate' | 'startedDate' | 'finishedDate' | 'sourceCommit' | 'destinationCommit' | 'isPullRequestBuild' | 'issueCounts' | 'executionProgress' | 'completionStatus' | 'startReason' | 'cancelReason' | 'builds' | 'workflow' | 'product' | 'sourceBranchOrTag' | 'destinationBranch' | 'actions' | 'pullRequest'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'builds' | 'workflow' | 'product' | 'sourceBranchOrTag' | 'destinationBranch' | 'pullRequest'>;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
    };
    url: '/v1/ciBuildRuns/{id}';
};

export type CiBuildRunsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiBuildRunsGetInstanceError = CiBuildRunsGetInstanceErrors[keyof CiBuildRunsGetInstanceErrors];

export type CiBuildRunsGetInstanceResponses = {
    /**
     * Single CiBuildRun
     */
    200: CiBuildRunResponse;
};

export type CiBuildRunsGetInstanceResponse = CiBuildRunsGetInstanceResponses[keyof CiBuildRunsGetInstanceResponses];

export type CiIssuesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciIssues
         */
        'fields[ciIssues]'?: Array<'issueType' | 'message' | 'fileSource' | 'category'>;
    };
    url: '/v1/ciIssues/{id}';
};

export type CiIssuesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiIssuesGetInstanceError = CiIssuesGetInstanceErrors[keyof CiIssuesGetInstanceErrors];

export type CiIssuesGetInstanceResponses = {
    /**
     * Single CiIssue
     */
    200: CiIssueResponse;
};

export type CiIssuesGetInstanceResponse = CiIssuesGetInstanceResponses[keyof CiIssuesGetInstanceResponses];

export type CiMacOsVersionsGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * the fields to include for returned resources of type ciMacOsVersions
         */
        'fields[ciMacOsVersions]'?: Array<'version' | 'name' | 'xcodeVersions'>;
        /**
         * the fields to include for returned resources of type ciXcodeVersions
         */
        'fields[ciXcodeVersions]'?: Array<'version' | 'name' | 'testDestinations' | 'macOsVersions'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'xcodeVersions'>;
        /**
         * maximum number of related xcodeVersions returned (when they are included)
         */
        'limit[xcodeVersions]'?: number;
    };
    url: '/v1/ciMacOsVersions';
};

export type CiMacOsVersionsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type CiMacOsVersionsGetCollectionError = CiMacOsVersionsGetCollectionErrors[keyof CiMacOsVersionsGetCollectionErrors];

export type CiMacOsVersionsGetCollectionResponses = {
    /**
     * List of CiMacOsVersions
     */
    200: CiMacOsVersionsResponse;
};

export type CiMacOsVersionsGetCollectionResponse = CiMacOsVersionsGetCollectionResponses[keyof CiMacOsVersionsGetCollectionResponses];

export type CiMacOsVersionsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciMacOsVersions
         */
        'fields[ciMacOsVersions]'?: Array<'version' | 'name' | 'xcodeVersions'>;
        /**
         * the fields to include for returned resources of type ciXcodeVersions
         */
        'fields[ciXcodeVersions]'?: Array<'version' | 'name' | 'testDestinations' | 'macOsVersions'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'xcodeVersions'>;
        /**
         * maximum number of related xcodeVersions returned (when they are included)
         */
        'limit[xcodeVersions]'?: number;
    };
    url: '/v1/ciMacOsVersions/{id}';
};

export type CiMacOsVersionsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiMacOsVersionsGetInstanceError = CiMacOsVersionsGetInstanceErrors[keyof CiMacOsVersionsGetInstanceErrors];

export type CiMacOsVersionsGetInstanceResponses = {
    /**
     * Single CiMacOsVersion
     */
    200: CiMacOsVersionResponse;
};

export type CiMacOsVersionsGetInstanceResponse = CiMacOsVersionsGetInstanceResponses[keyof CiMacOsVersionsGetInstanceResponses];

export type CiProductsGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * filter by attribute 'productType'
         */
        'filter[productType]'?: Array<'APP' | 'FRAMEWORK'>;
        /**
         * filter by id(s) of related 'app'
         */
        'filter[app]'?: Array<string>;
        /**
         * the fields to include for returned resources of type ciProducts
         */
        'fields[ciProducts]'?: Array<'name' | 'createdDate' | 'productType' | 'app' | 'bundleId' | 'workflows' | 'primaryRepositories' | 'additionalRepositories' | 'buildRuns'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<'lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'bundleId' | 'primaryRepositories'>;
        /**
         * maximum number of related primaryRepositories returned (when they are included)
         */
        'limit[primaryRepositories]'?: number;
    };
    url: '/v1/ciProducts';
};

export type CiProductsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type CiProductsGetCollectionError = CiProductsGetCollectionErrors[keyof CiProductsGetCollectionErrors];

export type CiProductsGetCollectionResponses = {
    /**
     * List of CiProducts
     */
    200: CiProductsResponse;
};

export type CiProductsGetCollectionResponse = CiProductsGetCollectionResponses[keyof CiProductsGetCollectionResponses];

export type CiProductsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/ciProducts/{id}';
};

export type CiProductsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type CiProductsDeleteInstanceError = CiProductsDeleteInstanceErrors[keyof CiProductsDeleteInstanceErrors];

export type CiProductsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type CiProductsDeleteInstanceResponse = CiProductsDeleteInstanceResponses[keyof CiProductsDeleteInstanceResponses];

export type CiProductsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciProducts
         */
        'fields[ciProducts]'?: Array<'name' | 'createdDate' | 'productType' | 'app' | 'bundleId' | 'workflows' | 'primaryRepositories' | 'additionalRepositories' | 'buildRuns'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<'lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'bundleId' | 'primaryRepositories'>;
        /**
         * maximum number of related primaryRepositories returned (when they are included)
         */
        'limit[primaryRepositories]'?: number;
    };
    url: '/v1/ciProducts/{id}';
};

export type CiProductsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiProductsGetInstanceError = CiProductsGetInstanceErrors[keyof CiProductsGetInstanceErrors];

export type CiProductsGetInstanceResponses = {
    /**
     * Single CiProduct
     */
    200: CiProductResponse;
};

export type CiProductsGetInstanceResponse = CiProductsGetInstanceResponses[keyof CiProductsGetInstanceResponses];

export type CiTestResultsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciTestResults
         */
        'fields[ciTestResults]'?: Array<'className' | 'name' | 'status' | 'fileSource' | 'message' | 'destinationTestResults'>;
    };
    url: '/v1/ciTestResults/{id}';
};

export type CiTestResultsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiTestResultsGetInstanceError = CiTestResultsGetInstanceErrors[keyof CiTestResultsGetInstanceErrors];

export type CiTestResultsGetInstanceResponses = {
    /**
     * Single CiTestResult
     */
    200: CiTestResultResponse;
};

export type CiTestResultsGetInstanceResponse = CiTestResultsGetInstanceResponses[keyof CiTestResultsGetInstanceResponses];

export type CiWorkflowsCreateInstanceData = {
    /**
     * CiWorkflow representation
     */
    body: CiWorkflowCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/ciWorkflows';
};

export type CiWorkflowsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type CiWorkflowsCreateInstanceError = CiWorkflowsCreateInstanceErrors[keyof CiWorkflowsCreateInstanceErrors];

export type CiWorkflowsCreateInstanceResponses = {
    /**
     * Single CiWorkflow
     */
    201: CiWorkflowResponse;
};

export type CiWorkflowsCreateInstanceResponse = CiWorkflowsCreateInstanceResponses[keyof CiWorkflowsCreateInstanceResponses];

export type CiWorkflowsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/ciWorkflows/{id}';
};

export type CiWorkflowsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type CiWorkflowsDeleteInstanceError = CiWorkflowsDeleteInstanceErrors[keyof CiWorkflowsDeleteInstanceErrors];

export type CiWorkflowsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type CiWorkflowsDeleteInstanceResponse = CiWorkflowsDeleteInstanceResponses[keyof CiWorkflowsDeleteInstanceResponses];

export type CiWorkflowsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciWorkflows
         */
        'fields[ciWorkflows]'?: Array<'name' | 'description' | 'branchStartCondition' | 'tagStartCondition' | 'pullRequestStartCondition' | 'scheduledStartCondition' | 'manualBranchStartCondition' | 'manualTagStartCondition' | 'manualPullRequestStartCondition' | 'actions' | 'isEnabled' | 'isLockedForEditing' | 'clean' | 'containerFilePath' | 'lastModifiedDate' | 'product' | 'repository' | 'xcodeVersion' | 'macOsVersion' | 'buildRuns'>;
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<'lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'product' | 'repository' | 'xcodeVersion' | 'macOsVersion'>;
    };
    url: '/v1/ciWorkflows/{id}';
};

export type CiWorkflowsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiWorkflowsGetInstanceError = CiWorkflowsGetInstanceErrors[keyof CiWorkflowsGetInstanceErrors];

export type CiWorkflowsGetInstanceResponses = {
    /**
     * Single CiWorkflow
     */
    200: CiWorkflowResponse;
};

export type CiWorkflowsGetInstanceResponse = CiWorkflowsGetInstanceResponses[keyof CiWorkflowsGetInstanceResponses];

export type CiWorkflowsUpdateInstanceData = {
    /**
     * CiWorkflow representation
     */
    body: CiWorkflowUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/ciWorkflows/{id}';
};

export type CiWorkflowsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type CiWorkflowsUpdateInstanceError = CiWorkflowsUpdateInstanceErrors[keyof CiWorkflowsUpdateInstanceErrors];

export type CiWorkflowsUpdateInstanceResponses = {
    /**
     * Single CiWorkflow
     */
    200: CiWorkflowResponse;
};

export type CiWorkflowsUpdateInstanceResponse = CiWorkflowsUpdateInstanceResponses[keyof CiWorkflowsUpdateInstanceResponses];

export type CiXcodeVersionsGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * the fields to include for returned resources of type ciXcodeVersions
         */
        'fields[ciXcodeVersions]'?: Array<'version' | 'name' | 'testDestinations' | 'macOsVersions'>;
        /**
         * the fields to include for returned resources of type ciMacOsVersions
         */
        'fields[ciMacOsVersions]'?: Array<'version' | 'name' | 'xcodeVersions'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'macOsVersions'>;
        /**
         * maximum number of related macOsVersions returned (when they are included)
         */
        'limit[macOsVersions]'?: number;
    };
    url: '/v1/ciXcodeVersions';
};

export type CiXcodeVersionsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type CiXcodeVersionsGetCollectionError = CiXcodeVersionsGetCollectionErrors[keyof CiXcodeVersionsGetCollectionErrors];

export type CiXcodeVersionsGetCollectionResponses = {
    /**
     * List of CiXcodeVersions
     */
    200: CiXcodeVersionsResponse;
};

export type CiXcodeVersionsGetCollectionResponse = CiXcodeVersionsGetCollectionResponses[keyof CiXcodeVersionsGetCollectionResponses];

export type CiXcodeVersionsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciXcodeVersions
         */
        'fields[ciXcodeVersions]'?: Array<'version' | 'name' | 'testDestinations' | 'macOsVersions'>;
        /**
         * the fields to include for returned resources of type ciMacOsVersions
         */
        'fields[ciMacOsVersions]'?: Array<'version' | 'name' | 'xcodeVersions'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'macOsVersions'>;
        /**
         * maximum number of related macOsVersions returned (when they are included)
         */
        'limit[macOsVersions]'?: number;
    };
    url: '/v1/ciXcodeVersions/{id}';
};

export type CiXcodeVersionsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiXcodeVersionsGetInstanceError = CiXcodeVersionsGetInstanceErrors[keyof CiXcodeVersionsGetInstanceErrors];

export type CiXcodeVersionsGetInstanceResponses = {
    /**
     * Single CiXcodeVersion
     */
    200: CiXcodeVersionResponse;
};

export type CiXcodeVersionsGetInstanceResponse = CiXcodeVersionsGetInstanceResponses[keyof CiXcodeVersionsGetInstanceResponses];

export type CustomerReviewResponsesCreateInstanceData = {
    /**
     * CustomerReviewResponse representation
     */
    body: CustomerReviewResponseV1CreateRequest;
    path?: never;
    query?: never;
    url: '/v1/customerReviewResponses';
};

export type CustomerReviewResponsesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type CustomerReviewResponsesCreateInstanceError = CustomerReviewResponsesCreateInstanceErrors[keyof CustomerReviewResponsesCreateInstanceErrors];

export type CustomerReviewResponsesCreateInstanceResponses = {
    /**
     * Single CustomerReviewResponse
     */
    201: CustomerReviewResponseV1Response;
};

export type CustomerReviewResponsesCreateInstanceResponse = CustomerReviewResponsesCreateInstanceResponses[keyof CustomerReviewResponsesCreateInstanceResponses];

export type CustomerReviewResponsesDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/customerReviewResponses/{id}';
};

export type CustomerReviewResponsesDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type CustomerReviewResponsesDeleteInstanceError = CustomerReviewResponsesDeleteInstanceErrors[keyof CustomerReviewResponsesDeleteInstanceErrors];

export type CustomerReviewResponsesDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type CustomerReviewResponsesDeleteInstanceResponse = CustomerReviewResponsesDeleteInstanceResponses[keyof CustomerReviewResponsesDeleteInstanceResponses];

export type CustomerReviewResponsesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type customerReviewResponses
         */
        'fields[customerReviewResponses]'?: Array<'responseBody' | 'lastModifiedDate' | 'state' | 'review'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'review'>;
    };
    url: '/v1/customerReviewResponses/{id}';
};

export type CustomerReviewResponsesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CustomerReviewResponsesGetInstanceError = CustomerReviewResponsesGetInstanceErrors[keyof CustomerReviewResponsesGetInstanceErrors];

export type CustomerReviewResponsesGetInstanceResponses = {
    /**
     * Single CustomerReviewResponse
     */
    200: CustomerReviewResponseV1Response;
};

export type CustomerReviewResponsesGetInstanceResponse = CustomerReviewResponsesGetInstanceResponses[keyof CustomerReviewResponsesGetInstanceResponses];

export type CustomerReviewsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type customerReviews
         */
        'fields[customerReviews]'?: Array<'rating' | 'title' | 'body' | 'reviewerNickname' | 'createdDate' | 'territory' | 'response'>;
        /**
         * the fields to include for returned resources of type customerReviewResponses
         */
        'fields[customerReviewResponses]'?: Array<'responseBody' | 'lastModifiedDate' | 'state' | 'review'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'response'>;
    };
    url: '/v1/customerReviews/{id}';
};

export type CustomerReviewsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CustomerReviewsGetInstanceError = CustomerReviewsGetInstanceErrors[keyof CustomerReviewsGetInstanceErrors];

export type CustomerReviewsGetInstanceResponses = {
    /**
     * Single CustomerReview
     */
    200: CustomerReviewResponse;
};

export type CustomerReviewsGetInstanceResponse = CustomerReviewsGetInstanceResponses[keyof CustomerReviewsGetInstanceResponses];

export type DevicesGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * filter by attribute 'name'
         */
        'filter[name]'?: Array<string>;
        /**
         * filter by attribute 'platform'
         */
        'filter[platform]'?: Array<'IOS' | 'MAC_OS' | 'UNIVERSAL'>;
        /**
         * filter by attribute 'udid'
         */
        'filter[udid]'?: Array<string>;
        /**
         * filter by attribute 'status'
         */
        'filter[status]'?: Array<'ENABLED' | 'DISABLED'>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'name' | '-name' | 'platform' | '-platform' | 'udid' | '-udid' | 'status' | '-status' | 'id' | '-id'>;
        /**
         * the fields to include for returned resources of type devices
         */
        'fields[devices]'?: Array<'name' | 'platform' | 'udid' | 'deviceClass' | 'status' | 'model' | 'addedDate'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/devices';
};

export type DevicesGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type DevicesGetCollectionError = DevicesGetCollectionErrors[keyof DevicesGetCollectionErrors];

export type DevicesGetCollectionResponses = {
    /**
     * List of Devices
     */
    200: DevicesResponse;
};

export type DevicesGetCollectionResponse = DevicesGetCollectionResponses[keyof DevicesGetCollectionResponses];

export type DevicesCreateInstanceData = {
    /**
     * Device representation
     */
    body: DeviceCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/devices';
};

export type DevicesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type DevicesCreateInstanceError = DevicesCreateInstanceErrors[keyof DevicesCreateInstanceErrors];

export type DevicesCreateInstanceResponses = {
    /**
     * Single Device
     */
    201: DeviceResponse;
};

export type DevicesCreateInstanceResponse = DevicesCreateInstanceResponses[keyof DevicesCreateInstanceResponses];

export type DevicesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type devices
         */
        'fields[devices]'?: Array<'name' | 'platform' | 'udid' | 'deviceClass' | 'status' | 'model' | 'addedDate'>;
    };
    url: '/v1/devices/{id}';
};

export type DevicesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type DevicesGetInstanceError = DevicesGetInstanceErrors[keyof DevicesGetInstanceErrors];

export type DevicesGetInstanceResponses = {
    /**
     * Single Device
     */
    200: DeviceResponse;
};

export type DevicesGetInstanceResponse = DevicesGetInstanceResponses[keyof DevicesGetInstanceResponses];

export type DevicesUpdateInstanceData = {
    /**
     * Device representation
     */
    body: DeviceUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/devices/{id}';
};

export type DevicesUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type DevicesUpdateInstanceError = DevicesUpdateInstanceErrors[keyof DevicesUpdateInstanceErrors];

export type DevicesUpdateInstanceResponses = {
    /**
     * Single Device
     */
    200: DeviceResponse;
};

export type DevicesUpdateInstanceResponse = DevicesUpdateInstanceResponses[keyof DevicesUpdateInstanceResponses];

export type EndAppAvailabilityPreOrdersCreateInstanceData = {
    /**
     * EndAppAvailabilityPreOrder representation
     */
    body: EndAppAvailabilityPreOrderCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/endAppAvailabilityPreOrders';
};

export type EndAppAvailabilityPreOrdersCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type EndAppAvailabilityPreOrdersCreateInstanceError = EndAppAvailabilityPreOrdersCreateInstanceErrors[keyof EndAppAvailabilityPreOrdersCreateInstanceErrors];

export type EndAppAvailabilityPreOrdersCreateInstanceResponses = {
    /**
     * Single EndAppAvailabilityPreOrder
     */
    201: EndAppAvailabilityPreOrderResponse;
};

export type EndAppAvailabilityPreOrdersCreateInstanceResponse = EndAppAvailabilityPreOrdersCreateInstanceResponses[keyof EndAppAvailabilityPreOrdersCreateInstanceResponses];

export type EndUserLicenseAgreementsCreateInstanceData = {
    /**
     * EndUserLicenseAgreement representation
     */
    body: EndUserLicenseAgreementCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/endUserLicenseAgreements';
};

export type EndUserLicenseAgreementsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type EndUserLicenseAgreementsCreateInstanceError = EndUserLicenseAgreementsCreateInstanceErrors[keyof EndUserLicenseAgreementsCreateInstanceErrors];

export type EndUserLicenseAgreementsCreateInstanceResponses = {
    /**
     * Single EndUserLicenseAgreement
     */
    201: EndUserLicenseAgreementResponse;
};

export type EndUserLicenseAgreementsCreateInstanceResponse = EndUserLicenseAgreementsCreateInstanceResponses[keyof EndUserLicenseAgreementsCreateInstanceResponses];

export type EndUserLicenseAgreementsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/endUserLicenseAgreements/{id}';
};

export type EndUserLicenseAgreementsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type EndUserLicenseAgreementsDeleteInstanceError = EndUserLicenseAgreementsDeleteInstanceErrors[keyof EndUserLicenseAgreementsDeleteInstanceErrors];

export type EndUserLicenseAgreementsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type EndUserLicenseAgreementsDeleteInstanceResponse = EndUserLicenseAgreementsDeleteInstanceResponses[keyof EndUserLicenseAgreementsDeleteInstanceResponses];

export type EndUserLicenseAgreementsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type endUserLicenseAgreements
         */
        'fields[endUserLicenseAgreements]'?: Array<'agreementText' | 'app' | 'territories'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'territories'>;
        /**
         * maximum number of related territories returned (when they are included)
         */
        'limit[territories]'?: number;
    };
    url: '/v1/endUserLicenseAgreements/{id}';
};

export type EndUserLicenseAgreementsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type EndUserLicenseAgreementsGetInstanceError = EndUserLicenseAgreementsGetInstanceErrors[keyof EndUserLicenseAgreementsGetInstanceErrors];

export type EndUserLicenseAgreementsGetInstanceResponses = {
    /**
     * Single EndUserLicenseAgreement
     */
    200: EndUserLicenseAgreementResponse;
};

export type EndUserLicenseAgreementsGetInstanceResponse = EndUserLicenseAgreementsGetInstanceResponses[keyof EndUserLicenseAgreementsGetInstanceResponses];

export type EndUserLicenseAgreementsUpdateInstanceData = {
    /**
     * EndUserLicenseAgreement representation
     */
    body: EndUserLicenseAgreementUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/endUserLicenseAgreements/{id}';
};

export type EndUserLicenseAgreementsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type EndUserLicenseAgreementsUpdateInstanceError = EndUserLicenseAgreementsUpdateInstanceErrors[keyof EndUserLicenseAgreementsUpdateInstanceErrors];

export type EndUserLicenseAgreementsUpdateInstanceResponses = {
    /**
     * Single EndUserLicenseAgreement
     */
    200: EndUserLicenseAgreementResponse;
};

export type EndUserLicenseAgreementsUpdateInstanceResponse = EndUserLicenseAgreementsUpdateInstanceResponses[keyof EndUserLicenseAgreementsUpdateInstanceResponses];

export type FinanceReportsGetCollectionData = {
    body?: never;
    path?: never;
    query: {
        /**
         * filter by attribute 'vendorNumber'
         */
        'filter[vendorNumber]': Array<string>;
        /**
         * filter by attribute 'reportType'
         */
        'filter[reportType]': Array<'FINANCIAL' | 'FINANCE_DETAIL'>;
        /**
         * filter by attribute 'regionCode'
         */
        'filter[regionCode]': Array<string>;
        /**
         * filter by attribute 'reportDate'
         */
        'filter[reportDate]': Array<string>;
    };
    url: '/v1/financeReports';
};

export type FinanceReportsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type FinanceReportsGetCollectionError = FinanceReportsGetCollectionErrors[keyof FinanceReportsGetCollectionErrors];

export type FinanceReportsGetCollectionResponses = {
    /**
     * List of FinanceReports
     */
    200: Gzip;
};

export type FinanceReportsGetCollectionResponse = FinanceReportsGetCollectionResponses[keyof FinanceReportsGetCollectionResponses];

export type GameCenterAchievementImagesCreateInstanceData = {
    /**
     * GameCenterAchievementImage representation
     */
    body: GameCenterAchievementImageCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/gameCenterAchievementImages';
};

export type GameCenterAchievementImagesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterAchievementImagesCreateInstanceError = GameCenterAchievementImagesCreateInstanceErrors[keyof GameCenterAchievementImagesCreateInstanceErrors];

export type GameCenterAchievementImagesCreateInstanceResponses = {
    /**
     * Single GameCenterAchievementImage
     */
    201: GameCenterAchievementImageResponse;
};

export type GameCenterAchievementImagesCreateInstanceResponse = GameCenterAchievementImagesCreateInstanceResponses[keyof GameCenterAchievementImagesCreateInstanceResponses];

export type GameCenterAchievementImagesDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterAchievementImages/{id}';
};

export type GameCenterAchievementImagesDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type GameCenterAchievementImagesDeleteInstanceError = GameCenterAchievementImagesDeleteInstanceErrors[keyof GameCenterAchievementImagesDeleteInstanceErrors];

export type GameCenterAchievementImagesDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterAchievementImagesDeleteInstanceResponse = GameCenterAchievementImagesDeleteInstanceResponses[keyof GameCenterAchievementImagesDeleteInstanceResponses];

export type GameCenterAchievementImagesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievementImages
         */
        'fields[gameCenterAchievementImages]'?: Array<'fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'gameCenterAchievementLocalization'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterAchievementLocalization'>;
    };
    url: '/v1/gameCenterAchievementImages/{id}';
};

export type GameCenterAchievementImagesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterAchievementImagesGetInstanceError = GameCenterAchievementImagesGetInstanceErrors[keyof GameCenterAchievementImagesGetInstanceErrors];

export type GameCenterAchievementImagesGetInstanceResponses = {
    /**
     * Single GameCenterAchievementImage
     */
    200: GameCenterAchievementImageResponse;
};

export type GameCenterAchievementImagesGetInstanceResponse = GameCenterAchievementImagesGetInstanceResponses[keyof GameCenterAchievementImagesGetInstanceResponses];

export type GameCenterAchievementImagesUpdateInstanceData = {
    /**
     * GameCenterAchievementImage representation
     */
    body: GameCenterAchievementImageUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterAchievementImages/{id}';
};

export type GameCenterAchievementImagesUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterAchievementImagesUpdateInstanceError = GameCenterAchievementImagesUpdateInstanceErrors[keyof GameCenterAchievementImagesUpdateInstanceErrors];

export type GameCenterAchievementImagesUpdateInstanceResponses = {
    /**
     * Single GameCenterAchievementImage
     */
    200: GameCenterAchievementImageResponse;
};

export type GameCenterAchievementImagesUpdateInstanceResponse = GameCenterAchievementImagesUpdateInstanceResponses[keyof GameCenterAchievementImagesUpdateInstanceResponses];

export type GameCenterAchievementLocalizationsCreateInstanceData = {
    /**
     * GameCenterAchievementLocalization representation
     */
    body: GameCenterAchievementLocalizationCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/gameCenterAchievementLocalizations';
};

export type GameCenterAchievementLocalizationsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterAchievementLocalizationsCreateInstanceError = GameCenterAchievementLocalizationsCreateInstanceErrors[keyof GameCenterAchievementLocalizationsCreateInstanceErrors];

export type GameCenterAchievementLocalizationsCreateInstanceResponses = {
    /**
     * Single GameCenterAchievementLocalization
     */
    201: GameCenterAchievementLocalizationResponse;
};

export type GameCenterAchievementLocalizationsCreateInstanceResponse = GameCenterAchievementLocalizationsCreateInstanceResponses[keyof GameCenterAchievementLocalizationsCreateInstanceResponses];

export type GameCenterAchievementLocalizationsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterAchievementLocalizations/{id}';
};

export type GameCenterAchievementLocalizationsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type GameCenterAchievementLocalizationsDeleteInstanceError = GameCenterAchievementLocalizationsDeleteInstanceErrors[keyof GameCenterAchievementLocalizationsDeleteInstanceErrors];

export type GameCenterAchievementLocalizationsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterAchievementLocalizationsDeleteInstanceResponse = GameCenterAchievementLocalizationsDeleteInstanceResponses[keyof GameCenterAchievementLocalizationsDeleteInstanceResponses];

export type GameCenterAchievementLocalizationsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievementLocalizations
         */
        'fields[gameCenterAchievementLocalizations]'?: Array<'locale' | 'name' | 'beforeEarnedDescription' | 'afterEarnedDescription' | 'gameCenterAchievement' | 'gameCenterAchievementImage'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<'referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementImages
         */
        'fields[gameCenterAchievementImages]'?: Array<'fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'gameCenterAchievementLocalization'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterAchievement' | 'gameCenterAchievementImage'>;
    };
    url: '/v1/gameCenterAchievementLocalizations/{id}';
};

export type GameCenterAchievementLocalizationsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterAchievementLocalizationsGetInstanceError = GameCenterAchievementLocalizationsGetInstanceErrors[keyof GameCenterAchievementLocalizationsGetInstanceErrors];

export type GameCenterAchievementLocalizationsGetInstanceResponses = {
    /**
     * Single GameCenterAchievementLocalization
     */
    200: GameCenterAchievementLocalizationResponse;
};

export type GameCenterAchievementLocalizationsGetInstanceResponse = GameCenterAchievementLocalizationsGetInstanceResponses[keyof GameCenterAchievementLocalizationsGetInstanceResponses];

export type GameCenterAchievementLocalizationsUpdateInstanceData = {
    /**
     * GameCenterAchievementLocalization representation
     */
    body: GameCenterAchievementLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterAchievementLocalizations/{id}';
};

export type GameCenterAchievementLocalizationsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterAchievementLocalizationsUpdateInstanceError = GameCenterAchievementLocalizationsUpdateInstanceErrors[keyof GameCenterAchievementLocalizationsUpdateInstanceErrors];

export type GameCenterAchievementLocalizationsUpdateInstanceResponses = {
    /**
     * Single GameCenterAchievementLocalization
     */
    200: GameCenterAchievementLocalizationResponse;
};

export type GameCenterAchievementLocalizationsUpdateInstanceResponse = GameCenterAchievementLocalizationsUpdateInstanceResponses[keyof GameCenterAchievementLocalizationsUpdateInstanceResponses];

export type GameCenterAchievementReleasesCreateInstanceData = {
    /**
     * GameCenterAchievementRelease representation
     */
    body: GameCenterAchievementReleaseCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/gameCenterAchievementReleases';
};

export type GameCenterAchievementReleasesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterAchievementReleasesCreateInstanceError = GameCenterAchievementReleasesCreateInstanceErrors[keyof GameCenterAchievementReleasesCreateInstanceErrors];

export type GameCenterAchievementReleasesCreateInstanceResponses = {
    /**
     * Single GameCenterAchievementRelease
     */
    201: GameCenterAchievementReleaseResponse;
};

export type GameCenterAchievementReleasesCreateInstanceResponse = GameCenterAchievementReleasesCreateInstanceResponses[keyof GameCenterAchievementReleasesCreateInstanceResponses];

export type GameCenterAchievementReleasesDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterAchievementReleases/{id}';
};

export type GameCenterAchievementReleasesDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type GameCenterAchievementReleasesDeleteInstanceError = GameCenterAchievementReleasesDeleteInstanceErrors[keyof GameCenterAchievementReleasesDeleteInstanceErrors];

export type GameCenterAchievementReleasesDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterAchievementReleasesDeleteInstanceResponse = GameCenterAchievementReleasesDeleteInstanceResponses[keyof GameCenterAchievementReleasesDeleteInstanceResponses];

export type GameCenterAchievementReleasesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievementReleases
         */
        'fields[gameCenterAchievementReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterAchievement'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterAchievement'>;
    };
    url: '/v1/gameCenterAchievementReleases/{id}';
};

export type GameCenterAchievementReleasesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterAchievementReleasesGetInstanceError = GameCenterAchievementReleasesGetInstanceErrors[keyof GameCenterAchievementReleasesGetInstanceErrors];

export type GameCenterAchievementReleasesGetInstanceResponses = {
    /**
     * Single GameCenterAchievementRelease
     */
    200: GameCenterAchievementReleaseResponse;
};

export type GameCenterAchievementReleasesGetInstanceResponse = GameCenterAchievementReleasesGetInstanceResponses[keyof GameCenterAchievementReleasesGetInstanceResponses];

export type GameCenterAchievementsCreateInstanceData = {
    /**
     * GameCenterAchievement representation
     */
    body: GameCenterAchievementCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/gameCenterAchievements';
};

export type GameCenterAchievementsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterAchievementsCreateInstanceError = GameCenterAchievementsCreateInstanceErrors[keyof GameCenterAchievementsCreateInstanceErrors];

export type GameCenterAchievementsCreateInstanceResponses = {
    /**
     * Single GameCenterAchievement
     */
    201: GameCenterAchievementResponse;
};

export type GameCenterAchievementsCreateInstanceResponse = GameCenterAchievementsCreateInstanceResponses[keyof GameCenterAchievementsCreateInstanceResponses];

export type GameCenterAchievementsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterAchievements/{id}';
};

export type GameCenterAchievementsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type GameCenterAchievementsDeleteInstanceError = GameCenterAchievementsDeleteInstanceErrors[keyof GameCenterAchievementsDeleteInstanceErrors];

export type GameCenterAchievementsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterAchievementsDeleteInstanceResponse = GameCenterAchievementsDeleteInstanceResponses[keyof GameCenterAchievementsDeleteInstanceResponses];

export type GameCenterAchievementsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<'referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementLocalizations
         */
        'fields[gameCenterAchievementLocalizations]'?: Array<'locale' | 'name' | 'beforeEarnedDescription' | 'afterEarnedDescription' | 'gameCenterAchievement' | 'gameCenterAchievementImage'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementReleases
         */
        'fields[gameCenterAchievementReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterAchievement'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases'>;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
    url: '/v1/gameCenterAchievements/{id}';
};

export type GameCenterAchievementsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterAchievementsGetInstanceError = GameCenterAchievementsGetInstanceErrors[keyof GameCenterAchievementsGetInstanceErrors];

export type GameCenterAchievementsGetInstanceResponses = {
    /**
     * Single GameCenterAchievement
     */
    200: GameCenterAchievementResponse;
};

export type GameCenterAchievementsGetInstanceResponse = GameCenterAchievementsGetInstanceResponses[keyof GameCenterAchievementsGetInstanceResponses];

export type GameCenterAchievementsUpdateInstanceData = {
    /**
     * GameCenterAchievement representation
     */
    body: GameCenterAchievementUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterAchievements/{id}';
};

export type GameCenterAchievementsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterAchievementsUpdateInstanceError = GameCenterAchievementsUpdateInstanceErrors[keyof GameCenterAchievementsUpdateInstanceErrors];

export type GameCenterAchievementsUpdateInstanceResponses = {
    /**
     * Single GameCenterAchievement
     */
    200: GameCenterAchievementResponse;
};

export type GameCenterAchievementsUpdateInstanceResponse = GameCenterAchievementsUpdateInstanceResponses[keyof GameCenterAchievementsUpdateInstanceResponses];

export type GameCenterAppVersionsCreateInstanceData = {
    /**
     * GameCenterAppVersion representation
     */
    body: GameCenterAppVersionCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/gameCenterAppVersions';
};

export type GameCenterAppVersionsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterAppVersionsCreateInstanceError = GameCenterAppVersionsCreateInstanceErrors[keyof GameCenterAppVersionsCreateInstanceErrors];

export type GameCenterAppVersionsCreateInstanceResponses = {
    /**
     * Single GameCenterAppVersion
     */
    201: GameCenterAppVersionResponse;
};

export type GameCenterAppVersionsCreateInstanceResponse = GameCenterAppVersionsCreateInstanceResponses[keyof GameCenterAppVersionsCreateInstanceResponses];

export type GameCenterAppVersionsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<'enabled' | 'compatibilityVersions' | 'appStoreVersion'>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'compatibilityVersions' | 'appStoreVersion'>;
        /**
         * maximum number of related compatibilityVersions returned (when they are included)
         */
        'limit[compatibilityVersions]'?: number;
    };
    url: '/v1/gameCenterAppVersions/{id}';
};

export type GameCenterAppVersionsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterAppVersionsGetInstanceError = GameCenterAppVersionsGetInstanceErrors[keyof GameCenterAppVersionsGetInstanceErrors];

export type GameCenterAppVersionsGetInstanceResponses = {
    /**
     * Single GameCenterAppVersion
     */
    200: GameCenterAppVersionResponse;
};

export type GameCenterAppVersionsGetInstanceResponse = GameCenterAppVersionsGetInstanceResponses[keyof GameCenterAppVersionsGetInstanceResponses];

export type GameCenterAppVersionsUpdateInstanceData = {
    /**
     * GameCenterAppVersion representation
     */
    body: GameCenterAppVersionUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterAppVersions/{id}';
};

export type GameCenterAppVersionsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterAppVersionsUpdateInstanceError = GameCenterAppVersionsUpdateInstanceErrors[keyof GameCenterAppVersionsUpdateInstanceErrors];

export type GameCenterAppVersionsUpdateInstanceResponses = {
    /**
     * Single GameCenterAppVersion
     */
    200: GameCenterAppVersionResponse;
};

export type GameCenterAppVersionsUpdateInstanceResponse = GameCenterAppVersionsUpdateInstanceResponses[keyof GameCenterAppVersionsUpdateInstanceResponses];

export type GameCenterDetailsCreateInstanceData = {
    /**
     * GameCenterDetail representation
     */
    body: GameCenterDetailCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/gameCenterDetails';
};

export type GameCenterDetailsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterDetailsCreateInstanceError = GameCenterDetailsCreateInstanceErrors[keyof GameCenterDetailsCreateInstanceErrors];

export type GameCenterDetailsCreateInstanceResponses = {
    /**
     * Single GameCenterDetail
     */
    201: GameCenterDetailResponse;
};

export type GameCenterDetailsCreateInstanceResponse = GameCenterDetailsCreateInstanceResponses[keyof GameCenterDetailsCreateInstanceResponses];

export type GameCenterDetailsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<'enabled' | 'compatibilityVersions' | 'appStoreVersion'>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<'referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<'defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<'referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<'referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementReleases
         */
        'fields[gameCenterAchievementReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterAchievement'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterLeaderboard'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetReleases
         */
        'fields[gameCenterLeaderboardSetReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterLeaderboardSet'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * maximum number of related achievementReleases returned (when they are included)
         */
        'limit[achievementReleases]'?: number;
        /**
         * maximum number of related gameCenterAchievements returned (when they are included)
         */
        'limit[gameCenterAchievements]'?: number;
        /**
         * maximum number of related gameCenterAppVersions returned (when they are included)
         */
        'limit[gameCenterAppVersions]'?: number;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
        /**
         * maximum number of related gameCenterLeaderboards returned (when they are included)
         */
        'limit[gameCenterLeaderboards]'?: number;
        /**
         * maximum number of related leaderboardReleases returned (when they are included)
         */
        'limit[leaderboardReleases]'?: number;
        /**
         * maximum number of related leaderboardSetReleases returned (when they are included)
         */
        'limit[leaderboardSetReleases]'?: number;
    };
    url: '/v1/gameCenterDetails/{id}';
};

export type GameCenterDetailsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterDetailsGetInstanceError = GameCenterDetailsGetInstanceErrors[keyof GameCenterDetailsGetInstanceErrors];

export type GameCenterDetailsGetInstanceResponses = {
    /**
     * Single GameCenterDetail
     */
    200: GameCenterDetailResponse;
};

export type GameCenterDetailsGetInstanceResponse = GameCenterDetailsGetInstanceResponses[keyof GameCenterDetailsGetInstanceResponses];

export type GameCenterDetailsUpdateInstanceData = {
    /**
     * GameCenterDetail representation
     */
    body: GameCenterDetailUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterDetails/{id}';
};

export type GameCenterDetailsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterDetailsUpdateInstanceError = GameCenterDetailsUpdateInstanceErrors[keyof GameCenterDetailsUpdateInstanceErrors];

export type GameCenterDetailsUpdateInstanceResponses = {
    /**
     * Single GameCenterDetail
     */
    200: GameCenterDetailResponse;
};

export type GameCenterDetailsUpdateInstanceResponse = GameCenterDetailsUpdateInstanceResponses[keyof GameCenterDetailsUpdateInstanceResponses];

export type GameCenterGroupsGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * filter by id(s) of related 'gameCenterDetails'
         */
        'filter[gameCenterDetails]'?: Array<string>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<'referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<'defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<'referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<'referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements'>;
        /**
         * maximum number of related gameCenterAchievements returned (when they are included)
         */
        'limit[gameCenterAchievements]'?: number;
        /**
         * maximum number of related gameCenterDetails returned (when they are included)
         */
        'limit[gameCenterDetails]'?: number;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
        /**
         * maximum number of related gameCenterLeaderboards returned (when they are included)
         */
        'limit[gameCenterLeaderboards]'?: number;
    };
    url: '/v1/gameCenterGroups';
};

export type GameCenterGroupsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type GameCenterGroupsGetCollectionError = GameCenterGroupsGetCollectionErrors[keyof GameCenterGroupsGetCollectionErrors];

export type GameCenterGroupsGetCollectionResponses = {
    /**
     * List of GameCenterGroups
     */
    200: GameCenterGroupsResponse;
};

export type GameCenterGroupsGetCollectionResponse = GameCenterGroupsGetCollectionResponses[keyof GameCenterGroupsGetCollectionResponses];

export type GameCenterGroupsCreateInstanceData = {
    /**
     * GameCenterGroup representation
     */
    body: GameCenterGroupCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/gameCenterGroups';
};

export type GameCenterGroupsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterGroupsCreateInstanceError = GameCenterGroupsCreateInstanceErrors[keyof GameCenterGroupsCreateInstanceErrors];

export type GameCenterGroupsCreateInstanceResponses = {
    /**
     * Single GameCenterGroup
     */
    201: GameCenterGroupResponse;
};

export type GameCenterGroupsCreateInstanceResponse = GameCenterGroupsCreateInstanceResponses[keyof GameCenterGroupsCreateInstanceResponses];

export type GameCenterGroupsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterGroups/{id}';
};

export type GameCenterGroupsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type GameCenterGroupsDeleteInstanceError = GameCenterGroupsDeleteInstanceErrors[keyof GameCenterGroupsDeleteInstanceErrors];

export type GameCenterGroupsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterGroupsDeleteInstanceResponse = GameCenterGroupsDeleteInstanceResponses[keyof GameCenterGroupsDeleteInstanceResponses];

export type GameCenterGroupsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<'referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<'defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<'referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<'referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements'>;
        /**
         * maximum number of related gameCenterAchievements returned (when they are included)
         */
        'limit[gameCenterAchievements]'?: number;
        /**
         * maximum number of related gameCenterDetails returned (when they are included)
         */
        'limit[gameCenterDetails]'?: number;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
        /**
         * maximum number of related gameCenterLeaderboards returned (when they are included)
         */
        'limit[gameCenterLeaderboards]'?: number;
    };
    url: '/v1/gameCenterGroups/{id}';
};

export type GameCenterGroupsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterGroupsGetInstanceError = GameCenterGroupsGetInstanceErrors[keyof GameCenterGroupsGetInstanceErrors];

export type GameCenterGroupsGetInstanceResponses = {
    /**
     * Single GameCenterGroup
     */
    200: GameCenterGroupResponse;
};

export type GameCenterGroupsGetInstanceResponse = GameCenterGroupsGetInstanceResponses[keyof GameCenterGroupsGetInstanceResponses];

export type GameCenterGroupsUpdateInstanceData = {
    /**
     * GameCenterGroup representation
     */
    body: GameCenterGroupUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterGroups/{id}';
};

export type GameCenterGroupsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterGroupsUpdateInstanceError = GameCenterGroupsUpdateInstanceErrors[keyof GameCenterGroupsUpdateInstanceErrors];

export type GameCenterGroupsUpdateInstanceResponses = {
    /**
     * Single GameCenterGroup
     */
    200: GameCenterGroupResponse;
};

export type GameCenterGroupsUpdateInstanceResponse = GameCenterGroupsUpdateInstanceResponses[keyof GameCenterGroupsUpdateInstanceResponses];

export type GameCenterLeaderboardEntrySubmissionsCreateInstanceData = {
    /**
     * GameCenterLeaderboardEntrySubmission representation
     */
    body: GameCenterLeaderboardEntrySubmissionCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/gameCenterLeaderboardEntrySubmissions';
};

export type GameCenterLeaderboardEntrySubmissionsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterLeaderboardEntrySubmissionsCreateInstanceError = GameCenterLeaderboardEntrySubmissionsCreateInstanceErrors[keyof GameCenterLeaderboardEntrySubmissionsCreateInstanceErrors];

export type GameCenterLeaderboardEntrySubmissionsCreateInstanceResponses = {
    /**
     * Single GameCenterLeaderboardEntrySubmission
     */
    201: GameCenterLeaderboardEntrySubmissionResponse;
};

export type GameCenterLeaderboardEntrySubmissionsCreateInstanceResponse = GameCenterLeaderboardEntrySubmissionsCreateInstanceResponses[keyof GameCenterLeaderboardEntrySubmissionsCreateInstanceResponses];

export type GameCenterLeaderboardImagesCreateInstanceData = {
    /**
     * GameCenterLeaderboardImage representation
     */
    body: GameCenterLeaderboardImageCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/gameCenterLeaderboardImages';
};

export type GameCenterLeaderboardImagesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterLeaderboardImagesCreateInstanceError = GameCenterLeaderboardImagesCreateInstanceErrors[keyof GameCenterLeaderboardImagesCreateInstanceErrors];

export type GameCenterLeaderboardImagesCreateInstanceResponses = {
    /**
     * Single GameCenterLeaderboardImage
     */
    201: GameCenterLeaderboardImageResponse;
};

export type GameCenterLeaderboardImagesCreateInstanceResponse = GameCenterLeaderboardImagesCreateInstanceResponses[keyof GameCenterLeaderboardImagesCreateInstanceResponses];

export type GameCenterLeaderboardImagesDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterLeaderboardImages/{id}';
};

export type GameCenterLeaderboardImagesDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type GameCenterLeaderboardImagesDeleteInstanceError = GameCenterLeaderboardImagesDeleteInstanceErrors[keyof GameCenterLeaderboardImagesDeleteInstanceErrors];

export type GameCenterLeaderboardImagesDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterLeaderboardImagesDeleteInstanceResponse = GameCenterLeaderboardImagesDeleteInstanceResponses[keyof GameCenterLeaderboardImagesDeleteInstanceResponses];

export type GameCenterLeaderboardImagesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardImages
         */
        'fields[gameCenterLeaderboardImages]'?: Array<'fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'gameCenterLeaderboardLocalization'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterLeaderboardLocalization'>;
    };
    url: '/v1/gameCenterLeaderboardImages/{id}';
};

export type GameCenterLeaderboardImagesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterLeaderboardImagesGetInstanceError = GameCenterLeaderboardImagesGetInstanceErrors[keyof GameCenterLeaderboardImagesGetInstanceErrors];

export type GameCenterLeaderboardImagesGetInstanceResponses = {
    /**
     * Single GameCenterLeaderboardImage
     */
    200: GameCenterLeaderboardImageResponse;
};

export type GameCenterLeaderboardImagesGetInstanceResponse = GameCenterLeaderboardImagesGetInstanceResponses[keyof GameCenterLeaderboardImagesGetInstanceResponses];

export type GameCenterLeaderboardImagesUpdateInstanceData = {
    /**
     * GameCenterLeaderboardImage representation
     */
    body: GameCenterLeaderboardImageUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterLeaderboardImages/{id}';
};

export type GameCenterLeaderboardImagesUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterLeaderboardImagesUpdateInstanceError = GameCenterLeaderboardImagesUpdateInstanceErrors[keyof GameCenterLeaderboardImagesUpdateInstanceErrors];

export type GameCenterLeaderboardImagesUpdateInstanceResponses = {
    /**
     * Single GameCenterLeaderboardImage
     */
    200: GameCenterLeaderboardImageResponse;
};

export type GameCenterLeaderboardImagesUpdateInstanceResponse = GameCenterLeaderboardImagesUpdateInstanceResponses[keyof GameCenterLeaderboardImagesUpdateInstanceResponses];

export type GameCenterLeaderboardLocalizationsCreateInstanceData = {
    /**
     * GameCenterLeaderboardLocalization representation
     */
    body: GameCenterLeaderboardLocalizationCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/gameCenterLeaderboardLocalizations';
};

export type GameCenterLeaderboardLocalizationsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterLeaderboardLocalizationsCreateInstanceError = GameCenterLeaderboardLocalizationsCreateInstanceErrors[keyof GameCenterLeaderboardLocalizationsCreateInstanceErrors];

export type GameCenterLeaderboardLocalizationsCreateInstanceResponses = {
    /**
     * Single GameCenterLeaderboardLocalization
     */
    201: GameCenterLeaderboardLocalizationResponse;
};

export type GameCenterLeaderboardLocalizationsCreateInstanceResponse = GameCenterLeaderboardLocalizationsCreateInstanceResponses[keyof GameCenterLeaderboardLocalizationsCreateInstanceResponses];

export type GameCenterLeaderboardLocalizationsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterLeaderboardLocalizations/{id}';
};

export type GameCenterLeaderboardLocalizationsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type GameCenterLeaderboardLocalizationsDeleteInstanceError = GameCenterLeaderboardLocalizationsDeleteInstanceErrors[keyof GameCenterLeaderboardLocalizationsDeleteInstanceErrors];

export type GameCenterLeaderboardLocalizationsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterLeaderboardLocalizationsDeleteInstanceResponse = GameCenterLeaderboardLocalizationsDeleteInstanceResponses[keyof GameCenterLeaderboardLocalizationsDeleteInstanceResponses];

export type GameCenterLeaderboardLocalizationsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardLocalizations
         */
        'fields[gameCenterLeaderboardLocalizations]'?: Array<'locale' | 'name' | 'formatterOverride' | 'formatterSuffix' | 'formatterSuffixSingular' | 'gameCenterLeaderboard' | 'gameCenterLeaderboardImage'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardImages
         */
        'fields[gameCenterLeaderboardImages]'?: Array<'fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'gameCenterLeaderboardLocalization'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterLeaderboard' | 'gameCenterLeaderboardImage'>;
    };
    url: '/v1/gameCenterLeaderboardLocalizations/{id}';
};

export type GameCenterLeaderboardLocalizationsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterLeaderboardLocalizationsGetInstanceError = GameCenterLeaderboardLocalizationsGetInstanceErrors[keyof GameCenterLeaderboardLocalizationsGetInstanceErrors];

export type GameCenterLeaderboardLocalizationsGetInstanceResponses = {
    /**
     * Single GameCenterLeaderboardLocalization
     */
    200: GameCenterLeaderboardLocalizationResponse;
};

export type GameCenterLeaderboardLocalizationsGetInstanceResponse = GameCenterLeaderboardLocalizationsGetInstanceResponses[keyof GameCenterLeaderboardLocalizationsGetInstanceResponses];

export type GameCenterLeaderboardLocalizationsUpdateInstanceData = {
    /**
     * GameCenterLeaderboardLocalization representation
     */
    body: GameCenterLeaderboardLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterLeaderboardLocalizations/{id}';
};

export type GameCenterLeaderboardLocalizationsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterLeaderboardLocalizationsUpdateInstanceError = GameCenterLeaderboardLocalizationsUpdateInstanceErrors[keyof GameCenterLeaderboardLocalizationsUpdateInstanceErrors];

export type GameCenterLeaderboardLocalizationsUpdateInstanceResponses = {
    /**
     * Single GameCenterLeaderboardLocalization
     */
    200: GameCenterLeaderboardLocalizationResponse;
};

export type GameCenterLeaderboardLocalizationsUpdateInstanceResponse = GameCenterLeaderboardLocalizationsUpdateInstanceResponses[keyof GameCenterLeaderboardLocalizationsUpdateInstanceResponses];

export type GameCenterLeaderboardReleasesCreateInstanceData = {
    /**
     * GameCenterLeaderboardRelease representation
     */
    body: GameCenterLeaderboardReleaseCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/gameCenterLeaderboardReleases';
};

export type GameCenterLeaderboardReleasesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterLeaderboardReleasesCreateInstanceError = GameCenterLeaderboardReleasesCreateInstanceErrors[keyof GameCenterLeaderboardReleasesCreateInstanceErrors];

export type GameCenterLeaderboardReleasesCreateInstanceResponses = {
    /**
     * Single GameCenterLeaderboardRelease
     */
    201: GameCenterLeaderboardReleaseResponse;
};

export type GameCenterLeaderboardReleasesCreateInstanceResponse = GameCenterLeaderboardReleasesCreateInstanceResponses[keyof GameCenterLeaderboardReleasesCreateInstanceResponses];

export type GameCenterLeaderboardReleasesDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterLeaderboardReleases/{id}';
};

export type GameCenterLeaderboardReleasesDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type GameCenterLeaderboardReleasesDeleteInstanceError = GameCenterLeaderboardReleasesDeleteInstanceErrors[keyof GameCenterLeaderboardReleasesDeleteInstanceErrors];

export type GameCenterLeaderboardReleasesDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterLeaderboardReleasesDeleteInstanceResponse = GameCenterLeaderboardReleasesDeleteInstanceResponses[keyof GameCenterLeaderboardReleasesDeleteInstanceResponses];

export type GameCenterLeaderboardReleasesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterLeaderboard'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterLeaderboard'>;
    };
    url: '/v1/gameCenterLeaderboardReleases/{id}';
};

export type GameCenterLeaderboardReleasesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterLeaderboardReleasesGetInstanceError = GameCenterLeaderboardReleasesGetInstanceErrors[keyof GameCenterLeaderboardReleasesGetInstanceErrors];

export type GameCenterLeaderboardReleasesGetInstanceResponses = {
    /**
     * Single GameCenterLeaderboardRelease
     */
    200: GameCenterLeaderboardReleaseResponse;
};

export type GameCenterLeaderboardReleasesGetInstanceResponse = GameCenterLeaderboardReleasesGetInstanceResponses[keyof GameCenterLeaderboardReleasesGetInstanceResponses];

export type GameCenterLeaderboardSetImagesCreateInstanceData = {
    /**
     * GameCenterLeaderboardSetImage representation
     */
    body: GameCenterLeaderboardSetImageCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/gameCenterLeaderboardSetImages';
};

export type GameCenterLeaderboardSetImagesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterLeaderboardSetImagesCreateInstanceError = GameCenterLeaderboardSetImagesCreateInstanceErrors[keyof GameCenterLeaderboardSetImagesCreateInstanceErrors];

export type GameCenterLeaderboardSetImagesCreateInstanceResponses = {
    /**
     * Single GameCenterLeaderboardSetImage
     */
    201: GameCenterLeaderboardSetImageResponse;
};

export type GameCenterLeaderboardSetImagesCreateInstanceResponse = GameCenterLeaderboardSetImagesCreateInstanceResponses[keyof GameCenterLeaderboardSetImagesCreateInstanceResponses];

export type GameCenterLeaderboardSetImagesDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterLeaderboardSetImages/{id}';
};

export type GameCenterLeaderboardSetImagesDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type GameCenterLeaderboardSetImagesDeleteInstanceError = GameCenterLeaderboardSetImagesDeleteInstanceErrors[keyof GameCenterLeaderboardSetImagesDeleteInstanceErrors];

export type GameCenterLeaderboardSetImagesDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterLeaderboardSetImagesDeleteInstanceResponse = GameCenterLeaderboardSetImagesDeleteInstanceResponses[keyof GameCenterLeaderboardSetImagesDeleteInstanceResponses];

export type GameCenterLeaderboardSetImagesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetImages
         */
        'fields[gameCenterLeaderboardSetImages]'?: Array<'fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'gameCenterLeaderboardSetLocalization'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterLeaderboardSetLocalization'>;
    };
    url: '/v1/gameCenterLeaderboardSetImages/{id}';
};

export type GameCenterLeaderboardSetImagesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterLeaderboardSetImagesGetInstanceError = GameCenterLeaderboardSetImagesGetInstanceErrors[keyof GameCenterLeaderboardSetImagesGetInstanceErrors];

export type GameCenterLeaderboardSetImagesGetInstanceResponses = {
    /**
     * Single GameCenterLeaderboardSetImage
     */
    200: GameCenterLeaderboardSetImageResponse;
};

export type GameCenterLeaderboardSetImagesGetInstanceResponse = GameCenterLeaderboardSetImagesGetInstanceResponses[keyof GameCenterLeaderboardSetImagesGetInstanceResponses];

export type GameCenterLeaderboardSetImagesUpdateInstanceData = {
    /**
     * GameCenterLeaderboardSetImage representation
     */
    body: GameCenterLeaderboardSetImageUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterLeaderboardSetImages/{id}';
};

export type GameCenterLeaderboardSetImagesUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterLeaderboardSetImagesUpdateInstanceError = GameCenterLeaderboardSetImagesUpdateInstanceErrors[keyof GameCenterLeaderboardSetImagesUpdateInstanceErrors];

export type GameCenterLeaderboardSetImagesUpdateInstanceResponses = {
    /**
     * Single GameCenterLeaderboardSetImage
     */
    200: GameCenterLeaderboardSetImageResponse;
};

export type GameCenterLeaderboardSetImagesUpdateInstanceResponse = GameCenterLeaderboardSetImagesUpdateInstanceResponses[keyof GameCenterLeaderboardSetImagesUpdateInstanceResponses];

export type GameCenterLeaderboardSetLocalizationsCreateInstanceData = {
    /**
     * GameCenterLeaderboardSetLocalization representation
     */
    body: GameCenterLeaderboardSetLocalizationCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/gameCenterLeaderboardSetLocalizations';
};

export type GameCenterLeaderboardSetLocalizationsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterLeaderboardSetLocalizationsCreateInstanceError = GameCenterLeaderboardSetLocalizationsCreateInstanceErrors[keyof GameCenterLeaderboardSetLocalizationsCreateInstanceErrors];

export type GameCenterLeaderboardSetLocalizationsCreateInstanceResponses = {
    /**
     * Single GameCenterLeaderboardSetLocalization
     */
    201: GameCenterLeaderboardSetLocalizationResponse;
};

export type GameCenterLeaderboardSetLocalizationsCreateInstanceResponse = GameCenterLeaderboardSetLocalizationsCreateInstanceResponses[keyof GameCenterLeaderboardSetLocalizationsCreateInstanceResponses];

export type GameCenterLeaderboardSetLocalizationsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterLeaderboardSetLocalizations/{id}';
};

export type GameCenterLeaderboardSetLocalizationsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type GameCenterLeaderboardSetLocalizationsDeleteInstanceError = GameCenterLeaderboardSetLocalizationsDeleteInstanceErrors[keyof GameCenterLeaderboardSetLocalizationsDeleteInstanceErrors];

export type GameCenterLeaderboardSetLocalizationsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterLeaderboardSetLocalizationsDeleteInstanceResponse = GameCenterLeaderboardSetLocalizationsDeleteInstanceResponses[keyof GameCenterLeaderboardSetLocalizationsDeleteInstanceResponses];

export type GameCenterLeaderboardSetLocalizationsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
         */
        'fields[gameCenterLeaderboardSetLocalizations]'?: Array<'locale' | 'name' | 'gameCenterLeaderboardSet' | 'gameCenterLeaderboardSetImage'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetImages
         */
        'fields[gameCenterLeaderboardSetImages]'?: Array<'fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'gameCenterLeaderboardSetLocalization'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterLeaderboardSet' | 'gameCenterLeaderboardSetImage'>;
    };
    url: '/v1/gameCenterLeaderboardSetLocalizations/{id}';
};

export type GameCenterLeaderboardSetLocalizationsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterLeaderboardSetLocalizationsGetInstanceError = GameCenterLeaderboardSetLocalizationsGetInstanceErrors[keyof GameCenterLeaderboardSetLocalizationsGetInstanceErrors];

export type GameCenterLeaderboardSetLocalizationsGetInstanceResponses = {
    /**
     * Single GameCenterLeaderboardSetLocalization
     */
    200: GameCenterLeaderboardSetLocalizationResponse;
};

export type GameCenterLeaderboardSetLocalizationsGetInstanceResponse = GameCenterLeaderboardSetLocalizationsGetInstanceResponses[keyof GameCenterLeaderboardSetLocalizationsGetInstanceResponses];

export type GameCenterLeaderboardSetLocalizationsUpdateInstanceData = {
    /**
     * GameCenterLeaderboardSetLocalization representation
     */
    body: GameCenterLeaderboardSetLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterLeaderboardSetLocalizations/{id}';
};

export type GameCenterLeaderboardSetLocalizationsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterLeaderboardSetLocalizationsUpdateInstanceError = GameCenterLeaderboardSetLocalizationsUpdateInstanceErrors[keyof GameCenterLeaderboardSetLocalizationsUpdateInstanceErrors];

export type GameCenterLeaderboardSetLocalizationsUpdateInstanceResponses = {
    /**
     * Single GameCenterLeaderboardSetLocalization
     */
    200: GameCenterLeaderboardSetLocalizationResponse;
};

export type GameCenterLeaderboardSetLocalizationsUpdateInstanceResponse = GameCenterLeaderboardSetLocalizationsUpdateInstanceResponses[keyof GameCenterLeaderboardSetLocalizationsUpdateInstanceResponses];

export type GameCenterLeaderboardSetMemberLocalizationsGetCollectionData = {
    body?: never;
    path?: never;
    query: {
        /**
         * filter by id(s) of related 'gameCenterLeaderboardSet'
         */
        'filter[gameCenterLeaderboardSet]': Array<string>;
        /**
         * filter by id(s) of related 'gameCenterLeaderboard'
         */
        'filter[gameCenterLeaderboard]': Array<string>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetMemberLocalizations
         */
        'fields[gameCenterLeaderboardSetMemberLocalizations]'?: Array<'name' | 'locale' | 'gameCenterLeaderboardSet' | 'gameCenterLeaderboard'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<'referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<'defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterLeaderboardSet' | 'gameCenterLeaderboard'>;
    };
    url: '/v1/gameCenterLeaderboardSetMemberLocalizations';
};

export type GameCenterLeaderboardSetMemberLocalizationsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type GameCenterLeaderboardSetMemberLocalizationsGetCollectionError = GameCenterLeaderboardSetMemberLocalizationsGetCollectionErrors[keyof GameCenterLeaderboardSetMemberLocalizationsGetCollectionErrors];

export type GameCenterLeaderboardSetMemberLocalizationsGetCollectionResponses = {
    /**
     * List of GameCenterLeaderboardSetMemberLocalizations
     */
    200: GameCenterLeaderboardSetMemberLocalizationsResponse;
};

export type GameCenterLeaderboardSetMemberLocalizationsGetCollectionResponse = GameCenterLeaderboardSetMemberLocalizationsGetCollectionResponses[keyof GameCenterLeaderboardSetMemberLocalizationsGetCollectionResponses];

export type GameCenterLeaderboardSetMemberLocalizationsCreateInstanceData = {
    /**
     * GameCenterLeaderboardSetMemberLocalization representation
     */
    body: GameCenterLeaderboardSetMemberLocalizationCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/gameCenterLeaderboardSetMemberLocalizations';
};

export type GameCenterLeaderboardSetMemberLocalizationsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterLeaderboardSetMemberLocalizationsCreateInstanceError = GameCenterLeaderboardSetMemberLocalizationsCreateInstanceErrors[keyof GameCenterLeaderboardSetMemberLocalizationsCreateInstanceErrors];

export type GameCenterLeaderboardSetMemberLocalizationsCreateInstanceResponses = {
    /**
     * Single GameCenterLeaderboardSetMemberLocalization
     */
    201: GameCenterLeaderboardSetMemberLocalizationResponse;
};

export type GameCenterLeaderboardSetMemberLocalizationsCreateInstanceResponse = GameCenterLeaderboardSetMemberLocalizationsCreateInstanceResponses[keyof GameCenterLeaderboardSetMemberLocalizationsCreateInstanceResponses];

export type GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterLeaderboardSetMemberLocalizations/{id}';
};

export type GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceError = GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceErrors[keyof GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceErrors];

export type GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceResponse = GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceResponses[keyof GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceResponses];

export type GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceData = {
    /**
     * GameCenterLeaderboardSetMemberLocalization representation
     */
    body: GameCenterLeaderboardSetMemberLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterLeaderboardSetMemberLocalizations/{id}';
};

export type GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceError = GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceErrors[keyof GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceErrors];

export type GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceResponses = {
    /**
     * Single GameCenterLeaderboardSetMemberLocalization
     */
    200: GameCenterLeaderboardSetMemberLocalizationResponse;
};

export type GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceResponse = GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceResponses[keyof GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceResponses];

export type GameCenterLeaderboardSetReleasesCreateInstanceData = {
    /**
     * GameCenterLeaderboardSetRelease representation
     */
    body: GameCenterLeaderboardSetReleaseCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/gameCenterLeaderboardSetReleases';
};

export type GameCenterLeaderboardSetReleasesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterLeaderboardSetReleasesCreateInstanceError = GameCenterLeaderboardSetReleasesCreateInstanceErrors[keyof GameCenterLeaderboardSetReleasesCreateInstanceErrors];

export type GameCenterLeaderboardSetReleasesCreateInstanceResponses = {
    /**
     * Single GameCenterLeaderboardSetRelease
     */
    201: GameCenterLeaderboardSetReleaseResponse;
};

export type GameCenterLeaderboardSetReleasesCreateInstanceResponse = GameCenterLeaderboardSetReleasesCreateInstanceResponses[keyof GameCenterLeaderboardSetReleasesCreateInstanceResponses];

export type GameCenterLeaderboardSetReleasesDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterLeaderboardSetReleases/{id}';
};

export type GameCenterLeaderboardSetReleasesDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type GameCenterLeaderboardSetReleasesDeleteInstanceError = GameCenterLeaderboardSetReleasesDeleteInstanceErrors[keyof GameCenterLeaderboardSetReleasesDeleteInstanceErrors];

export type GameCenterLeaderboardSetReleasesDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterLeaderboardSetReleasesDeleteInstanceResponse = GameCenterLeaderboardSetReleasesDeleteInstanceResponses[keyof GameCenterLeaderboardSetReleasesDeleteInstanceResponses];

export type GameCenterLeaderboardSetReleasesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetReleases
         */
        'fields[gameCenterLeaderboardSetReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterLeaderboardSet'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterLeaderboardSet'>;
    };
    url: '/v1/gameCenterLeaderboardSetReleases/{id}';
};

export type GameCenterLeaderboardSetReleasesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterLeaderboardSetReleasesGetInstanceError = GameCenterLeaderboardSetReleasesGetInstanceErrors[keyof GameCenterLeaderboardSetReleasesGetInstanceErrors];

export type GameCenterLeaderboardSetReleasesGetInstanceResponses = {
    /**
     * Single GameCenterLeaderboardSetRelease
     */
    200: GameCenterLeaderboardSetReleaseResponse;
};

export type GameCenterLeaderboardSetReleasesGetInstanceResponse = GameCenterLeaderboardSetReleasesGetInstanceResponses[keyof GameCenterLeaderboardSetReleasesGetInstanceResponses];

export type GameCenterLeaderboardSetsCreateInstanceData = {
    /**
     * GameCenterLeaderboardSet representation
     */
    body: GameCenterLeaderboardSetCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/gameCenterLeaderboardSets';
};

export type GameCenterLeaderboardSetsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterLeaderboardSetsCreateInstanceError = GameCenterLeaderboardSetsCreateInstanceErrors[keyof GameCenterLeaderboardSetsCreateInstanceErrors];

export type GameCenterLeaderboardSetsCreateInstanceResponses = {
    /**
     * Single GameCenterLeaderboardSet
     */
    201: GameCenterLeaderboardSetResponse;
};

export type GameCenterLeaderboardSetsCreateInstanceResponse = GameCenterLeaderboardSetsCreateInstanceResponses[keyof GameCenterLeaderboardSetsCreateInstanceResponses];

export type GameCenterLeaderboardSetsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterLeaderboardSets/{id}';
};

export type GameCenterLeaderboardSetsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type GameCenterLeaderboardSetsDeleteInstanceError = GameCenterLeaderboardSetsDeleteInstanceErrors[keyof GameCenterLeaderboardSetsDeleteInstanceErrors];

export type GameCenterLeaderboardSetsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterLeaderboardSetsDeleteInstanceResponse = GameCenterLeaderboardSetsDeleteInstanceResponses[keyof GameCenterLeaderboardSetsDeleteInstanceResponses];

export type GameCenterLeaderboardSetsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<'referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
         */
        'fields[gameCenterLeaderboardSetLocalizations]'?: Array<'locale' | 'name' | 'gameCenterLeaderboardSet' | 'gameCenterLeaderboardSetImage'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<'defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetReleases
         */
        'fields[gameCenterLeaderboardSetReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterLeaderboardSet'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * maximum number of related gameCenterLeaderboards returned (when they are included)
         */
        'limit[gameCenterLeaderboards]'?: number;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
    url: '/v1/gameCenterLeaderboardSets/{id}';
};

export type GameCenterLeaderboardSetsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterLeaderboardSetsGetInstanceError = GameCenterLeaderboardSetsGetInstanceErrors[keyof GameCenterLeaderboardSetsGetInstanceErrors];

export type GameCenterLeaderboardSetsGetInstanceResponses = {
    /**
     * Single GameCenterLeaderboardSet
     */
    200: GameCenterLeaderboardSetResponse;
};

export type GameCenterLeaderboardSetsGetInstanceResponse = GameCenterLeaderboardSetsGetInstanceResponses[keyof GameCenterLeaderboardSetsGetInstanceResponses];

export type GameCenterLeaderboardSetsUpdateInstanceData = {
    /**
     * GameCenterLeaderboardSet representation
     */
    body: GameCenterLeaderboardSetUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterLeaderboardSets/{id}';
};

export type GameCenterLeaderboardSetsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterLeaderboardSetsUpdateInstanceError = GameCenterLeaderboardSetsUpdateInstanceErrors[keyof GameCenterLeaderboardSetsUpdateInstanceErrors];

export type GameCenterLeaderboardSetsUpdateInstanceResponses = {
    /**
     * Single GameCenterLeaderboardSet
     */
    200: GameCenterLeaderboardSetResponse;
};

export type GameCenterLeaderboardSetsUpdateInstanceResponse = GameCenterLeaderboardSetsUpdateInstanceResponses[keyof GameCenterLeaderboardSetsUpdateInstanceResponses];

export type GameCenterLeaderboardsCreateInstanceData = {
    /**
     * GameCenterLeaderboard representation
     */
    body: GameCenterLeaderboardCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/gameCenterLeaderboards';
};

export type GameCenterLeaderboardsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterLeaderboardsCreateInstanceError = GameCenterLeaderboardsCreateInstanceErrors[keyof GameCenterLeaderboardsCreateInstanceErrors];

export type GameCenterLeaderboardsCreateInstanceResponses = {
    /**
     * Single GameCenterLeaderboard
     */
    201: GameCenterLeaderboardResponse;
};

export type GameCenterLeaderboardsCreateInstanceResponse = GameCenterLeaderboardsCreateInstanceResponses[keyof GameCenterLeaderboardsCreateInstanceResponses];

export type GameCenterLeaderboardsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterLeaderboards/{id}';
};

export type GameCenterLeaderboardsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type GameCenterLeaderboardsDeleteInstanceError = GameCenterLeaderboardsDeleteInstanceErrors[keyof GameCenterLeaderboardsDeleteInstanceErrors];

export type GameCenterLeaderboardsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterLeaderboardsDeleteInstanceResponse = GameCenterLeaderboardsDeleteInstanceResponses[keyof GameCenterLeaderboardsDeleteInstanceResponses];

export type GameCenterLeaderboardsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<'defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardLocalizations
         */
        'fields[gameCenterLeaderboardLocalizations]'?: Array<'locale' | 'name' | 'formatterOverride' | 'formatterSuffix' | 'formatterSuffixSingular' | 'gameCenterLeaderboard' | 'gameCenterLeaderboardImage'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterLeaderboard'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
    url: '/v1/gameCenterLeaderboards/{id}';
};

export type GameCenterLeaderboardsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterLeaderboardsGetInstanceError = GameCenterLeaderboardsGetInstanceErrors[keyof GameCenterLeaderboardsGetInstanceErrors];

export type GameCenterLeaderboardsGetInstanceResponses = {
    /**
     * Single GameCenterLeaderboard
     */
    200: GameCenterLeaderboardResponse;
};

export type GameCenterLeaderboardsGetInstanceResponse = GameCenterLeaderboardsGetInstanceResponses[keyof GameCenterLeaderboardsGetInstanceResponses];

export type GameCenterLeaderboardsUpdateInstanceData = {
    /**
     * GameCenterLeaderboard representation
     */
    body: GameCenterLeaderboardUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterLeaderboards/{id}';
};

export type GameCenterLeaderboardsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterLeaderboardsUpdateInstanceError = GameCenterLeaderboardsUpdateInstanceErrors[keyof GameCenterLeaderboardsUpdateInstanceErrors];

export type GameCenterLeaderboardsUpdateInstanceResponses = {
    /**
     * Single GameCenterLeaderboard
     */
    200: GameCenterLeaderboardResponse;
};

export type GameCenterLeaderboardsUpdateInstanceResponse = GameCenterLeaderboardsUpdateInstanceResponses[keyof GameCenterLeaderboardsUpdateInstanceResponses];

export type GameCenterMatchmakingQueuesGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingQueues
         */
        'fields[gameCenterMatchmakingQueues]'?: Array<'referenceName' | 'classicMatchmakingBundleIds' | 'ruleSet' | 'experimentRuleSet'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'ruleSet' | 'experimentRuleSet'>;
    };
    url: '/v1/gameCenterMatchmakingQueues';
};

export type GameCenterMatchmakingQueuesGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type GameCenterMatchmakingQueuesGetCollectionError = GameCenterMatchmakingQueuesGetCollectionErrors[keyof GameCenterMatchmakingQueuesGetCollectionErrors];

export type GameCenterMatchmakingQueuesGetCollectionResponses = {
    /**
     * List of GameCenterMatchmakingQueues
     */
    200: GameCenterMatchmakingQueuesResponse;
};

export type GameCenterMatchmakingQueuesGetCollectionResponse = GameCenterMatchmakingQueuesGetCollectionResponses[keyof GameCenterMatchmakingQueuesGetCollectionResponses];

export type GameCenterMatchmakingQueuesCreateInstanceData = {
    /**
     * GameCenterMatchmakingQueue representation
     */
    body: GameCenterMatchmakingQueueCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/gameCenterMatchmakingQueues';
};

export type GameCenterMatchmakingQueuesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterMatchmakingQueuesCreateInstanceError = GameCenterMatchmakingQueuesCreateInstanceErrors[keyof GameCenterMatchmakingQueuesCreateInstanceErrors];

export type GameCenterMatchmakingQueuesCreateInstanceResponses = {
    /**
     * Single GameCenterMatchmakingQueue
     */
    201: GameCenterMatchmakingQueueResponse;
};

export type GameCenterMatchmakingQueuesCreateInstanceResponse = GameCenterMatchmakingQueuesCreateInstanceResponses[keyof GameCenterMatchmakingQueuesCreateInstanceResponses];

export type GameCenterMatchmakingQueuesDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterMatchmakingQueues/{id}';
};

export type GameCenterMatchmakingQueuesDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type GameCenterMatchmakingQueuesDeleteInstanceError = GameCenterMatchmakingQueuesDeleteInstanceErrors[keyof GameCenterMatchmakingQueuesDeleteInstanceErrors];

export type GameCenterMatchmakingQueuesDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterMatchmakingQueuesDeleteInstanceResponse = GameCenterMatchmakingQueuesDeleteInstanceResponses[keyof GameCenterMatchmakingQueuesDeleteInstanceResponses];

export type GameCenterMatchmakingQueuesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingQueues
         */
        'fields[gameCenterMatchmakingQueues]'?: Array<'referenceName' | 'classicMatchmakingBundleIds' | 'ruleSet' | 'experimentRuleSet'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'ruleSet' | 'experimentRuleSet'>;
    };
    url: '/v1/gameCenterMatchmakingQueues/{id}';
};

export type GameCenterMatchmakingQueuesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterMatchmakingQueuesGetInstanceError = GameCenterMatchmakingQueuesGetInstanceErrors[keyof GameCenterMatchmakingQueuesGetInstanceErrors];

export type GameCenterMatchmakingQueuesGetInstanceResponses = {
    /**
     * Single GameCenterMatchmakingQueue
     */
    200: GameCenterMatchmakingQueueResponse;
};

export type GameCenterMatchmakingQueuesGetInstanceResponse = GameCenterMatchmakingQueuesGetInstanceResponses[keyof GameCenterMatchmakingQueuesGetInstanceResponses];

export type GameCenterMatchmakingQueuesUpdateInstanceData = {
    /**
     * GameCenterMatchmakingQueue representation
     */
    body: GameCenterMatchmakingQueueUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterMatchmakingQueues/{id}';
};

export type GameCenterMatchmakingQueuesUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterMatchmakingQueuesUpdateInstanceError = GameCenterMatchmakingQueuesUpdateInstanceErrors[keyof GameCenterMatchmakingQueuesUpdateInstanceErrors];

export type GameCenterMatchmakingQueuesUpdateInstanceResponses = {
    /**
     * Single GameCenterMatchmakingQueue
     */
    200: GameCenterMatchmakingQueueResponse;
};

export type GameCenterMatchmakingQueuesUpdateInstanceResponse = GameCenterMatchmakingQueuesUpdateInstanceResponses[keyof GameCenterMatchmakingQueuesUpdateInstanceResponses];

export type GameCenterMatchmakingRuleSetTestsCreateInstanceData = {
    /**
     * GameCenterMatchmakingRuleSetTest representation
     */
    body: GameCenterMatchmakingRuleSetTestCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/gameCenterMatchmakingRuleSetTests';
};

export type GameCenterMatchmakingRuleSetTestsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterMatchmakingRuleSetTestsCreateInstanceError = GameCenterMatchmakingRuleSetTestsCreateInstanceErrors[keyof GameCenterMatchmakingRuleSetTestsCreateInstanceErrors];

export type GameCenterMatchmakingRuleSetTestsCreateInstanceResponses = {
    /**
     * Single GameCenterMatchmakingRuleSetTest
     */
    201: GameCenterMatchmakingRuleSetTestResponse;
};

export type GameCenterMatchmakingRuleSetTestsCreateInstanceResponse = GameCenterMatchmakingRuleSetTestsCreateInstanceResponses[keyof GameCenterMatchmakingRuleSetTestsCreateInstanceResponses];

export type GameCenterMatchmakingRuleSetsGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingRuleSets
         */
        'fields[gameCenterMatchmakingRuleSets]'?: Array<'referenceName' | 'ruleLanguageVersion' | 'minPlayers' | 'maxPlayers' | 'teams' | 'rules' | 'matchmakingQueues'>;
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingTeams
         */
        'fields[gameCenterMatchmakingTeams]'?: Array<'referenceName' | 'minPlayers' | 'maxPlayers'>;
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingRules
         */
        'fields[gameCenterMatchmakingRules]'?: Array<'referenceName' | 'description' | 'type' | 'expression' | 'weight'>;
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingQueues
         */
        'fields[gameCenterMatchmakingQueues]'?: Array<'referenceName' | 'classicMatchmakingBundleIds' | 'ruleSet' | 'experimentRuleSet'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'teams' | 'rules' | 'matchmakingQueues'>;
        /**
         * maximum number of related matchmakingQueues returned (when they are included)
         */
        'limit[matchmakingQueues]'?: number;
        /**
         * maximum number of related rules returned (when they are included)
         */
        'limit[rules]'?: number;
        /**
         * maximum number of related teams returned (when they are included)
         */
        'limit[teams]'?: number;
    };
    url: '/v1/gameCenterMatchmakingRuleSets';
};

export type GameCenterMatchmakingRuleSetsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type GameCenterMatchmakingRuleSetsGetCollectionError = GameCenterMatchmakingRuleSetsGetCollectionErrors[keyof GameCenterMatchmakingRuleSetsGetCollectionErrors];

export type GameCenterMatchmakingRuleSetsGetCollectionResponses = {
    /**
     * List of GameCenterMatchmakingRuleSets
     */
    200: GameCenterMatchmakingRuleSetsResponse;
};

export type GameCenterMatchmakingRuleSetsGetCollectionResponse = GameCenterMatchmakingRuleSetsGetCollectionResponses[keyof GameCenterMatchmakingRuleSetsGetCollectionResponses];

export type GameCenterMatchmakingRuleSetsCreateInstanceData = {
    /**
     * GameCenterMatchmakingRuleSet representation
     */
    body: GameCenterMatchmakingRuleSetCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/gameCenterMatchmakingRuleSets';
};

export type GameCenterMatchmakingRuleSetsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterMatchmakingRuleSetsCreateInstanceError = GameCenterMatchmakingRuleSetsCreateInstanceErrors[keyof GameCenterMatchmakingRuleSetsCreateInstanceErrors];

export type GameCenterMatchmakingRuleSetsCreateInstanceResponses = {
    /**
     * Single GameCenterMatchmakingRuleSet
     */
    201: GameCenterMatchmakingRuleSetResponse;
};

export type GameCenterMatchmakingRuleSetsCreateInstanceResponse = GameCenterMatchmakingRuleSetsCreateInstanceResponses[keyof GameCenterMatchmakingRuleSetsCreateInstanceResponses];

export type GameCenterMatchmakingRuleSetsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterMatchmakingRuleSets/{id}';
};

export type GameCenterMatchmakingRuleSetsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type GameCenterMatchmakingRuleSetsDeleteInstanceError = GameCenterMatchmakingRuleSetsDeleteInstanceErrors[keyof GameCenterMatchmakingRuleSetsDeleteInstanceErrors];

export type GameCenterMatchmakingRuleSetsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterMatchmakingRuleSetsDeleteInstanceResponse = GameCenterMatchmakingRuleSetsDeleteInstanceResponses[keyof GameCenterMatchmakingRuleSetsDeleteInstanceResponses];

export type GameCenterMatchmakingRuleSetsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingRuleSets
         */
        'fields[gameCenterMatchmakingRuleSets]'?: Array<'referenceName' | 'ruleLanguageVersion' | 'minPlayers' | 'maxPlayers' | 'teams' | 'rules' | 'matchmakingQueues'>;
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingTeams
         */
        'fields[gameCenterMatchmakingTeams]'?: Array<'referenceName' | 'minPlayers' | 'maxPlayers'>;
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingRules
         */
        'fields[gameCenterMatchmakingRules]'?: Array<'referenceName' | 'description' | 'type' | 'expression' | 'weight'>;
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingQueues
         */
        'fields[gameCenterMatchmakingQueues]'?: Array<'referenceName' | 'classicMatchmakingBundleIds' | 'ruleSet' | 'experimentRuleSet'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'teams' | 'rules' | 'matchmakingQueues'>;
        /**
         * maximum number of related matchmakingQueues returned (when they are included)
         */
        'limit[matchmakingQueues]'?: number;
        /**
         * maximum number of related rules returned (when they are included)
         */
        'limit[rules]'?: number;
        /**
         * maximum number of related teams returned (when they are included)
         */
        'limit[teams]'?: number;
    };
    url: '/v1/gameCenterMatchmakingRuleSets/{id}';
};

export type GameCenterMatchmakingRuleSetsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterMatchmakingRuleSetsGetInstanceError = GameCenterMatchmakingRuleSetsGetInstanceErrors[keyof GameCenterMatchmakingRuleSetsGetInstanceErrors];

export type GameCenterMatchmakingRuleSetsGetInstanceResponses = {
    /**
     * Single GameCenterMatchmakingRuleSet
     */
    200: GameCenterMatchmakingRuleSetResponse;
};

export type GameCenterMatchmakingRuleSetsGetInstanceResponse = GameCenterMatchmakingRuleSetsGetInstanceResponses[keyof GameCenterMatchmakingRuleSetsGetInstanceResponses];

export type GameCenterMatchmakingRuleSetsUpdateInstanceData = {
    /**
     * GameCenterMatchmakingRuleSet representation
     */
    body: GameCenterMatchmakingRuleSetUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterMatchmakingRuleSets/{id}';
};

export type GameCenterMatchmakingRuleSetsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterMatchmakingRuleSetsUpdateInstanceError = GameCenterMatchmakingRuleSetsUpdateInstanceErrors[keyof GameCenterMatchmakingRuleSetsUpdateInstanceErrors];

export type GameCenterMatchmakingRuleSetsUpdateInstanceResponses = {
    /**
     * Single GameCenterMatchmakingRuleSet
     */
    200: GameCenterMatchmakingRuleSetResponse;
};

export type GameCenterMatchmakingRuleSetsUpdateInstanceResponse = GameCenterMatchmakingRuleSetsUpdateInstanceResponses[keyof GameCenterMatchmakingRuleSetsUpdateInstanceResponses];

export type GameCenterMatchmakingRulesCreateInstanceData = {
    /**
     * GameCenterMatchmakingRule representation
     */
    body: GameCenterMatchmakingRuleCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/gameCenterMatchmakingRules';
};

export type GameCenterMatchmakingRulesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterMatchmakingRulesCreateInstanceError = GameCenterMatchmakingRulesCreateInstanceErrors[keyof GameCenterMatchmakingRulesCreateInstanceErrors];

export type GameCenterMatchmakingRulesCreateInstanceResponses = {
    /**
     * Single GameCenterMatchmakingRule
     */
    201: GameCenterMatchmakingRuleResponse;
};

export type GameCenterMatchmakingRulesCreateInstanceResponse = GameCenterMatchmakingRulesCreateInstanceResponses[keyof GameCenterMatchmakingRulesCreateInstanceResponses];

export type GameCenterMatchmakingRulesDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterMatchmakingRules/{id}';
};

export type GameCenterMatchmakingRulesDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type GameCenterMatchmakingRulesDeleteInstanceError = GameCenterMatchmakingRulesDeleteInstanceErrors[keyof GameCenterMatchmakingRulesDeleteInstanceErrors];

export type GameCenterMatchmakingRulesDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterMatchmakingRulesDeleteInstanceResponse = GameCenterMatchmakingRulesDeleteInstanceResponses[keyof GameCenterMatchmakingRulesDeleteInstanceResponses];

export type GameCenterMatchmakingRulesUpdateInstanceData = {
    /**
     * GameCenterMatchmakingRule representation
     */
    body: GameCenterMatchmakingRuleUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterMatchmakingRules/{id}';
};

export type GameCenterMatchmakingRulesUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterMatchmakingRulesUpdateInstanceError = GameCenterMatchmakingRulesUpdateInstanceErrors[keyof GameCenterMatchmakingRulesUpdateInstanceErrors];

export type GameCenterMatchmakingRulesUpdateInstanceResponses = {
    /**
     * Single GameCenterMatchmakingRule
     */
    200: GameCenterMatchmakingRuleResponse;
};

export type GameCenterMatchmakingRulesUpdateInstanceResponse = GameCenterMatchmakingRulesUpdateInstanceResponses[keyof GameCenterMatchmakingRulesUpdateInstanceResponses];

export type GameCenterMatchmakingTeamsCreateInstanceData = {
    /**
     * GameCenterMatchmakingTeam representation
     */
    body: GameCenterMatchmakingTeamCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/gameCenterMatchmakingTeams';
};

export type GameCenterMatchmakingTeamsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterMatchmakingTeamsCreateInstanceError = GameCenterMatchmakingTeamsCreateInstanceErrors[keyof GameCenterMatchmakingTeamsCreateInstanceErrors];

export type GameCenterMatchmakingTeamsCreateInstanceResponses = {
    /**
     * Single GameCenterMatchmakingTeam
     */
    201: GameCenterMatchmakingTeamResponse;
};

export type GameCenterMatchmakingTeamsCreateInstanceResponse = GameCenterMatchmakingTeamsCreateInstanceResponses[keyof GameCenterMatchmakingTeamsCreateInstanceResponses];

export type GameCenterMatchmakingTeamsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterMatchmakingTeams/{id}';
};

export type GameCenterMatchmakingTeamsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type GameCenterMatchmakingTeamsDeleteInstanceError = GameCenterMatchmakingTeamsDeleteInstanceErrors[keyof GameCenterMatchmakingTeamsDeleteInstanceErrors];

export type GameCenterMatchmakingTeamsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterMatchmakingTeamsDeleteInstanceResponse = GameCenterMatchmakingTeamsDeleteInstanceResponses[keyof GameCenterMatchmakingTeamsDeleteInstanceResponses];

export type GameCenterMatchmakingTeamsUpdateInstanceData = {
    /**
     * GameCenterMatchmakingTeam representation
     */
    body: GameCenterMatchmakingTeamUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterMatchmakingTeams/{id}';
};

export type GameCenterMatchmakingTeamsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterMatchmakingTeamsUpdateInstanceError = GameCenterMatchmakingTeamsUpdateInstanceErrors[keyof GameCenterMatchmakingTeamsUpdateInstanceErrors];

export type GameCenterMatchmakingTeamsUpdateInstanceResponses = {
    /**
     * Single GameCenterMatchmakingTeam
     */
    200: GameCenterMatchmakingTeamResponse;
};

export type GameCenterMatchmakingTeamsUpdateInstanceResponse = GameCenterMatchmakingTeamsUpdateInstanceResponses[keyof GameCenterMatchmakingTeamsUpdateInstanceResponses];

export type GameCenterPlayerAchievementSubmissionsCreateInstanceData = {
    /**
     * GameCenterPlayerAchievementSubmission representation
     */
    body: GameCenterPlayerAchievementSubmissionCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/gameCenterPlayerAchievementSubmissions';
};

export type GameCenterPlayerAchievementSubmissionsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterPlayerAchievementSubmissionsCreateInstanceError = GameCenterPlayerAchievementSubmissionsCreateInstanceErrors[keyof GameCenterPlayerAchievementSubmissionsCreateInstanceErrors];

export type GameCenterPlayerAchievementSubmissionsCreateInstanceResponses = {
    /**
     * Single GameCenterPlayerAchievementSubmission
     */
    201: GameCenterPlayerAchievementSubmissionResponse;
};

export type GameCenterPlayerAchievementSubmissionsCreateInstanceResponse = GameCenterPlayerAchievementSubmissionsCreateInstanceResponses[keyof GameCenterPlayerAchievementSubmissionsCreateInstanceResponses];

export type InAppPurchaseAppStoreReviewScreenshotsCreateInstanceData = {
    /**
     * InAppPurchaseAppStoreReviewScreenshot representation
     */
    body: InAppPurchaseAppStoreReviewScreenshotCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/inAppPurchaseAppStoreReviewScreenshots';
};

export type InAppPurchaseAppStoreReviewScreenshotsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type InAppPurchaseAppStoreReviewScreenshotsCreateInstanceError = InAppPurchaseAppStoreReviewScreenshotsCreateInstanceErrors[keyof InAppPurchaseAppStoreReviewScreenshotsCreateInstanceErrors];

export type InAppPurchaseAppStoreReviewScreenshotsCreateInstanceResponses = {
    /**
     * Single InAppPurchaseAppStoreReviewScreenshot
     */
    201: InAppPurchaseAppStoreReviewScreenshotResponse;
};

export type InAppPurchaseAppStoreReviewScreenshotsCreateInstanceResponse = InAppPurchaseAppStoreReviewScreenshotsCreateInstanceResponses[keyof InAppPurchaseAppStoreReviewScreenshotsCreateInstanceResponses];

export type InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/inAppPurchaseAppStoreReviewScreenshots/{id}';
};

export type InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceError = InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceErrors[keyof InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceErrors];

export type InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceResponse = InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceResponses[keyof InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceResponses];

export type InAppPurchaseAppStoreReviewScreenshotsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots
         */
        'fields[inAppPurchaseAppStoreReviewScreenshots]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'inAppPurchaseV2'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'inAppPurchaseV2'>;
    };
    url: '/v1/inAppPurchaseAppStoreReviewScreenshots/{id}';
};

export type InAppPurchaseAppStoreReviewScreenshotsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type InAppPurchaseAppStoreReviewScreenshotsGetInstanceError = InAppPurchaseAppStoreReviewScreenshotsGetInstanceErrors[keyof InAppPurchaseAppStoreReviewScreenshotsGetInstanceErrors];

export type InAppPurchaseAppStoreReviewScreenshotsGetInstanceResponses = {
    /**
     * Single InAppPurchaseAppStoreReviewScreenshot
     */
    200: InAppPurchaseAppStoreReviewScreenshotResponse;
};

export type InAppPurchaseAppStoreReviewScreenshotsGetInstanceResponse = InAppPurchaseAppStoreReviewScreenshotsGetInstanceResponses[keyof InAppPurchaseAppStoreReviewScreenshotsGetInstanceResponses];

export type InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceData = {
    /**
     * InAppPurchaseAppStoreReviewScreenshot representation
     */
    body: InAppPurchaseAppStoreReviewScreenshotUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/inAppPurchaseAppStoreReviewScreenshots/{id}';
};

export type InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceError = InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceErrors[keyof InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceErrors];

export type InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceResponses = {
    /**
     * Single InAppPurchaseAppStoreReviewScreenshot
     */
    200: InAppPurchaseAppStoreReviewScreenshotResponse;
};

export type InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceResponse = InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceResponses[keyof InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceResponses];

export type InAppPurchaseAvailabilitiesCreateInstanceData = {
    /**
     * InAppPurchaseAvailability representation
     */
    body: InAppPurchaseAvailabilityCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/inAppPurchaseAvailabilities';
};

export type InAppPurchaseAvailabilitiesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type InAppPurchaseAvailabilitiesCreateInstanceError = InAppPurchaseAvailabilitiesCreateInstanceErrors[keyof InAppPurchaseAvailabilitiesCreateInstanceErrors];

export type InAppPurchaseAvailabilitiesCreateInstanceResponses = {
    /**
     * Single InAppPurchaseAvailability
     */
    201: InAppPurchaseAvailabilityResponse;
};

export type InAppPurchaseAvailabilitiesCreateInstanceResponse = InAppPurchaseAvailabilitiesCreateInstanceResponses[keyof InAppPurchaseAvailabilitiesCreateInstanceResponses];

export type InAppPurchaseAvailabilitiesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchaseAvailabilities
         */
        'fields[inAppPurchaseAvailabilities]'?: Array<'availableInNewTerritories' | 'availableTerritories'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'availableTerritories'>;
        /**
         * maximum number of related availableTerritories returned (when they are included)
         */
        'limit[availableTerritories]'?: number;
    };
    url: '/v1/inAppPurchaseAvailabilities/{id}';
};

export type InAppPurchaseAvailabilitiesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type InAppPurchaseAvailabilitiesGetInstanceError = InAppPurchaseAvailabilitiesGetInstanceErrors[keyof InAppPurchaseAvailabilitiesGetInstanceErrors];

export type InAppPurchaseAvailabilitiesGetInstanceResponses = {
    /**
     * Single InAppPurchaseAvailability
     */
    200: InAppPurchaseAvailabilityResponse;
};

export type InAppPurchaseAvailabilitiesGetInstanceResponse = InAppPurchaseAvailabilitiesGetInstanceResponses[keyof InAppPurchaseAvailabilitiesGetInstanceResponses];

export type InAppPurchaseContentsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchaseContents
         */
        'fields[inAppPurchaseContents]'?: Array<'fileName' | 'fileSize' | 'url' | 'lastModifiedDate' | 'inAppPurchaseV2'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'inAppPurchaseV2'>;
    };
    url: '/v1/inAppPurchaseContents/{id}';
};

export type InAppPurchaseContentsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type InAppPurchaseContentsGetInstanceError = InAppPurchaseContentsGetInstanceErrors[keyof InAppPurchaseContentsGetInstanceErrors];

export type InAppPurchaseContentsGetInstanceResponses = {
    /**
     * Single InAppPurchaseContent
     */
    200: InAppPurchaseContentResponse;
};

export type InAppPurchaseContentsGetInstanceResponse = InAppPurchaseContentsGetInstanceResponses[keyof InAppPurchaseContentsGetInstanceResponses];

export type InAppPurchaseImagesCreateInstanceData = {
    /**
     * InAppPurchaseImage representation
     */
    body: InAppPurchaseImageCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/inAppPurchaseImages';
};

export type InAppPurchaseImagesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type InAppPurchaseImagesCreateInstanceError = InAppPurchaseImagesCreateInstanceErrors[keyof InAppPurchaseImagesCreateInstanceErrors];

export type InAppPurchaseImagesCreateInstanceResponses = {
    /**
     * Single InAppPurchaseImage
     */
    201: InAppPurchaseImageResponse;
};

export type InAppPurchaseImagesCreateInstanceResponse = InAppPurchaseImagesCreateInstanceResponses[keyof InAppPurchaseImagesCreateInstanceResponses];

export type InAppPurchaseImagesDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/inAppPurchaseImages/{id}';
};

export type InAppPurchaseImagesDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type InAppPurchaseImagesDeleteInstanceError = InAppPurchaseImagesDeleteInstanceErrors[keyof InAppPurchaseImagesDeleteInstanceErrors];

export type InAppPurchaseImagesDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type InAppPurchaseImagesDeleteInstanceResponse = InAppPurchaseImagesDeleteInstanceResponses[keyof InAppPurchaseImagesDeleteInstanceResponses];

export type InAppPurchaseImagesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchaseImages
         */
        'fields[inAppPurchaseImages]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'assetToken' | 'imageAsset' | 'uploadOperations' | 'state' | 'inAppPurchase'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'inAppPurchase'>;
    };
    url: '/v1/inAppPurchaseImages/{id}';
};

export type InAppPurchaseImagesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type InAppPurchaseImagesGetInstanceError = InAppPurchaseImagesGetInstanceErrors[keyof InAppPurchaseImagesGetInstanceErrors];

export type InAppPurchaseImagesGetInstanceResponses = {
    /**
     * Single InAppPurchaseImage
     */
    200: InAppPurchaseImageResponse;
};

export type InAppPurchaseImagesGetInstanceResponse = InAppPurchaseImagesGetInstanceResponses[keyof InAppPurchaseImagesGetInstanceResponses];

export type InAppPurchaseImagesUpdateInstanceData = {
    /**
     * InAppPurchaseImage representation
     */
    body: InAppPurchaseImageUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/inAppPurchaseImages/{id}';
};

export type InAppPurchaseImagesUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type InAppPurchaseImagesUpdateInstanceError = InAppPurchaseImagesUpdateInstanceErrors[keyof InAppPurchaseImagesUpdateInstanceErrors];

export type InAppPurchaseImagesUpdateInstanceResponses = {
    /**
     * Single InAppPurchaseImage
     */
    200: InAppPurchaseImageResponse;
};

export type InAppPurchaseImagesUpdateInstanceResponse = InAppPurchaseImagesUpdateInstanceResponses[keyof InAppPurchaseImagesUpdateInstanceResponses];

export type InAppPurchaseLocalizationsCreateInstanceData = {
    /**
     * InAppPurchaseLocalization representation
     */
    body: InAppPurchaseLocalizationCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/inAppPurchaseLocalizations';
};

export type InAppPurchaseLocalizationsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type InAppPurchaseLocalizationsCreateInstanceError = InAppPurchaseLocalizationsCreateInstanceErrors[keyof InAppPurchaseLocalizationsCreateInstanceErrors];

export type InAppPurchaseLocalizationsCreateInstanceResponses = {
    /**
     * Single InAppPurchaseLocalization
     */
    201: InAppPurchaseLocalizationResponse;
};

export type InAppPurchaseLocalizationsCreateInstanceResponse = InAppPurchaseLocalizationsCreateInstanceResponses[keyof InAppPurchaseLocalizationsCreateInstanceResponses];

export type InAppPurchaseLocalizationsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/inAppPurchaseLocalizations/{id}';
};

export type InAppPurchaseLocalizationsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type InAppPurchaseLocalizationsDeleteInstanceError = InAppPurchaseLocalizationsDeleteInstanceErrors[keyof InAppPurchaseLocalizationsDeleteInstanceErrors];

export type InAppPurchaseLocalizationsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type InAppPurchaseLocalizationsDeleteInstanceResponse = InAppPurchaseLocalizationsDeleteInstanceResponses[keyof InAppPurchaseLocalizationsDeleteInstanceResponses];

export type InAppPurchaseLocalizationsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchaseLocalizations
         */
        'fields[inAppPurchaseLocalizations]'?: Array<'name' | 'locale' | 'description' | 'state' | 'inAppPurchaseV2'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'inAppPurchaseV2'>;
    };
    url: '/v1/inAppPurchaseLocalizations/{id}';
};

export type InAppPurchaseLocalizationsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type InAppPurchaseLocalizationsGetInstanceError = InAppPurchaseLocalizationsGetInstanceErrors[keyof InAppPurchaseLocalizationsGetInstanceErrors];

export type InAppPurchaseLocalizationsGetInstanceResponses = {
    /**
     * Single InAppPurchaseLocalization
     */
    200: InAppPurchaseLocalizationResponse;
};

export type InAppPurchaseLocalizationsGetInstanceResponse = InAppPurchaseLocalizationsGetInstanceResponses[keyof InAppPurchaseLocalizationsGetInstanceResponses];

export type InAppPurchaseLocalizationsUpdateInstanceData = {
    /**
     * InAppPurchaseLocalization representation
     */
    body: InAppPurchaseLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/inAppPurchaseLocalizations/{id}';
};

export type InAppPurchaseLocalizationsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type InAppPurchaseLocalizationsUpdateInstanceError = InAppPurchaseLocalizationsUpdateInstanceErrors[keyof InAppPurchaseLocalizationsUpdateInstanceErrors];

export type InAppPurchaseLocalizationsUpdateInstanceResponses = {
    /**
     * Single InAppPurchaseLocalization
     */
    200: InAppPurchaseLocalizationResponse;
};

export type InAppPurchaseLocalizationsUpdateInstanceResponse = InAppPurchaseLocalizationsUpdateInstanceResponses[keyof InAppPurchaseLocalizationsUpdateInstanceResponses];

export type InAppPurchasePriceSchedulesCreateInstanceData = {
    /**
     * InAppPurchasePriceSchedule representation
     */
    body: InAppPurchasePriceScheduleCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/inAppPurchasePriceSchedules';
};

export type InAppPurchasePriceSchedulesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type InAppPurchasePriceSchedulesCreateInstanceError = InAppPurchasePriceSchedulesCreateInstanceErrors[keyof InAppPurchasePriceSchedulesCreateInstanceErrors];

export type InAppPurchasePriceSchedulesCreateInstanceResponses = {
    /**
     * Single InAppPurchasePriceSchedule
     */
    201: InAppPurchasePriceScheduleResponse;
};

export type InAppPurchasePriceSchedulesCreateInstanceResponse = InAppPurchasePriceSchedulesCreateInstanceResponses[keyof InAppPurchasePriceSchedulesCreateInstanceResponses];

export type InAppPurchasePriceSchedulesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchasePriceSchedules
         */
        'fields[inAppPurchasePriceSchedules]'?: Array<'baseTerritory' | 'manualPrices' | 'automaticPrices'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * the fields to include for returned resources of type inAppPurchasePrices
         */
        'fields[inAppPurchasePrices]'?: Array<'startDate' | 'endDate' | 'manual' | 'inAppPurchasePricePoint' | 'territory'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'baseTerritory' | 'manualPrices' | 'automaticPrices'>;
        /**
         * maximum number of related automaticPrices returned (when they are included)
         */
        'limit[automaticPrices]'?: number;
        /**
         * maximum number of related manualPrices returned (when they are included)
         */
        'limit[manualPrices]'?: number;
    };
    url: '/v1/inAppPurchasePriceSchedules/{id}';
};

export type InAppPurchasePriceSchedulesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type InAppPurchasePriceSchedulesGetInstanceError = InAppPurchasePriceSchedulesGetInstanceErrors[keyof InAppPurchasePriceSchedulesGetInstanceErrors];

export type InAppPurchasePriceSchedulesGetInstanceResponses = {
    /**
     * Single InAppPurchasePriceSchedule
     */
    200: InAppPurchasePriceScheduleResponse;
};

export type InAppPurchasePriceSchedulesGetInstanceResponse = InAppPurchasePriceSchedulesGetInstanceResponses[keyof InAppPurchasePriceSchedulesGetInstanceResponses];

export type InAppPurchaseSubmissionsCreateInstanceData = {
    /**
     * InAppPurchaseSubmission representation
     */
    body: InAppPurchaseSubmissionCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/inAppPurchaseSubmissions';
};

export type InAppPurchaseSubmissionsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type InAppPurchaseSubmissionsCreateInstanceError = InAppPurchaseSubmissionsCreateInstanceErrors[keyof InAppPurchaseSubmissionsCreateInstanceErrors];

export type InAppPurchaseSubmissionsCreateInstanceResponses = {
    /**
     * Single InAppPurchaseSubmission
     */
    201: InAppPurchaseSubmissionResponse;
};

export type InAppPurchaseSubmissionsCreateInstanceResponse = InAppPurchaseSubmissionsCreateInstanceResponses[keyof InAppPurchaseSubmissionsCreateInstanceResponses];

export type InAppPurchasesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<'referenceName' | 'productId' | 'inAppPurchaseType' | 'state' | 'apps'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'apps'>;
        /**
         * maximum number of related apps returned (when they are included)
         */
        'limit[apps]'?: number;
    };
    url: '/v1/inAppPurchases/{id}';
};

export type InAppPurchasesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type InAppPurchasesGetInstanceError = InAppPurchasesGetInstanceErrors[keyof InAppPurchasesGetInstanceErrors];

export type InAppPurchasesGetInstanceResponses = {
    /**
     * Single InAppPurchase
     */
    200: InAppPurchaseResponse;
};

export type InAppPurchasesGetInstanceResponse = InAppPurchasesGetInstanceResponses[keyof InAppPurchasesGetInstanceResponses];

export type InAppPurchasesV2CreateInstanceData = {
    /**
     * InAppPurchase representation
     */
    body: InAppPurchaseV2CreateRequest;
    path?: never;
    query?: never;
    url: '/v2/inAppPurchases';
};

export type InAppPurchasesV2CreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type InAppPurchasesV2CreateInstanceError = InAppPurchasesV2CreateInstanceErrors[keyof InAppPurchasesV2CreateInstanceErrors];

export type InAppPurchasesV2CreateInstanceResponses = {
    /**
     * Single InAppPurchase
     */
    201: InAppPurchaseV2Response;
};

export type InAppPurchasesV2CreateInstanceResponse = InAppPurchasesV2CreateInstanceResponses[keyof InAppPurchasesV2CreateInstanceResponses];

export type InAppPurchasesV2DeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v2/inAppPurchases/{id}';
};

export type InAppPurchasesV2DeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type InAppPurchasesV2DeleteInstanceError = InAppPurchasesV2DeleteInstanceErrors[keyof InAppPurchasesV2DeleteInstanceErrors];

export type InAppPurchasesV2DeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type InAppPurchasesV2DeleteInstanceResponse = InAppPurchasesV2DeleteInstanceResponses[keyof InAppPurchasesV2DeleteInstanceResponses];

export type InAppPurchasesV2GetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<'name' | 'productId' | 'inAppPurchaseType' | 'state' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images'>;
        /**
         * the fields to include for returned resources of type inAppPurchaseLocalizations
         */
        'fields[inAppPurchaseLocalizations]'?: Array<'name' | 'locale' | 'description' | 'state' | 'inAppPurchaseV2'>;
        /**
         * the fields to include for returned resources of type inAppPurchasePricePoints
         */
        'fields[inAppPurchasePricePoints]'?: Array<'customerPrice' | 'proceeds' | 'territory' | 'equalizations'>;
        /**
         * the fields to include for returned resources of type inAppPurchaseContents
         */
        'fields[inAppPurchaseContents]'?: Array<'fileName' | 'fileSize' | 'url' | 'lastModifiedDate' | 'inAppPurchaseV2'>;
        /**
         * the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots
         */
        'fields[inAppPurchaseAppStoreReviewScreenshots]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'inAppPurchaseV2'>;
        /**
         * the fields to include for returned resources of type promotedPurchases
         */
        'fields[promotedPurchases]'?: Array<'visibleForAllUsers' | 'enabled' | 'state' | 'inAppPurchaseV2' | 'subscription'>;
        /**
         * the fields to include for returned resources of type inAppPurchasePriceSchedules
         */
        'fields[inAppPurchasePriceSchedules]'?: Array<'baseTerritory' | 'manualPrices' | 'automaticPrices'>;
        /**
         * the fields to include for returned resources of type inAppPurchaseAvailabilities
         */
        'fields[inAppPurchaseAvailabilities]'?: Array<'availableInNewTerritories' | 'availableTerritories'>;
        /**
         * the fields to include for returned resources of type inAppPurchaseImages
         */
        'fields[inAppPurchaseImages]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'assetToken' | 'imageAsset' | 'uploadOperations' | 'state' | 'inAppPurchase'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images'>;
        /**
         * maximum number of related images returned (when they are included)
         */
        'limit[images]'?: number;
        /**
         * maximum number of related inAppPurchaseLocalizations returned (when they are included)
         */
        'limit[inAppPurchaseLocalizations]'?: number;
        /**
         * maximum number of related pricePoints returned (when they are included)
         */
        'limit[pricePoints]'?: number;
    };
    url: '/v2/inAppPurchases/{id}';
};

export type InAppPurchasesV2GetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type InAppPurchasesV2GetInstanceError = InAppPurchasesV2GetInstanceErrors[keyof InAppPurchasesV2GetInstanceErrors];

export type InAppPurchasesV2GetInstanceResponses = {
    /**
     * Single InAppPurchase
     */
    200: InAppPurchaseV2Response;
};

export type InAppPurchasesV2GetInstanceResponse = InAppPurchasesV2GetInstanceResponses[keyof InAppPurchasesV2GetInstanceResponses];

export type InAppPurchasesV2UpdateInstanceData = {
    /**
     * InAppPurchase representation
     */
    body: InAppPurchaseV2UpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v2/inAppPurchases/{id}';
};

export type InAppPurchasesV2UpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type InAppPurchasesV2UpdateInstanceError = InAppPurchasesV2UpdateInstanceErrors[keyof InAppPurchasesV2UpdateInstanceErrors];

export type InAppPurchasesV2UpdateInstanceResponses = {
    /**
     * Single InAppPurchase
     */
    200: InAppPurchaseV2Response;
};

export type InAppPurchasesV2UpdateInstanceResponse = InAppPurchasesV2UpdateInstanceResponses[keyof InAppPurchasesV2UpdateInstanceResponses];

export type MarketplaceDomainsGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * the fields to include for returned resources of type marketplaceDomains
         */
        'fields[marketplaceDomains]'?: Array<'domain' | 'referenceName' | 'createdDate'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/marketplaceDomains';
};

export type MarketplaceDomainsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type MarketplaceDomainsGetCollectionError = MarketplaceDomainsGetCollectionErrors[keyof MarketplaceDomainsGetCollectionErrors];

export type MarketplaceDomainsGetCollectionResponses = {
    /**
     * List of MarketplaceDomains
     */
    200: MarketplaceDomainsResponse;
};

export type MarketplaceDomainsGetCollectionResponse = MarketplaceDomainsGetCollectionResponses[keyof MarketplaceDomainsGetCollectionResponses];

export type MarketplaceDomainsCreateInstanceData = {
    /**
     * MarketplaceDomain representation
     */
    body: MarketplaceDomainCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/marketplaceDomains';
};

export type MarketplaceDomainsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type MarketplaceDomainsCreateInstanceError = MarketplaceDomainsCreateInstanceErrors[keyof MarketplaceDomainsCreateInstanceErrors];

export type MarketplaceDomainsCreateInstanceResponses = {
    /**
     * Single MarketplaceDomain
     */
    201: MarketplaceDomainResponse;
};

export type MarketplaceDomainsCreateInstanceResponse = MarketplaceDomainsCreateInstanceResponses[keyof MarketplaceDomainsCreateInstanceResponses];

export type MarketplaceDomainsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/marketplaceDomains/{id}';
};

export type MarketplaceDomainsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type MarketplaceDomainsDeleteInstanceError = MarketplaceDomainsDeleteInstanceErrors[keyof MarketplaceDomainsDeleteInstanceErrors];

export type MarketplaceDomainsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type MarketplaceDomainsDeleteInstanceResponse = MarketplaceDomainsDeleteInstanceResponses[keyof MarketplaceDomainsDeleteInstanceResponses];

export type MarketplaceDomainsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type marketplaceDomains
         */
        'fields[marketplaceDomains]'?: Array<'domain' | 'referenceName' | 'createdDate'>;
    };
    url: '/v1/marketplaceDomains/{id}';
};

export type MarketplaceDomainsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type MarketplaceDomainsGetInstanceError = MarketplaceDomainsGetInstanceErrors[keyof MarketplaceDomainsGetInstanceErrors];

export type MarketplaceDomainsGetInstanceResponses = {
    /**
     * Single MarketplaceDomain
     */
    200: MarketplaceDomainResponse;
};

export type MarketplaceDomainsGetInstanceResponse = MarketplaceDomainsGetInstanceResponses[keyof MarketplaceDomainsGetInstanceResponses];

export type MarketplaceSearchDetailsCreateInstanceData = {
    /**
     * MarketplaceSearchDetail representation
     */
    body: MarketplaceSearchDetailCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/marketplaceSearchDetails';
};

export type MarketplaceSearchDetailsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type MarketplaceSearchDetailsCreateInstanceError = MarketplaceSearchDetailsCreateInstanceErrors[keyof MarketplaceSearchDetailsCreateInstanceErrors];

export type MarketplaceSearchDetailsCreateInstanceResponses = {
    /**
     * Single MarketplaceSearchDetail
     */
    201: MarketplaceSearchDetailResponse;
};

export type MarketplaceSearchDetailsCreateInstanceResponse = MarketplaceSearchDetailsCreateInstanceResponses[keyof MarketplaceSearchDetailsCreateInstanceResponses];

export type MarketplaceSearchDetailsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/marketplaceSearchDetails/{id}';
};

export type MarketplaceSearchDetailsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type MarketplaceSearchDetailsDeleteInstanceError = MarketplaceSearchDetailsDeleteInstanceErrors[keyof MarketplaceSearchDetailsDeleteInstanceErrors];

export type MarketplaceSearchDetailsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type MarketplaceSearchDetailsDeleteInstanceResponse = MarketplaceSearchDetailsDeleteInstanceResponses[keyof MarketplaceSearchDetailsDeleteInstanceResponses];

export type MarketplaceSearchDetailsUpdateInstanceData = {
    /**
     * MarketplaceSearchDetail representation
     */
    body: MarketplaceSearchDetailUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/marketplaceSearchDetails/{id}';
};

export type MarketplaceSearchDetailsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type MarketplaceSearchDetailsUpdateInstanceError = MarketplaceSearchDetailsUpdateInstanceErrors[keyof MarketplaceSearchDetailsUpdateInstanceErrors];

export type MarketplaceSearchDetailsUpdateInstanceResponses = {
    /**
     * Single MarketplaceSearchDetail
     */
    200: MarketplaceSearchDetailResponse;
};

export type MarketplaceSearchDetailsUpdateInstanceResponse = MarketplaceSearchDetailsUpdateInstanceResponses[keyof MarketplaceSearchDetailsUpdateInstanceResponses];

export type MarketplaceWebhooksGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * the fields to include for returned resources of type marketplaceWebhooks
         */
        'fields[marketplaceWebhooks]'?: Array<'endpointUrl'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/marketplaceWebhooks';
};

export type MarketplaceWebhooksGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type MarketplaceWebhooksGetCollectionError = MarketplaceWebhooksGetCollectionErrors[keyof MarketplaceWebhooksGetCollectionErrors];

export type MarketplaceWebhooksGetCollectionResponses = {
    /**
     * List of MarketplaceWebhooks
     */
    200: MarketplaceWebhooksResponse;
};

export type MarketplaceWebhooksGetCollectionResponse = MarketplaceWebhooksGetCollectionResponses[keyof MarketplaceWebhooksGetCollectionResponses];

export type MarketplaceWebhooksCreateInstanceData = {
    /**
     * MarketplaceWebhook representation
     */
    body: MarketplaceWebhookCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/marketplaceWebhooks';
};

export type MarketplaceWebhooksCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type MarketplaceWebhooksCreateInstanceError = MarketplaceWebhooksCreateInstanceErrors[keyof MarketplaceWebhooksCreateInstanceErrors];

export type MarketplaceWebhooksCreateInstanceResponses = {
    /**
     * Single MarketplaceWebhook
     */
    201: MarketplaceWebhookResponse;
};

export type MarketplaceWebhooksCreateInstanceResponse = MarketplaceWebhooksCreateInstanceResponses[keyof MarketplaceWebhooksCreateInstanceResponses];

export type MarketplaceWebhooksDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/marketplaceWebhooks/{id}';
};

export type MarketplaceWebhooksDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type MarketplaceWebhooksDeleteInstanceError = MarketplaceWebhooksDeleteInstanceErrors[keyof MarketplaceWebhooksDeleteInstanceErrors];

export type MarketplaceWebhooksDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type MarketplaceWebhooksDeleteInstanceResponse = MarketplaceWebhooksDeleteInstanceResponses[keyof MarketplaceWebhooksDeleteInstanceResponses];

export type MarketplaceWebhooksUpdateInstanceData = {
    /**
     * MarketplaceWebhook representation
     */
    body: MarketplaceWebhookUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/marketplaceWebhooks/{id}';
};

export type MarketplaceWebhooksUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type MarketplaceWebhooksUpdateInstanceError = MarketplaceWebhooksUpdateInstanceErrors[keyof MarketplaceWebhooksUpdateInstanceErrors];

export type MarketplaceWebhooksUpdateInstanceResponses = {
    /**
     * Single MarketplaceWebhook
     */
    200: MarketplaceWebhookResponse;
};

export type MarketplaceWebhooksUpdateInstanceResponse = MarketplaceWebhooksUpdateInstanceResponses[keyof MarketplaceWebhooksUpdateInstanceResponses];

export type MerchantIdsGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * filter by attribute 'name'
         */
        'filter[name]'?: Array<string>;
        /**
         * filter by attribute 'identifier'
         */
        'filter[identifier]'?: Array<string>;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'name' | '-name' | 'identifier' | '-identifier'>;
        /**
         * the fields to include for returned resources of type merchantIds
         */
        'fields[merchantIds]'?: Array<'name' | 'identifier' | 'certificates'>;
        /**
         * the fields to include for returned resources of type certificates
         */
        'fields[certificates]'?: Array<'name' | 'certificateType' | 'displayName' | 'serialNumber' | 'platform' | 'expirationDate' | 'certificateContent' | 'activated'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'certificates'>;
        /**
         * maximum number of related certificates returned (when they are included)
         */
        'limit[certificates]'?: number;
    };
    url: '/v1/merchantIds';
};

export type MerchantIdsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type MerchantIdsGetCollectionError = MerchantIdsGetCollectionErrors[keyof MerchantIdsGetCollectionErrors];

export type MerchantIdsGetCollectionResponses = {
    /**
     * List of MerchantIds
     */
    200: MerchantIdsResponse;
};

export type MerchantIdsGetCollectionResponse = MerchantIdsGetCollectionResponses[keyof MerchantIdsGetCollectionResponses];

export type MerchantIdsCreateInstanceData = {
    /**
     * MerchantId representation
     */
    body: MerchantIdCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/merchantIds';
};

export type MerchantIdsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type MerchantIdsCreateInstanceError = MerchantIdsCreateInstanceErrors[keyof MerchantIdsCreateInstanceErrors];

export type MerchantIdsCreateInstanceResponses = {
    /**
     * Single MerchantId
     */
    201: MerchantIdResponse;
};

export type MerchantIdsCreateInstanceResponse = MerchantIdsCreateInstanceResponses[keyof MerchantIdsCreateInstanceResponses];

export type MerchantIdsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/merchantIds/{id}';
};

export type MerchantIdsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type MerchantIdsDeleteInstanceError = MerchantIdsDeleteInstanceErrors[keyof MerchantIdsDeleteInstanceErrors];

export type MerchantIdsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type MerchantIdsDeleteInstanceResponse = MerchantIdsDeleteInstanceResponses[keyof MerchantIdsDeleteInstanceResponses];

export type MerchantIdsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type merchantIds
         */
        'fields[merchantIds]'?: Array<'name' | 'identifier' | 'certificates'>;
        /**
         * the fields to include for returned resources of type certificates
         */
        'fields[certificates]'?: Array<'name' | 'certificateType' | 'displayName' | 'serialNumber' | 'platform' | 'expirationDate' | 'certificateContent' | 'activated'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'certificates'>;
        /**
         * maximum number of related certificates returned (when they are included)
         */
        'limit[certificates]'?: number;
    };
    url: '/v1/merchantIds/{id}';
};

export type MerchantIdsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type MerchantIdsGetInstanceError = MerchantIdsGetInstanceErrors[keyof MerchantIdsGetInstanceErrors];

export type MerchantIdsGetInstanceResponses = {
    /**
     * Single MerchantId
     */
    200: MerchantIdResponse;
};

export type MerchantIdsGetInstanceResponse = MerchantIdsGetInstanceResponses[keyof MerchantIdsGetInstanceResponses];

export type MerchantIdsUpdateInstanceData = {
    /**
     * MerchantId representation
     */
    body: MerchantIdUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/merchantIds/{id}';
};

export type MerchantIdsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type MerchantIdsUpdateInstanceError = MerchantIdsUpdateInstanceErrors[keyof MerchantIdsUpdateInstanceErrors];

export type MerchantIdsUpdateInstanceResponses = {
    /**
     * Single MerchantId
     */
    200: MerchantIdResponse;
};

export type MerchantIdsUpdateInstanceResponse = MerchantIdsUpdateInstanceResponses[keyof MerchantIdsUpdateInstanceResponses];

export type NominationsGetCollectionData = {
    body?: never;
    path?: never;
    query: {
        /**
         * filter by attribute 'type'
         */
        'filter[type]'?: Array<'APP_LAUNCH' | 'APP_ENHANCEMENTS' | 'NEW_CONTENT'>;
        /**
         * filter by attribute 'state'
         */
        'filter[state]': Array<'DRAFT' | 'SUBMITTED' | 'ARCHIVED'>;
        /**
         * filter by id(s) of related 'relatedApps'
         */
        'filter[relatedApps]'?: Array<string>;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'lastModifiedDate' | '-lastModifiedDate' | 'publishStartDate' | '-publishStartDate' | 'publishEndDate' | '-publishEndDate' | 'name' | '-name' | 'type' | '-type'>;
        /**
         * the fields to include for returned resources of type nominations
         */
        'fields[nominations]'?: Array<'name' | 'type' | 'description' | 'createdDate' | 'lastModifiedDate' | 'submittedDate' | 'state' | 'publishStartDate' | 'publishEndDate' | 'deviceFamilies' | 'locales' | 'supplementalMaterialsUris' | 'hasInAppEvents' | 'launchInSelectMarketsFirst' | 'notes' | 'preOrderEnabled' | 'relatedApps' | 'createdByActor' | 'lastModifiedByActor' | 'submittedByActor' | 'inAppEvents' | 'supportedTerritories'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'relatedApps' | 'createdByActor' | 'lastModifiedByActor' | 'submittedByActor' | 'inAppEvents' | 'supportedTerritories'>;
        /**
         * maximum number of related inAppEvents returned (when they are included)
         */
        'limit[inAppEvents]'?: number;
        /**
         * maximum number of related relatedApps returned (when they are included)
         */
        'limit[relatedApps]'?: number;
        /**
         * maximum number of related supportedTerritories returned (when they are included)
         */
        'limit[supportedTerritories]'?: number;
    };
    url: '/v1/nominations';
};

export type NominationsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type NominationsGetCollectionError = NominationsGetCollectionErrors[keyof NominationsGetCollectionErrors];

export type NominationsGetCollectionResponses = {
    /**
     * List of Nominations
     */
    200: NominationsResponse;
};

export type NominationsGetCollectionResponse = NominationsGetCollectionResponses[keyof NominationsGetCollectionResponses];

export type NominationsCreateInstanceData = {
    /**
     * Nomination representation
     */
    body: NominationCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/nominations';
};

export type NominationsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type NominationsCreateInstanceError = NominationsCreateInstanceErrors[keyof NominationsCreateInstanceErrors];

export type NominationsCreateInstanceResponses = {
    /**
     * Single Nomination
     */
    201: NominationResponse;
};

export type NominationsCreateInstanceResponse = NominationsCreateInstanceResponses[keyof NominationsCreateInstanceResponses];

export type NominationsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/nominations/{id}';
};

export type NominationsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type NominationsDeleteInstanceError = NominationsDeleteInstanceErrors[keyof NominationsDeleteInstanceErrors];

export type NominationsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type NominationsDeleteInstanceResponse = NominationsDeleteInstanceResponses[keyof NominationsDeleteInstanceResponses];

export type NominationsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type nominations
         */
        'fields[nominations]'?: Array<'name' | 'type' | 'description' | 'createdDate' | 'lastModifiedDate' | 'submittedDate' | 'state' | 'publishStartDate' | 'publishEndDate' | 'deviceFamilies' | 'locales' | 'supplementalMaterialsUris' | 'hasInAppEvents' | 'launchInSelectMarketsFirst' | 'notes' | 'preOrderEnabled' | 'relatedApps' | 'createdByActor' | 'lastModifiedByActor' | 'submittedByActor' | 'inAppEvents' | 'supportedTerritories'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'relatedApps' | 'createdByActor' | 'lastModifiedByActor' | 'submittedByActor' | 'inAppEvents' | 'supportedTerritories'>;
        /**
         * maximum number of related inAppEvents returned (when they are included)
         */
        'limit[inAppEvents]'?: number;
        /**
         * maximum number of related relatedApps returned (when they are included)
         */
        'limit[relatedApps]'?: number;
        /**
         * maximum number of related supportedTerritories returned (when they are included)
         */
        'limit[supportedTerritories]'?: number;
    };
    url: '/v1/nominations/{id}';
};

export type NominationsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type NominationsGetInstanceError = NominationsGetInstanceErrors[keyof NominationsGetInstanceErrors];

export type NominationsGetInstanceResponses = {
    /**
     * Single Nomination
     */
    200: NominationResponse;
};

export type NominationsGetInstanceResponse = NominationsGetInstanceResponses[keyof NominationsGetInstanceResponses];

export type NominationsUpdateInstanceData = {
    /**
     * Nomination representation
     */
    body: NominationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/nominations/{id}';
};

export type NominationsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type NominationsUpdateInstanceError = NominationsUpdateInstanceErrors[keyof NominationsUpdateInstanceErrors];

export type NominationsUpdateInstanceResponses = {
    /**
     * Single Nomination
     */
    200: NominationResponse;
};

export type NominationsUpdateInstanceResponse = NominationsUpdateInstanceResponses[keyof NominationsUpdateInstanceResponses];

export type PreReleaseVersionsGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * filter by attribute 'builds.expired'
         */
        'filter[builds.expired]'?: Array<string>;
        /**
         * filter by attribute 'builds.processingState'
         */
        'filter[builds.processingState]'?: Array<'PROCESSING' | 'FAILED' | 'INVALID' | 'VALID'>;
        /**
         * filter by attribute 'builds.version'
         */
        'filter[builds.version]'?: Array<string>;
        /**
         * filter by attribute 'platform'
         */
        'filter[platform]'?: Array<'IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS'>;
        /**
         * filter by attribute 'version'
         */
        'filter[version]'?: Array<string>;
        /**
         * filter by id(s) of related 'app'
         */
        'filter[app]'?: Array<string>;
        /**
         * filter by id(s) of related 'builds'
         */
        'filter[builds]'?: Array<string>;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'version' | '-version'>;
        /**
         * the fields to include for returned resources of type preReleaseVersions
         */
        'fields[preReleaseVersions]'?: Array<'version' | 'platform' | 'builds' | 'app'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'builds' | 'app'>;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
    };
    url: '/v1/preReleaseVersions';
};

export type PreReleaseVersionsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type PreReleaseVersionsGetCollectionError = PreReleaseVersionsGetCollectionErrors[keyof PreReleaseVersionsGetCollectionErrors];

export type PreReleaseVersionsGetCollectionResponses = {
    /**
     * List of PreReleaseVersions
     */
    200: PreReleaseVersionsResponse;
};

export type PreReleaseVersionsGetCollectionResponse = PreReleaseVersionsGetCollectionResponses[keyof PreReleaseVersionsGetCollectionResponses];

export type PreReleaseVersionsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type preReleaseVersions
         */
        'fields[preReleaseVersions]'?: Array<'version' | 'platform' | 'builds' | 'app'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'builds' | 'app'>;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
    };
    url: '/v1/preReleaseVersions/{id}';
};

export type PreReleaseVersionsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type PreReleaseVersionsGetInstanceError = PreReleaseVersionsGetInstanceErrors[keyof PreReleaseVersionsGetInstanceErrors];

export type PreReleaseVersionsGetInstanceResponses = {
    /**
     * Single PrereleaseVersion
     */
    200: PrereleaseVersionResponse;
};

export type PreReleaseVersionsGetInstanceResponse = PreReleaseVersionsGetInstanceResponses[keyof PreReleaseVersionsGetInstanceResponses];

export type ProfilesGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * filter by attribute 'name'
         */
        'filter[name]'?: Array<string>;
        /**
         * filter by attribute 'profileType'
         */
        'filter[profileType]'?: Array<'IOS_APP_DEVELOPMENT' | 'IOS_APP_STORE' | 'IOS_APP_ADHOC' | 'IOS_APP_INHOUSE' | 'MAC_APP_DEVELOPMENT' | 'MAC_APP_STORE' | 'MAC_APP_DIRECT' | 'TVOS_APP_DEVELOPMENT' | 'TVOS_APP_STORE' | 'TVOS_APP_ADHOC' | 'TVOS_APP_INHOUSE' | 'MAC_CATALYST_APP_DEVELOPMENT' | 'MAC_CATALYST_APP_STORE' | 'MAC_CATALYST_APP_DIRECT'>;
        /**
         * filter by attribute 'profileState'
         */
        'filter[profileState]'?: Array<'ACTIVE' | 'INVALID'>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'name' | '-name' | 'profileType' | '-profileType' | 'profileState' | '-profileState' | 'id' | '-id'>;
        /**
         * the fields to include for returned resources of type profiles
         */
        'fields[profiles]'?: Array<'name' | 'platform' | 'profileType' | 'profileState' | 'profileContent' | 'uuid' | 'createdDate' | 'expirationDate' | 'bundleId' | 'devices' | 'certificates'>;
        /**
         * the fields to include for returned resources of type bundleIds
         */
        'fields[bundleIds]'?: Array<'name' | 'platform' | 'identifier' | 'seedId' | 'profiles' | 'bundleIdCapabilities' | 'app'>;
        /**
         * the fields to include for returned resources of type devices
         */
        'fields[devices]'?: Array<'name' | 'platform' | 'udid' | 'deviceClass' | 'status' | 'model' | 'addedDate'>;
        /**
         * the fields to include for returned resources of type certificates
         */
        'fields[certificates]'?: Array<'name' | 'certificateType' | 'displayName' | 'serialNumber' | 'platform' | 'expirationDate' | 'certificateContent' | 'activated'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'bundleId' | 'devices' | 'certificates'>;
        /**
         * maximum number of related certificates returned (when they are included)
         */
        'limit[certificates]'?: number;
        /**
         * maximum number of related devices returned (when they are included)
         */
        'limit[devices]'?: number;
    };
    url: '/v1/profiles';
};

export type ProfilesGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type ProfilesGetCollectionError = ProfilesGetCollectionErrors[keyof ProfilesGetCollectionErrors];

export type ProfilesGetCollectionResponses = {
    /**
     * List of Profiles
     */
    200: ProfilesResponse;
};

export type ProfilesGetCollectionResponse = ProfilesGetCollectionResponses[keyof ProfilesGetCollectionResponses];

export type ProfilesCreateInstanceData = {
    /**
     * Profile representation
     */
    body: ProfileCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/profiles';
};

export type ProfilesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type ProfilesCreateInstanceError = ProfilesCreateInstanceErrors[keyof ProfilesCreateInstanceErrors];

export type ProfilesCreateInstanceResponses = {
    /**
     * Single Profile
     */
    201: ProfileResponse;
};

export type ProfilesCreateInstanceResponse = ProfilesCreateInstanceResponses[keyof ProfilesCreateInstanceResponses];

export type ProfilesDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/profiles/{id}';
};

export type ProfilesDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type ProfilesDeleteInstanceError = ProfilesDeleteInstanceErrors[keyof ProfilesDeleteInstanceErrors];

export type ProfilesDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type ProfilesDeleteInstanceResponse = ProfilesDeleteInstanceResponses[keyof ProfilesDeleteInstanceResponses];

export type ProfilesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type profiles
         */
        'fields[profiles]'?: Array<'name' | 'platform' | 'profileType' | 'profileState' | 'profileContent' | 'uuid' | 'createdDate' | 'expirationDate' | 'bundleId' | 'devices' | 'certificates'>;
        /**
         * the fields to include for returned resources of type bundleIds
         */
        'fields[bundleIds]'?: Array<'name' | 'platform' | 'identifier' | 'seedId' | 'profiles' | 'bundleIdCapabilities' | 'app'>;
        /**
         * the fields to include for returned resources of type devices
         */
        'fields[devices]'?: Array<'name' | 'platform' | 'udid' | 'deviceClass' | 'status' | 'model' | 'addedDate'>;
        /**
         * the fields to include for returned resources of type certificates
         */
        'fields[certificates]'?: Array<'name' | 'certificateType' | 'displayName' | 'serialNumber' | 'platform' | 'expirationDate' | 'certificateContent' | 'activated'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'bundleId' | 'devices' | 'certificates'>;
        /**
         * maximum number of related certificates returned (when they are included)
         */
        'limit[certificates]'?: number;
        /**
         * maximum number of related devices returned (when they are included)
         */
        'limit[devices]'?: number;
    };
    url: '/v1/profiles/{id}';
};

export type ProfilesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type ProfilesGetInstanceError = ProfilesGetInstanceErrors[keyof ProfilesGetInstanceErrors];

export type ProfilesGetInstanceResponses = {
    /**
     * Single Profile
     */
    200: ProfileResponse;
};

export type ProfilesGetInstanceResponse = ProfilesGetInstanceResponses[keyof ProfilesGetInstanceResponses];

export type PromotedPurchasesCreateInstanceData = {
    /**
     * PromotedPurchase representation
     */
    body: PromotedPurchaseCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/promotedPurchases';
};

export type PromotedPurchasesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type PromotedPurchasesCreateInstanceError = PromotedPurchasesCreateInstanceErrors[keyof PromotedPurchasesCreateInstanceErrors];

export type PromotedPurchasesCreateInstanceResponses = {
    /**
     * Single PromotedPurchase
     */
    201: PromotedPurchaseResponse;
};

export type PromotedPurchasesCreateInstanceResponse = PromotedPurchasesCreateInstanceResponses[keyof PromotedPurchasesCreateInstanceResponses];

export type PromotedPurchasesDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/promotedPurchases/{id}';
};

export type PromotedPurchasesDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type PromotedPurchasesDeleteInstanceError = PromotedPurchasesDeleteInstanceErrors[keyof PromotedPurchasesDeleteInstanceErrors];

export type PromotedPurchasesDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type PromotedPurchasesDeleteInstanceResponse = PromotedPurchasesDeleteInstanceResponses[keyof PromotedPurchasesDeleteInstanceResponses];

export type PromotedPurchasesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type promotedPurchases
         */
        'fields[promotedPurchases]'?: Array<'visibleForAllUsers' | 'enabled' | 'state' | 'inAppPurchaseV2' | 'subscription'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'inAppPurchaseV2' | 'subscription'>;
    };
    url: '/v1/promotedPurchases/{id}';
};

export type PromotedPurchasesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type PromotedPurchasesGetInstanceError = PromotedPurchasesGetInstanceErrors[keyof PromotedPurchasesGetInstanceErrors];

export type PromotedPurchasesGetInstanceResponses = {
    /**
     * Single PromotedPurchase
     */
    200: PromotedPurchaseResponse;
};

export type PromotedPurchasesGetInstanceResponse = PromotedPurchasesGetInstanceResponses[keyof PromotedPurchasesGetInstanceResponses];

export type PromotedPurchasesUpdateInstanceData = {
    /**
     * PromotedPurchase representation
     */
    body: PromotedPurchaseUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/promotedPurchases/{id}';
};

export type PromotedPurchasesUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type PromotedPurchasesUpdateInstanceError = PromotedPurchasesUpdateInstanceErrors[keyof PromotedPurchasesUpdateInstanceErrors];

export type PromotedPurchasesUpdateInstanceResponses = {
    /**
     * Single PromotedPurchase
     */
    200: PromotedPurchaseResponse;
};

export type PromotedPurchasesUpdateInstanceResponse = PromotedPurchasesUpdateInstanceResponses[keyof PromotedPurchasesUpdateInstanceResponses];

export type ReviewSubmissionItemsCreateInstanceData = {
    /**
     * ReviewSubmissionItem representation
     */
    body: ReviewSubmissionItemCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/reviewSubmissionItems';
};

export type ReviewSubmissionItemsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type ReviewSubmissionItemsCreateInstanceError = ReviewSubmissionItemsCreateInstanceErrors[keyof ReviewSubmissionItemsCreateInstanceErrors];

export type ReviewSubmissionItemsCreateInstanceResponses = {
    /**
     * Single ReviewSubmissionItem
     */
    201: ReviewSubmissionItemResponse;
};

export type ReviewSubmissionItemsCreateInstanceResponse = ReviewSubmissionItemsCreateInstanceResponses[keyof ReviewSubmissionItemsCreateInstanceResponses];

export type ReviewSubmissionItemsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/reviewSubmissionItems/{id}';
};

export type ReviewSubmissionItemsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type ReviewSubmissionItemsDeleteInstanceError = ReviewSubmissionItemsDeleteInstanceErrors[keyof ReviewSubmissionItemsDeleteInstanceErrors];

export type ReviewSubmissionItemsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type ReviewSubmissionItemsDeleteInstanceResponse = ReviewSubmissionItemsDeleteInstanceResponses[keyof ReviewSubmissionItemsDeleteInstanceResponses];

export type ReviewSubmissionItemsUpdateInstanceData = {
    /**
     * ReviewSubmissionItem representation
     */
    body: ReviewSubmissionItemUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/reviewSubmissionItems/{id}';
};

export type ReviewSubmissionItemsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type ReviewSubmissionItemsUpdateInstanceError = ReviewSubmissionItemsUpdateInstanceErrors[keyof ReviewSubmissionItemsUpdateInstanceErrors];

export type ReviewSubmissionItemsUpdateInstanceResponses = {
    /**
     * Single ReviewSubmissionItem
     */
    200: ReviewSubmissionItemResponse;
};

export type ReviewSubmissionItemsUpdateInstanceResponse = ReviewSubmissionItemsUpdateInstanceResponses[keyof ReviewSubmissionItemsUpdateInstanceResponses];

export type ReviewSubmissionsGetCollectionData = {
    body?: never;
    path?: never;
    query: {
        /**
         * filter by attribute 'platform'
         */
        'filter[platform]'?: Array<'IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS'>;
        /**
         * filter by attribute 'state'
         */
        'filter[state]'?: Array<'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'UNRESOLVED_ISSUES' | 'CANCELING' | 'COMPLETING' | 'COMPLETE'>;
        /**
         * filter by id(s) of related 'app'
         */
        'filter[app]': Array<string>;
        /**
         * the fields to include for returned resources of type reviewSubmissions
         */
        'fields[reviewSubmissions]'?: Array<'platform' | 'submittedDate' | 'state' | 'app' | 'items' | 'appStoreVersionForReview' | 'submittedByActor' | 'lastUpdatedByActor'>;
        /**
         * the fields to include for returned resources of type reviewSubmissionItems
         */
        'fields[reviewSubmissionItems]'?: Array<'state' | 'appStoreVersion' | 'appCustomProductPageVersion' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appEvent'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'items' | 'appStoreVersionForReview' | 'submittedByActor' | 'lastUpdatedByActor'>;
        /**
         * maximum number of related items returned (when they are included)
         */
        'limit[items]'?: number;
    };
    url: '/v1/reviewSubmissions';
};

export type ReviewSubmissionsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type ReviewSubmissionsGetCollectionError = ReviewSubmissionsGetCollectionErrors[keyof ReviewSubmissionsGetCollectionErrors];

export type ReviewSubmissionsGetCollectionResponses = {
    /**
     * List of ReviewSubmissions
     */
    200: ReviewSubmissionsResponse;
};

export type ReviewSubmissionsGetCollectionResponse = ReviewSubmissionsGetCollectionResponses[keyof ReviewSubmissionsGetCollectionResponses];

export type ReviewSubmissionsCreateInstanceData = {
    /**
     * ReviewSubmission representation
     */
    body: ReviewSubmissionCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/reviewSubmissions';
};

export type ReviewSubmissionsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type ReviewSubmissionsCreateInstanceError = ReviewSubmissionsCreateInstanceErrors[keyof ReviewSubmissionsCreateInstanceErrors];

export type ReviewSubmissionsCreateInstanceResponses = {
    /**
     * Single ReviewSubmission
     */
    201: ReviewSubmissionResponse;
};

export type ReviewSubmissionsCreateInstanceResponse = ReviewSubmissionsCreateInstanceResponses[keyof ReviewSubmissionsCreateInstanceResponses];

export type ReviewSubmissionsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type reviewSubmissions
         */
        'fields[reviewSubmissions]'?: Array<'platform' | 'submittedDate' | 'state' | 'app' | 'items' | 'appStoreVersionForReview' | 'submittedByActor' | 'lastUpdatedByActor'>;
        /**
         * the fields to include for returned resources of type reviewSubmissionItems
         */
        'fields[reviewSubmissionItems]'?: Array<'state' | 'appStoreVersion' | 'appCustomProductPageVersion' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appEvent'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'items' | 'appStoreVersionForReview' | 'submittedByActor' | 'lastUpdatedByActor'>;
        /**
         * maximum number of related items returned (when they are included)
         */
        'limit[items]'?: number;
    };
    url: '/v1/reviewSubmissions/{id}';
};

export type ReviewSubmissionsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type ReviewSubmissionsGetInstanceError = ReviewSubmissionsGetInstanceErrors[keyof ReviewSubmissionsGetInstanceErrors];

export type ReviewSubmissionsGetInstanceResponses = {
    /**
     * Single ReviewSubmission
     */
    200: ReviewSubmissionResponse;
};

export type ReviewSubmissionsGetInstanceResponse = ReviewSubmissionsGetInstanceResponses[keyof ReviewSubmissionsGetInstanceResponses];

export type ReviewSubmissionsUpdateInstanceData = {
    /**
     * ReviewSubmission representation
     */
    body: ReviewSubmissionUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/reviewSubmissions/{id}';
};

export type ReviewSubmissionsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type ReviewSubmissionsUpdateInstanceError = ReviewSubmissionsUpdateInstanceErrors[keyof ReviewSubmissionsUpdateInstanceErrors];

export type ReviewSubmissionsUpdateInstanceResponses = {
    /**
     * Single ReviewSubmission
     */
    200: ReviewSubmissionResponse;
};

export type ReviewSubmissionsUpdateInstanceResponse = ReviewSubmissionsUpdateInstanceResponses[keyof ReviewSubmissionsUpdateInstanceResponses];

export type RoutingAppCoveragesCreateInstanceData = {
    /**
     * RoutingAppCoverage representation
     */
    body: RoutingAppCoverageCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/routingAppCoverages';
};

export type RoutingAppCoveragesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type RoutingAppCoveragesCreateInstanceError = RoutingAppCoveragesCreateInstanceErrors[keyof RoutingAppCoveragesCreateInstanceErrors];

export type RoutingAppCoveragesCreateInstanceResponses = {
    /**
     * Single RoutingAppCoverage
     */
    201: RoutingAppCoverageResponse;
};

export type RoutingAppCoveragesCreateInstanceResponse = RoutingAppCoveragesCreateInstanceResponses[keyof RoutingAppCoveragesCreateInstanceResponses];

export type RoutingAppCoveragesDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/routingAppCoverages/{id}';
};

export type RoutingAppCoveragesDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type RoutingAppCoveragesDeleteInstanceError = RoutingAppCoveragesDeleteInstanceErrors[keyof RoutingAppCoveragesDeleteInstanceErrors];

export type RoutingAppCoveragesDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type RoutingAppCoveragesDeleteInstanceResponse = RoutingAppCoveragesDeleteInstanceResponses[keyof RoutingAppCoveragesDeleteInstanceResponses];

export type RoutingAppCoveragesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type routingAppCoverages
         */
        'fields[routingAppCoverages]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'appStoreVersion'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreVersion'>;
    };
    url: '/v1/routingAppCoverages/{id}';
};

export type RoutingAppCoveragesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type RoutingAppCoveragesGetInstanceError = RoutingAppCoveragesGetInstanceErrors[keyof RoutingAppCoveragesGetInstanceErrors];

export type RoutingAppCoveragesGetInstanceResponses = {
    /**
     * Single RoutingAppCoverage
     */
    200: RoutingAppCoverageResponse;
};

export type RoutingAppCoveragesGetInstanceResponse = RoutingAppCoveragesGetInstanceResponses[keyof RoutingAppCoveragesGetInstanceResponses];

export type RoutingAppCoveragesUpdateInstanceData = {
    /**
     * RoutingAppCoverage representation
     */
    body: RoutingAppCoverageUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/routingAppCoverages/{id}';
};

export type RoutingAppCoveragesUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type RoutingAppCoveragesUpdateInstanceError = RoutingAppCoveragesUpdateInstanceErrors[keyof RoutingAppCoveragesUpdateInstanceErrors];

export type RoutingAppCoveragesUpdateInstanceResponses = {
    /**
     * Single RoutingAppCoverage
     */
    200: RoutingAppCoverageResponse;
};

export type RoutingAppCoveragesUpdateInstanceResponse = RoutingAppCoveragesUpdateInstanceResponses[keyof RoutingAppCoveragesUpdateInstanceResponses];

export type SalesReportsGetCollectionData = {
    body?: never;
    path?: never;
    query: {
        /**
         * filter by attribute 'vendorNumber'
         */
        'filter[vendorNumber]': Array<string>;
        /**
         * filter by attribute 'reportType'
         */
        'filter[reportType]': Array<'SALES' | 'PRE_ORDER' | 'NEWSSTAND' | 'SUBSCRIPTION' | 'SUBSCRIPTION_EVENT' | 'SUBSCRIBER' | 'SUBSCRIPTION_OFFER_CODE_REDEMPTION' | 'INSTALLS' | 'FIRST_ANNUAL' | 'WIN_BACK_ELIGIBILITY'>;
        /**
         * filter by attribute 'reportSubType'
         */
        'filter[reportSubType]': Array<'SUMMARY' | 'DETAILED' | 'SUMMARY_INSTALL_TYPE' | 'SUMMARY_TERRITORY' | 'SUMMARY_CHANNEL'>;
        /**
         * filter by attribute 'frequency'
         */
        'filter[frequency]': Array<'DAILY' | 'WEEKLY' | 'MONTHLY' | 'YEARLY'>;
        /**
         * filter by attribute 'reportDate'
         */
        'filter[reportDate]'?: Array<string>;
        /**
         * filter by attribute 'version'
         */
        'filter[version]'?: Array<string>;
    };
    url: '/v1/salesReports';
};

export type SalesReportsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type SalesReportsGetCollectionError = SalesReportsGetCollectionErrors[keyof SalesReportsGetCollectionErrors];

export type SalesReportsGetCollectionResponses = {
    /**
     * List of SalesReports
     */
    200: Gzip;
};

export type SalesReportsGetCollectionResponse = SalesReportsGetCollectionResponses[keyof SalesReportsGetCollectionResponses];

export type SandboxTestersV2GetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * the fields to include for returned resources of type sandboxTesters
         */
        'fields[sandboxTesters]'?: Array<'firstName' | 'lastName' | 'acAccountName' | 'territory' | 'applePayCompatible' | 'interruptPurchases' | 'subscriptionRenewalRate'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v2/sandboxTesters';
};

export type SandboxTestersV2GetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type SandboxTestersV2GetCollectionError = SandboxTestersV2GetCollectionErrors[keyof SandboxTestersV2GetCollectionErrors];

export type SandboxTestersV2GetCollectionResponses = {
    /**
     * List of SandboxTesters
     */
    200: SandboxTestersV2Response;
};

export type SandboxTestersV2GetCollectionResponse = SandboxTestersV2GetCollectionResponses[keyof SandboxTestersV2GetCollectionResponses];

export type SandboxTestersV2UpdateInstanceData = {
    /**
     * SandboxTester representation
     */
    body: SandboxTesterV2UpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v2/sandboxTesters/{id}';
};

export type SandboxTestersV2UpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SandboxTestersV2UpdateInstanceError = SandboxTestersV2UpdateInstanceErrors[keyof SandboxTestersV2UpdateInstanceErrors];

export type SandboxTestersV2UpdateInstanceResponses = {
    /**
     * Single SandboxTester
     */
    200: SandboxTesterV2Response;
};

export type SandboxTestersV2UpdateInstanceResponse = SandboxTestersV2UpdateInstanceResponses[keyof SandboxTestersV2UpdateInstanceResponses];

export type SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceData = {
    /**
     * SandboxTestersClearPurchaseHistoryRequest representation
     */
    body: SandboxTestersClearPurchaseHistoryRequestV2CreateRequest;
    path?: never;
    query?: never;
    url: '/v2/sandboxTestersClearPurchaseHistoryRequest';
};

export type SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceError = SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceErrors[keyof SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceErrors];

export type SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceResponses = {
    /**
     * Single SandboxTestersClearPurchaseHistoryRequest
     */
    201: SandboxTestersClearPurchaseHistoryRequestV2Response;
};

export type SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceResponse = SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceResponses[keyof SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceResponses];

export type ScmGitReferencesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type scmGitReferences
         */
        'fields[scmGitReferences]'?: Array<'name' | 'canonicalName' | 'isDeleted' | 'kind' | 'repository'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'repository'>;
    };
    url: '/v1/scmGitReferences/{id}';
};

export type ScmGitReferencesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type ScmGitReferencesGetInstanceError = ScmGitReferencesGetInstanceErrors[keyof ScmGitReferencesGetInstanceErrors];

export type ScmGitReferencesGetInstanceResponses = {
    /**
     * Single ScmGitReference
     */
    200: ScmGitReferenceResponse;
};

export type ScmGitReferencesGetInstanceResponse = ScmGitReferencesGetInstanceResponses[keyof ScmGitReferencesGetInstanceResponses];

export type ScmProvidersGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * the fields to include for returned resources of type scmProviders
         */
        'fields[scmProviders]'?: Array<'scmProviderType' | 'url' | 'repositories'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/scmProviders';
};

export type ScmProvidersGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type ScmProvidersGetCollectionError = ScmProvidersGetCollectionErrors[keyof ScmProvidersGetCollectionErrors];

export type ScmProvidersGetCollectionResponses = {
    /**
     * List of ScmProviders
     */
    200: ScmProvidersResponse;
};

export type ScmProvidersGetCollectionResponse = ScmProvidersGetCollectionResponses[keyof ScmProvidersGetCollectionResponses];

export type ScmProvidersGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type scmProviders
         */
        'fields[scmProviders]'?: Array<'scmProviderType' | 'url' | 'repositories'>;
    };
    url: '/v1/scmProviders/{id}';
};

export type ScmProvidersGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type ScmProvidersGetInstanceError = ScmProvidersGetInstanceErrors[keyof ScmProvidersGetInstanceErrors];

export type ScmProvidersGetInstanceResponses = {
    /**
     * Single ScmProvider
     */
    200: ScmProviderResponse;
};

export type ScmProvidersGetInstanceResponse = ScmProvidersGetInstanceResponses[keyof ScmProvidersGetInstanceResponses];

export type ScmPullRequestsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type scmPullRequests
         */
        'fields[scmPullRequests]'?: Array<'title' | 'number' | 'webUrl' | 'sourceRepositoryOwner' | 'sourceRepositoryName' | 'sourceBranchName' | 'destinationRepositoryOwner' | 'destinationRepositoryName' | 'destinationBranchName' | 'isClosed' | 'isCrossRepository' | 'repository'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'repository'>;
    };
    url: '/v1/scmPullRequests/{id}';
};

export type ScmPullRequestsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type ScmPullRequestsGetInstanceError = ScmPullRequestsGetInstanceErrors[keyof ScmPullRequestsGetInstanceErrors];

export type ScmPullRequestsGetInstanceResponses = {
    /**
     * Single ScmPullRequest
     */
    200: ScmPullRequestResponse;
};

export type ScmPullRequestsGetInstanceResponse = ScmPullRequestsGetInstanceResponses[keyof ScmPullRequestsGetInstanceResponses];

export type ScmRepositoriesGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<'lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'scmProvider' | 'defaultBranch'>;
    };
    url: '/v1/scmRepositories';
};

export type ScmRepositoriesGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type ScmRepositoriesGetCollectionError = ScmRepositoriesGetCollectionErrors[keyof ScmRepositoriesGetCollectionErrors];

export type ScmRepositoriesGetCollectionResponses = {
    /**
     * List of ScmRepositories
     */
    200: ScmRepositoriesResponse;
};

export type ScmRepositoriesGetCollectionResponse = ScmRepositoriesGetCollectionResponses[keyof ScmRepositoriesGetCollectionResponses];

export type ScmRepositoriesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<'lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'scmProvider' | 'defaultBranch'>;
    };
    url: '/v1/scmRepositories/{id}';
};

export type ScmRepositoriesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type ScmRepositoriesGetInstanceError = ScmRepositoriesGetInstanceErrors[keyof ScmRepositoriesGetInstanceErrors];

export type ScmRepositoriesGetInstanceResponses = {
    /**
     * Single ScmRepository
     */
    200: ScmRepositoryResponse;
};

export type ScmRepositoriesGetInstanceResponse = ScmRepositoriesGetInstanceResponses[keyof ScmRepositoriesGetInstanceResponses];

export type SubscriptionAppStoreReviewScreenshotsCreateInstanceData = {
    /**
     * SubscriptionAppStoreReviewScreenshot representation
     */
    body: SubscriptionAppStoreReviewScreenshotCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/subscriptionAppStoreReviewScreenshots';
};

export type SubscriptionAppStoreReviewScreenshotsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionAppStoreReviewScreenshotsCreateInstanceError = SubscriptionAppStoreReviewScreenshotsCreateInstanceErrors[keyof SubscriptionAppStoreReviewScreenshotsCreateInstanceErrors];

export type SubscriptionAppStoreReviewScreenshotsCreateInstanceResponses = {
    /**
     * Single SubscriptionAppStoreReviewScreenshot
     */
    201: SubscriptionAppStoreReviewScreenshotResponse;
};

export type SubscriptionAppStoreReviewScreenshotsCreateInstanceResponse = SubscriptionAppStoreReviewScreenshotsCreateInstanceResponses[keyof SubscriptionAppStoreReviewScreenshotsCreateInstanceResponses];

export type SubscriptionAppStoreReviewScreenshotsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptionAppStoreReviewScreenshots/{id}';
};

export type SubscriptionAppStoreReviewScreenshotsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type SubscriptionAppStoreReviewScreenshotsDeleteInstanceError = SubscriptionAppStoreReviewScreenshotsDeleteInstanceErrors[keyof SubscriptionAppStoreReviewScreenshotsDeleteInstanceErrors];

export type SubscriptionAppStoreReviewScreenshotsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type SubscriptionAppStoreReviewScreenshotsDeleteInstanceResponse = SubscriptionAppStoreReviewScreenshotsDeleteInstanceResponses[keyof SubscriptionAppStoreReviewScreenshotsDeleteInstanceResponses];

export type SubscriptionAppStoreReviewScreenshotsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots
         */
        'fields[subscriptionAppStoreReviewScreenshots]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'subscription'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subscription'>;
    };
    url: '/v1/subscriptionAppStoreReviewScreenshots/{id}';
};

export type SubscriptionAppStoreReviewScreenshotsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionAppStoreReviewScreenshotsGetInstanceError = SubscriptionAppStoreReviewScreenshotsGetInstanceErrors[keyof SubscriptionAppStoreReviewScreenshotsGetInstanceErrors];

export type SubscriptionAppStoreReviewScreenshotsGetInstanceResponses = {
    /**
     * Single SubscriptionAppStoreReviewScreenshot
     */
    200: SubscriptionAppStoreReviewScreenshotResponse;
};

export type SubscriptionAppStoreReviewScreenshotsGetInstanceResponse = SubscriptionAppStoreReviewScreenshotsGetInstanceResponses[keyof SubscriptionAppStoreReviewScreenshotsGetInstanceResponses];

export type SubscriptionAppStoreReviewScreenshotsUpdateInstanceData = {
    /**
     * SubscriptionAppStoreReviewScreenshot representation
     */
    body: SubscriptionAppStoreReviewScreenshotUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptionAppStoreReviewScreenshots/{id}';
};

export type SubscriptionAppStoreReviewScreenshotsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionAppStoreReviewScreenshotsUpdateInstanceError = SubscriptionAppStoreReviewScreenshotsUpdateInstanceErrors[keyof SubscriptionAppStoreReviewScreenshotsUpdateInstanceErrors];

export type SubscriptionAppStoreReviewScreenshotsUpdateInstanceResponses = {
    /**
     * Single SubscriptionAppStoreReviewScreenshot
     */
    200: SubscriptionAppStoreReviewScreenshotResponse;
};

export type SubscriptionAppStoreReviewScreenshotsUpdateInstanceResponse = SubscriptionAppStoreReviewScreenshotsUpdateInstanceResponses[keyof SubscriptionAppStoreReviewScreenshotsUpdateInstanceResponses];

export type SubscriptionAvailabilitiesCreateInstanceData = {
    /**
     * SubscriptionAvailability representation
     */
    body: SubscriptionAvailabilityCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/subscriptionAvailabilities';
};

export type SubscriptionAvailabilitiesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionAvailabilitiesCreateInstanceError = SubscriptionAvailabilitiesCreateInstanceErrors[keyof SubscriptionAvailabilitiesCreateInstanceErrors];

export type SubscriptionAvailabilitiesCreateInstanceResponses = {
    /**
     * Single SubscriptionAvailability
     */
    201: SubscriptionAvailabilityResponse;
};

export type SubscriptionAvailabilitiesCreateInstanceResponse = SubscriptionAvailabilitiesCreateInstanceResponses[keyof SubscriptionAvailabilitiesCreateInstanceResponses];

export type SubscriptionAvailabilitiesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionAvailabilities
         */
        'fields[subscriptionAvailabilities]'?: Array<'availableInNewTerritories' | 'availableTerritories'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'availableTerritories'>;
        /**
         * maximum number of related availableTerritories returned (when they are included)
         */
        'limit[availableTerritories]'?: number;
    };
    url: '/v1/subscriptionAvailabilities/{id}';
};

export type SubscriptionAvailabilitiesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionAvailabilitiesGetInstanceError = SubscriptionAvailabilitiesGetInstanceErrors[keyof SubscriptionAvailabilitiesGetInstanceErrors];

export type SubscriptionAvailabilitiesGetInstanceResponses = {
    /**
     * Single SubscriptionAvailability
     */
    200: SubscriptionAvailabilityResponse;
};

export type SubscriptionAvailabilitiesGetInstanceResponse = SubscriptionAvailabilitiesGetInstanceResponses[keyof SubscriptionAvailabilitiesGetInstanceResponses];

export type SubscriptionGracePeriodsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionGracePeriods
         */
        'fields[subscriptionGracePeriods]'?: Array<'optIn' | 'sandboxOptIn' | 'duration' | 'renewalType'>;
    };
    url: '/v1/subscriptionGracePeriods/{id}';
};

export type SubscriptionGracePeriodsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionGracePeriodsGetInstanceError = SubscriptionGracePeriodsGetInstanceErrors[keyof SubscriptionGracePeriodsGetInstanceErrors];

export type SubscriptionGracePeriodsGetInstanceResponses = {
    /**
     * Single SubscriptionGracePeriod
     */
    200: SubscriptionGracePeriodResponse;
};

export type SubscriptionGracePeriodsGetInstanceResponse = SubscriptionGracePeriodsGetInstanceResponses[keyof SubscriptionGracePeriodsGetInstanceResponses];

export type SubscriptionGracePeriodsUpdateInstanceData = {
    /**
     * SubscriptionGracePeriod representation
     */
    body: SubscriptionGracePeriodUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptionGracePeriods/{id}';
};

export type SubscriptionGracePeriodsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionGracePeriodsUpdateInstanceError = SubscriptionGracePeriodsUpdateInstanceErrors[keyof SubscriptionGracePeriodsUpdateInstanceErrors];

export type SubscriptionGracePeriodsUpdateInstanceResponses = {
    /**
     * Single SubscriptionGracePeriod
     */
    200: SubscriptionGracePeriodResponse;
};

export type SubscriptionGracePeriodsUpdateInstanceResponse = SubscriptionGracePeriodsUpdateInstanceResponses[keyof SubscriptionGracePeriodsUpdateInstanceResponses];

export type SubscriptionGroupLocalizationsCreateInstanceData = {
    /**
     * SubscriptionGroupLocalization representation
     */
    body: SubscriptionGroupLocalizationCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/subscriptionGroupLocalizations';
};

export type SubscriptionGroupLocalizationsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionGroupLocalizationsCreateInstanceError = SubscriptionGroupLocalizationsCreateInstanceErrors[keyof SubscriptionGroupLocalizationsCreateInstanceErrors];

export type SubscriptionGroupLocalizationsCreateInstanceResponses = {
    /**
     * Single SubscriptionGroupLocalization
     */
    201: SubscriptionGroupLocalizationResponse;
};

export type SubscriptionGroupLocalizationsCreateInstanceResponse = SubscriptionGroupLocalizationsCreateInstanceResponses[keyof SubscriptionGroupLocalizationsCreateInstanceResponses];

export type SubscriptionGroupLocalizationsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptionGroupLocalizations/{id}';
};

export type SubscriptionGroupLocalizationsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type SubscriptionGroupLocalizationsDeleteInstanceError = SubscriptionGroupLocalizationsDeleteInstanceErrors[keyof SubscriptionGroupLocalizationsDeleteInstanceErrors];

export type SubscriptionGroupLocalizationsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type SubscriptionGroupLocalizationsDeleteInstanceResponse = SubscriptionGroupLocalizationsDeleteInstanceResponses[keyof SubscriptionGroupLocalizationsDeleteInstanceResponses];

export type SubscriptionGroupLocalizationsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionGroupLocalizations
         */
        'fields[subscriptionGroupLocalizations]'?: Array<'name' | 'customAppName' | 'locale' | 'state' | 'subscriptionGroup'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subscriptionGroup'>;
    };
    url: '/v1/subscriptionGroupLocalizations/{id}';
};

export type SubscriptionGroupLocalizationsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionGroupLocalizationsGetInstanceError = SubscriptionGroupLocalizationsGetInstanceErrors[keyof SubscriptionGroupLocalizationsGetInstanceErrors];

export type SubscriptionGroupLocalizationsGetInstanceResponses = {
    /**
     * Single SubscriptionGroupLocalization
     */
    200: SubscriptionGroupLocalizationResponse;
};

export type SubscriptionGroupLocalizationsGetInstanceResponse = SubscriptionGroupLocalizationsGetInstanceResponses[keyof SubscriptionGroupLocalizationsGetInstanceResponses];

export type SubscriptionGroupLocalizationsUpdateInstanceData = {
    /**
     * SubscriptionGroupLocalization representation
     */
    body: SubscriptionGroupLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptionGroupLocalizations/{id}';
};

export type SubscriptionGroupLocalizationsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionGroupLocalizationsUpdateInstanceError = SubscriptionGroupLocalizationsUpdateInstanceErrors[keyof SubscriptionGroupLocalizationsUpdateInstanceErrors];

export type SubscriptionGroupLocalizationsUpdateInstanceResponses = {
    /**
     * Single SubscriptionGroupLocalization
     */
    200: SubscriptionGroupLocalizationResponse;
};

export type SubscriptionGroupLocalizationsUpdateInstanceResponse = SubscriptionGroupLocalizationsUpdateInstanceResponses[keyof SubscriptionGroupLocalizationsUpdateInstanceResponses];

export type SubscriptionGroupSubmissionsCreateInstanceData = {
    /**
     * SubscriptionGroupSubmission representation
     */
    body: SubscriptionGroupSubmissionCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/subscriptionGroupSubmissions';
};

export type SubscriptionGroupSubmissionsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionGroupSubmissionsCreateInstanceError = SubscriptionGroupSubmissionsCreateInstanceErrors[keyof SubscriptionGroupSubmissionsCreateInstanceErrors];

export type SubscriptionGroupSubmissionsCreateInstanceResponses = {
    /**
     * Single SubscriptionGroupSubmission
     */
    201: SubscriptionGroupSubmissionResponse;
};

export type SubscriptionGroupSubmissionsCreateInstanceResponse = SubscriptionGroupSubmissionsCreateInstanceResponses[keyof SubscriptionGroupSubmissionsCreateInstanceResponses];

export type SubscriptionGroupsCreateInstanceData = {
    /**
     * SubscriptionGroup representation
     */
    body: SubscriptionGroupCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/subscriptionGroups';
};

export type SubscriptionGroupsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionGroupsCreateInstanceError = SubscriptionGroupsCreateInstanceErrors[keyof SubscriptionGroupsCreateInstanceErrors];

export type SubscriptionGroupsCreateInstanceResponses = {
    /**
     * Single SubscriptionGroup
     */
    201: SubscriptionGroupResponse;
};

export type SubscriptionGroupsCreateInstanceResponse = SubscriptionGroupsCreateInstanceResponses[keyof SubscriptionGroupsCreateInstanceResponses];

export type SubscriptionGroupsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptionGroups/{id}';
};

export type SubscriptionGroupsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type SubscriptionGroupsDeleteInstanceError = SubscriptionGroupsDeleteInstanceErrors[keyof SubscriptionGroupsDeleteInstanceErrors];

export type SubscriptionGroupsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type SubscriptionGroupsDeleteInstanceResponse = SubscriptionGroupsDeleteInstanceResponses[keyof SubscriptionGroupsDeleteInstanceResponses];

export type SubscriptionGroupsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionGroups
         */
        'fields[subscriptionGroups]'?: Array<'referenceName' | 'subscriptions' | 'subscriptionGroupLocalizations'>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<'name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images'>;
        /**
         * the fields to include for returned resources of type subscriptionGroupLocalizations
         */
        'fields[subscriptionGroupLocalizations]'?: Array<'name' | 'customAppName' | 'locale' | 'state' | 'subscriptionGroup'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subscriptions' | 'subscriptionGroupLocalizations'>;
        /**
         * maximum number of related subscriptionGroupLocalizations returned (when they are included)
         */
        'limit[subscriptionGroupLocalizations]'?: number;
        /**
         * maximum number of related subscriptions returned (when they are included)
         */
        'limit[subscriptions]'?: number;
    };
    url: '/v1/subscriptionGroups/{id}';
};

export type SubscriptionGroupsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionGroupsGetInstanceError = SubscriptionGroupsGetInstanceErrors[keyof SubscriptionGroupsGetInstanceErrors];

export type SubscriptionGroupsGetInstanceResponses = {
    /**
     * Single SubscriptionGroup
     */
    200: SubscriptionGroupResponse;
};

export type SubscriptionGroupsGetInstanceResponse = SubscriptionGroupsGetInstanceResponses[keyof SubscriptionGroupsGetInstanceResponses];

export type SubscriptionGroupsUpdateInstanceData = {
    /**
     * SubscriptionGroup representation
     */
    body: SubscriptionGroupUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptionGroups/{id}';
};

export type SubscriptionGroupsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionGroupsUpdateInstanceError = SubscriptionGroupsUpdateInstanceErrors[keyof SubscriptionGroupsUpdateInstanceErrors];

export type SubscriptionGroupsUpdateInstanceResponses = {
    /**
     * Single SubscriptionGroup
     */
    200: SubscriptionGroupResponse;
};

export type SubscriptionGroupsUpdateInstanceResponse = SubscriptionGroupsUpdateInstanceResponses[keyof SubscriptionGroupsUpdateInstanceResponses];

export type SubscriptionImagesCreateInstanceData = {
    /**
     * SubscriptionImage representation
     */
    body: SubscriptionImageCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/subscriptionImages';
};

export type SubscriptionImagesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionImagesCreateInstanceError = SubscriptionImagesCreateInstanceErrors[keyof SubscriptionImagesCreateInstanceErrors];

export type SubscriptionImagesCreateInstanceResponses = {
    /**
     * Single SubscriptionImage
     */
    201: SubscriptionImageResponse;
};

export type SubscriptionImagesCreateInstanceResponse = SubscriptionImagesCreateInstanceResponses[keyof SubscriptionImagesCreateInstanceResponses];

export type SubscriptionImagesDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptionImages/{id}';
};

export type SubscriptionImagesDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type SubscriptionImagesDeleteInstanceError = SubscriptionImagesDeleteInstanceErrors[keyof SubscriptionImagesDeleteInstanceErrors];

export type SubscriptionImagesDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type SubscriptionImagesDeleteInstanceResponse = SubscriptionImagesDeleteInstanceResponses[keyof SubscriptionImagesDeleteInstanceResponses];

export type SubscriptionImagesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionImages
         */
        'fields[subscriptionImages]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'assetToken' | 'imageAsset' | 'uploadOperations' | 'state' | 'subscription'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subscription'>;
    };
    url: '/v1/subscriptionImages/{id}';
};

export type SubscriptionImagesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionImagesGetInstanceError = SubscriptionImagesGetInstanceErrors[keyof SubscriptionImagesGetInstanceErrors];

export type SubscriptionImagesGetInstanceResponses = {
    /**
     * Single SubscriptionImage
     */
    200: SubscriptionImageResponse;
};

export type SubscriptionImagesGetInstanceResponse = SubscriptionImagesGetInstanceResponses[keyof SubscriptionImagesGetInstanceResponses];

export type SubscriptionImagesUpdateInstanceData = {
    /**
     * SubscriptionImage representation
     */
    body: SubscriptionImageUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptionImages/{id}';
};

export type SubscriptionImagesUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionImagesUpdateInstanceError = SubscriptionImagesUpdateInstanceErrors[keyof SubscriptionImagesUpdateInstanceErrors];

export type SubscriptionImagesUpdateInstanceResponses = {
    /**
     * Single SubscriptionImage
     */
    200: SubscriptionImageResponse;
};

export type SubscriptionImagesUpdateInstanceResponse = SubscriptionImagesUpdateInstanceResponses[keyof SubscriptionImagesUpdateInstanceResponses];

export type SubscriptionIntroductoryOffersCreateInstanceData = {
    /**
     * SubscriptionIntroductoryOffer representation
     */
    body: SubscriptionIntroductoryOfferCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/subscriptionIntroductoryOffers';
};

export type SubscriptionIntroductoryOffersCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionIntroductoryOffersCreateInstanceError = SubscriptionIntroductoryOffersCreateInstanceErrors[keyof SubscriptionIntroductoryOffersCreateInstanceErrors];

export type SubscriptionIntroductoryOffersCreateInstanceResponses = {
    /**
     * Single SubscriptionIntroductoryOffer
     */
    201: SubscriptionIntroductoryOfferResponse;
};

export type SubscriptionIntroductoryOffersCreateInstanceResponse = SubscriptionIntroductoryOffersCreateInstanceResponses[keyof SubscriptionIntroductoryOffersCreateInstanceResponses];

export type SubscriptionIntroductoryOffersDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptionIntroductoryOffers/{id}';
};

export type SubscriptionIntroductoryOffersDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type SubscriptionIntroductoryOffersDeleteInstanceError = SubscriptionIntroductoryOffersDeleteInstanceErrors[keyof SubscriptionIntroductoryOffersDeleteInstanceErrors];

export type SubscriptionIntroductoryOffersDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type SubscriptionIntroductoryOffersDeleteInstanceResponse = SubscriptionIntroductoryOffersDeleteInstanceResponses[keyof SubscriptionIntroductoryOffersDeleteInstanceResponses];

export type SubscriptionIntroductoryOffersUpdateInstanceData = {
    /**
     * SubscriptionIntroductoryOffer representation
     */
    body: SubscriptionIntroductoryOfferUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptionIntroductoryOffers/{id}';
};

export type SubscriptionIntroductoryOffersUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionIntroductoryOffersUpdateInstanceError = SubscriptionIntroductoryOffersUpdateInstanceErrors[keyof SubscriptionIntroductoryOffersUpdateInstanceErrors];

export type SubscriptionIntroductoryOffersUpdateInstanceResponses = {
    /**
     * Single SubscriptionIntroductoryOffer
     */
    200: SubscriptionIntroductoryOfferResponse;
};

export type SubscriptionIntroductoryOffersUpdateInstanceResponse = SubscriptionIntroductoryOffersUpdateInstanceResponses[keyof SubscriptionIntroductoryOffersUpdateInstanceResponses];

export type SubscriptionLocalizationsCreateInstanceData = {
    /**
     * SubscriptionLocalization representation
     */
    body: SubscriptionLocalizationCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/subscriptionLocalizations';
};

export type SubscriptionLocalizationsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionLocalizationsCreateInstanceError = SubscriptionLocalizationsCreateInstanceErrors[keyof SubscriptionLocalizationsCreateInstanceErrors];

export type SubscriptionLocalizationsCreateInstanceResponses = {
    /**
     * Single SubscriptionLocalization
     */
    201: SubscriptionLocalizationResponse;
};

export type SubscriptionLocalizationsCreateInstanceResponse = SubscriptionLocalizationsCreateInstanceResponses[keyof SubscriptionLocalizationsCreateInstanceResponses];

export type SubscriptionLocalizationsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptionLocalizations/{id}';
};

export type SubscriptionLocalizationsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type SubscriptionLocalizationsDeleteInstanceError = SubscriptionLocalizationsDeleteInstanceErrors[keyof SubscriptionLocalizationsDeleteInstanceErrors];

export type SubscriptionLocalizationsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type SubscriptionLocalizationsDeleteInstanceResponse = SubscriptionLocalizationsDeleteInstanceResponses[keyof SubscriptionLocalizationsDeleteInstanceResponses];

export type SubscriptionLocalizationsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionLocalizations
         */
        'fields[subscriptionLocalizations]'?: Array<'name' | 'locale' | 'description' | 'state' | 'subscription'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subscription'>;
    };
    url: '/v1/subscriptionLocalizations/{id}';
};

export type SubscriptionLocalizationsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionLocalizationsGetInstanceError = SubscriptionLocalizationsGetInstanceErrors[keyof SubscriptionLocalizationsGetInstanceErrors];

export type SubscriptionLocalizationsGetInstanceResponses = {
    /**
     * Single SubscriptionLocalization
     */
    200: SubscriptionLocalizationResponse;
};

export type SubscriptionLocalizationsGetInstanceResponse = SubscriptionLocalizationsGetInstanceResponses[keyof SubscriptionLocalizationsGetInstanceResponses];

export type SubscriptionLocalizationsUpdateInstanceData = {
    /**
     * SubscriptionLocalization representation
     */
    body: SubscriptionLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptionLocalizations/{id}';
};

export type SubscriptionLocalizationsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionLocalizationsUpdateInstanceError = SubscriptionLocalizationsUpdateInstanceErrors[keyof SubscriptionLocalizationsUpdateInstanceErrors];

export type SubscriptionLocalizationsUpdateInstanceResponses = {
    /**
     * Single SubscriptionLocalization
     */
    200: SubscriptionLocalizationResponse;
};

export type SubscriptionLocalizationsUpdateInstanceResponse = SubscriptionLocalizationsUpdateInstanceResponses[keyof SubscriptionLocalizationsUpdateInstanceResponses];

export type SubscriptionOfferCodeCustomCodesCreateInstanceData = {
    /**
     * SubscriptionOfferCodeCustomCode representation
     */
    body: SubscriptionOfferCodeCustomCodeCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/subscriptionOfferCodeCustomCodes';
};

export type SubscriptionOfferCodeCustomCodesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionOfferCodeCustomCodesCreateInstanceError = SubscriptionOfferCodeCustomCodesCreateInstanceErrors[keyof SubscriptionOfferCodeCustomCodesCreateInstanceErrors];

export type SubscriptionOfferCodeCustomCodesCreateInstanceResponses = {
    /**
     * Single SubscriptionOfferCodeCustomCode
     */
    201: SubscriptionOfferCodeCustomCodeResponse;
};

export type SubscriptionOfferCodeCustomCodesCreateInstanceResponse = SubscriptionOfferCodeCustomCodesCreateInstanceResponses[keyof SubscriptionOfferCodeCustomCodesCreateInstanceResponses];

export type SubscriptionOfferCodeCustomCodesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionOfferCodeCustomCodes
         */
        'fields[subscriptionOfferCodeCustomCodes]'?: Array<'customCode' | 'numberOfCodes' | 'createdDate' | 'expirationDate' | 'active' | 'offerCode'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'offerCode'>;
    };
    url: '/v1/subscriptionOfferCodeCustomCodes/{id}';
};

export type SubscriptionOfferCodeCustomCodesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionOfferCodeCustomCodesGetInstanceError = SubscriptionOfferCodeCustomCodesGetInstanceErrors[keyof SubscriptionOfferCodeCustomCodesGetInstanceErrors];

export type SubscriptionOfferCodeCustomCodesGetInstanceResponses = {
    /**
     * Single SubscriptionOfferCodeCustomCode
     */
    200: SubscriptionOfferCodeCustomCodeResponse;
};

export type SubscriptionOfferCodeCustomCodesGetInstanceResponse = SubscriptionOfferCodeCustomCodesGetInstanceResponses[keyof SubscriptionOfferCodeCustomCodesGetInstanceResponses];

export type SubscriptionOfferCodeCustomCodesUpdateInstanceData = {
    /**
     * SubscriptionOfferCodeCustomCode representation
     */
    body: SubscriptionOfferCodeCustomCodeUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptionOfferCodeCustomCodes/{id}';
};

export type SubscriptionOfferCodeCustomCodesUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionOfferCodeCustomCodesUpdateInstanceError = SubscriptionOfferCodeCustomCodesUpdateInstanceErrors[keyof SubscriptionOfferCodeCustomCodesUpdateInstanceErrors];

export type SubscriptionOfferCodeCustomCodesUpdateInstanceResponses = {
    /**
     * Single SubscriptionOfferCodeCustomCode
     */
    200: SubscriptionOfferCodeCustomCodeResponse;
};

export type SubscriptionOfferCodeCustomCodesUpdateInstanceResponse = SubscriptionOfferCodeCustomCodesUpdateInstanceResponses[keyof SubscriptionOfferCodeCustomCodesUpdateInstanceResponses];

export type SubscriptionOfferCodeOneTimeUseCodesCreateInstanceData = {
    /**
     * SubscriptionOfferCodeOneTimeUseCode representation
     */
    body: SubscriptionOfferCodeOneTimeUseCodeCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/subscriptionOfferCodeOneTimeUseCodes';
};

export type SubscriptionOfferCodeOneTimeUseCodesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionOfferCodeOneTimeUseCodesCreateInstanceError = SubscriptionOfferCodeOneTimeUseCodesCreateInstanceErrors[keyof SubscriptionOfferCodeOneTimeUseCodesCreateInstanceErrors];

export type SubscriptionOfferCodeOneTimeUseCodesCreateInstanceResponses = {
    /**
     * Single SubscriptionOfferCodeOneTimeUseCode
     */
    201: SubscriptionOfferCodeOneTimeUseCodeResponse;
};

export type SubscriptionOfferCodeOneTimeUseCodesCreateInstanceResponse = SubscriptionOfferCodeOneTimeUseCodesCreateInstanceResponses[keyof SubscriptionOfferCodeOneTimeUseCodesCreateInstanceResponses];

export type SubscriptionOfferCodeOneTimeUseCodesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes
         */
        'fields[subscriptionOfferCodeOneTimeUseCodes]'?: Array<'numberOfCodes' | 'createdDate' | 'expirationDate' | 'active' | 'offerCode' | 'values'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'offerCode'>;
    };
    url: '/v1/subscriptionOfferCodeOneTimeUseCodes/{id}';
};

export type SubscriptionOfferCodeOneTimeUseCodesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionOfferCodeOneTimeUseCodesGetInstanceError = SubscriptionOfferCodeOneTimeUseCodesGetInstanceErrors[keyof SubscriptionOfferCodeOneTimeUseCodesGetInstanceErrors];

export type SubscriptionOfferCodeOneTimeUseCodesGetInstanceResponses = {
    /**
     * Single SubscriptionOfferCodeOneTimeUseCode
     */
    200: SubscriptionOfferCodeOneTimeUseCodeResponse;
};

export type SubscriptionOfferCodeOneTimeUseCodesGetInstanceResponse = SubscriptionOfferCodeOneTimeUseCodesGetInstanceResponses[keyof SubscriptionOfferCodeOneTimeUseCodesGetInstanceResponses];

export type SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceData = {
    /**
     * SubscriptionOfferCodeOneTimeUseCode representation
     */
    body: SubscriptionOfferCodeOneTimeUseCodeUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptionOfferCodeOneTimeUseCodes/{id}';
};

export type SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceError = SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceErrors[keyof SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceErrors];

export type SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceResponses = {
    /**
     * Single SubscriptionOfferCodeOneTimeUseCode
     */
    200: SubscriptionOfferCodeOneTimeUseCodeResponse;
};

export type SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceResponse = SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceResponses[keyof SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceResponses];

export type SubscriptionOfferCodesCreateInstanceData = {
    /**
     * SubscriptionOfferCode representation
     */
    body: SubscriptionOfferCodeCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/subscriptionOfferCodes';
};

export type SubscriptionOfferCodesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionOfferCodesCreateInstanceError = SubscriptionOfferCodesCreateInstanceErrors[keyof SubscriptionOfferCodesCreateInstanceErrors];

export type SubscriptionOfferCodesCreateInstanceResponses = {
    /**
     * Single SubscriptionOfferCode
     */
    201: SubscriptionOfferCodeResponse;
};

export type SubscriptionOfferCodesCreateInstanceResponse = SubscriptionOfferCodesCreateInstanceResponses[keyof SubscriptionOfferCodesCreateInstanceResponses];

export type SubscriptionOfferCodesGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionOfferCodes
         */
        'fields[subscriptionOfferCodes]'?: Array<'name' | 'customerEligibilities' | 'offerEligibility' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'totalNumberOfCodes' | 'active' | 'subscription' | 'oneTimeUseCodes' | 'customCodes' | 'prices'>;
        /**
         * the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes
         */
        'fields[subscriptionOfferCodeOneTimeUseCodes]'?: Array<'numberOfCodes' | 'createdDate' | 'expirationDate' | 'active' | 'offerCode' | 'values'>;
        /**
         * the fields to include for returned resources of type subscriptionOfferCodeCustomCodes
         */
        'fields[subscriptionOfferCodeCustomCodes]'?: Array<'customCode' | 'numberOfCodes' | 'createdDate' | 'expirationDate' | 'active' | 'offerCode'>;
        /**
         * the fields to include for returned resources of type subscriptionOfferCodePrices
         */
        'fields[subscriptionOfferCodePrices]'?: Array<'territory' | 'subscriptionPricePoint'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subscription' | 'oneTimeUseCodes' | 'customCodes' | 'prices'>;
        /**
         * maximum number of related customCodes returned (when they are included)
         */
        'limit[customCodes]'?: number;
        /**
         * maximum number of related oneTimeUseCodes returned (when they are included)
         */
        'limit[oneTimeUseCodes]'?: number;
        /**
         * maximum number of related prices returned (when they are included)
         */
        'limit[prices]'?: number;
    };
    url: '/v1/subscriptionOfferCodes/{id}';
};

export type SubscriptionOfferCodesGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionOfferCodesGetInstanceError = SubscriptionOfferCodesGetInstanceErrors[keyof SubscriptionOfferCodesGetInstanceErrors];

export type SubscriptionOfferCodesGetInstanceResponses = {
    /**
     * Single SubscriptionOfferCode
     */
    200: SubscriptionOfferCodeResponse;
};

export type SubscriptionOfferCodesGetInstanceResponse = SubscriptionOfferCodesGetInstanceResponses[keyof SubscriptionOfferCodesGetInstanceResponses];

export type SubscriptionOfferCodesUpdateInstanceData = {
    /**
     * SubscriptionOfferCode representation
     */
    body: SubscriptionOfferCodeUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptionOfferCodes/{id}';
};

export type SubscriptionOfferCodesUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionOfferCodesUpdateInstanceError = SubscriptionOfferCodesUpdateInstanceErrors[keyof SubscriptionOfferCodesUpdateInstanceErrors];

export type SubscriptionOfferCodesUpdateInstanceResponses = {
    /**
     * Single SubscriptionOfferCode
     */
    200: SubscriptionOfferCodeResponse;
};

export type SubscriptionOfferCodesUpdateInstanceResponse = SubscriptionOfferCodesUpdateInstanceResponses[keyof SubscriptionOfferCodesUpdateInstanceResponses];

export type SubscriptionPricePointsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionPricePoints
         */
        'fields[subscriptionPricePoints]'?: Array<'customerPrice' | 'proceeds' | 'proceedsYear2' | 'territory' | 'equalizations'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'territory'>;
    };
    url: '/v1/subscriptionPricePoints/{id}';
};

export type SubscriptionPricePointsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionPricePointsGetInstanceError = SubscriptionPricePointsGetInstanceErrors[keyof SubscriptionPricePointsGetInstanceErrors];

export type SubscriptionPricePointsGetInstanceResponses = {
    /**
     * Single SubscriptionPricePoint
     */
    200: SubscriptionPricePointResponse;
};

export type SubscriptionPricePointsGetInstanceResponse = SubscriptionPricePointsGetInstanceResponses[keyof SubscriptionPricePointsGetInstanceResponses];

export type SubscriptionPricesCreateInstanceData = {
    /**
     * SubscriptionPrice representation
     */
    body: SubscriptionPriceCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/subscriptionPrices';
};

export type SubscriptionPricesCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionPricesCreateInstanceError = SubscriptionPricesCreateInstanceErrors[keyof SubscriptionPricesCreateInstanceErrors];

export type SubscriptionPricesCreateInstanceResponses = {
    /**
     * Single SubscriptionPrice
     */
    201: SubscriptionPriceResponse;
};

export type SubscriptionPricesCreateInstanceResponse = SubscriptionPricesCreateInstanceResponses[keyof SubscriptionPricesCreateInstanceResponses];

export type SubscriptionPricesDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptionPrices/{id}';
};

export type SubscriptionPricesDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type SubscriptionPricesDeleteInstanceError = SubscriptionPricesDeleteInstanceErrors[keyof SubscriptionPricesDeleteInstanceErrors];

export type SubscriptionPricesDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type SubscriptionPricesDeleteInstanceResponse = SubscriptionPricesDeleteInstanceResponses[keyof SubscriptionPricesDeleteInstanceResponses];

export type SubscriptionPromotionalOffersCreateInstanceData = {
    /**
     * SubscriptionPromotionalOffer representation
     */
    body: SubscriptionPromotionalOfferCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/subscriptionPromotionalOffers';
};

export type SubscriptionPromotionalOffersCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionPromotionalOffersCreateInstanceError = SubscriptionPromotionalOffersCreateInstanceErrors[keyof SubscriptionPromotionalOffersCreateInstanceErrors];

export type SubscriptionPromotionalOffersCreateInstanceResponses = {
    /**
     * Single SubscriptionPromotionalOffer
     */
    201: SubscriptionPromotionalOfferResponse;
};

export type SubscriptionPromotionalOffersCreateInstanceResponse = SubscriptionPromotionalOffersCreateInstanceResponses[keyof SubscriptionPromotionalOffersCreateInstanceResponses];

export type SubscriptionPromotionalOffersDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptionPromotionalOffers/{id}';
};

export type SubscriptionPromotionalOffersDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type SubscriptionPromotionalOffersDeleteInstanceError = SubscriptionPromotionalOffersDeleteInstanceErrors[keyof SubscriptionPromotionalOffersDeleteInstanceErrors];

export type SubscriptionPromotionalOffersDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type SubscriptionPromotionalOffersDeleteInstanceResponse = SubscriptionPromotionalOffersDeleteInstanceResponses[keyof SubscriptionPromotionalOffersDeleteInstanceResponses];

export type SubscriptionPromotionalOffersGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionPromotionalOffers
         */
        'fields[subscriptionPromotionalOffers]'?: Array<'name' | 'offerCode' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'subscription' | 'prices'>;
        /**
         * the fields to include for returned resources of type subscriptionPromotionalOfferPrices
         */
        'fields[subscriptionPromotionalOfferPrices]'?: Array<'territory' | 'subscriptionPricePoint'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subscription' | 'prices'>;
        /**
         * maximum number of related prices returned (when they are included)
         */
        'limit[prices]'?: number;
    };
    url: '/v1/subscriptionPromotionalOffers/{id}';
};

export type SubscriptionPromotionalOffersGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionPromotionalOffersGetInstanceError = SubscriptionPromotionalOffersGetInstanceErrors[keyof SubscriptionPromotionalOffersGetInstanceErrors];

export type SubscriptionPromotionalOffersGetInstanceResponses = {
    /**
     * Single SubscriptionPromotionalOffer
     */
    200: SubscriptionPromotionalOfferResponse;
};

export type SubscriptionPromotionalOffersGetInstanceResponse = SubscriptionPromotionalOffersGetInstanceResponses[keyof SubscriptionPromotionalOffersGetInstanceResponses];

export type SubscriptionPromotionalOffersUpdateInstanceData = {
    /**
     * SubscriptionPromotionalOffer representation
     */
    body: SubscriptionPromotionalOfferUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptionPromotionalOffers/{id}';
};

export type SubscriptionPromotionalOffersUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionPromotionalOffersUpdateInstanceError = SubscriptionPromotionalOffersUpdateInstanceErrors[keyof SubscriptionPromotionalOffersUpdateInstanceErrors];

export type SubscriptionPromotionalOffersUpdateInstanceResponses = {
    /**
     * Single SubscriptionPromotionalOffer
     */
    200: SubscriptionPromotionalOfferResponse;
};

export type SubscriptionPromotionalOffersUpdateInstanceResponse = SubscriptionPromotionalOffersUpdateInstanceResponses[keyof SubscriptionPromotionalOffersUpdateInstanceResponses];

export type SubscriptionSubmissionsCreateInstanceData = {
    /**
     * SubscriptionSubmission representation
     */
    body: SubscriptionSubmissionCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/subscriptionSubmissions';
};

export type SubscriptionSubmissionsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionSubmissionsCreateInstanceError = SubscriptionSubmissionsCreateInstanceErrors[keyof SubscriptionSubmissionsCreateInstanceErrors];

export type SubscriptionSubmissionsCreateInstanceResponses = {
    /**
     * Single SubscriptionSubmission
     */
    201: SubscriptionSubmissionResponse;
};

export type SubscriptionSubmissionsCreateInstanceResponse = SubscriptionSubmissionsCreateInstanceResponses[keyof SubscriptionSubmissionsCreateInstanceResponses];

export type SubscriptionsCreateInstanceData = {
    /**
     * Subscription representation
     */
    body: SubscriptionCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/subscriptions';
};

export type SubscriptionsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionsCreateInstanceError = SubscriptionsCreateInstanceErrors[keyof SubscriptionsCreateInstanceErrors];

export type SubscriptionsCreateInstanceResponses = {
    /**
     * Single Subscription
     */
    201: SubscriptionResponse;
};

export type SubscriptionsCreateInstanceResponse = SubscriptionsCreateInstanceResponses[keyof SubscriptionsCreateInstanceResponses];

export type SubscriptionsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptions/{id}';
};

export type SubscriptionsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type SubscriptionsDeleteInstanceError = SubscriptionsDeleteInstanceErrors[keyof SubscriptionsDeleteInstanceErrors];

export type SubscriptionsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type SubscriptionsDeleteInstanceResponse = SubscriptionsDeleteInstanceResponses[keyof SubscriptionsDeleteInstanceResponses];

export type SubscriptionsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<'name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images'>;
        /**
         * the fields to include for returned resources of type subscriptionLocalizations
         */
        'fields[subscriptionLocalizations]'?: Array<'name' | 'locale' | 'description' | 'state' | 'subscription'>;
        /**
         * the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots
         */
        'fields[subscriptionAppStoreReviewScreenshots]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'subscription'>;
        /**
         * the fields to include for returned resources of type subscriptionIntroductoryOffers
         */
        'fields[subscriptionIntroductoryOffers]'?: Array<'startDate' | 'endDate' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'subscription' | 'territory' | 'subscriptionPricePoint'>;
        /**
         * the fields to include for returned resources of type subscriptionPromotionalOffers
         */
        'fields[subscriptionPromotionalOffers]'?: Array<'name' | 'offerCode' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'subscription' | 'prices'>;
        /**
         * the fields to include for returned resources of type subscriptionOfferCodes
         */
        'fields[subscriptionOfferCodes]'?: Array<'name' | 'customerEligibilities' | 'offerEligibility' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'totalNumberOfCodes' | 'active' | 'subscription' | 'oneTimeUseCodes' | 'customCodes' | 'prices'>;
        /**
         * the fields to include for returned resources of type subscriptionPrices
         */
        'fields[subscriptionPrices]'?: Array<'startDate' | 'preserved' | 'territory' | 'subscriptionPricePoint'>;
        /**
         * the fields to include for returned resources of type promotedPurchases
         */
        'fields[promotedPurchases]'?: Array<'visibleForAllUsers' | 'enabled' | 'state' | 'inAppPurchaseV2' | 'subscription'>;
        /**
         * the fields to include for returned resources of type subscriptionAvailabilities
         */
        'fields[subscriptionAvailabilities]'?: Array<'availableInNewTerritories' | 'availableTerritories'>;
        /**
         * the fields to include for returned resources of type winBackOffers
         */
        'fields[winBackOffers]'?: Array<'referenceName' | 'offerId' | 'duration' | 'offerMode' | 'periodCount' | 'customerEligibilityPaidSubscriptionDurationInMonths' | 'customerEligibilityTimeSinceLastSubscribedInMonths' | 'customerEligibilityWaitBetweenOffersInMonths' | 'startDate' | 'endDate' | 'priority' | 'promotionIntent' | 'prices'>;
        /**
         * the fields to include for returned resources of type subscriptionImages
         */
        'fields[subscriptionImages]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'assetToken' | 'imageAsset' | 'uploadOperations' | 'state' | 'subscription'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images'>;
        /**
         * maximum number of related images returned (when they are included)
         */
        'limit[images]'?: number;
        /**
         * maximum number of related introductoryOffers returned (when they are included)
         */
        'limit[introductoryOffers]'?: number;
        /**
         * maximum number of related offerCodes returned (when they are included)
         */
        'limit[offerCodes]'?: number;
        /**
         * maximum number of related prices returned (when they are included)
         */
        'limit[prices]'?: number;
        /**
         * maximum number of related promotionalOffers returned (when they are included)
         */
        'limit[promotionalOffers]'?: number;
        /**
         * maximum number of related subscriptionLocalizations returned (when they are included)
         */
        'limit[subscriptionLocalizations]'?: number;
        /**
         * maximum number of related winBackOffers returned (when they are included)
         */
        'limit[winBackOffers]'?: number;
    };
    url: '/v1/subscriptions/{id}';
};

export type SubscriptionsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionsGetInstanceError = SubscriptionsGetInstanceErrors[keyof SubscriptionsGetInstanceErrors];

export type SubscriptionsGetInstanceResponses = {
    /**
     * Single Subscription
     */
    200: SubscriptionResponse;
};

export type SubscriptionsGetInstanceResponse = SubscriptionsGetInstanceResponses[keyof SubscriptionsGetInstanceResponses];

export type SubscriptionsUpdateInstanceData = {
    /**
     * Subscription representation
     */
    body: SubscriptionUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptions/{id}';
};

export type SubscriptionsUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionsUpdateInstanceError = SubscriptionsUpdateInstanceErrors[keyof SubscriptionsUpdateInstanceErrors];

export type SubscriptionsUpdateInstanceResponses = {
    /**
     * Single Subscription
     */
    200: SubscriptionResponse;
};

export type SubscriptionsUpdateInstanceResponse = SubscriptionsUpdateInstanceResponses[keyof SubscriptionsUpdateInstanceResponses];

export type TerritoriesGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/territories';
};

export type TerritoriesGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type TerritoriesGetCollectionError = TerritoriesGetCollectionErrors[keyof TerritoriesGetCollectionErrors];

export type TerritoriesGetCollectionResponses = {
    /**
     * List of Territories
     */
    200: TerritoriesResponse;
};

export type TerritoriesGetCollectionResponse = TerritoriesGetCollectionResponses[keyof TerritoriesGetCollectionResponses];

export type TerritoryAvailabilitiesUpdateInstanceData = {
    /**
     * TerritoryAvailability representation
     */
    body: TerritoryAvailabilityUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/territoryAvailabilities/{id}';
};

export type TerritoryAvailabilitiesUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type TerritoryAvailabilitiesUpdateInstanceError = TerritoryAvailabilitiesUpdateInstanceErrors[keyof TerritoryAvailabilitiesUpdateInstanceErrors];

export type TerritoryAvailabilitiesUpdateInstanceResponses = {
    /**
     * Single TerritoryAvailability
     */
    200: TerritoryAvailabilityResponse;
};

export type TerritoryAvailabilitiesUpdateInstanceResponse = TerritoryAvailabilitiesUpdateInstanceResponses[keyof TerritoryAvailabilitiesUpdateInstanceResponses];

export type UserInvitationsGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * filter by attribute 'email'
         */
        'filter[email]'?: Array<string>;
        /**
         * filter by attribute 'roles'
         */
        'filter[roles]'?: Array<'ADMIN' | 'FINANCE' | 'ACCOUNT_HOLDER' | 'SALES' | 'MARKETING' | 'APP_MANAGER' | 'DEVELOPER' | 'ACCESS_TO_REPORTS' | 'CUSTOMER_SUPPORT' | 'CREATE_APPS' | 'CLOUD_MANAGED_DEVELOPER_ID' | 'CLOUD_MANAGED_APP_DISTRIBUTION' | 'GENERATE_INDIVIDUAL_KEYS'>;
        /**
         * filter by id(s) of related 'visibleApps'
         */
        'filter[visibleApps]'?: Array<string>;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'email' | '-email' | 'lastName' | '-lastName'>;
        /**
         * the fields to include for returned resources of type userInvitations
         */
        'fields[userInvitations]'?: Array<'email' | 'firstName' | 'lastName' | 'expirationDate' | 'roles' | 'allAppsVisible' | 'provisioningAllowed' | 'visibleApps'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'visibleApps'>;
        /**
         * maximum number of related visibleApps returned (when they are included)
         */
        'limit[visibleApps]'?: number;
    };
    url: '/v1/userInvitations';
};

export type UserInvitationsGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type UserInvitationsGetCollectionError = UserInvitationsGetCollectionErrors[keyof UserInvitationsGetCollectionErrors];

export type UserInvitationsGetCollectionResponses = {
    /**
     * List of UserInvitations
     */
    200: UserInvitationsResponse;
};

export type UserInvitationsGetCollectionResponse = UserInvitationsGetCollectionResponses[keyof UserInvitationsGetCollectionResponses];

export type UserInvitationsCreateInstanceData = {
    /**
     * UserInvitation representation
     */
    body: UserInvitationCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/userInvitations';
};

export type UserInvitationsCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type UserInvitationsCreateInstanceError = UserInvitationsCreateInstanceErrors[keyof UserInvitationsCreateInstanceErrors];

export type UserInvitationsCreateInstanceResponses = {
    /**
     * Single UserInvitation
     */
    201: UserInvitationResponse;
};

export type UserInvitationsCreateInstanceResponse = UserInvitationsCreateInstanceResponses[keyof UserInvitationsCreateInstanceResponses];

export type UserInvitationsDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/userInvitations/{id}';
};

export type UserInvitationsDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type UserInvitationsDeleteInstanceError = UserInvitationsDeleteInstanceErrors[keyof UserInvitationsDeleteInstanceErrors];

export type UserInvitationsDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type UserInvitationsDeleteInstanceResponse = UserInvitationsDeleteInstanceResponses[keyof UserInvitationsDeleteInstanceResponses];

export type UserInvitationsGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type userInvitations
         */
        'fields[userInvitations]'?: Array<'email' | 'firstName' | 'lastName' | 'expirationDate' | 'roles' | 'allAppsVisible' | 'provisioningAllowed' | 'visibleApps'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'visibleApps'>;
        /**
         * maximum number of related visibleApps returned (when they are included)
         */
        'limit[visibleApps]'?: number;
    };
    url: '/v1/userInvitations/{id}';
};

export type UserInvitationsGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type UserInvitationsGetInstanceError = UserInvitationsGetInstanceErrors[keyof UserInvitationsGetInstanceErrors];

export type UserInvitationsGetInstanceResponses = {
    /**
     * Single UserInvitation
     */
    200: UserInvitationResponse;
};

export type UserInvitationsGetInstanceResponse = UserInvitationsGetInstanceResponses[keyof UserInvitationsGetInstanceResponses];

export type UsersGetCollectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * filter by attribute 'username'
         */
        'filter[username]'?: Array<string>;
        /**
         * filter by attribute 'roles'
         */
        'filter[roles]'?: Array<'ADMIN' | 'FINANCE' | 'ACCOUNT_HOLDER' | 'SALES' | 'MARKETING' | 'APP_MANAGER' | 'DEVELOPER' | 'ACCESS_TO_REPORTS' | 'CUSTOMER_SUPPORT' | 'CREATE_APPS' | 'CLOUD_MANAGED_DEVELOPER_ID' | 'CLOUD_MANAGED_APP_DISTRIBUTION' | 'GENERATE_INDIVIDUAL_KEYS'>;
        /**
         * filter by id(s) of related 'visibleApps'
         */
        'filter[visibleApps]'?: Array<string>;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'username' | '-username' | 'lastName' | '-lastName'>;
        /**
         * the fields to include for returned resources of type users
         */
        'fields[users]'?: Array<'username' | 'firstName' | 'lastName' | 'roles' | 'allAppsVisible' | 'provisioningAllowed' | 'visibleApps'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'visibleApps'>;
        /**
         * maximum number of related visibleApps returned (when they are included)
         */
        'limit[visibleApps]'?: number;
    };
    url: '/v1/users';
};

export type UsersGetCollectionErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
};

export type UsersGetCollectionError = UsersGetCollectionErrors[keyof UsersGetCollectionErrors];

export type UsersGetCollectionResponses = {
    /**
     * List of Users
     */
    200: UsersResponse;
};

export type UsersGetCollectionResponse = UsersGetCollectionResponses[keyof UsersGetCollectionResponses];

export type UsersDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/users/{id}';
};

export type UsersDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type UsersDeleteInstanceError = UsersDeleteInstanceErrors[keyof UsersDeleteInstanceErrors];

export type UsersDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type UsersDeleteInstanceResponse = UsersDeleteInstanceResponses[keyof UsersDeleteInstanceResponses];

export type UsersGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type users
         */
        'fields[users]'?: Array<'username' | 'firstName' | 'lastName' | 'roles' | 'allAppsVisible' | 'provisioningAllowed' | 'visibleApps'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'visibleApps'>;
        /**
         * maximum number of related visibleApps returned (when they are included)
         */
        'limit[visibleApps]'?: number;
    };
    url: '/v1/users/{id}';
};

export type UsersGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type UsersGetInstanceError = UsersGetInstanceErrors[keyof UsersGetInstanceErrors];

export type UsersGetInstanceResponses = {
    /**
     * Single User
     */
    200: UserResponse;
};

export type UsersGetInstanceResponse = UsersGetInstanceResponses[keyof UsersGetInstanceResponses];

export type UsersUpdateInstanceData = {
    /**
     * User representation
     */
    body: UserUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/users/{id}';
};

export type UsersUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type UsersUpdateInstanceError = UsersUpdateInstanceErrors[keyof UsersUpdateInstanceErrors];

export type UsersUpdateInstanceResponses = {
    /**
     * Single User
     */
    200: UserResponse;
};

export type UsersUpdateInstanceResponse = UsersUpdateInstanceResponses[keyof UsersUpdateInstanceResponses];

export type WinBackOffersCreateInstanceData = {
    /**
     * WinBackOffer representation
     */
    body: WinBackOfferCreateRequest;
    path?: never;
    query?: never;
    url: '/v1/winBackOffers';
};

export type WinBackOffersCreateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type WinBackOffersCreateInstanceError = WinBackOffersCreateInstanceErrors[keyof WinBackOffersCreateInstanceErrors];

export type WinBackOffersCreateInstanceResponses = {
    /**
     * Single WinBackOffer
     */
    201: WinBackOfferResponse;
};

export type WinBackOffersCreateInstanceResponse = WinBackOffersCreateInstanceResponses[keyof WinBackOffersCreateInstanceResponses];

export type WinBackOffersDeleteInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/winBackOffers/{id}';
};

export type WinBackOffersDeleteInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
};

export type WinBackOffersDeleteInstanceError = WinBackOffersDeleteInstanceErrors[keyof WinBackOffersDeleteInstanceErrors];

export type WinBackOffersDeleteInstanceResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type WinBackOffersDeleteInstanceResponse = WinBackOffersDeleteInstanceResponses[keyof WinBackOffersDeleteInstanceResponses];

export type WinBackOffersGetInstanceData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type winBackOffers
         */
        'fields[winBackOffers]'?: Array<'referenceName' | 'offerId' | 'duration' | 'offerMode' | 'periodCount' | 'customerEligibilityPaidSubscriptionDurationInMonths' | 'customerEligibilityTimeSinceLastSubscribedInMonths' | 'customerEligibilityWaitBetweenOffersInMonths' | 'startDate' | 'endDate' | 'priority' | 'promotionIntent' | 'prices'>;
        /**
         * the fields to include for returned resources of type winBackOfferPrices
         */
        'fields[winBackOfferPrices]'?: Array<'territory' | 'subscriptionPricePoint'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'prices'>;
        /**
         * maximum number of related prices returned (when they are included)
         */
        'limit[prices]'?: number;
    };
    url: '/v1/winBackOffers/{id}';
};

export type WinBackOffersGetInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type WinBackOffersGetInstanceError = WinBackOffersGetInstanceErrors[keyof WinBackOffersGetInstanceErrors];

export type WinBackOffersGetInstanceResponses = {
    /**
     * Single WinBackOffer
     */
    200: WinBackOfferResponse;
};

export type WinBackOffersGetInstanceResponse = WinBackOffersGetInstanceResponses[keyof WinBackOffersGetInstanceResponses];

export type WinBackOffersUpdateInstanceData = {
    /**
     * WinBackOffer representation
     */
    body: WinBackOfferUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/winBackOffers/{id}';
};

export type WinBackOffersUpdateInstanceErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type WinBackOffersUpdateInstanceError = WinBackOffersUpdateInstanceErrors[keyof WinBackOffersUpdateInstanceErrors];

export type WinBackOffersUpdateInstanceResponses = {
    /**
     * Single WinBackOffer
     */
    200: WinBackOfferResponse;
};

export type WinBackOffersUpdateInstanceResponse = WinBackOffersUpdateInstanceResponses[keyof WinBackOffersUpdateInstanceResponses];

export type AlternativeDistributionPackageVersionsDeltasGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageDeltas
         */
        'fields[alternativeDistributionPackageDeltas]'?: Array<'url' | 'urlExpirationDate' | 'alternativeDistributionKeyBlob' | 'fileChecksum'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/alternativeDistributionPackageVersions/{id}/deltas';
};

export type AlternativeDistributionPackageVersionsDeltasGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AlternativeDistributionPackageVersionsDeltasGetToManyRelatedError = AlternativeDistributionPackageVersionsDeltasGetToManyRelatedErrors[keyof AlternativeDistributionPackageVersionsDeltasGetToManyRelatedErrors];

export type AlternativeDistributionPackageVersionsDeltasGetToManyRelatedResponses = {
    /**
     * List of AlternativeDistributionPackageDeltas
     */
    200: AlternativeDistributionPackageDeltasResponse;
};

export type AlternativeDistributionPackageVersionsDeltasGetToManyRelatedResponse = AlternativeDistributionPackageVersionsDeltasGetToManyRelatedResponses[keyof AlternativeDistributionPackageVersionsDeltasGetToManyRelatedResponses];

export type AlternativeDistributionPackageVersionsVariantsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageVariants
         */
        'fields[alternativeDistributionPackageVariants]'?: Array<'url' | 'urlExpirationDate' | 'alternativeDistributionKeyBlob' | 'fileChecksum'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/alternativeDistributionPackageVersions/{id}/variants';
};

export type AlternativeDistributionPackageVersionsVariantsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AlternativeDistributionPackageVersionsVariantsGetToManyRelatedError = AlternativeDistributionPackageVersionsVariantsGetToManyRelatedErrors[keyof AlternativeDistributionPackageVersionsVariantsGetToManyRelatedErrors];

export type AlternativeDistributionPackageVersionsVariantsGetToManyRelatedResponses = {
    /**
     * List of AlternativeDistributionPackageVariants
     */
    200: AlternativeDistributionPackageVariantsResponse;
};

export type AlternativeDistributionPackageVersionsVariantsGetToManyRelatedResponse = AlternativeDistributionPackageVersionsVariantsGetToManyRelatedResponses[keyof AlternativeDistributionPackageVersionsVariantsGetToManyRelatedResponses];

export type AlternativeDistributionPackagesVersionsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'state'
         */
        'filter[state]'?: Array<'COMPLETED' | 'REPLACED'>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageVersions
         */
        'fields[alternativeDistributionPackageVersions]'?: Array<'url' | 'urlExpirationDate' | 'version' | 'fileChecksum' | 'state' | 'variants' | 'deltas' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageVariants
         */
        'fields[alternativeDistributionPackageVariants]'?: Array<'url' | 'urlExpirationDate' | 'alternativeDistributionKeyBlob' | 'fileChecksum'>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageDeltas
         */
        'fields[alternativeDistributionPackageDeltas]'?: Array<'url' | 'urlExpirationDate' | 'alternativeDistributionKeyBlob' | 'fileChecksum'>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackages
         */
        'fields[alternativeDistributionPackages]'?: Array<'versions'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'variants' | 'deltas' | 'alternativeDistributionPackage'>;
        /**
         * maximum number of related variants returned (when they are included)
         */
        'limit[variants]'?: number;
        /**
         * maximum number of related deltas returned (when they are included)
         */
        'limit[deltas]'?: number;
    };
    url: '/v1/alternativeDistributionPackages/{id}/versions';
};

export type AlternativeDistributionPackagesVersionsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AlternativeDistributionPackagesVersionsGetToManyRelatedError = AlternativeDistributionPackagesVersionsGetToManyRelatedErrors[keyof AlternativeDistributionPackagesVersionsGetToManyRelatedErrors];

export type AlternativeDistributionPackagesVersionsGetToManyRelatedResponses = {
    /**
     * List of AlternativeDistributionPackageVersions
     */
    200: AlternativeDistributionPackageVersionsResponse;
};

export type AlternativeDistributionPackagesVersionsGetToManyRelatedResponse = AlternativeDistributionPackagesVersionsGetToManyRelatedResponses[keyof AlternativeDistributionPackagesVersionsGetToManyRelatedResponses];

export type AnalyticsReportInstancesSegmentsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type analyticsReportSegments
         */
        'fields[analyticsReportSegments]'?: Array<'checksum' | 'sizeInBytes' | 'url'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/analyticsReportInstances/{id}/segments';
};

export type AnalyticsReportInstancesSegmentsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AnalyticsReportInstancesSegmentsGetToManyRelatedError = AnalyticsReportInstancesSegmentsGetToManyRelatedErrors[keyof AnalyticsReportInstancesSegmentsGetToManyRelatedErrors];

export type AnalyticsReportInstancesSegmentsGetToManyRelatedResponses = {
    /**
     * List of AnalyticsReportSegments
     */
    200: AnalyticsReportSegmentsResponse;
};

export type AnalyticsReportInstancesSegmentsGetToManyRelatedResponse = AnalyticsReportInstancesSegmentsGetToManyRelatedResponses[keyof AnalyticsReportInstancesSegmentsGetToManyRelatedResponses];

export type AnalyticsReportRequestsReportsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'name'
         */
        'filter[name]'?: Array<string>;
        /**
         * filter by attribute 'category'
         */
        'filter[category]'?: Array<'APP_USAGE' | 'APP_STORE_ENGAGEMENT' | 'COMMERCE' | 'FRAMEWORK_USAGE' | 'PERFORMANCE'>;
        /**
         * the fields to include for returned resources of type analyticsReports
         */
        'fields[analyticsReports]'?: Array<'name' | 'category' | 'instances'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/analyticsReportRequests/{id}/reports';
};

export type AnalyticsReportRequestsReportsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AnalyticsReportRequestsReportsGetToManyRelatedError = AnalyticsReportRequestsReportsGetToManyRelatedErrors[keyof AnalyticsReportRequestsReportsGetToManyRelatedErrors];

export type AnalyticsReportRequestsReportsGetToManyRelatedResponses = {
    /**
     * List of AnalyticsReports
     */
    200: AnalyticsReportsResponse;
};

export type AnalyticsReportRequestsReportsGetToManyRelatedResponse = AnalyticsReportRequestsReportsGetToManyRelatedResponses[keyof AnalyticsReportRequestsReportsGetToManyRelatedResponses];

export type AnalyticsReportsInstancesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'granularity'
         */
        'filter[granularity]'?: Array<'DAILY' | 'WEEKLY' | 'MONTHLY'>;
        /**
         * filter by attribute 'processingDate'
         */
        'filter[processingDate]'?: Array<string>;
        /**
         * the fields to include for returned resources of type analyticsReportInstances
         */
        'fields[analyticsReportInstances]'?: Array<'granularity' | 'processingDate' | 'segments'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/analyticsReports/{id}/instances';
};

export type AnalyticsReportsInstancesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AnalyticsReportsInstancesGetToManyRelatedError = AnalyticsReportsInstancesGetToManyRelatedErrors[keyof AnalyticsReportsInstancesGetToManyRelatedErrors];

export type AnalyticsReportsInstancesGetToManyRelatedResponses = {
    /**
     * List of AnalyticsReportInstances
     */
    200: AnalyticsReportInstancesResponse;
};

export type AnalyticsReportsInstancesGetToManyRelatedResponse = AnalyticsReportsInstancesGetToManyRelatedResponses[keyof AnalyticsReportsInstancesGetToManyRelatedResponses];

export type AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type territoryAvailabilities
         */
        'fields[territoryAvailabilities]'?: Array<'available' | 'releaseDate' | 'preOrderEnabled' | 'preOrderPublishDate' | 'contentStatuses' | 'territory'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'territory'>;
    };
    url: '/v2/appAvailabilities/{id}/territoryAvailabilities';
};

export type AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedError = AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedErrors[keyof AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedErrors];

export type AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedResponses = {
    /**
     * List of TerritoryAvailabilities
     */
    200: TerritoryAvailabilitiesResponse;
};

export type AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedResponse = AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedResponses[keyof AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedResponses];

export type AppCategoriesParentGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<'platforms' | 'subcategories' | 'parent'>;
    };
    url: '/v1/appCategories/{id}/parent';
};

export type AppCategoriesParentGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppCategoriesParentGetToOneRelatedError = AppCategoriesParentGetToOneRelatedErrors[keyof AppCategoriesParentGetToOneRelatedErrors];

export type AppCategoriesParentGetToOneRelatedResponses = {
    /**
     * Single AppCategory with get
     */
    200: AppCategoryWithoutIncludesResponse;
};

export type AppCategoriesParentGetToOneRelatedResponse = AppCategoriesParentGetToOneRelatedResponses[keyof AppCategoriesParentGetToOneRelatedResponses];

export type AppCategoriesSubcategoriesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<'platforms' | 'subcategories' | 'parent'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/appCategories/{id}/subcategories';
};

export type AppCategoriesSubcategoriesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppCategoriesSubcategoriesGetToManyRelatedError = AppCategoriesSubcategoriesGetToManyRelatedErrors[keyof AppCategoriesSubcategoriesGetToManyRelatedErrors];

export type AppCategoriesSubcategoriesGetToManyRelatedResponses = {
    /**
     * List of AppCategories with get
     */
    200: AppCategoriesWithoutIncludesResponse;
};

export type AppCategoriesSubcategoriesGetToManyRelatedResponse = AppCategoriesSubcategoriesGetToManyRelatedResponses[keyof AppCategoriesSubcategoriesGetToManyRelatedResponses];

export type AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipHeaderImages
         */
        'fields[appClipHeaderImages]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'appClipDefaultExperienceLocalization'>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperienceLocalizations
         */
        'fields[appClipDefaultExperienceLocalizations]'?: Array<'locale' | 'subtitle' | 'appClipDefaultExperience' | 'appClipHeaderImage'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appClipDefaultExperienceLocalization'>;
    };
    url: '/v1/appClipDefaultExperienceLocalizations/{id}/appClipHeaderImage';
};

export type AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedError = AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedErrors[keyof AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedErrors];

export type AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedResponses = {
    /**
     * Single AppClipHeaderImage
     */
    200: AppClipHeaderImageResponse;
};

export type AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedResponse = AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedResponses[keyof AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedResponses];

export type AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipAppStoreReviewDetails
         */
        'fields[appClipAppStoreReviewDetails]'?: Array<'invocationUrls' | 'appClipDefaultExperience'>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<'action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appClipDefaultExperience'>;
    };
    url: '/v1/appClipDefaultExperiences/{id}/appClipAppStoreReviewDetail';
};

export type AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedError = AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedErrors[keyof AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedErrors];

export type AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedResponses = {
    /**
     * Single AppClipAppStoreReviewDetail
     */
    200: AppClipAppStoreReviewDetailResponse;
};

export type AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedResponse = AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedResponses[keyof AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedResponses];

export type AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'locale'
         */
        'filter[locale]'?: Array<string>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperienceLocalizations
         */
        'fields[appClipDefaultExperienceLocalizations]'?: Array<'locale' | 'subtitle' | 'appClipDefaultExperience' | 'appClipHeaderImage'>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<'action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail'>;
        /**
         * the fields to include for returned resources of type appClipHeaderImages
         */
        'fields[appClipHeaderImages]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'appClipDefaultExperienceLocalization'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appClipDefaultExperience' | 'appClipHeaderImage'>;
    };
    url: '/v1/appClipDefaultExperiences/{id}/appClipDefaultExperienceLocalizations';
};

export type AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedError = AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedErrors[keyof AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedErrors];

export type AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedResponses = {
    /**
     * List of AppClipDefaultExperienceLocalizations
     */
    200: AppClipDefaultExperienceLocalizationsResponse;
};

export type AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedResponse = AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedResponses[keyof AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedResponses];

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion';
};

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipError = AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipErrors[keyof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipErrors];

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipResponses = {
    /**
     * Related linkage
     */
    200: AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse;
};

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipResponse = AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipResponses[keyof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipResponses];

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipData = {
    /**
     * Related linkage
     */
    body: AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion';
};

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipError = AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipErrors[keyof AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipErrors];

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipResponse = AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipResponses[keyof AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipResponses];

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type ageRatingDeclarations
         */
        'fields[ageRatingDeclarations]'?: Array<'alcoholTobaccoOrDrugUseOrReferences' | 'contests' | 'gamblingAndContests' | 'gambling' | 'gamblingSimulated' | 'kidsAgeBand' | 'lootBox' | 'medicalOrTreatmentInformation' | 'profanityOrCrudeHumor' | 'sexualContentGraphicAndNudity' | 'sexualContentOrNudity' | 'horrorOrFearThemes' | 'matureOrSuggestiveThemes' | 'unrestrictedWebAccess' | 'violenceCartoonOrFantasy' | 'violenceRealisticProlongedGraphicOrSadistic' | 'violenceRealistic' | 'ageRatingOverride' | 'koreaAgeRatingOverride' | 'seventeenPlus'>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<'description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * the fields to include for returned resources of type appStoreVersionPhasedReleases
         */
        'fields[appStoreVersionPhasedReleases]'?: Array<'phasedReleaseState' | 'startDate' | 'totalPauseDuration' | 'currentDayNumber'>;
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<'enabled' | 'compatibilityVersions' | 'appStoreVersion'>;
        /**
         * the fields to include for returned resources of type routingAppCoverages
         */
        'fields[routingAppCoverages]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'appStoreVersion'>;
        /**
         * the fields to include for returned resources of type appStoreReviewDetails
         */
        'fields[appStoreReviewDetails]'?: Array<'contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'appStoreVersion' | 'appStoreReviewAttachments'>;
        /**
         * the fields to include for returned resources of type appStoreVersionSubmissions
         */
        'fields[appStoreVersionSubmissions]'?: Array<'appStoreVersion'>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<'action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<'name' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'appStoreVersion' | 'appStoreVersionExperimentTreatments' | 'platform' | 'app' | 'latestControlVersion' | 'controlVersions'>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackages
         */
        'fields[alternativeDistributionPackages]'?: Array<'versions'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionPackage'>;
        /**
         * maximum number of related appStoreVersionLocalizations returned (when they are included)
         */
        'limit[appStoreVersionLocalizations]'?: number;
        /**
         * maximum number of related appStoreVersionExperiments returned (when they are included)
         * @deprecated
         */
        'limit[appStoreVersionExperiments]'?: number;
        /**
         * maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
         */
        'limit[appStoreVersionExperimentsV2]'?: number;
    };
    url: '/v1/appClipDefaultExperiences/{id}/releaseWithAppStoreVersion';
};

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedError = AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedErrors[keyof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedErrors];

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedResponses = {
    /**
     * Single AppStoreVersion
     */
    200: AppStoreVersionResponse;
};

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedResponse = AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedResponses[keyof AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedResponses];

export type AppClipsAppClipAdvancedExperiencesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'status'
         */
        'filter[status]'?: Array<'RECEIVED' | 'DEACTIVATED' | 'APP_TRANSFER_IN_PROGRESS'>;
        /**
         * filter by attribute 'placeStatus'
         */
        'filter[placeStatus]'?: Array<'PENDING' | 'MATCHED' | 'NO_MATCH'>;
        /**
         * filter by attribute 'action'
         */
        'filter[action]'?: Array<'OPEN' | 'VIEW' | 'PLAY'>;
        /**
         * the fields to include for returned resources of type appClipAdvancedExperiences
         */
        'fields[appClipAdvancedExperiences]'?: Array<'link' | 'version' | 'status' | 'action' | 'isPoweredBy' | 'place' | 'placeStatus' | 'businessCategory' | 'defaultLanguage' | 'appClip' | 'headerImage' | 'localizations'>;
        /**
         * the fields to include for returned resources of type appClips
         */
        'fields[appClips]'?: Array<'bundleId' | 'app' | 'appClipDefaultExperiences' | 'appClipAdvancedExperiences'>;
        /**
         * the fields to include for returned resources of type appClipAdvancedExperienceImages
         */
        'fields[appClipAdvancedExperienceImages]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState'>;
        /**
         * the fields to include for returned resources of type appClipAdvancedExperienceLocalizations
         */
        'fields[appClipAdvancedExperienceLocalizations]'?: Array<'language' | 'title' | 'subtitle'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appClip' | 'headerImage' | 'localizations'>;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
    };
    url: '/v1/appClips/{id}/appClipAdvancedExperiences';
};

export type AppClipsAppClipAdvancedExperiencesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppClipsAppClipAdvancedExperiencesGetToManyRelatedError = AppClipsAppClipAdvancedExperiencesGetToManyRelatedErrors[keyof AppClipsAppClipAdvancedExperiencesGetToManyRelatedErrors];

export type AppClipsAppClipAdvancedExperiencesGetToManyRelatedResponses = {
    /**
     * List of AppClipAdvancedExperiences
     */
    200: AppClipAdvancedExperiencesResponse;
};

export type AppClipsAppClipAdvancedExperiencesGetToManyRelatedResponse = AppClipsAppClipAdvancedExperiencesGetToManyRelatedResponses[keyof AppClipsAppClipAdvancedExperiencesGetToManyRelatedResponses];

export type AppClipsAppClipDefaultExperiencesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by existence or non-existence of related 'releaseWithAppStoreVersion'
         */
        'exists[releaseWithAppStoreVersion]'?: boolean;
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<'action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail'>;
        /**
         * the fields to include for returned resources of type appClips
         */
        'fields[appClips]'?: Array<'bundleId' | 'app' | 'appClipDefaultExperiences' | 'appClipAdvancedExperiences'>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperienceLocalizations
         */
        'fields[appClipDefaultExperienceLocalizations]'?: Array<'locale' | 'subtitle' | 'appClipDefaultExperience' | 'appClipHeaderImage'>;
        /**
         * the fields to include for returned resources of type appClipAppStoreReviewDetails
         */
        'fields[appClipAppStoreReviewDetails]'?: Array<'invocationUrls' | 'appClipDefaultExperience'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail'>;
        /**
         * maximum number of related appClipDefaultExperienceLocalizations returned (when they are included)
         */
        'limit[appClipDefaultExperienceLocalizations]'?: number;
    };
    url: '/v1/appClips/{id}/appClipDefaultExperiences';
};

export type AppClipsAppClipDefaultExperiencesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppClipsAppClipDefaultExperiencesGetToManyRelatedError = AppClipsAppClipDefaultExperiencesGetToManyRelatedErrors[keyof AppClipsAppClipDefaultExperiencesGetToManyRelatedErrors];

export type AppClipsAppClipDefaultExperiencesGetToManyRelatedResponses = {
    /**
     * List of AppClipDefaultExperiences
     */
    200: AppClipDefaultExperiencesResponse;
};

export type AppClipsAppClipDefaultExperiencesGetToManyRelatedResponse = AppClipsAppClipDefaultExperiencesGetToManyRelatedResponses[keyof AppClipsAppClipDefaultExperiencesGetToManyRelatedResponses];

export type AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'previewType'
         */
        'filter[previewType]'?: Array<'IPHONE_67' | 'IPHONE_61' | 'IPHONE_65' | 'IPHONE_58' | 'IPHONE_55' | 'IPHONE_47' | 'IPHONE_40' | 'IPHONE_35' | 'IPAD_PRO_3GEN_129' | 'IPAD_PRO_3GEN_11' | 'IPAD_PRO_129' | 'IPAD_105' | 'IPAD_97' | 'DESKTOP' | 'APPLE_TV' | 'APPLE_VISION_PRO'>;
        /**
         * filter by id(s) of related 'appStoreVersionLocalization'
         */
        'filter[appStoreVersionLocalization]'?: Array<string>;
        /**
         * filter by id(s) of related 'appStoreVersionExperimentTreatmentLocalization'
         */
        'filter[appStoreVersionExperimentTreatmentLocalization]'?: Array<string>;
        /**
         * the fields to include for returned resources of type appPreviewSets
         */
        'fields[appPreviewSets]'?: Array<'previewType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews'>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<'description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appCustomProductPageLocalizations
         */
        'fields[appCustomProductPageLocalizations]'?: Array<'locale' | 'promotionalText' | 'appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
         */
        'fields[appStoreVersionExperimentTreatmentLocalizations]'?: Array<'locale' | 'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appPreviews
         */
        'fields[appPreviews]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'previewFrameTimeCode' | 'mimeType' | 'videoUrl' | 'previewFrameImage' | 'previewImage' | 'uploadOperations' | 'assetDeliveryState' | 'videoDeliveryState' | 'appPreviewSet'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews'>;
        /**
         * maximum number of related appPreviews returned (when they are included)
         */
        'limit[appPreviews]'?: number;
    };
    url: '/v1/appCustomProductPageLocalizations/{id}/appPreviewSets';
};

export type AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedError = AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedErrors[keyof AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedErrors];

export type AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedResponses = {
    /**
     * List of AppPreviewSets
     */
    200: AppPreviewSetsResponse;
};

export type AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedResponse = AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedResponses[keyof AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedResponses];

export type AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'screenshotDisplayType'
         */
        'filter[screenshotDisplayType]'?: Array<'APP_IPHONE_67' | 'APP_IPHONE_61' | 'APP_IPHONE_65' | 'APP_IPHONE_58' | 'APP_IPHONE_55' | 'APP_IPHONE_47' | 'APP_IPHONE_40' | 'APP_IPHONE_35' | 'APP_IPAD_PRO_3GEN_129' | 'APP_IPAD_PRO_3GEN_11' | 'APP_IPAD_PRO_129' | 'APP_IPAD_105' | 'APP_IPAD_97' | 'APP_DESKTOP' | 'APP_WATCH_ULTRA' | 'APP_WATCH_SERIES_10' | 'APP_WATCH_SERIES_7' | 'APP_WATCH_SERIES_4' | 'APP_WATCH_SERIES_3' | 'APP_APPLE_TV' | 'APP_APPLE_VISION_PRO' | 'IMESSAGE_APP_IPHONE_67' | 'IMESSAGE_APP_IPHONE_61' | 'IMESSAGE_APP_IPHONE_65' | 'IMESSAGE_APP_IPHONE_58' | 'IMESSAGE_APP_IPHONE_55' | 'IMESSAGE_APP_IPHONE_47' | 'IMESSAGE_APP_IPHONE_40' | 'IMESSAGE_APP_IPAD_PRO_3GEN_129' | 'IMESSAGE_APP_IPAD_PRO_3GEN_11' | 'IMESSAGE_APP_IPAD_PRO_129' | 'IMESSAGE_APP_IPAD_105' | 'IMESSAGE_APP_IPAD_97'>;
        /**
         * filter by id(s) of related 'appStoreVersionLocalization'
         */
        'filter[appStoreVersionLocalization]'?: Array<string>;
        /**
         * filter by id(s) of related 'appStoreVersionExperimentTreatmentLocalization'
         */
        'filter[appStoreVersionExperimentTreatmentLocalization]'?: Array<string>;
        /**
         * the fields to include for returned resources of type appScreenshotSets
         */
        'fields[appScreenshotSets]'?: Array<'screenshotDisplayType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots'>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<'description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appCustomProductPageLocalizations
         */
        'fields[appCustomProductPageLocalizations]'?: Array<'locale' | 'promotionalText' | 'appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
         */
        'fields[appStoreVersionExperimentTreatmentLocalizations]'?: Array<'locale' | 'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appScreenshots
         */
        'fields[appScreenshots]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'appScreenshotSet'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots'>;
        /**
         * maximum number of related appScreenshots returned (when they are included)
         */
        'limit[appScreenshots]'?: number;
    };
    url: '/v1/appCustomProductPageLocalizations/{id}/appScreenshotSets';
};

export type AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedError = AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedErrors[keyof AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedErrors];

export type AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedResponses = {
    /**
     * List of AppScreenshotSets
     */
    200: AppScreenshotSetsResponse;
};

export type AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedResponse = AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedResponses[keyof AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedResponses];

export type AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'locale'
         */
        'filter[locale]'?: Array<string>;
        /**
         * the fields to include for returned resources of type appCustomProductPageLocalizations
         */
        'fields[appCustomProductPageLocalizations]'?: Array<'locale' | 'promotionalText' | 'appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appCustomProductPageVersions
         */
        'fields[appCustomProductPageVersions]'?: Array<'version' | 'state' | 'deepLink' | 'appCustomProductPage' | 'appCustomProductPageLocalizations'>;
        /**
         * the fields to include for returned resources of type appScreenshotSets
         */
        'fields[appScreenshotSets]'?: Array<'screenshotDisplayType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots'>;
        /**
         * the fields to include for returned resources of type appPreviewSets
         */
        'fields[appPreviewSets]'?: Array<'previewType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * maximum number of related appScreenshotSets returned (when they are included)
         */
        'limit[appScreenshotSets]'?: number;
        /**
         * maximum number of related appPreviewSets returned (when they are included)
         */
        'limit[appPreviewSets]'?: number;
    };
    url: '/v1/appCustomProductPageVersions/{id}/appCustomProductPageLocalizations';
};

export type AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedError = AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedErrors[keyof AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedErrors];

export type AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedResponses = {
    /**
     * List of AppCustomProductPageLocalizations
     */
    200: AppCustomProductPageLocalizationsResponse;
};

export type AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedResponse = AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedResponses[keyof AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedResponses];

export type AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'state'
         */
        'filter[state]'?: Array<'PREPARE_FOR_SUBMISSION' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'ACCEPTED' | 'APPROVED' | 'REPLACED_WITH_NEW_VERSION' | 'REJECTED'>;
        /**
         * the fields to include for returned resources of type appCustomProductPageVersions
         */
        'fields[appCustomProductPageVersions]'?: Array<'version' | 'state' | 'deepLink' | 'appCustomProductPage' | 'appCustomProductPageLocalizations'>;
        /**
         * the fields to include for returned resources of type appCustomProductPages
         */
        'fields[appCustomProductPages]'?: Array<'name' | 'url' | 'visible' | 'app' | 'appCustomProductPageVersions'>;
        /**
         * the fields to include for returned resources of type appCustomProductPageLocalizations
         */
        'fields[appCustomProductPageLocalizations]'?: Array<'locale' | 'promotionalText' | 'appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appCustomProductPage' | 'appCustomProductPageLocalizations'>;
        /**
         * maximum number of related appCustomProductPageLocalizations returned (when they are included)
         */
        'limit[appCustomProductPageLocalizations]'?: number;
    };
    url: '/v1/appCustomProductPages/{id}/appCustomProductPageVersions';
};

export type AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedError = AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedErrors[keyof AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedErrors];

export type AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedResponses = {
    /**
     * List of AppCustomProductPageVersions
     */
    200: AppCustomProductPageVersionsResponse;
};

export type AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedResponse = AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedResponses[keyof AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedResponses];

export type AppEncryptionDeclarationsAppGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
    };
    url: '/v1/appEncryptionDeclarations/{id}/app';
};

export type AppEncryptionDeclarationsAppGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppEncryptionDeclarationsAppGetToOneRelatedError = AppEncryptionDeclarationsAppGetToOneRelatedErrors[keyof AppEncryptionDeclarationsAppGetToOneRelatedErrors];

export type AppEncryptionDeclarationsAppGetToOneRelatedResponses = {
    /**
     * Single App with get
     */
    200: AppWithoutIncludesResponse;
};

export type AppEncryptionDeclarationsAppGetToOneRelatedResponse = AppEncryptionDeclarationsAppGetToOneRelatedResponses[keyof AppEncryptionDeclarationsAppGetToOneRelatedResponses];

export type AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEncryptionDeclarationDocuments
         */
        'fields[appEncryptionDeclarationDocuments]'?: Array<'fileSize' | 'fileName' | 'assetToken' | 'downloadUrl' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState'>;
    };
    url: '/v1/appEncryptionDeclarations/{id}/appEncryptionDeclarationDocument';
};

export type AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedError = AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedErrors[keyof AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedErrors];

export type AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedResponses = {
    /**
     * Single AppEncryptionDeclarationDocument
     */
    200: AppEncryptionDeclarationDocumentResponse;
};

export type AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedResponse = AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedResponses[keyof AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedResponses];

export type AppEncryptionDeclarationsBuildsCreateToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: AppEncryptionDeclarationBuildsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appEncryptionDeclarations/{id}/relationships/builds';
};

export type AppEncryptionDeclarationsBuildsCreateToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppEncryptionDeclarationsBuildsCreateToManyRelationshipError = AppEncryptionDeclarationsBuildsCreateToManyRelationshipErrors[keyof AppEncryptionDeclarationsBuildsCreateToManyRelationshipErrors];

export type AppEncryptionDeclarationsBuildsCreateToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppEncryptionDeclarationsBuildsCreateToManyRelationshipResponse = AppEncryptionDeclarationsBuildsCreateToManyRelationshipResponses[keyof AppEncryptionDeclarationsBuildsCreateToManyRelationshipResponses];

export type AppEventLocalizationsAppEventScreenshotsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEventScreenshots
         */
        'fields[appEventScreenshots]'?: Array<'fileSize' | 'fileName' | 'imageAsset' | 'assetToken' | 'uploadOperations' | 'assetDeliveryState' | 'appEventAssetType' | 'appEventLocalization'>;
        /**
         * the fields to include for returned resources of type appEventLocalizations
         */
        'fields[appEventLocalizations]'?: Array<'locale' | 'name' | 'shortDescription' | 'longDescription' | 'appEvent' | 'appEventScreenshots' | 'appEventVideoClips'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appEventLocalization'>;
    };
    url: '/v1/appEventLocalizations/{id}/appEventScreenshots';
};

export type AppEventLocalizationsAppEventScreenshotsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppEventLocalizationsAppEventScreenshotsGetToManyRelatedError = AppEventLocalizationsAppEventScreenshotsGetToManyRelatedErrors[keyof AppEventLocalizationsAppEventScreenshotsGetToManyRelatedErrors];

export type AppEventLocalizationsAppEventScreenshotsGetToManyRelatedResponses = {
    /**
     * List of AppEventScreenshots
     */
    200: AppEventScreenshotsResponse;
};

export type AppEventLocalizationsAppEventScreenshotsGetToManyRelatedResponse = AppEventLocalizationsAppEventScreenshotsGetToManyRelatedResponses[keyof AppEventLocalizationsAppEventScreenshotsGetToManyRelatedResponses];

export type AppEventLocalizationsAppEventVideoClipsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEventVideoClips
         */
        'fields[appEventVideoClips]'?: Array<'fileSize' | 'fileName' | 'previewFrameTimeCode' | 'videoUrl' | 'previewFrameImage' | 'previewImage' | 'uploadOperations' | 'assetDeliveryState' | 'videoDeliveryState' | 'appEventAssetType' | 'appEventLocalization'>;
        /**
         * the fields to include for returned resources of type appEventLocalizations
         */
        'fields[appEventLocalizations]'?: Array<'locale' | 'name' | 'shortDescription' | 'longDescription' | 'appEvent' | 'appEventScreenshots' | 'appEventVideoClips'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appEventLocalization'>;
    };
    url: '/v1/appEventLocalizations/{id}/appEventVideoClips';
};

export type AppEventLocalizationsAppEventVideoClipsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppEventLocalizationsAppEventVideoClipsGetToManyRelatedError = AppEventLocalizationsAppEventVideoClipsGetToManyRelatedErrors[keyof AppEventLocalizationsAppEventVideoClipsGetToManyRelatedErrors];

export type AppEventLocalizationsAppEventVideoClipsGetToManyRelatedResponses = {
    /**
     * List of AppEventVideoClips
     */
    200: AppEventVideoClipsResponse;
};

export type AppEventLocalizationsAppEventVideoClipsGetToManyRelatedResponse = AppEventLocalizationsAppEventVideoClipsGetToManyRelatedResponses[keyof AppEventLocalizationsAppEventVideoClipsGetToManyRelatedResponses];

export type AppEventsLocalizationsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEventLocalizations
         */
        'fields[appEventLocalizations]'?: Array<'locale' | 'name' | 'shortDescription' | 'longDescription' | 'appEvent' | 'appEventScreenshots' | 'appEventVideoClips'>;
        /**
         * the fields to include for returned resources of type appEvents
         */
        'fields[appEvents]'?: Array<'referenceName' | 'badge' | 'eventState' | 'deepLink' | 'purchaseRequirement' | 'primaryLocale' | 'priority' | 'purpose' | 'territorySchedules' | 'archivedTerritorySchedules' | 'localizations'>;
        /**
         * the fields to include for returned resources of type appEventScreenshots
         */
        'fields[appEventScreenshots]'?: Array<'fileSize' | 'fileName' | 'imageAsset' | 'assetToken' | 'uploadOperations' | 'assetDeliveryState' | 'appEventAssetType' | 'appEventLocalization'>;
        /**
         * the fields to include for returned resources of type appEventVideoClips
         */
        'fields[appEventVideoClips]'?: Array<'fileSize' | 'fileName' | 'previewFrameTimeCode' | 'videoUrl' | 'previewFrameImage' | 'previewImage' | 'uploadOperations' | 'assetDeliveryState' | 'videoDeliveryState' | 'appEventAssetType' | 'appEventLocalization'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appEvent' | 'appEventScreenshots' | 'appEventVideoClips'>;
        /**
         * maximum number of related appEventScreenshots returned (when they are included)
         */
        'limit[appEventScreenshots]'?: number;
        /**
         * maximum number of related appEventVideoClips returned (when they are included)
         */
        'limit[appEventVideoClips]'?: number;
    };
    url: '/v1/appEvents/{id}/localizations';
};

export type AppEventsLocalizationsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppEventsLocalizationsGetToManyRelatedError = AppEventsLocalizationsGetToManyRelatedErrors[keyof AppEventsLocalizationsGetToManyRelatedErrors];

export type AppEventsLocalizationsGetToManyRelatedResponses = {
    /**
     * List of AppEventLocalizations
     */
    200: AppEventLocalizationsResponse;
};

export type AppEventsLocalizationsGetToManyRelatedResponse = AppEventsLocalizationsGetToManyRelatedResponses[keyof AppEventsLocalizationsGetToManyRelatedResponses];

export type AppInfosAgeRatingDeclarationGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ageRatingDeclarations
         */
        'fields[ageRatingDeclarations]'?: Array<'alcoholTobaccoOrDrugUseOrReferences' | 'contests' | 'gamblingAndContests' | 'gambling' | 'gamblingSimulated' | 'kidsAgeBand' | 'lootBox' | 'medicalOrTreatmentInformation' | 'profanityOrCrudeHumor' | 'sexualContentGraphicAndNudity' | 'sexualContentOrNudity' | 'horrorOrFearThemes' | 'matureOrSuggestiveThemes' | 'unrestrictedWebAccess' | 'violenceCartoonOrFantasy' | 'violenceRealisticProlongedGraphicOrSadistic' | 'violenceRealistic' | 'ageRatingOverride' | 'koreaAgeRatingOverride' | 'seventeenPlus'>;
    };
    url: '/v1/appInfos/{id}/ageRatingDeclaration';
};

export type AppInfosAgeRatingDeclarationGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppInfosAgeRatingDeclarationGetToOneRelatedError = AppInfosAgeRatingDeclarationGetToOneRelatedErrors[keyof AppInfosAgeRatingDeclarationGetToOneRelatedErrors];

export type AppInfosAgeRatingDeclarationGetToOneRelatedResponses = {
    /**
     * Single AgeRatingDeclaration
     */
    200: AgeRatingDeclarationResponse;
};

export type AppInfosAgeRatingDeclarationGetToOneRelatedResponse = AppInfosAgeRatingDeclarationGetToOneRelatedResponses[keyof AppInfosAgeRatingDeclarationGetToOneRelatedResponses];

export type AppInfosAppInfoLocalizationsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'locale'
         */
        'filter[locale]'?: Array<string>;
        /**
         * the fields to include for returned resources of type appInfoLocalizations
         */
        'fields[appInfoLocalizations]'?: Array<'locale' | 'name' | 'subtitle' | 'privacyPolicyUrl' | 'privacyChoicesUrl' | 'privacyPolicyText' | 'appInfo'>;
        /**
         * the fields to include for returned resources of type appInfos
         */
        'fields[appInfos]'?: Array<'appStoreState' | 'state' | 'appStoreAgeRating' | 'australiaAgeRating' | 'brazilAgeRating' | 'brazilAgeRatingV2' | 'franceAgeRating' | 'koreaAgeRating' | 'kidsAgeBand' | 'app' | 'ageRatingDeclaration' | 'appInfoLocalizations' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appInfo'>;
    };
    url: '/v1/appInfos/{id}/appInfoLocalizations';
};

export type AppInfosAppInfoLocalizationsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppInfosAppInfoLocalizationsGetToManyRelatedError = AppInfosAppInfoLocalizationsGetToManyRelatedErrors[keyof AppInfosAppInfoLocalizationsGetToManyRelatedErrors];

export type AppInfosAppInfoLocalizationsGetToManyRelatedResponses = {
    /**
     * List of AppInfoLocalizations
     */
    200: AppInfoLocalizationsResponse;
};

export type AppInfosAppInfoLocalizationsGetToManyRelatedResponse = AppInfosAppInfoLocalizationsGetToManyRelatedResponses[keyof AppInfosAppInfoLocalizationsGetToManyRelatedResponses];

export type AppInfosPrimaryCategoryGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<'platforms' | 'subcategories' | 'parent'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subcategories' | 'parent'>;
        /**
         * maximum number of related subcategories returned (when they are included)
         */
        'limit[subcategories]'?: number;
    };
    url: '/v1/appInfos/{id}/primaryCategory';
};

export type AppInfosPrimaryCategoryGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppInfosPrimaryCategoryGetToOneRelatedError = AppInfosPrimaryCategoryGetToOneRelatedErrors[keyof AppInfosPrimaryCategoryGetToOneRelatedErrors];

export type AppInfosPrimaryCategoryGetToOneRelatedResponses = {
    /**
     * Single AppCategory
     */
    200: AppCategoryResponse;
};

export type AppInfosPrimaryCategoryGetToOneRelatedResponse = AppInfosPrimaryCategoryGetToOneRelatedResponses[keyof AppInfosPrimaryCategoryGetToOneRelatedResponses];

export type AppInfosPrimarySubcategoryOneGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<'platforms' | 'subcategories' | 'parent'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subcategories' | 'parent'>;
        /**
         * maximum number of related subcategories returned (when they are included)
         */
        'limit[subcategories]'?: number;
    };
    url: '/v1/appInfos/{id}/primarySubcategoryOne';
};

export type AppInfosPrimarySubcategoryOneGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppInfosPrimarySubcategoryOneGetToOneRelatedError = AppInfosPrimarySubcategoryOneGetToOneRelatedErrors[keyof AppInfosPrimarySubcategoryOneGetToOneRelatedErrors];

export type AppInfosPrimarySubcategoryOneGetToOneRelatedResponses = {
    /**
     * Single AppCategory
     */
    200: AppCategoryResponse;
};

export type AppInfosPrimarySubcategoryOneGetToOneRelatedResponse = AppInfosPrimarySubcategoryOneGetToOneRelatedResponses[keyof AppInfosPrimarySubcategoryOneGetToOneRelatedResponses];

export type AppInfosPrimarySubcategoryTwoGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<'platforms' | 'subcategories' | 'parent'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subcategories' | 'parent'>;
        /**
         * maximum number of related subcategories returned (when they are included)
         */
        'limit[subcategories]'?: number;
    };
    url: '/v1/appInfos/{id}/primarySubcategoryTwo';
};

export type AppInfosPrimarySubcategoryTwoGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppInfosPrimarySubcategoryTwoGetToOneRelatedError = AppInfosPrimarySubcategoryTwoGetToOneRelatedErrors[keyof AppInfosPrimarySubcategoryTwoGetToOneRelatedErrors];

export type AppInfosPrimarySubcategoryTwoGetToOneRelatedResponses = {
    /**
     * Single AppCategory
     */
    200: AppCategoryResponse;
};

export type AppInfosPrimarySubcategoryTwoGetToOneRelatedResponse = AppInfosPrimarySubcategoryTwoGetToOneRelatedResponses[keyof AppInfosPrimarySubcategoryTwoGetToOneRelatedResponses];

export type AppInfosSecondaryCategoryGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<'platforms' | 'subcategories' | 'parent'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subcategories' | 'parent'>;
        /**
         * maximum number of related subcategories returned (when they are included)
         */
        'limit[subcategories]'?: number;
    };
    url: '/v1/appInfos/{id}/secondaryCategory';
};

export type AppInfosSecondaryCategoryGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppInfosSecondaryCategoryGetToOneRelatedError = AppInfosSecondaryCategoryGetToOneRelatedErrors[keyof AppInfosSecondaryCategoryGetToOneRelatedErrors];

export type AppInfosSecondaryCategoryGetToOneRelatedResponses = {
    /**
     * Single AppCategory
     */
    200: AppCategoryResponse;
};

export type AppInfosSecondaryCategoryGetToOneRelatedResponse = AppInfosSecondaryCategoryGetToOneRelatedResponses[keyof AppInfosSecondaryCategoryGetToOneRelatedResponses];

export type AppInfosSecondarySubcategoryOneGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<'platforms' | 'subcategories' | 'parent'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subcategories' | 'parent'>;
        /**
         * maximum number of related subcategories returned (when they are included)
         */
        'limit[subcategories]'?: number;
    };
    url: '/v1/appInfos/{id}/secondarySubcategoryOne';
};

export type AppInfosSecondarySubcategoryOneGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppInfosSecondarySubcategoryOneGetToOneRelatedError = AppInfosSecondarySubcategoryOneGetToOneRelatedErrors[keyof AppInfosSecondarySubcategoryOneGetToOneRelatedErrors];

export type AppInfosSecondarySubcategoryOneGetToOneRelatedResponses = {
    /**
     * Single AppCategory
     */
    200: AppCategoryResponse;
};

export type AppInfosSecondarySubcategoryOneGetToOneRelatedResponse = AppInfosSecondarySubcategoryOneGetToOneRelatedResponses[keyof AppInfosSecondarySubcategoryOneGetToOneRelatedResponses];

export type AppInfosSecondarySubcategoryTwoGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<'platforms' | 'subcategories' | 'parent'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subcategories' | 'parent'>;
        /**
         * maximum number of related subcategories returned (when they are included)
         */
        'limit[subcategories]'?: number;
    };
    url: '/v1/appInfos/{id}/secondarySubcategoryTwo';
};

export type AppInfosSecondarySubcategoryTwoGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppInfosSecondarySubcategoryTwoGetToOneRelatedError = AppInfosSecondarySubcategoryTwoGetToOneRelatedErrors[keyof AppInfosSecondarySubcategoryTwoGetToOneRelatedErrors];

export type AppInfosSecondarySubcategoryTwoGetToOneRelatedResponses = {
    /**
     * Single AppCategory
     */
    200: AppCategoryResponse;
};

export type AppInfosSecondarySubcategoryTwoGetToOneRelatedResponse = AppInfosSecondarySubcategoryTwoGetToOneRelatedResponses[keyof AppInfosSecondarySubcategoryTwoGetToOneRelatedResponses];

export type AppPreviewSetsAppPreviewsGetToManyRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/appPreviewSets/{id}/relationships/appPreviews';
};

export type AppPreviewSetsAppPreviewsGetToManyRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppPreviewSetsAppPreviewsGetToManyRelationshipError = AppPreviewSetsAppPreviewsGetToManyRelationshipErrors[keyof AppPreviewSetsAppPreviewsGetToManyRelationshipErrors];

export type AppPreviewSetsAppPreviewsGetToManyRelationshipResponses = {
    /**
     * List of related linkages
     */
    200: AppPreviewSetAppPreviewsLinkagesResponse;
};

export type AppPreviewSetsAppPreviewsGetToManyRelationshipResponse = AppPreviewSetsAppPreviewsGetToManyRelationshipResponses[keyof AppPreviewSetsAppPreviewsGetToManyRelationshipResponses];

export type AppPreviewSetsAppPreviewsReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: AppPreviewSetAppPreviewsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appPreviewSets/{id}/relationships/appPreviews';
};

export type AppPreviewSetsAppPreviewsReplaceToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppPreviewSetsAppPreviewsReplaceToManyRelationshipError = AppPreviewSetsAppPreviewsReplaceToManyRelationshipErrors[keyof AppPreviewSetsAppPreviewsReplaceToManyRelationshipErrors];

export type AppPreviewSetsAppPreviewsReplaceToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppPreviewSetsAppPreviewsReplaceToManyRelationshipResponse = AppPreviewSetsAppPreviewsReplaceToManyRelationshipResponses[keyof AppPreviewSetsAppPreviewsReplaceToManyRelationshipResponses];

export type AppPreviewSetsAppPreviewsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appPreviews
         */
        'fields[appPreviews]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'previewFrameTimeCode' | 'mimeType' | 'videoUrl' | 'previewFrameImage' | 'previewImage' | 'uploadOperations' | 'assetDeliveryState' | 'videoDeliveryState' | 'appPreviewSet'>;
        /**
         * the fields to include for returned resources of type appPreviewSets
         */
        'fields[appPreviewSets]'?: Array<'previewType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appPreviewSet'>;
    };
    url: '/v1/appPreviewSets/{id}/appPreviews';
};

export type AppPreviewSetsAppPreviewsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppPreviewSetsAppPreviewsGetToManyRelatedError = AppPreviewSetsAppPreviewsGetToManyRelatedErrors[keyof AppPreviewSetsAppPreviewsGetToManyRelatedErrors];

export type AppPreviewSetsAppPreviewsGetToManyRelatedResponses = {
    /**
     * List of AppPreviews
     */
    200: AppPreviewsResponse;
};

export type AppPreviewSetsAppPreviewsGetToManyRelatedResponse = AppPreviewSetsAppPreviewsGetToManyRelatedResponses[keyof AppPreviewSetsAppPreviewsGetToManyRelatedResponses];

export type AppPricePointsV3EqualizationsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<string>;
        /**
         * the fields to include for returned resources of type appPricePoints
         */
        'fields[appPricePoints]'?: Array<'customerPrice' | 'proceeds' | 'app' | 'equalizations' | 'territory'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'territory'>;
    };
    url: '/v3/appPricePoints/{id}/equalizations';
};

export type AppPricePointsV3EqualizationsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppPricePointsV3EqualizationsGetToManyRelatedError = AppPricePointsV3EqualizationsGetToManyRelatedErrors[keyof AppPricePointsV3EqualizationsGetToManyRelatedErrors];

export type AppPricePointsV3EqualizationsGetToManyRelatedResponses = {
    /**
     * List of AppPricePoints
     */
    200: AppPricePointsV3Response;
};

export type AppPricePointsV3EqualizationsGetToManyRelatedResponse = AppPricePointsV3EqualizationsGetToManyRelatedResponses[keyof AppPricePointsV3EqualizationsGetToManyRelatedResponses];

export type AppPriceSchedulesAutomaticPricesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'startDate'
         */
        'filter[startDate]'?: Array<string>;
        /**
         * filter by attribute 'endDate'
         */
        'filter[endDate]'?: Array<string>;
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<string>;
        /**
         * the fields to include for returned resources of type appPrices
         */
        'fields[appPrices]'?: Array<'manual' | 'startDate' | 'endDate' | 'appPricePoint' | 'territory'>;
        /**
         * the fields to include for returned resources of type appPricePoints
         */
        'fields[appPricePoints]'?: Array<'customerPrice' | 'proceeds' | 'app' | 'equalizations' | 'territory'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appPricePoint' | 'territory'>;
    };
    url: '/v1/appPriceSchedules/{id}/automaticPrices';
};

export type AppPriceSchedulesAutomaticPricesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppPriceSchedulesAutomaticPricesGetToManyRelatedError = AppPriceSchedulesAutomaticPricesGetToManyRelatedErrors[keyof AppPriceSchedulesAutomaticPricesGetToManyRelatedErrors];

export type AppPriceSchedulesAutomaticPricesGetToManyRelatedResponses = {
    /**
     * List of AppPrices
     */
    200: AppPricesV2Response;
};

export type AppPriceSchedulesAutomaticPricesGetToManyRelatedResponse = AppPriceSchedulesAutomaticPricesGetToManyRelatedResponses[keyof AppPriceSchedulesAutomaticPricesGetToManyRelatedResponses];

export type AppPriceSchedulesBaseTerritoryGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
    };
    url: '/v1/appPriceSchedules/{id}/baseTerritory';
};

export type AppPriceSchedulesBaseTerritoryGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppPriceSchedulesBaseTerritoryGetToOneRelatedError = AppPriceSchedulesBaseTerritoryGetToOneRelatedErrors[keyof AppPriceSchedulesBaseTerritoryGetToOneRelatedErrors];

export type AppPriceSchedulesBaseTerritoryGetToOneRelatedResponses = {
    /**
     * Single Territory
     */
    200: TerritoryResponse;
};

export type AppPriceSchedulesBaseTerritoryGetToOneRelatedResponse = AppPriceSchedulesBaseTerritoryGetToOneRelatedResponses[keyof AppPriceSchedulesBaseTerritoryGetToOneRelatedResponses];

export type AppPriceSchedulesManualPricesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'startDate'
         */
        'filter[startDate]'?: Array<string>;
        /**
         * filter by attribute 'endDate'
         */
        'filter[endDate]'?: Array<string>;
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<string>;
        /**
         * the fields to include for returned resources of type appPrices
         */
        'fields[appPrices]'?: Array<'manual' | 'startDate' | 'endDate' | 'appPricePoint' | 'territory'>;
        /**
         * the fields to include for returned resources of type appPricePoints
         */
        'fields[appPricePoints]'?: Array<'customerPrice' | 'proceeds' | 'app' | 'equalizations' | 'territory'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appPricePoint' | 'territory'>;
    };
    url: '/v1/appPriceSchedules/{id}/manualPrices';
};

export type AppPriceSchedulesManualPricesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppPriceSchedulesManualPricesGetToManyRelatedError = AppPriceSchedulesManualPricesGetToManyRelatedErrors[keyof AppPriceSchedulesManualPricesGetToManyRelatedErrors];

export type AppPriceSchedulesManualPricesGetToManyRelatedResponses = {
    /**
     * List of AppPrices
     */
    200: AppPricesV2Response;
};

export type AppPriceSchedulesManualPricesGetToManyRelatedResponse = AppPriceSchedulesManualPricesGetToManyRelatedResponses[keyof AppPriceSchedulesManualPricesGetToManyRelatedResponses];

export type AppScreenshotSetsAppScreenshotsGetToManyRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/appScreenshotSets/{id}/relationships/appScreenshots';
};

export type AppScreenshotSetsAppScreenshotsGetToManyRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppScreenshotSetsAppScreenshotsGetToManyRelationshipError = AppScreenshotSetsAppScreenshotsGetToManyRelationshipErrors[keyof AppScreenshotSetsAppScreenshotsGetToManyRelationshipErrors];

export type AppScreenshotSetsAppScreenshotsGetToManyRelationshipResponses = {
    /**
     * List of related linkages
     */
    200: AppScreenshotSetAppScreenshotsLinkagesResponse;
};

export type AppScreenshotSetsAppScreenshotsGetToManyRelationshipResponse = AppScreenshotSetsAppScreenshotsGetToManyRelationshipResponses[keyof AppScreenshotSetsAppScreenshotsGetToManyRelationshipResponses];

export type AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: AppScreenshotSetAppScreenshotsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appScreenshotSets/{id}/relationships/appScreenshots';
};

export type AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipError = AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipErrors[keyof AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipErrors];

export type AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipResponse = AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipResponses[keyof AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipResponses];

export type AppScreenshotSetsAppScreenshotsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appScreenshots
         */
        'fields[appScreenshots]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'appScreenshotSet'>;
        /**
         * the fields to include for returned resources of type appScreenshotSets
         */
        'fields[appScreenshotSets]'?: Array<'screenshotDisplayType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appScreenshotSet'>;
    };
    url: '/v1/appScreenshotSets/{id}/appScreenshots';
};

export type AppScreenshotSetsAppScreenshotsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppScreenshotSetsAppScreenshotsGetToManyRelatedError = AppScreenshotSetsAppScreenshotsGetToManyRelatedErrors[keyof AppScreenshotSetsAppScreenshotsGetToManyRelatedErrors];

export type AppScreenshotSetsAppScreenshotsGetToManyRelatedResponses = {
    /**
     * List of AppScreenshots
     */
    200: AppScreenshotsResponse;
};

export type AppScreenshotSetsAppScreenshotsGetToManyRelatedResponse = AppScreenshotSetsAppScreenshotsGetToManyRelatedResponses[keyof AppScreenshotSetsAppScreenshotsGetToManyRelatedResponses];

export type AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreReviewAttachments
         */
        'fields[appStoreReviewAttachments]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'appStoreReviewDetail'>;
        /**
         * the fields to include for returned resources of type appStoreReviewDetails
         */
        'fields[appStoreReviewDetails]'?: Array<'contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'appStoreVersion' | 'appStoreReviewAttachments'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreReviewDetail'>;
    };
    url: '/v1/appStoreReviewDetails/{id}/appStoreReviewAttachments';
};

export type AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedError = AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedErrors[keyof AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedErrors];

export type AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedResponses = {
    /**
     * List of AppStoreReviewAttachments
     */
    200: AppStoreReviewAttachmentsResponse;
};

export type AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedResponse = AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedResponses[keyof AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedResponses];

export type AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'previewType'
         */
        'filter[previewType]'?: Array<'IPHONE_67' | 'IPHONE_61' | 'IPHONE_65' | 'IPHONE_58' | 'IPHONE_55' | 'IPHONE_47' | 'IPHONE_40' | 'IPHONE_35' | 'IPAD_PRO_3GEN_129' | 'IPAD_PRO_3GEN_11' | 'IPAD_PRO_129' | 'IPAD_105' | 'IPAD_97' | 'DESKTOP' | 'APPLE_TV' | 'APPLE_VISION_PRO'>;
        /**
         * filter by id(s) of related 'appStoreVersionLocalization'
         */
        'filter[appStoreVersionLocalization]'?: Array<string>;
        /**
         * filter by id(s) of related 'appCustomProductPageLocalization'
         */
        'filter[appCustomProductPageLocalization]'?: Array<string>;
        /**
         * the fields to include for returned resources of type appPreviewSets
         */
        'fields[appPreviewSets]'?: Array<'previewType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews'>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<'description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appCustomProductPageLocalizations
         */
        'fields[appCustomProductPageLocalizations]'?: Array<'locale' | 'promotionalText' | 'appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
         */
        'fields[appStoreVersionExperimentTreatmentLocalizations]'?: Array<'locale' | 'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appPreviews
         */
        'fields[appPreviews]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'previewFrameTimeCode' | 'mimeType' | 'videoUrl' | 'previewFrameImage' | 'previewImage' | 'uploadOperations' | 'assetDeliveryState' | 'videoDeliveryState' | 'appPreviewSet'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews'>;
        /**
         * maximum number of related appPreviews returned (when they are included)
         */
        'limit[appPreviews]'?: number;
    };
    url: '/v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appPreviewSets';
};

export type AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedError = AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedErrors[keyof AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedErrors];

export type AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedResponses = {
    /**
     * List of AppPreviewSets
     */
    200: AppPreviewSetsResponse;
};

export type AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedResponse = AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedResponses[keyof AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedResponses];

export type AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'screenshotDisplayType'
         */
        'filter[screenshotDisplayType]'?: Array<'APP_IPHONE_67' | 'APP_IPHONE_61' | 'APP_IPHONE_65' | 'APP_IPHONE_58' | 'APP_IPHONE_55' | 'APP_IPHONE_47' | 'APP_IPHONE_40' | 'APP_IPHONE_35' | 'APP_IPAD_PRO_3GEN_129' | 'APP_IPAD_PRO_3GEN_11' | 'APP_IPAD_PRO_129' | 'APP_IPAD_105' | 'APP_IPAD_97' | 'APP_DESKTOP' | 'APP_WATCH_ULTRA' | 'APP_WATCH_SERIES_10' | 'APP_WATCH_SERIES_7' | 'APP_WATCH_SERIES_4' | 'APP_WATCH_SERIES_3' | 'APP_APPLE_TV' | 'APP_APPLE_VISION_PRO' | 'IMESSAGE_APP_IPHONE_67' | 'IMESSAGE_APP_IPHONE_61' | 'IMESSAGE_APP_IPHONE_65' | 'IMESSAGE_APP_IPHONE_58' | 'IMESSAGE_APP_IPHONE_55' | 'IMESSAGE_APP_IPHONE_47' | 'IMESSAGE_APP_IPHONE_40' | 'IMESSAGE_APP_IPAD_PRO_3GEN_129' | 'IMESSAGE_APP_IPAD_PRO_3GEN_11' | 'IMESSAGE_APP_IPAD_PRO_129' | 'IMESSAGE_APP_IPAD_105' | 'IMESSAGE_APP_IPAD_97'>;
        /**
         * filter by id(s) of related 'appStoreVersionLocalization'
         */
        'filter[appStoreVersionLocalization]'?: Array<string>;
        /**
         * filter by id(s) of related 'appCustomProductPageLocalization'
         */
        'filter[appCustomProductPageLocalization]'?: Array<string>;
        /**
         * the fields to include for returned resources of type appScreenshotSets
         */
        'fields[appScreenshotSets]'?: Array<'screenshotDisplayType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots'>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<'description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appCustomProductPageLocalizations
         */
        'fields[appCustomProductPageLocalizations]'?: Array<'locale' | 'promotionalText' | 'appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
         */
        'fields[appStoreVersionExperimentTreatmentLocalizations]'?: Array<'locale' | 'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appScreenshots
         */
        'fields[appScreenshots]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'appScreenshotSet'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots'>;
        /**
         * maximum number of related appScreenshots returned (when they are included)
         */
        'limit[appScreenshots]'?: number;
    };
    url: '/v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appScreenshotSets';
};

export type AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedError = AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedErrors[keyof AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedErrors];

export type AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedResponses = {
    /**
     * List of AppScreenshotSets
     */
    200: AppScreenshotSetsResponse;
};

export type AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedResponse = AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedResponses[keyof AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedResponses];

export type AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'locale'
         */
        'filter[locale]'?: Array<string>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
         */
        'fields[appStoreVersionExperimentTreatmentLocalizations]'?: Array<'locale' | 'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatments
         */
        'fields[appStoreVersionExperimentTreatments]'?: Array<'name' | 'appIcon' | 'appIconName' | 'promotedDate' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations'>;
        /**
         * the fields to include for returned resources of type appScreenshotSets
         */
        'fields[appScreenshotSets]'?: Array<'screenshotDisplayType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots'>;
        /**
         * the fields to include for returned resources of type appPreviewSets
         */
        'fields[appPreviewSets]'?: Array<'previewType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * maximum number of related appScreenshotSets returned (when they are included)
         */
        'limit[appScreenshotSets]'?: number;
        /**
         * maximum number of related appPreviewSets returned (when they are included)
         */
        'limit[appPreviewSets]'?: number;
    };
    url: '/v1/appStoreVersionExperimentTreatments/{id}/appStoreVersionExperimentTreatmentLocalizations';
};

export type AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedError = AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedErrors[keyof AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedErrors];

export type AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedResponses = {
    /**
     * List of AppStoreVersionExperimentTreatmentLocalizations
     */
    200: AppStoreVersionExperimentTreatmentLocalizationsResponse;
};

export type AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedResponse = AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedResponses[keyof AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedResponses];

export type AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatments
         */
        'fields[appStoreVersionExperimentTreatments]'?: Array<'name' | 'appIcon' | 'appIconName' | 'promotedDate' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<'name' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'appStoreVersion' | 'appStoreVersionExperimentTreatments' | 'platform' | 'app' | 'latestControlVersion' | 'controlVersions'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
         */
        'fields[appStoreVersionExperimentTreatmentLocalizations]'?: Array<'locale' | 'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations'>;
        /**
         * maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included)
         */
        'limit[appStoreVersionExperimentTreatmentLocalizations]'?: number;
    };
    url: '/v2/appStoreVersionExperiments/{id}/appStoreVersionExperimentTreatments';
};

export type AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedError = AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedErrors[keyof AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedErrors];

export type AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedResponses = {
    /**
     * List of AppStoreVersionExperimentTreatments
     */
    200: AppStoreVersionExperimentTreatmentsResponse;
};

export type AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedResponse = AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedResponses[keyof AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedResponses];

export type AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatments
         */
        'fields[appStoreVersionExperimentTreatments]'?: Array<'name' | 'appIcon' | 'appIconName' | 'promotedDate' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<'name' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'appStoreVersion' | 'appStoreVersionExperimentTreatments' | 'platform' | 'app' | 'latestControlVersion' | 'controlVersions'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
         */
        'fields[appStoreVersionExperimentTreatmentLocalizations]'?: Array<'locale' | 'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations'>;
        /**
         * maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included)
         */
        'limit[appStoreVersionExperimentTreatmentLocalizations]'?: number;
    };
    url: '/v1/appStoreVersionExperiments/{id}/appStoreVersionExperimentTreatments';
};

export type AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedError = AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedErrors[keyof AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedErrors];

export type AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedResponses = {
    /**
     * List of AppStoreVersionExperimentTreatments
     */
    200: AppStoreVersionExperimentTreatmentsResponse;
};

export type AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedResponse = AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedResponses[keyof AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedResponses];

export type AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'previewType'
         */
        'filter[previewType]'?: Array<'IPHONE_67' | 'IPHONE_61' | 'IPHONE_65' | 'IPHONE_58' | 'IPHONE_55' | 'IPHONE_47' | 'IPHONE_40' | 'IPHONE_35' | 'IPAD_PRO_3GEN_129' | 'IPAD_PRO_3GEN_11' | 'IPAD_PRO_129' | 'IPAD_105' | 'IPAD_97' | 'DESKTOP' | 'APPLE_TV' | 'APPLE_VISION_PRO'>;
        /**
         * filter by id(s) of related 'appCustomProductPageLocalization'
         */
        'filter[appCustomProductPageLocalization]'?: Array<string>;
        /**
         * filter by id(s) of related 'appStoreVersionExperimentTreatmentLocalization'
         */
        'filter[appStoreVersionExperimentTreatmentLocalization]'?: Array<string>;
        /**
         * the fields to include for returned resources of type appPreviewSets
         */
        'fields[appPreviewSets]'?: Array<'previewType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews'>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<'description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appCustomProductPageLocalizations
         */
        'fields[appCustomProductPageLocalizations]'?: Array<'locale' | 'promotionalText' | 'appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
         */
        'fields[appStoreVersionExperimentTreatmentLocalizations]'?: Array<'locale' | 'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appPreviews
         */
        'fields[appPreviews]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'previewFrameTimeCode' | 'mimeType' | 'videoUrl' | 'previewFrameImage' | 'previewImage' | 'uploadOperations' | 'assetDeliveryState' | 'videoDeliveryState' | 'appPreviewSet'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews'>;
        /**
         * maximum number of related appPreviews returned (when they are included)
         */
        'limit[appPreviews]'?: number;
    };
    url: '/v1/appStoreVersionLocalizations/{id}/appPreviewSets';
};

export type AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedError = AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedErrors[keyof AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedErrors];

export type AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedResponses = {
    /**
     * List of AppPreviewSets
     */
    200: AppPreviewSetsResponse;
};

export type AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedResponse = AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedResponses[keyof AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedResponses];

export type AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'screenshotDisplayType'
         */
        'filter[screenshotDisplayType]'?: Array<'APP_IPHONE_67' | 'APP_IPHONE_61' | 'APP_IPHONE_65' | 'APP_IPHONE_58' | 'APP_IPHONE_55' | 'APP_IPHONE_47' | 'APP_IPHONE_40' | 'APP_IPHONE_35' | 'APP_IPAD_PRO_3GEN_129' | 'APP_IPAD_PRO_3GEN_11' | 'APP_IPAD_PRO_129' | 'APP_IPAD_105' | 'APP_IPAD_97' | 'APP_DESKTOP' | 'APP_WATCH_ULTRA' | 'APP_WATCH_SERIES_10' | 'APP_WATCH_SERIES_7' | 'APP_WATCH_SERIES_4' | 'APP_WATCH_SERIES_3' | 'APP_APPLE_TV' | 'APP_APPLE_VISION_PRO' | 'IMESSAGE_APP_IPHONE_67' | 'IMESSAGE_APP_IPHONE_61' | 'IMESSAGE_APP_IPHONE_65' | 'IMESSAGE_APP_IPHONE_58' | 'IMESSAGE_APP_IPHONE_55' | 'IMESSAGE_APP_IPHONE_47' | 'IMESSAGE_APP_IPHONE_40' | 'IMESSAGE_APP_IPAD_PRO_3GEN_129' | 'IMESSAGE_APP_IPAD_PRO_3GEN_11' | 'IMESSAGE_APP_IPAD_PRO_129' | 'IMESSAGE_APP_IPAD_105' | 'IMESSAGE_APP_IPAD_97'>;
        /**
         * filter by id(s) of related 'appCustomProductPageLocalization'
         */
        'filter[appCustomProductPageLocalization]'?: Array<string>;
        /**
         * filter by id(s) of related 'appStoreVersionExperimentTreatmentLocalization'
         */
        'filter[appStoreVersionExperimentTreatmentLocalization]'?: Array<string>;
        /**
         * the fields to include for returned resources of type appScreenshotSets
         */
        'fields[appScreenshotSets]'?: Array<'screenshotDisplayType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots'>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<'description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appCustomProductPageLocalizations
         */
        'fields[appCustomProductPageLocalizations]'?: Array<'locale' | 'promotionalText' | 'appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
         */
        'fields[appStoreVersionExperimentTreatmentLocalizations]'?: Array<'locale' | 'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appScreenshots
         */
        'fields[appScreenshots]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'appScreenshotSet'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots'>;
        /**
         * maximum number of related appScreenshots returned (when they are included)
         */
        'limit[appScreenshots]'?: number;
    };
    url: '/v1/appStoreVersionLocalizations/{id}/appScreenshotSets';
};

export type AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedError = AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedErrors[keyof AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedErrors];

export type AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedResponses = {
    /**
     * List of AppScreenshotSets
     */
    200: AppScreenshotSetsResponse;
};

export type AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedResponse = AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedResponses[keyof AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedResponses];

export type AppStoreVersionsAgeRatingDeclarationGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ageRatingDeclarations
         */
        'fields[ageRatingDeclarations]'?: Array<'alcoholTobaccoOrDrugUseOrReferences' | 'contests' | 'gamblingAndContests' | 'gambling' | 'gamblingSimulated' | 'kidsAgeBand' | 'lootBox' | 'medicalOrTreatmentInformation' | 'profanityOrCrudeHumor' | 'sexualContentGraphicAndNudity' | 'sexualContentOrNudity' | 'horrorOrFearThemes' | 'matureOrSuggestiveThemes' | 'unrestrictedWebAccess' | 'violenceCartoonOrFantasy' | 'violenceRealisticProlongedGraphicOrSadistic' | 'violenceRealistic' | 'ageRatingOverride' | 'koreaAgeRatingOverride' | 'seventeenPlus'>;
    };
    url: '/v1/appStoreVersions/{id}/ageRatingDeclaration';
};

export type AppStoreVersionsAgeRatingDeclarationGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionsAgeRatingDeclarationGetToOneRelatedError = AppStoreVersionsAgeRatingDeclarationGetToOneRelatedErrors[keyof AppStoreVersionsAgeRatingDeclarationGetToOneRelatedErrors];

export type AppStoreVersionsAgeRatingDeclarationGetToOneRelatedResponses = {
    /**
     * Single AgeRatingDeclaration with get
     */
    200: AgeRatingDeclarationWithoutIncludesResponse;
};

export type AppStoreVersionsAgeRatingDeclarationGetToOneRelatedResponse = AppStoreVersionsAgeRatingDeclarationGetToOneRelatedResponses[keyof AppStoreVersionsAgeRatingDeclarationGetToOneRelatedResponses];

export type AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type alternativeDistributionPackages
         */
        'fields[alternativeDistributionPackages]'?: Array<'versions'>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageVersions
         */
        'fields[alternativeDistributionPackageVersions]'?: Array<'url' | 'urlExpirationDate' | 'version' | 'fileChecksum' | 'state' | 'variants' | 'deltas' | 'alternativeDistributionPackage'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'versions'>;
        /**
         * maximum number of related versions returned (when they are included)
         */
        'limit[versions]'?: number;
    };
    url: '/v1/appStoreVersions/{id}/alternativeDistributionPackage';
};

export type AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedError = AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedErrors[keyof AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedErrors];

export type AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedResponses = {
    /**
     * Single AlternativeDistributionPackage
     */
    200: AlternativeDistributionPackageResponse;
};

export type AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedResponse = AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedResponses[keyof AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedResponses];

export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience';
};

export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipError = AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipErrors[keyof AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipErrors];

export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipResponses = {
    /**
     * Related linkage
     */
    200: AppStoreVersionAppClipDefaultExperienceLinkageResponse;
};

export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipResponse = AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipResponses[keyof AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipResponses];

export type AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipData = {
    /**
     * Related linkage
     */
    body: AppStoreVersionAppClipDefaultExperienceLinkageRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience';
};

export type AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipError = AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipErrors[keyof AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipErrors];

export type AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipResponse = AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipResponses[keyof AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipResponses];

export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<'action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail'>;
        /**
         * the fields to include for returned resources of type appClips
         */
        'fields[appClips]'?: Array<'bundleId' | 'app' | 'appClipDefaultExperiences' | 'appClipAdvancedExperiences'>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperienceLocalizations
         */
        'fields[appClipDefaultExperienceLocalizations]'?: Array<'locale' | 'subtitle' | 'appClipDefaultExperience' | 'appClipHeaderImage'>;
        /**
         * the fields to include for returned resources of type appClipAppStoreReviewDetails
         */
        'fields[appClipAppStoreReviewDetails]'?: Array<'invocationUrls' | 'appClipDefaultExperience'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail'>;
        /**
         * maximum number of related appClipDefaultExperienceLocalizations returned (when they are included)
         */
        'limit[appClipDefaultExperienceLocalizations]'?: number;
    };
    url: '/v1/appStoreVersions/{id}/appClipDefaultExperience';
};

export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedError = AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedErrors[keyof AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedErrors];

export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedResponses = {
    /**
     * Single AppClipDefaultExperience
     */
    200: AppClipDefaultExperienceResponse;
};

export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedResponse = AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedResponses[keyof AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedResponses];

export type AppStoreVersionsAppStoreReviewDetailGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreReviewDetails
         */
        'fields[appStoreReviewDetails]'?: Array<'contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'appStoreVersion' | 'appStoreReviewAttachments'>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type appStoreReviewAttachments
         */
        'fields[appStoreReviewAttachments]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'appStoreReviewDetail'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreVersion' | 'appStoreReviewAttachments'>;
        /**
         * maximum number of related appStoreReviewAttachments returned (when they are included)
         */
        'limit[appStoreReviewAttachments]'?: number;
    };
    url: '/v1/appStoreVersions/{id}/appStoreReviewDetail';
};

export type AppStoreVersionsAppStoreReviewDetailGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionsAppStoreReviewDetailGetToOneRelatedError = AppStoreVersionsAppStoreReviewDetailGetToOneRelatedErrors[keyof AppStoreVersionsAppStoreReviewDetailGetToOneRelatedErrors];

export type AppStoreVersionsAppStoreReviewDetailGetToOneRelatedResponses = {
    /**
     * Single AppStoreReviewDetail
     */
    200: AppStoreReviewDetailResponse;
};

export type AppStoreVersionsAppStoreReviewDetailGetToOneRelatedResponse = AppStoreVersionsAppStoreReviewDetailGetToOneRelatedResponses[keyof AppStoreVersionsAppStoreReviewDetailGetToOneRelatedResponses];

export type AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'state'
         */
        'filter[state]'?: Array<'PREPARE_FOR_SUBMISSION' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'ACCEPTED' | 'APPROVED' | 'REJECTED' | 'COMPLETED' | 'STOPPED'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<'name' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'appStoreVersion' | 'appStoreVersionExperimentTreatments'>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatments
         */
        'fields[appStoreVersionExperimentTreatments]'?: Array<'name' | 'appIcon' | 'appIconName' | 'promotedDate' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreVersion' | 'appStoreVersionExperimentTreatments'>;
        /**
         * maximum number of related appStoreVersionExperimentTreatments returned (when they are included)
         */
        'limit[appStoreVersionExperimentTreatments]'?: number;
    };
    url: '/v1/appStoreVersions/{id}/appStoreVersionExperiments';
};

export type AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedError = AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedErrors[keyof AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedErrors];

export type AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedResponses = {
    /**
     * List of AppStoreVersionExperiments
     */
    200: AppStoreVersionExperimentsResponse;
};

export type AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedResponse = AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedResponses[keyof AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedResponses];

export type AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'state'
         */
        'filter[state]'?: Array<'PREPARE_FOR_SUBMISSION' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'ACCEPTED' | 'APPROVED' | 'REJECTED' | 'COMPLETED' | 'STOPPED'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<'name' | 'platform' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'app' | 'latestControlVersion' | 'controlVersions' | 'appStoreVersionExperimentTreatments'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatments
         */
        'fields[appStoreVersionExperimentTreatments]'?: Array<'name' | 'appIcon' | 'appIconName' | 'promotedDate' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'latestControlVersion' | 'controlVersions' | 'appStoreVersionExperimentTreatments'>;
        /**
         * maximum number of related controlVersions returned (when they are included)
         */
        'limit[controlVersions]'?: number;
        /**
         * maximum number of related appStoreVersionExperimentTreatments returned (when they are included)
         */
        'limit[appStoreVersionExperimentTreatments]'?: number;
    };
    url: '/v1/appStoreVersions/{id}/appStoreVersionExperimentsV2';
};

export type AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedError = AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedErrors[keyof AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedErrors];

export type AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedResponses = {
    /**
     * List of AppStoreVersionExperiments
     */
    200: AppStoreVersionExperimentsV2Response;
};

export type AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedResponse = AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedResponses[keyof AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedResponses];

export type AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'locale'
         */
        'filter[locale]'?: Array<string>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<'description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type appScreenshotSets
         */
        'fields[appScreenshotSets]'?: Array<'screenshotDisplayType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots'>;
        /**
         * the fields to include for returned resources of type appPreviewSets
         */
        'fields[appPreviewSets]'?: Array<'previewType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * maximum number of related appScreenshotSets returned (when they are included)
         */
        'limit[appScreenshotSets]'?: number;
        /**
         * maximum number of related appPreviewSets returned (when they are included)
         */
        'limit[appPreviewSets]'?: number;
    };
    url: '/v1/appStoreVersions/{id}/appStoreVersionLocalizations';
};

export type AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedError = AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedErrors[keyof AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedErrors];

export type AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedResponses = {
    /**
     * List of AppStoreVersionLocalizations
     */
    200: AppStoreVersionLocalizationsResponse;
};

export type AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedResponse = AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedResponses[keyof AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedResponses];

export type AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersionPhasedReleases
         */
        'fields[appStoreVersionPhasedReleases]'?: Array<'phasedReleaseState' | 'startDate' | 'totalPauseDuration' | 'currentDayNumber'>;
    };
    url: '/v1/appStoreVersions/{id}/appStoreVersionPhasedRelease';
};

export type AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedError = AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedErrors[keyof AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedErrors];

export type AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedResponses = {
    /**
     * Single AppStoreVersionPhasedRelease with get
     */
    200: AppStoreVersionPhasedReleaseWithoutIncludesResponse;
};

export type AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedResponse = AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedResponses[keyof AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedResponses];

export type AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersionSubmissions
         */
        'fields[appStoreVersionSubmissions]'?: Array<'appStoreVersion'>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreVersion'>;
    };
    url: '/v1/appStoreVersions/{id}/appStoreVersionSubmission';
};

export type AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedError = AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedErrors[keyof AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedErrors];

export type AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedResponses = {
    /**
     * Single AppStoreVersionSubmission
     */
    200: AppStoreVersionSubmissionResponse;
};

export type AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedResponse = AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedResponses[keyof AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedResponses];

export type AppStoreVersionsBuildGetToOneRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appStoreVersions/{id}/relationships/build';
};

export type AppStoreVersionsBuildGetToOneRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionsBuildGetToOneRelationshipError = AppStoreVersionsBuildGetToOneRelationshipErrors[keyof AppStoreVersionsBuildGetToOneRelationshipErrors];

export type AppStoreVersionsBuildGetToOneRelationshipResponses = {
    /**
     * Related linkage
     */
    200: AppStoreVersionBuildLinkageResponse;
};

export type AppStoreVersionsBuildGetToOneRelationshipResponse = AppStoreVersionsBuildGetToOneRelationshipResponses[keyof AppStoreVersionsBuildGetToOneRelationshipResponses];

export type AppStoreVersionsBuildUpdateToOneRelationshipData = {
    /**
     * Related linkage
     */
    body: AppStoreVersionBuildLinkageRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/appStoreVersions/{id}/relationships/build';
};

export type AppStoreVersionsBuildUpdateToOneRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppStoreVersionsBuildUpdateToOneRelationshipError = AppStoreVersionsBuildUpdateToOneRelationshipErrors[keyof AppStoreVersionsBuildUpdateToOneRelationshipErrors];

export type AppStoreVersionsBuildUpdateToOneRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppStoreVersionsBuildUpdateToOneRelationshipResponse = AppStoreVersionsBuildUpdateToOneRelationshipResponses[keyof AppStoreVersionsBuildUpdateToOneRelationshipResponses];

export type AppStoreVersionsBuildGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
    };
    url: '/v1/appStoreVersions/{id}/build';
};

export type AppStoreVersionsBuildGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionsBuildGetToOneRelatedError = AppStoreVersionsBuildGetToOneRelatedErrors[keyof AppStoreVersionsBuildGetToOneRelatedErrors];

export type AppStoreVersionsBuildGetToOneRelatedResponses = {
    /**
     * Single Build with get
     */
    200: BuildWithoutIncludesResponse;
};

export type AppStoreVersionsBuildGetToOneRelatedResponse = AppStoreVersionsBuildGetToOneRelatedResponses[keyof AppStoreVersionsBuildGetToOneRelatedResponses];

export type AppStoreVersionsCustomerReviewsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'territory'
         */
        'filter[territory]'?: Array<'ABW' | 'AFG' | 'AGO' | 'AIA' | 'ALB' | 'AND' | 'ANT' | 'ARE' | 'ARG' | 'ARM' | 'ASM' | 'ATG' | 'AUS' | 'AUT' | 'AZE' | 'BDI' | 'BEL' | 'BEN' | 'BES' | 'BFA' | 'BGD' | 'BGR' | 'BHR' | 'BHS' | 'BIH' | 'BLR' | 'BLZ' | 'BMU' | 'BOL' | 'BRA' | 'BRB' | 'BRN' | 'BTN' | 'BWA' | 'CAF' | 'CAN' | 'CHE' | 'CHL' | 'CHN' | 'CIV' | 'CMR' | 'COD' | 'COG' | 'COK' | 'COL' | 'COM' | 'CPV' | 'CRI' | 'CUB' | 'CUW' | 'CXR' | 'CYM' | 'CYP' | 'CZE' | 'DEU' | 'DJI' | 'DMA' | 'DNK' | 'DOM' | 'DZA' | 'ECU' | 'EGY' | 'ERI' | 'ESP' | 'EST' | 'ETH' | 'FIN' | 'FJI' | 'FLK' | 'FRA' | 'FRO' | 'FSM' | 'GAB' | 'GBR' | 'GEO' | 'GGY' | 'GHA' | 'GIB' | 'GIN' | 'GLP' | 'GMB' | 'GNB' | 'GNQ' | 'GRC' | 'GRD' | 'GRL' | 'GTM' | 'GUF' | 'GUM' | 'GUY' | 'HKG' | 'HND' | 'HRV' | 'HTI' | 'HUN' | 'IDN' | 'IMN' | 'IND' | 'IRL' | 'IRQ' | 'ISL' | 'ISR' | 'ITA' | 'JAM' | 'JEY' | 'JOR' | 'JPN' | 'KAZ' | 'KEN' | 'KGZ' | 'KHM' | 'KIR' | 'KNA' | 'KOR' | 'KWT' | 'LAO' | 'LBN' | 'LBR' | 'LBY' | 'LCA' | 'LIE' | 'LKA' | 'LSO' | 'LTU' | 'LUX' | 'LVA' | 'MAC' | 'MAR' | 'MCO' | 'MDA' | 'MDG' | 'MDV' | 'MEX' | 'MHL' | 'MKD' | 'MLI' | 'MLT' | 'MMR' | 'MNE' | 'MNG' | 'MNP' | 'MOZ' | 'MRT' | 'MSR' | 'MTQ' | 'MUS' | 'MWI' | 'MYS' | 'MYT' | 'NAM' | 'NCL' | 'NER' | 'NFK' | 'NGA' | 'NIC' | 'NIU' | 'NLD' | 'NOR' | 'NPL' | 'NRU' | 'NZL' | 'OMN' | 'PAK' | 'PAN' | 'PER' | 'PHL' | 'PLW' | 'PNG' | 'POL' | 'PRI' | 'PRT' | 'PRY' | 'PSE' | 'PYF' | 'QAT' | 'REU' | 'ROU' | 'RUS' | 'RWA' | 'SAU' | 'SEN' | 'SGP' | 'SHN' | 'SLB' | 'SLE' | 'SLV' | 'SMR' | 'SOM' | 'SPM' | 'SRB' | 'SSD' | 'STP' | 'SUR' | 'SVK' | 'SVN' | 'SWE' | 'SWZ' | 'SXM' | 'SYC' | 'TCA' | 'TCD' | 'TGO' | 'THA' | 'TJK' | 'TKM' | 'TLS' | 'TON' | 'TTO' | 'TUN' | 'TUR' | 'TUV' | 'TWN' | 'TZA' | 'UGA' | 'UKR' | 'UMI' | 'URY' | 'USA' | 'UZB' | 'VAT' | 'VCT' | 'VEN' | 'VGB' | 'VIR' | 'VNM' | 'VUT' | 'WLF' | 'WSM' | 'YEM' | 'ZAF' | 'ZMB' | 'ZWE'>;
        /**
         * filter by attribute 'rating'
         */
        'filter[rating]'?: Array<string>;
        /**
         * filter by publishedResponse
         */
        'exists[publishedResponse]'?: boolean;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'rating' | '-rating' | 'createdDate' | '-createdDate'>;
        /**
         * the fields to include for returned resources of type customerReviews
         */
        'fields[customerReviews]'?: Array<'rating' | 'title' | 'body' | 'reviewerNickname' | 'createdDate' | 'territory' | 'response'>;
        /**
         * the fields to include for returned resources of type customerReviewResponses
         */
        'fields[customerReviewResponses]'?: Array<'responseBody' | 'lastModifiedDate' | 'state' | 'review'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'response'>;
    };
    url: '/v1/appStoreVersions/{id}/customerReviews';
};

export type AppStoreVersionsCustomerReviewsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionsCustomerReviewsGetToManyRelatedError = AppStoreVersionsCustomerReviewsGetToManyRelatedErrors[keyof AppStoreVersionsCustomerReviewsGetToManyRelatedErrors];

export type AppStoreVersionsCustomerReviewsGetToManyRelatedResponses = {
    /**
     * List of CustomerReviews
     */
    200: CustomerReviewsResponse;
};

export type AppStoreVersionsCustomerReviewsGetToManyRelatedResponse = AppStoreVersionsCustomerReviewsGetToManyRelatedResponses[keyof AppStoreVersionsCustomerReviewsGetToManyRelatedResponses];

export type AppStoreVersionsGameCenterAppVersionGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<'enabled' | 'compatibilityVersions' | 'appStoreVersion'>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'compatibilityVersions' | 'appStoreVersion'>;
        /**
         * maximum number of related compatibilityVersions returned (when they are included)
         */
        'limit[compatibilityVersions]'?: number;
    };
    url: '/v1/appStoreVersions/{id}/gameCenterAppVersion';
};

export type AppStoreVersionsGameCenterAppVersionGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionsGameCenterAppVersionGetToOneRelatedError = AppStoreVersionsGameCenterAppVersionGetToOneRelatedErrors[keyof AppStoreVersionsGameCenterAppVersionGetToOneRelatedErrors];

export type AppStoreVersionsGameCenterAppVersionGetToOneRelatedResponses = {
    /**
     * Single GameCenterAppVersion
     */
    200: GameCenterAppVersionResponse;
};

export type AppStoreVersionsGameCenterAppVersionGetToOneRelatedResponse = AppStoreVersionsGameCenterAppVersionGetToOneRelatedResponses[keyof AppStoreVersionsGameCenterAppVersionGetToOneRelatedResponses];

export type AppStoreVersionsRoutingAppCoverageGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type routingAppCoverages
         */
        'fields[routingAppCoverages]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'appStoreVersion'>;
    };
    url: '/v1/appStoreVersions/{id}/routingAppCoverage';
};

export type AppStoreVersionsRoutingAppCoverageGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppStoreVersionsRoutingAppCoverageGetToOneRelatedError = AppStoreVersionsRoutingAppCoverageGetToOneRelatedErrors[keyof AppStoreVersionsRoutingAppCoverageGetToOneRelatedErrors];

export type AppStoreVersionsRoutingAppCoverageGetToOneRelatedResponses = {
    /**
     * Single RoutingAppCoverage with get
     */
    200: RoutingAppCoverageWithoutIncludesResponse;
};

export type AppStoreVersionsRoutingAppCoverageGetToOneRelatedResponse = AppStoreVersionsRoutingAppCoverageGetToOneRelatedResponses[keyof AppStoreVersionsRoutingAppCoverageGetToOneRelatedResponses];

export type AppsAlternativeDistributionKeyGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type alternativeDistributionKeys
         */
        'fields[alternativeDistributionKeys]'?: Array<'publicKey'>;
    };
    url: '/v1/apps/{id}/alternativeDistributionKey';
};

export type AppsAlternativeDistributionKeyGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsAlternativeDistributionKeyGetToOneRelatedError = AppsAlternativeDistributionKeyGetToOneRelatedErrors[keyof AppsAlternativeDistributionKeyGetToOneRelatedErrors];

export type AppsAlternativeDistributionKeyGetToOneRelatedResponses = {
    /**
     * Single AlternativeDistributionKey
     */
    200: AlternativeDistributionKeyResponse;
};

export type AppsAlternativeDistributionKeyGetToOneRelatedResponse = AppsAlternativeDistributionKeyGetToOneRelatedResponses[keyof AppsAlternativeDistributionKeyGetToOneRelatedResponses];

export type AppsAnalyticsReportRequestsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'accessType'
         */
        'filter[accessType]'?: Array<'ONE_TIME_SNAPSHOT' | 'ONGOING'>;
        /**
         * the fields to include for returned resources of type analyticsReportRequests
         */
        'fields[analyticsReportRequests]'?: Array<'accessType' | 'stoppedDueToInactivity' | 'reports'>;
        /**
         * the fields to include for returned resources of type analyticsReports
         */
        'fields[analyticsReports]'?: Array<'name' | 'category' | 'instances'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'reports'>;
        /**
         * maximum number of related reports returned (when they are included)
         */
        'limit[reports]'?: number;
    };
    url: '/v1/apps/{id}/analyticsReportRequests';
};

export type AppsAnalyticsReportRequestsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsAnalyticsReportRequestsGetToManyRelatedError = AppsAnalyticsReportRequestsGetToManyRelatedErrors[keyof AppsAnalyticsReportRequestsGetToManyRelatedErrors];

export type AppsAnalyticsReportRequestsGetToManyRelatedResponses = {
    /**
     * List of AnalyticsReportRequests
     */
    200: AnalyticsReportRequestsResponse;
};

export type AppsAnalyticsReportRequestsGetToManyRelatedResponse = AppsAnalyticsReportRequestsGetToManyRelatedResponses[keyof AppsAnalyticsReportRequestsGetToManyRelatedResponses];

export type AppsAppAvailabilityV2GetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appAvailabilities
         */
        'fields[appAvailabilities]'?: Array<'availableInNewTerritories' | 'territoryAvailabilities'>;
        /**
         * the fields to include for returned resources of type territoryAvailabilities
         */
        'fields[territoryAvailabilities]'?: Array<'available' | 'releaseDate' | 'preOrderEnabled' | 'preOrderPublishDate' | 'contentStatuses' | 'territory'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'territoryAvailabilities'>;
        /**
         * maximum number of related territoryAvailabilities returned (when they are included)
         */
        'limit[territoryAvailabilities]'?: number;
    };
    url: '/v1/apps/{id}/appAvailabilityV2';
};

export type AppsAppAvailabilityV2GetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsAppAvailabilityV2GetToOneRelatedError = AppsAppAvailabilityV2GetToOneRelatedErrors[keyof AppsAppAvailabilityV2GetToOneRelatedErrors];

export type AppsAppAvailabilityV2GetToOneRelatedResponses = {
    /**
     * Single AppAvailability
     */
    200: AppAvailabilityV2Response;
};

export type AppsAppAvailabilityV2GetToOneRelatedResponse = AppsAppAvailabilityV2GetToOneRelatedResponses[keyof AppsAppAvailabilityV2GetToOneRelatedResponses];

export type AppsAppClipsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'bundleId'
         */
        'filter[bundleId]'?: Array<string>;
        /**
         * the fields to include for returned resources of type appClips
         */
        'fields[appClips]'?: Array<'bundleId' | 'app' | 'appClipDefaultExperiences' | 'appClipAdvancedExperiences'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<'action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'appClipDefaultExperiences'>;
        /**
         * maximum number of related appClipDefaultExperiences returned (when they are included)
         */
        'limit[appClipDefaultExperiences]'?: number;
    };
    url: '/v1/apps/{id}/appClips';
};

export type AppsAppClipsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsAppClipsGetToManyRelatedError = AppsAppClipsGetToManyRelatedErrors[keyof AppsAppClipsGetToManyRelatedErrors];

export type AppsAppClipsGetToManyRelatedResponses = {
    /**
     * List of AppClips
     */
    200: AppClipsResponse;
};

export type AppsAppClipsGetToManyRelatedResponse = AppsAppClipsGetToManyRelatedResponses[keyof AppsAppClipsGetToManyRelatedResponses];

export type AppsAppCustomProductPagesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'visible'
         */
        'filter[visible]'?: Array<string>;
        /**
         * the fields to include for returned resources of type appCustomProductPages
         */
        'fields[appCustomProductPages]'?: Array<'name' | 'url' | 'visible' | 'app' | 'appCustomProductPageVersions'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type appCustomProductPageVersions
         */
        'fields[appCustomProductPageVersions]'?: Array<'version' | 'state' | 'deepLink' | 'appCustomProductPage' | 'appCustomProductPageLocalizations'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'appCustomProductPageVersions'>;
        /**
         * maximum number of related appCustomProductPageVersions returned (when they are included)
         */
        'limit[appCustomProductPageVersions]'?: number;
    };
    url: '/v1/apps/{id}/appCustomProductPages';
};

export type AppsAppCustomProductPagesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsAppCustomProductPagesGetToManyRelatedError = AppsAppCustomProductPagesGetToManyRelatedErrors[keyof AppsAppCustomProductPagesGetToManyRelatedErrors];

export type AppsAppCustomProductPagesGetToManyRelatedResponses = {
    /**
     * List of AppCustomProductPages
     */
    200: AppCustomProductPagesResponse;
};

export type AppsAppCustomProductPagesGetToManyRelatedResponse = AppsAppCustomProductPagesGetToManyRelatedResponses[keyof AppsAppCustomProductPagesGetToManyRelatedResponses];

export type AppsAppEncryptionDeclarationsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'platform'
         * @deprecated
         */
        'filter[platform]'?: Array<'IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS'>;
        /**
         * filter by id(s) of related 'builds'
         */
        'filter[builds]'?: Array<string>;
        /**
         * the fields to include for returned resources of type appEncryptionDeclarations
         */
        'fields[appEncryptionDeclarations]'?: Array<'appDescription' | 'createdDate' | 'usesEncryption' | 'exempt' | 'containsProprietaryCryptography' | 'containsThirdPartyCryptography' | 'availableOnFrenchStore' | 'platform' | 'uploadedDate' | 'documentUrl' | 'documentName' | 'documentType' | 'appEncryptionDeclarationState' | 'codeValue' | 'app' | 'builds' | 'appEncryptionDeclarationDocument'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * the fields to include for returned resources of type appEncryptionDeclarationDocuments
         */
        'fields[appEncryptionDeclarationDocuments]'?: Array<'fileSize' | 'fileName' | 'assetToken' | 'downloadUrl' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'builds' | 'appEncryptionDeclarationDocument'>;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
    };
    url: '/v1/apps/{id}/appEncryptionDeclarations';
};

export type AppsAppEncryptionDeclarationsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsAppEncryptionDeclarationsGetToManyRelatedError = AppsAppEncryptionDeclarationsGetToManyRelatedErrors[keyof AppsAppEncryptionDeclarationsGetToManyRelatedErrors];

export type AppsAppEncryptionDeclarationsGetToManyRelatedResponses = {
    /**
     * List of AppEncryptionDeclarations
     */
    200: AppEncryptionDeclarationsResponse;
};

export type AppsAppEncryptionDeclarationsGetToManyRelatedResponse = AppsAppEncryptionDeclarationsGetToManyRelatedResponses[keyof AppsAppEncryptionDeclarationsGetToManyRelatedResponses];

export type AppsAppEventsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'eventState'
         */
        'filter[eventState]'?: Array<'DRAFT' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'REJECTED' | 'ACCEPTED' | 'APPROVED' | 'PUBLISHED' | 'PAST' | 'ARCHIVED'>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * the fields to include for returned resources of type appEvents
         */
        'fields[appEvents]'?: Array<'referenceName' | 'badge' | 'eventState' | 'deepLink' | 'purchaseRequirement' | 'primaryLocale' | 'priority' | 'purpose' | 'territorySchedules' | 'archivedTerritorySchedules' | 'localizations'>;
        /**
         * the fields to include for returned resources of type appEventLocalizations
         */
        'fields[appEventLocalizations]'?: Array<'locale' | 'name' | 'shortDescription' | 'longDescription' | 'appEvent' | 'appEventScreenshots' | 'appEventVideoClips'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'localizations'>;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
    };
    url: '/v1/apps/{id}/appEvents';
};

export type AppsAppEventsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsAppEventsGetToManyRelatedError = AppsAppEventsGetToManyRelatedErrors[keyof AppsAppEventsGetToManyRelatedErrors];

export type AppsAppEventsGetToManyRelatedResponses = {
    /**
     * List of AppEvents
     */
    200: AppEventsResponse;
};

export type AppsAppEventsGetToManyRelatedResponse = AppsAppEventsGetToManyRelatedResponses[keyof AppsAppEventsGetToManyRelatedResponses];

export type AppsAppInfosGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appInfos
         */
        'fields[appInfos]'?: Array<'appStoreState' | 'state' | 'appStoreAgeRating' | 'australiaAgeRating' | 'brazilAgeRating' | 'brazilAgeRatingV2' | 'franceAgeRating' | 'koreaAgeRating' | 'kidsAgeBand' | 'app' | 'ageRatingDeclaration' | 'appInfoLocalizations' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type ageRatingDeclarations
         */
        'fields[ageRatingDeclarations]'?: Array<'alcoholTobaccoOrDrugUseOrReferences' | 'contests' | 'gamblingAndContests' | 'gambling' | 'gamblingSimulated' | 'kidsAgeBand' | 'lootBox' | 'medicalOrTreatmentInformation' | 'profanityOrCrudeHumor' | 'sexualContentGraphicAndNudity' | 'sexualContentOrNudity' | 'horrorOrFearThemes' | 'matureOrSuggestiveThemes' | 'unrestrictedWebAccess' | 'violenceCartoonOrFantasy' | 'violenceRealisticProlongedGraphicOrSadistic' | 'violenceRealistic' | 'ageRatingOverride' | 'koreaAgeRatingOverride' | 'seventeenPlus'>;
        /**
         * the fields to include for returned resources of type appInfoLocalizations
         */
        'fields[appInfoLocalizations]'?: Array<'locale' | 'name' | 'subtitle' | 'privacyPolicyUrl' | 'privacyChoicesUrl' | 'privacyPolicyText' | 'appInfo'>;
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<'platforms' | 'subcategories' | 'parent'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'ageRatingDeclaration' | 'appInfoLocalizations' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo'>;
        /**
         * maximum number of related appInfoLocalizations returned (when they are included)
         */
        'limit[appInfoLocalizations]'?: number;
    };
    url: '/v1/apps/{id}/appInfos';
};

export type AppsAppInfosGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsAppInfosGetToManyRelatedError = AppsAppInfosGetToManyRelatedErrors[keyof AppsAppInfosGetToManyRelatedErrors];

export type AppsAppInfosGetToManyRelatedResponses = {
    /**
     * List of AppInfos
     */
    200: AppInfosResponse;
};

export type AppsAppInfosGetToManyRelatedResponse = AppsAppInfosGetToManyRelatedResponses[keyof AppsAppInfosGetToManyRelatedResponses];

export type AppsAppPricePointsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<string>;
        /**
         * the fields to include for returned resources of type appPricePoints
         */
        'fields[appPricePoints]'?: Array<'customerPrice' | 'proceeds' | 'app' | 'equalizations' | 'territory'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'territory'>;
    };
    url: '/v1/apps/{id}/appPricePoints';
};

export type AppsAppPricePointsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsAppPricePointsGetToManyRelatedError = AppsAppPricePointsGetToManyRelatedErrors[keyof AppsAppPricePointsGetToManyRelatedErrors];

export type AppsAppPricePointsGetToManyRelatedResponses = {
    /**
     * List of AppPricePoints
     */
    200: AppPricePointsV3Response;
};

export type AppsAppPricePointsGetToManyRelatedResponse = AppsAppPricePointsGetToManyRelatedResponses[keyof AppsAppPricePointsGetToManyRelatedResponses];

export type AppsAppPriceScheduleGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appPriceSchedules
         */
        'fields[appPriceSchedules]'?: Array<'app' | 'baseTerritory' | 'manualPrices' | 'automaticPrices'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * the fields to include for returned resources of type appPrices
         */
        'fields[appPrices]'?: Array<'manual' | 'startDate' | 'endDate' | 'appPricePoint' | 'territory'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'baseTerritory' | 'manualPrices' | 'automaticPrices'>;
        /**
         * maximum number of related manualPrices returned (when they are included)
         */
        'limit[manualPrices]'?: number;
        /**
         * maximum number of related automaticPrices returned (when they are included)
         */
        'limit[automaticPrices]'?: number;
    };
    url: '/v1/apps/{id}/appPriceSchedule';
};

export type AppsAppPriceScheduleGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsAppPriceScheduleGetToOneRelatedError = AppsAppPriceScheduleGetToOneRelatedErrors[keyof AppsAppPriceScheduleGetToOneRelatedErrors];

export type AppsAppPriceScheduleGetToOneRelatedResponses = {
    /**
     * Single AppPriceSchedule
     */
    200: AppPriceScheduleResponse;
};

export type AppsAppPriceScheduleGetToOneRelatedResponse = AppsAppPriceScheduleGetToOneRelatedResponses[keyof AppsAppPriceScheduleGetToOneRelatedResponses];

export type AppsAppStoreVersionExperimentsV2GetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'state'
         */
        'filter[state]'?: Array<'PREPARE_FOR_SUBMISSION' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'ACCEPTED' | 'APPROVED' | 'REJECTED' | 'COMPLETED' | 'STOPPED'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<'name' | 'platform' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'app' | 'latestControlVersion' | 'controlVersions' | 'appStoreVersionExperimentTreatments'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatments
         */
        'fields[appStoreVersionExperimentTreatments]'?: Array<'name' | 'appIcon' | 'appIconName' | 'promotedDate' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'latestControlVersion' | 'controlVersions' | 'appStoreVersionExperimentTreatments'>;
        /**
         * maximum number of related controlVersions returned (when they are included)
         */
        'limit[controlVersions]'?: number;
        /**
         * maximum number of related appStoreVersionExperimentTreatments returned (when they are included)
         */
        'limit[appStoreVersionExperimentTreatments]'?: number;
    };
    url: '/v1/apps/{id}/appStoreVersionExperimentsV2';
};

export type AppsAppStoreVersionExperimentsV2GetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsAppStoreVersionExperimentsV2GetToManyRelatedError = AppsAppStoreVersionExperimentsV2GetToManyRelatedErrors[keyof AppsAppStoreVersionExperimentsV2GetToManyRelatedErrors];

export type AppsAppStoreVersionExperimentsV2GetToManyRelatedResponses = {
    /**
     * List of AppStoreVersionExperiments
     */
    200: AppStoreVersionExperimentsV2Response;
};

export type AppsAppStoreVersionExperimentsV2GetToManyRelatedResponse = AppsAppStoreVersionExperimentsV2GetToManyRelatedResponses[keyof AppsAppStoreVersionExperimentsV2GetToManyRelatedResponses];

export type AppsAppStoreVersionsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'platform'
         */
        'filter[platform]'?: Array<'IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS'>;
        /**
         * filter by attribute 'versionString'
         */
        'filter[versionString]'?: Array<string>;
        /**
         * filter by attribute 'appStoreState'
         * @deprecated
         */
        'filter[appStoreState]'?: Array<'ACCEPTED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'DEVELOPER_REJECTED' | 'IN_REVIEW' | 'INVALID_BINARY' | 'METADATA_REJECTED' | 'PENDING_APPLE_RELEASE' | 'PENDING_CONTRACT' | 'PENDING_DEVELOPER_RELEASE' | 'PREPARE_FOR_SUBMISSION' | 'PREORDER_READY_FOR_SALE' | 'PROCESSING_FOR_APP_STORE' | 'READY_FOR_REVIEW' | 'READY_FOR_SALE' | 'REJECTED' | 'REMOVED_FROM_SALE' | 'WAITING_FOR_EXPORT_COMPLIANCE' | 'WAITING_FOR_REVIEW' | 'REPLACED_WITH_NEW_VERSION' | 'NOT_APPLICABLE'>;
        /**
         * filter by attribute 'appVersionState'
         */
        'filter[appVersionState]'?: Array<'ACCEPTED' | 'DEVELOPER_REJECTED' | 'IN_REVIEW' | 'INVALID_BINARY' | 'METADATA_REJECTED' | 'PENDING_APPLE_RELEASE' | 'PENDING_DEVELOPER_RELEASE' | 'PREPARE_FOR_SUBMISSION' | 'PROCESSING_FOR_DISTRIBUTION' | 'READY_FOR_DISTRIBUTION' | 'READY_FOR_REVIEW' | 'REJECTED' | 'REPLACED_WITH_NEW_VERSION' | 'WAITING_FOR_EXPORT_COMPLIANCE' | 'WAITING_FOR_REVIEW'>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type ageRatingDeclarations
         */
        'fields[ageRatingDeclarations]'?: Array<'alcoholTobaccoOrDrugUseOrReferences' | 'contests' | 'gamblingAndContests' | 'gambling' | 'gamblingSimulated' | 'kidsAgeBand' | 'lootBox' | 'medicalOrTreatmentInformation' | 'profanityOrCrudeHumor' | 'sexualContentGraphicAndNudity' | 'sexualContentOrNudity' | 'horrorOrFearThemes' | 'matureOrSuggestiveThemes' | 'unrestrictedWebAccess' | 'violenceCartoonOrFantasy' | 'violenceRealisticProlongedGraphicOrSadistic' | 'violenceRealistic' | 'ageRatingOverride' | 'koreaAgeRatingOverride' | 'seventeenPlus'>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<'description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * the fields to include for returned resources of type appStoreVersionPhasedReleases
         */
        'fields[appStoreVersionPhasedReleases]'?: Array<'phasedReleaseState' | 'startDate' | 'totalPauseDuration' | 'currentDayNumber'>;
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<'enabled' | 'compatibilityVersions' | 'appStoreVersion'>;
        /**
         * the fields to include for returned resources of type routingAppCoverages
         */
        'fields[routingAppCoverages]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'appStoreVersion'>;
        /**
         * the fields to include for returned resources of type appStoreReviewDetails
         */
        'fields[appStoreReviewDetails]'?: Array<'contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'appStoreVersion' | 'appStoreReviewAttachments'>;
        /**
         * the fields to include for returned resources of type appStoreVersionSubmissions
         */
        'fields[appStoreVersionSubmissions]'?: Array<'appStoreVersion'>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<'action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<'name' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'appStoreVersion' | 'appStoreVersionExperimentTreatments' | 'platform' | 'app' | 'latestControlVersion' | 'controlVersions'>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackages
         */
        'fields[alternativeDistributionPackages]'?: Array<'versions'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionPackage'>;
        /**
         * maximum number of related appStoreVersionLocalizations returned (when they are included)
         */
        'limit[appStoreVersionLocalizations]'?: number;
        /**
         * maximum number of related appStoreVersionExperiments returned (when they are included)
         * @deprecated
         */
        'limit[appStoreVersionExperiments]'?: number;
        /**
         * maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
         */
        'limit[appStoreVersionExperimentsV2]'?: number;
    };
    url: '/v1/apps/{id}/appStoreVersions';
};

export type AppsAppStoreVersionsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsAppStoreVersionsGetToManyRelatedError = AppsAppStoreVersionsGetToManyRelatedErrors[keyof AppsAppStoreVersionsGetToManyRelatedErrors];

export type AppsAppStoreVersionsGetToManyRelatedResponses = {
    /**
     * List of AppStoreVersions
     */
    200: AppStoreVersionsResponse;
};

export type AppsAppStoreVersionsGetToManyRelatedResponse = AppsAppStoreVersionsGetToManyRelatedResponses[keyof AppsAppStoreVersionsGetToManyRelatedResponses];

export type AppsBetaAppLocalizationsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaAppLocalizations
         */
        'fields[betaAppLocalizations]'?: Array<'feedbackEmail' | 'marketingUrl' | 'privacyPolicyUrl' | 'tvOsPrivacyPolicy' | 'description' | 'locale' | 'app'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/apps/{id}/betaAppLocalizations';
};

export type AppsBetaAppLocalizationsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsBetaAppLocalizationsGetToManyRelatedError = AppsBetaAppLocalizationsGetToManyRelatedErrors[keyof AppsBetaAppLocalizationsGetToManyRelatedErrors];

export type AppsBetaAppLocalizationsGetToManyRelatedResponses = {
    /**
     * List of BetaAppLocalizations with get
     */
    200: BetaAppLocalizationsWithoutIncludesResponse;
};

export type AppsBetaAppLocalizationsGetToManyRelatedResponse = AppsBetaAppLocalizationsGetToManyRelatedResponses[keyof AppsBetaAppLocalizationsGetToManyRelatedResponses];

export type AppsBetaAppReviewDetailGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaAppReviewDetails
         */
        'fields[betaAppReviewDetails]'?: Array<'contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'app'>;
    };
    url: '/v1/apps/{id}/betaAppReviewDetail';
};

export type AppsBetaAppReviewDetailGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsBetaAppReviewDetailGetToOneRelatedError = AppsBetaAppReviewDetailGetToOneRelatedErrors[keyof AppsBetaAppReviewDetailGetToOneRelatedErrors];

export type AppsBetaAppReviewDetailGetToOneRelatedResponses = {
    /**
     * Single BetaAppReviewDetail with get
     */
    200: BetaAppReviewDetailWithoutIncludesResponse;
};

export type AppsBetaAppReviewDetailGetToOneRelatedResponse = AppsBetaAppReviewDetailGetToOneRelatedResponses[keyof AppsBetaAppReviewDetailGetToOneRelatedResponses];

export type AppsBetaGroupsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaGroups
         */
        'fields[betaGroups]'?: Array<'name' | 'createdDate' | 'isInternalGroup' | 'hasAccessToAllBuilds' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimitEnabled' | 'publicLinkLimit' | 'publicLink' | 'feedbackEnabled' | 'iosBuildsAvailableForAppleSiliconMac' | 'iosBuildsAvailableForAppleVision' | 'app' | 'builds' | 'betaTesters' | 'betaRecruitmentCriteria' | 'betaRecruitmentCriterionCompatibleBuildCheck'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/apps/{id}/betaGroups';
};

export type AppsBetaGroupsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsBetaGroupsGetToManyRelatedError = AppsBetaGroupsGetToManyRelatedErrors[keyof AppsBetaGroupsGetToManyRelatedErrors];

export type AppsBetaGroupsGetToManyRelatedResponses = {
    /**
     * List of BetaGroups with get
     */
    200: BetaGroupsWithoutIncludesResponse;
};

export type AppsBetaGroupsGetToManyRelatedResponse = AppsBetaGroupsGetToManyRelatedResponses[keyof AppsBetaGroupsGetToManyRelatedResponses];

export type AppsBetaLicenseAgreementGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaLicenseAgreements
         */
        'fields[betaLicenseAgreements]'?: Array<'agreementText' | 'app'>;
    };
    url: '/v1/apps/{id}/betaLicenseAgreement';
};

export type AppsBetaLicenseAgreementGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsBetaLicenseAgreementGetToOneRelatedError = AppsBetaLicenseAgreementGetToOneRelatedErrors[keyof AppsBetaLicenseAgreementGetToOneRelatedErrors];

export type AppsBetaLicenseAgreementGetToOneRelatedResponses = {
    /**
     * Single BetaLicenseAgreement with get
     */
    200: BetaLicenseAgreementWithoutIncludesResponse;
};

export type AppsBetaLicenseAgreementGetToOneRelatedResponse = AppsBetaLicenseAgreementGetToOneRelatedResponses[keyof AppsBetaLicenseAgreementGetToOneRelatedResponses];

export type AppsBetaTestersDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: AppBetaTestersLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/apps/{id}/relationships/betaTesters';
};

export type AppsBetaTestersDeleteToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppsBetaTestersDeleteToManyRelationshipError = AppsBetaTestersDeleteToManyRelationshipErrors[keyof AppsBetaTestersDeleteToManyRelationshipErrors];

export type AppsBetaTestersDeleteToManyRelationshipResponses = {
    /**
     * Accepted for future completion
     */
    202: unknown;
    /**
     * Success (no content)
     */
    204: void;
};

export type AppsBetaTestersDeleteToManyRelationshipResponse = AppsBetaTestersDeleteToManyRelationshipResponses[keyof AppsBetaTestersDeleteToManyRelationshipResponses];

export type AppsBuildsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/apps/{id}/builds';
};

export type AppsBuildsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsBuildsGetToManyRelatedError = AppsBuildsGetToManyRelatedErrors[keyof AppsBuildsGetToManyRelatedErrors];

export type AppsBuildsGetToManyRelatedResponses = {
    /**
     * List of Builds with get
     */
    200: BuildsWithoutIncludesResponse;
};

export type AppsBuildsGetToManyRelatedResponse = AppsBuildsGetToManyRelatedResponses[keyof AppsBuildsGetToManyRelatedResponses];

export type AppsCiProductGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciProducts
         */
        'fields[ciProducts]'?: Array<'name' | 'createdDate' | 'productType' | 'app' | 'bundleId' | 'workflows' | 'primaryRepositories' | 'additionalRepositories' | 'buildRuns'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type bundleIds
         */
        'fields[bundleIds]'?: Array<'name' | 'platform' | 'identifier' | 'seedId' | 'profiles' | 'bundleIdCapabilities' | 'app'>;
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<'lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'bundleId' | 'primaryRepositories'>;
        /**
         * maximum number of related primaryRepositories returned (when they are included)
         */
        'limit[primaryRepositories]'?: number;
    };
    url: '/v1/apps/{id}/ciProduct';
};

export type AppsCiProductGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsCiProductGetToOneRelatedError = AppsCiProductGetToOneRelatedErrors[keyof AppsCiProductGetToOneRelatedErrors];

export type AppsCiProductGetToOneRelatedResponses = {
    /**
     * Single CiProduct
     */
    200: CiProductResponse;
};

export type AppsCiProductGetToOneRelatedResponse = AppsCiProductGetToOneRelatedResponses[keyof AppsCiProductGetToOneRelatedResponses];

export type AppsCustomerReviewsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'territory'
         */
        'filter[territory]'?: Array<'ABW' | 'AFG' | 'AGO' | 'AIA' | 'ALB' | 'AND' | 'ANT' | 'ARE' | 'ARG' | 'ARM' | 'ASM' | 'ATG' | 'AUS' | 'AUT' | 'AZE' | 'BDI' | 'BEL' | 'BEN' | 'BES' | 'BFA' | 'BGD' | 'BGR' | 'BHR' | 'BHS' | 'BIH' | 'BLR' | 'BLZ' | 'BMU' | 'BOL' | 'BRA' | 'BRB' | 'BRN' | 'BTN' | 'BWA' | 'CAF' | 'CAN' | 'CHE' | 'CHL' | 'CHN' | 'CIV' | 'CMR' | 'COD' | 'COG' | 'COK' | 'COL' | 'COM' | 'CPV' | 'CRI' | 'CUB' | 'CUW' | 'CXR' | 'CYM' | 'CYP' | 'CZE' | 'DEU' | 'DJI' | 'DMA' | 'DNK' | 'DOM' | 'DZA' | 'ECU' | 'EGY' | 'ERI' | 'ESP' | 'EST' | 'ETH' | 'FIN' | 'FJI' | 'FLK' | 'FRA' | 'FRO' | 'FSM' | 'GAB' | 'GBR' | 'GEO' | 'GGY' | 'GHA' | 'GIB' | 'GIN' | 'GLP' | 'GMB' | 'GNB' | 'GNQ' | 'GRC' | 'GRD' | 'GRL' | 'GTM' | 'GUF' | 'GUM' | 'GUY' | 'HKG' | 'HND' | 'HRV' | 'HTI' | 'HUN' | 'IDN' | 'IMN' | 'IND' | 'IRL' | 'IRQ' | 'ISL' | 'ISR' | 'ITA' | 'JAM' | 'JEY' | 'JOR' | 'JPN' | 'KAZ' | 'KEN' | 'KGZ' | 'KHM' | 'KIR' | 'KNA' | 'KOR' | 'KWT' | 'LAO' | 'LBN' | 'LBR' | 'LBY' | 'LCA' | 'LIE' | 'LKA' | 'LSO' | 'LTU' | 'LUX' | 'LVA' | 'MAC' | 'MAR' | 'MCO' | 'MDA' | 'MDG' | 'MDV' | 'MEX' | 'MHL' | 'MKD' | 'MLI' | 'MLT' | 'MMR' | 'MNE' | 'MNG' | 'MNP' | 'MOZ' | 'MRT' | 'MSR' | 'MTQ' | 'MUS' | 'MWI' | 'MYS' | 'MYT' | 'NAM' | 'NCL' | 'NER' | 'NFK' | 'NGA' | 'NIC' | 'NIU' | 'NLD' | 'NOR' | 'NPL' | 'NRU' | 'NZL' | 'OMN' | 'PAK' | 'PAN' | 'PER' | 'PHL' | 'PLW' | 'PNG' | 'POL' | 'PRI' | 'PRT' | 'PRY' | 'PSE' | 'PYF' | 'QAT' | 'REU' | 'ROU' | 'RUS' | 'RWA' | 'SAU' | 'SEN' | 'SGP' | 'SHN' | 'SLB' | 'SLE' | 'SLV' | 'SMR' | 'SOM' | 'SPM' | 'SRB' | 'SSD' | 'STP' | 'SUR' | 'SVK' | 'SVN' | 'SWE' | 'SWZ' | 'SXM' | 'SYC' | 'TCA' | 'TCD' | 'TGO' | 'THA' | 'TJK' | 'TKM' | 'TLS' | 'TON' | 'TTO' | 'TUN' | 'TUR' | 'TUV' | 'TWN' | 'TZA' | 'UGA' | 'UKR' | 'UMI' | 'URY' | 'USA' | 'UZB' | 'VAT' | 'VCT' | 'VEN' | 'VGB' | 'VIR' | 'VNM' | 'VUT' | 'WLF' | 'WSM' | 'YEM' | 'ZAF' | 'ZMB' | 'ZWE'>;
        /**
         * filter by attribute 'rating'
         */
        'filter[rating]'?: Array<string>;
        /**
         * filter by publishedResponse
         */
        'exists[publishedResponse]'?: boolean;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'rating' | '-rating' | 'createdDate' | '-createdDate'>;
        /**
         * the fields to include for returned resources of type customerReviews
         */
        'fields[customerReviews]'?: Array<'rating' | 'title' | 'body' | 'reviewerNickname' | 'createdDate' | 'territory' | 'response'>;
        /**
         * the fields to include for returned resources of type customerReviewResponses
         */
        'fields[customerReviewResponses]'?: Array<'responseBody' | 'lastModifiedDate' | 'state' | 'review'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'response'>;
    };
    url: '/v1/apps/{id}/customerReviews';
};

export type AppsCustomerReviewsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsCustomerReviewsGetToManyRelatedError = AppsCustomerReviewsGetToManyRelatedErrors[keyof AppsCustomerReviewsGetToManyRelatedErrors];

export type AppsCustomerReviewsGetToManyRelatedResponses = {
    /**
     * List of CustomerReviews
     */
    200: CustomerReviewsResponse;
};

export type AppsCustomerReviewsGetToManyRelatedResponse = AppsCustomerReviewsGetToManyRelatedResponses[keyof AppsCustomerReviewsGetToManyRelatedResponses];

export type AppsEndUserLicenseAgreementGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type endUserLicenseAgreements
         */
        'fields[endUserLicenseAgreements]'?: Array<'agreementText' | 'app' | 'territories'>;
    };
    url: '/v1/apps/{id}/endUserLicenseAgreement';
};

export type AppsEndUserLicenseAgreementGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsEndUserLicenseAgreementGetToOneRelatedError = AppsEndUserLicenseAgreementGetToOneRelatedErrors[keyof AppsEndUserLicenseAgreementGetToOneRelatedErrors];

export type AppsEndUserLicenseAgreementGetToOneRelatedResponses = {
    /**
     * Single EndUserLicenseAgreement with get
     */
    200: EndUserLicenseAgreementWithoutIncludesResponse;
};

export type AppsEndUserLicenseAgreementGetToOneRelatedResponse = AppsEndUserLicenseAgreementGetToOneRelatedResponses[keyof AppsEndUserLicenseAgreementGetToOneRelatedResponses];

export type AppsGameCenterDetailGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<'enabled' | 'compatibilityVersions' | 'appStoreVersion'>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<'referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<'defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<'referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<'referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementReleases
         */
        'fields[gameCenterAchievementReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterAchievement'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterLeaderboard'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetReleases
         */
        'fields[gameCenterLeaderboardSetReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterLeaderboardSet'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * maximum number of related gameCenterAppVersions returned (when they are included)
         */
        'limit[gameCenterAppVersions]'?: number;
        /**
         * maximum number of related gameCenterLeaderboards returned (when they are included)
         */
        'limit[gameCenterLeaderboards]'?: number;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
        /**
         * maximum number of related gameCenterAchievements returned (when they are included)
         */
        'limit[gameCenterAchievements]'?: number;
        /**
         * maximum number of related achievementReleases returned (when they are included)
         */
        'limit[achievementReleases]'?: number;
        /**
         * maximum number of related leaderboardReleases returned (when they are included)
         */
        'limit[leaderboardReleases]'?: number;
        /**
         * maximum number of related leaderboardSetReleases returned (when they are included)
         */
        'limit[leaderboardSetReleases]'?: number;
    };
    url: '/v1/apps/{id}/gameCenterDetail';
};

export type AppsGameCenterDetailGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsGameCenterDetailGetToOneRelatedError = AppsGameCenterDetailGetToOneRelatedErrors[keyof AppsGameCenterDetailGetToOneRelatedErrors];

export type AppsGameCenterDetailGetToOneRelatedResponses = {
    /**
     * Single GameCenterDetail
     */
    200: GameCenterDetailResponse;
};

export type AppsGameCenterDetailGetToOneRelatedResponse = AppsGameCenterDetailGetToOneRelatedResponses[keyof AppsGameCenterDetailGetToOneRelatedResponses];

export type AppsGameCenterEnabledVersionsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'platform'
         */
        'filter[platform]'?: Array<'IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS'>;
        /**
         * filter by attribute 'versionString'
         */
        'filter[versionString]'?: Array<string>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'versionString' | '-versionString'>;
        /**
         * the fields to include for returned resources of type gameCenterEnabledVersions
         */
        'fields[gameCenterEnabledVersions]'?: Array<'platform' | 'versionString' | 'iconAsset' | 'compatibleVersions' | 'app'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'compatibleVersions' | 'app'>;
        /**
         * maximum number of related compatibleVersions returned (when they are included)
         * @deprecated
         */
        'limit[compatibleVersions]'?: number;
    };
    url: '/v1/apps/{id}/gameCenterEnabledVersions';
};

export type AppsGameCenterEnabledVersionsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsGameCenterEnabledVersionsGetToManyRelatedError = AppsGameCenterEnabledVersionsGetToManyRelatedErrors[keyof AppsGameCenterEnabledVersionsGetToManyRelatedErrors];

export type AppsGameCenterEnabledVersionsGetToManyRelatedResponses = {
    /**
     * List of GameCenterEnabledVersions
     */
    200: GameCenterEnabledVersionsResponse;
};

export type AppsGameCenterEnabledVersionsGetToManyRelatedResponse = AppsGameCenterEnabledVersionsGetToManyRelatedResponses[keyof AppsGameCenterEnabledVersionsGetToManyRelatedResponses];

export type AppsInAppPurchasesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'inAppPurchaseType'
         */
        'filter[inAppPurchaseType]'?: Array<'AUTOMATICALLY_RENEWABLE_SUBSCRIPTION' | 'NON_CONSUMABLE' | 'CONSUMABLE' | 'NON_RENEWING_SUBSCRIPTION' | 'FREE_SUBSCRIPTION'>;
        /**
         * filter by canBeSubmitted
         */
        'filter[canBeSubmitted]'?: Array<string>;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'referenceName' | '-referenceName' | 'productId' | '-productId' | 'inAppPurchaseType' | '-inAppPurchaseType'>;
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<'referenceName' | 'productId' | 'inAppPurchaseType' | 'state' | 'apps'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'apps'>;
        /**
         * maximum number of related apps returned (when they are included)
         */
        'limit[apps]'?: number;
    };
    url: '/v1/apps/{id}/inAppPurchases';
};

export type AppsInAppPurchasesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsInAppPurchasesGetToManyRelatedError = AppsInAppPurchasesGetToManyRelatedErrors[keyof AppsInAppPurchasesGetToManyRelatedErrors];

export type AppsInAppPurchasesGetToManyRelatedResponses = {
    /**
     * List of InAppPurchases
     */
    200: InAppPurchasesResponse;
};

export type AppsInAppPurchasesGetToManyRelatedResponse = AppsInAppPurchasesGetToManyRelatedResponses[keyof AppsInAppPurchasesGetToManyRelatedResponses];

export type AppsInAppPurchasesV2GetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'productId'
         */
        'filter[productId]'?: Array<string>;
        /**
         * filter by attribute 'name'
         */
        'filter[name]'?: Array<string>;
        /**
         * filter by attribute 'state'
         */
        'filter[state]'?: Array<'MISSING_METADATA' | 'WAITING_FOR_UPLOAD' | 'PROCESSING_CONTENT' | 'READY_TO_SUBMIT' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'DEVELOPER_ACTION_NEEDED' | 'PENDING_BINARY_APPROVAL' | 'APPROVED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'REMOVED_FROM_SALE' | 'REJECTED'>;
        /**
         * filter by attribute 'inAppPurchaseType'
         */
        'filter[inAppPurchaseType]'?: Array<'CONSUMABLE' | 'NON_CONSUMABLE' | 'NON_RENEWING_SUBSCRIPTION'>;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'name' | '-name' | 'inAppPurchaseType' | '-inAppPurchaseType'>;
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<'name' | 'productId' | 'inAppPurchaseType' | 'state' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images'>;
        /**
         * the fields to include for returned resources of type inAppPurchaseLocalizations
         */
        'fields[inAppPurchaseLocalizations]'?: Array<'name' | 'locale' | 'description' | 'state' | 'inAppPurchaseV2'>;
        /**
         * the fields to include for returned resources of type inAppPurchaseContents
         */
        'fields[inAppPurchaseContents]'?: Array<'fileName' | 'fileSize' | 'url' | 'lastModifiedDate' | 'inAppPurchaseV2'>;
        /**
         * the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots
         */
        'fields[inAppPurchaseAppStoreReviewScreenshots]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'inAppPurchaseV2'>;
        /**
         * the fields to include for returned resources of type promotedPurchases
         */
        'fields[promotedPurchases]'?: Array<'visibleForAllUsers' | 'enabled' | 'state' | 'inAppPurchaseV2' | 'subscription'>;
        /**
         * the fields to include for returned resources of type inAppPurchasePriceSchedules
         */
        'fields[inAppPurchasePriceSchedules]'?: Array<'baseTerritory' | 'manualPrices' | 'automaticPrices'>;
        /**
         * the fields to include for returned resources of type inAppPurchaseAvailabilities
         */
        'fields[inAppPurchaseAvailabilities]'?: Array<'availableInNewTerritories' | 'availableTerritories'>;
        /**
         * the fields to include for returned resources of type inAppPurchaseImages
         */
        'fields[inAppPurchaseImages]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'assetToken' | 'imageAsset' | 'uploadOperations' | 'state' | 'inAppPurchase'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'inAppPurchaseLocalizations' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images'>;
        /**
         * maximum number of related inAppPurchaseLocalizations returned (when they are included)
         */
        'limit[inAppPurchaseLocalizations]'?: number;
        /**
         * maximum number of related images returned (when they are included)
         */
        'limit[images]'?: number;
    };
    url: '/v1/apps/{id}/inAppPurchasesV2';
};

export type AppsInAppPurchasesV2GetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsInAppPurchasesV2GetToManyRelatedError = AppsInAppPurchasesV2GetToManyRelatedErrors[keyof AppsInAppPurchasesV2GetToManyRelatedErrors];

export type AppsInAppPurchasesV2GetToManyRelatedResponses = {
    /**
     * List of InAppPurchases
     */
    200: InAppPurchasesV2Response;
};

export type AppsInAppPurchasesV2GetToManyRelatedResponse = AppsInAppPurchasesV2GetToManyRelatedResponses[keyof AppsInAppPurchasesV2GetToManyRelatedResponses];

export type AppsMarketplaceSearchDetailGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type marketplaceSearchDetails
         */
        'fields[marketplaceSearchDetails]'?: Array<'catalogUrl'>;
    };
    url: '/v1/apps/{id}/marketplaceSearchDetail';
};

export type AppsMarketplaceSearchDetailGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsMarketplaceSearchDetailGetToOneRelatedError = AppsMarketplaceSearchDetailGetToOneRelatedErrors[keyof AppsMarketplaceSearchDetailGetToOneRelatedErrors];

export type AppsMarketplaceSearchDetailGetToOneRelatedResponses = {
    /**
     * Single MarketplaceSearchDetail
     */
    200: MarketplaceSearchDetailResponse;
};

export type AppsMarketplaceSearchDetailGetToOneRelatedResponse = AppsMarketplaceSearchDetailGetToOneRelatedResponses[keyof AppsMarketplaceSearchDetailGetToOneRelatedResponses];

export type AppsPerfPowerMetricsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'platform'
         */
        'filter[platform]'?: Array<'IOS'>;
        /**
         * filter by attribute 'metricType'
         */
        'filter[metricType]'?: Array<'DISK' | 'HANG' | 'BATTERY' | 'LAUNCH' | 'MEMORY' | 'ANIMATION' | 'TERMINATION'>;
        /**
         * filter by attribute 'deviceType'
         */
        'filter[deviceType]'?: Array<string>;
    };
    url: '/v1/apps/{id}/perfPowerMetrics';
};

export type AppsPerfPowerMetricsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsPerfPowerMetricsGetToManyRelatedError = AppsPerfPowerMetricsGetToManyRelatedErrors[keyof AppsPerfPowerMetricsGetToManyRelatedErrors];

export type AppsPerfPowerMetricsGetToManyRelatedResponses = {
    /**
     * List of PerfPowerMetrics
     */
    200: XcodeMetrics;
};

export type AppsPerfPowerMetricsGetToManyRelatedResponse = AppsPerfPowerMetricsGetToManyRelatedResponses[keyof AppsPerfPowerMetricsGetToManyRelatedResponses];

export type AppsPreReleaseVersionsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type preReleaseVersions
         */
        'fields[preReleaseVersions]'?: Array<'version' | 'platform' | 'builds' | 'app'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/apps/{id}/preReleaseVersions';
};

export type AppsPreReleaseVersionsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsPreReleaseVersionsGetToManyRelatedError = AppsPreReleaseVersionsGetToManyRelatedErrors[keyof AppsPreReleaseVersionsGetToManyRelatedErrors];

export type AppsPreReleaseVersionsGetToManyRelatedResponses = {
    /**
     * List of PreReleaseVersions with get
     */
    200: PreReleaseVersionsWithoutIncludesResponse;
};

export type AppsPreReleaseVersionsGetToManyRelatedResponse = AppsPreReleaseVersionsGetToManyRelatedResponses[keyof AppsPreReleaseVersionsGetToManyRelatedResponses];

export type AppsPromotedPurchasesGetToManyRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/apps/{id}/relationships/promotedPurchases';
};

export type AppsPromotedPurchasesGetToManyRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsPromotedPurchasesGetToManyRelationshipError = AppsPromotedPurchasesGetToManyRelationshipErrors[keyof AppsPromotedPurchasesGetToManyRelationshipErrors];

export type AppsPromotedPurchasesGetToManyRelationshipResponses = {
    /**
     * List of related linkages
     */
    200: AppPromotedPurchasesLinkagesResponse;
};

export type AppsPromotedPurchasesGetToManyRelationshipResponse = AppsPromotedPurchasesGetToManyRelationshipResponses[keyof AppsPromotedPurchasesGetToManyRelationshipResponses];

export type AppsPromotedPurchasesReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: AppPromotedPurchasesLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/apps/{id}/relationships/promotedPurchases';
};

export type AppsPromotedPurchasesReplaceToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type AppsPromotedPurchasesReplaceToManyRelationshipError = AppsPromotedPurchasesReplaceToManyRelationshipErrors[keyof AppsPromotedPurchasesReplaceToManyRelationshipErrors];

export type AppsPromotedPurchasesReplaceToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type AppsPromotedPurchasesReplaceToManyRelationshipResponse = AppsPromotedPurchasesReplaceToManyRelationshipResponses[keyof AppsPromotedPurchasesReplaceToManyRelationshipResponses];

export type AppsPromotedPurchasesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type promotedPurchases
         */
        'fields[promotedPurchases]'?: Array<'visibleForAllUsers' | 'enabled' | 'state' | 'inAppPurchaseV2' | 'subscription'>;
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<'name' | 'productId' | 'inAppPurchaseType' | 'state' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images'>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<'name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'inAppPurchaseV2' | 'subscription'>;
    };
    url: '/v1/apps/{id}/promotedPurchases';
};

export type AppsPromotedPurchasesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsPromotedPurchasesGetToManyRelatedError = AppsPromotedPurchasesGetToManyRelatedErrors[keyof AppsPromotedPurchasesGetToManyRelatedErrors];

export type AppsPromotedPurchasesGetToManyRelatedResponses = {
    /**
     * List of PromotedPurchases
     */
    200: PromotedPurchasesResponse;
};

export type AppsPromotedPurchasesGetToManyRelatedResponse = AppsPromotedPurchasesGetToManyRelatedResponses[keyof AppsPromotedPurchasesGetToManyRelatedResponses];

export type AppsReviewSubmissionsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'platform'
         */
        'filter[platform]'?: Array<'IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS'>;
        /**
         * filter by attribute 'state'
         */
        'filter[state]'?: Array<'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'UNRESOLVED_ISSUES' | 'CANCELING' | 'COMPLETING' | 'COMPLETE'>;
        /**
         * the fields to include for returned resources of type reviewSubmissions
         */
        'fields[reviewSubmissions]'?: Array<'platform' | 'submittedDate' | 'state' | 'app' | 'items' | 'appStoreVersionForReview' | 'submittedByActor' | 'lastUpdatedByActor'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type reviewSubmissionItems
         */
        'fields[reviewSubmissionItems]'?: Array<'state' | 'appStoreVersion' | 'appCustomProductPageVersion' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appEvent'>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type actors
         */
        'fields[actors]'?: Array<'actorType' | 'userFirstName' | 'userLastName' | 'userEmail' | 'apiKeyId'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'items' | 'appStoreVersionForReview' | 'submittedByActor' | 'lastUpdatedByActor'>;
        /**
         * maximum number of related items returned (when they are included)
         */
        'limit[items]'?: number;
    };
    url: '/v1/apps/{id}/reviewSubmissions';
};

export type AppsReviewSubmissionsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsReviewSubmissionsGetToManyRelatedError = AppsReviewSubmissionsGetToManyRelatedErrors[keyof AppsReviewSubmissionsGetToManyRelatedErrors];

export type AppsReviewSubmissionsGetToManyRelatedResponses = {
    /**
     * List of ReviewSubmissions
     */
    200: ReviewSubmissionsResponse;
};

export type AppsReviewSubmissionsGetToManyRelatedResponse = AppsReviewSubmissionsGetToManyRelatedResponses[keyof AppsReviewSubmissionsGetToManyRelatedResponses];

export type AppsSubscriptionGracePeriodGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionGracePeriods
         */
        'fields[subscriptionGracePeriods]'?: Array<'optIn' | 'sandboxOptIn' | 'duration' | 'renewalType'>;
    };
    url: '/v1/apps/{id}/subscriptionGracePeriod';
};

export type AppsSubscriptionGracePeriodGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsSubscriptionGracePeriodGetToOneRelatedError = AppsSubscriptionGracePeriodGetToOneRelatedErrors[keyof AppsSubscriptionGracePeriodGetToOneRelatedErrors];

export type AppsSubscriptionGracePeriodGetToOneRelatedResponses = {
    /**
     * Single SubscriptionGracePeriod
     */
    200: SubscriptionGracePeriodResponse;
};

export type AppsSubscriptionGracePeriodGetToOneRelatedResponse = AppsSubscriptionGracePeriodGetToOneRelatedResponses[keyof AppsSubscriptionGracePeriodGetToOneRelatedResponses];

export type AppsSubscriptionGroupsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'referenceName'
         */
        'filter[referenceName]'?: Array<string>;
        /**
         * filter by attribute 'subscriptions.state'
         */
        'filter[subscriptions.state]'?: Array<'MISSING_METADATA' | 'READY_TO_SUBMIT' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'DEVELOPER_ACTION_NEEDED' | 'PENDING_BINARY_APPROVAL' | 'APPROVED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'REMOVED_FROM_SALE' | 'REJECTED'>;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'referenceName' | '-referenceName'>;
        /**
         * the fields to include for returned resources of type subscriptionGroups
         */
        'fields[subscriptionGroups]'?: Array<'referenceName' | 'subscriptions' | 'subscriptionGroupLocalizations'>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<'name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images'>;
        /**
         * the fields to include for returned resources of type subscriptionGroupLocalizations
         */
        'fields[subscriptionGroupLocalizations]'?: Array<'name' | 'customAppName' | 'locale' | 'state' | 'subscriptionGroup'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subscriptions' | 'subscriptionGroupLocalizations'>;
        /**
         * maximum number of related subscriptions returned (when they are included)
         */
        'limit[subscriptions]'?: number;
        /**
         * maximum number of related subscriptionGroupLocalizations returned (when they are included)
         */
        'limit[subscriptionGroupLocalizations]'?: number;
    };
    url: '/v1/apps/{id}/subscriptionGroups';
};

export type AppsSubscriptionGroupsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsSubscriptionGroupsGetToManyRelatedError = AppsSubscriptionGroupsGetToManyRelatedErrors[keyof AppsSubscriptionGroupsGetToManyRelatedErrors];

export type AppsSubscriptionGroupsGetToManyRelatedResponses = {
    /**
     * List of SubscriptionGroups
     */
    200: SubscriptionGroupsResponse;
};

export type AppsSubscriptionGroupsGetToManyRelatedResponse = AppsSubscriptionGroupsGetToManyRelatedResponses[keyof AppsSubscriptionGroupsGetToManyRelatedResponses];

export type BetaAppLocalizationsAppGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
    };
    url: '/v1/betaAppLocalizations/{id}/app';
};

export type BetaAppLocalizationsAppGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaAppLocalizationsAppGetToOneRelatedError = BetaAppLocalizationsAppGetToOneRelatedErrors[keyof BetaAppLocalizationsAppGetToOneRelatedErrors];

export type BetaAppLocalizationsAppGetToOneRelatedResponses = {
    /**
     * Single App with get
     */
    200: AppWithoutIncludesResponse;
};

export type BetaAppLocalizationsAppGetToOneRelatedResponse = BetaAppLocalizationsAppGetToOneRelatedResponses[keyof BetaAppLocalizationsAppGetToOneRelatedResponses];

export type BetaAppReviewDetailsAppGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
    };
    url: '/v1/betaAppReviewDetails/{id}/app';
};

export type BetaAppReviewDetailsAppGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaAppReviewDetailsAppGetToOneRelatedError = BetaAppReviewDetailsAppGetToOneRelatedErrors[keyof BetaAppReviewDetailsAppGetToOneRelatedErrors];

export type BetaAppReviewDetailsAppGetToOneRelatedResponses = {
    /**
     * Single App with get
     */
    200: AppWithoutIncludesResponse;
};

export type BetaAppReviewDetailsAppGetToOneRelatedResponse = BetaAppReviewDetailsAppGetToOneRelatedResponses[keyof BetaAppReviewDetailsAppGetToOneRelatedResponses];

export type BetaAppReviewSubmissionsBuildGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
    };
    url: '/v1/betaAppReviewSubmissions/{id}/build';
};

export type BetaAppReviewSubmissionsBuildGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaAppReviewSubmissionsBuildGetToOneRelatedError = BetaAppReviewSubmissionsBuildGetToOneRelatedErrors[keyof BetaAppReviewSubmissionsBuildGetToOneRelatedErrors];

export type BetaAppReviewSubmissionsBuildGetToOneRelatedResponses = {
    /**
     * Single Build with get
     */
    200: BuildWithoutIncludesResponse;
};

export type BetaAppReviewSubmissionsBuildGetToOneRelatedResponse = BetaAppReviewSubmissionsBuildGetToOneRelatedResponses[keyof BetaAppReviewSubmissionsBuildGetToOneRelatedResponses];

export type BetaBuildLocalizationsBuildGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
    };
    url: '/v1/betaBuildLocalizations/{id}/build';
};

export type BetaBuildLocalizationsBuildGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaBuildLocalizationsBuildGetToOneRelatedError = BetaBuildLocalizationsBuildGetToOneRelatedErrors[keyof BetaBuildLocalizationsBuildGetToOneRelatedErrors];

export type BetaBuildLocalizationsBuildGetToOneRelatedResponses = {
    /**
     * Single Build with get
     */
    200: BuildWithoutIncludesResponse;
};

export type BetaBuildLocalizationsBuildGetToOneRelatedResponse = BetaBuildLocalizationsBuildGetToOneRelatedResponses[keyof BetaBuildLocalizationsBuildGetToOneRelatedResponses];

export type BetaGroupsAppGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
    };
    url: '/v1/betaGroups/{id}/app';
};

export type BetaGroupsAppGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaGroupsAppGetToOneRelatedError = BetaGroupsAppGetToOneRelatedErrors[keyof BetaGroupsAppGetToOneRelatedErrors];

export type BetaGroupsAppGetToOneRelatedResponses = {
    /**
     * Single App with get
     */
    200: AppWithoutIncludesResponse;
};

export type BetaGroupsAppGetToOneRelatedResponse = BetaGroupsAppGetToOneRelatedResponses[keyof BetaGroupsAppGetToOneRelatedResponses];

export type BetaGroupsBetaRecruitmentCriteriaGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaRecruitmentCriteria
         */
        'fields[betaRecruitmentCriteria]'?: Array<'lastModifiedDate' | 'deviceFamilyOsVersionFilters'>;
    };
    url: '/v1/betaGroups/{id}/betaRecruitmentCriteria';
};

export type BetaGroupsBetaRecruitmentCriteriaGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaGroupsBetaRecruitmentCriteriaGetToOneRelatedError = BetaGroupsBetaRecruitmentCriteriaGetToOneRelatedErrors[keyof BetaGroupsBetaRecruitmentCriteriaGetToOneRelatedErrors];

export type BetaGroupsBetaRecruitmentCriteriaGetToOneRelatedResponses = {
    /**
     * Single BetaRecruitmentCriterion
     */
    200: BetaRecruitmentCriterionResponse;
};

export type BetaGroupsBetaRecruitmentCriteriaGetToOneRelatedResponse = BetaGroupsBetaRecruitmentCriteriaGetToOneRelatedResponses[keyof BetaGroupsBetaRecruitmentCriteriaGetToOneRelatedResponses];

export type BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaRecruitmentCriterionCompatibleBuildChecks
         */
        'fields[betaRecruitmentCriterionCompatibleBuildChecks]'?: Array<'hasCompatibleBuild'>;
    };
    url: '/v1/betaGroups/{id}/betaRecruitmentCriterionCompatibleBuildCheck';
};

export type BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelatedError = BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelatedErrors[keyof BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelatedErrors];

export type BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelatedResponses = {
    /**
     * Single BetaRecruitmentCriterionCompatibleBuildCheck
     */
    200: BetaRecruitmentCriterionCompatibleBuildCheckResponse;
};

export type BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelatedResponse = BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelatedResponses[keyof BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelatedResponses];

export type BetaGroupsBetaTestersDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BetaGroupBetaTestersLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaGroups/{id}/relationships/betaTesters';
};

export type BetaGroupsBetaTestersDeleteToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaGroupsBetaTestersDeleteToManyRelationshipError = BetaGroupsBetaTestersDeleteToManyRelationshipErrors[keyof BetaGroupsBetaTestersDeleteToManyRelationshipErrors];

export type BetaGroupsBetaTestersDeleteToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type BetaGroupsBetaTestersDeleteToManyRelationshipResponse = BetaGroupsBetaTestersDeleteToManyRelationshipResponses[keyof BetaGroupsBetaTestersDeleteToManyRelationshipResponses];

export type BetaGroupsBetaTestersGetToManyRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/betaGroups/{id}/relationships/betaTesters';
};

export type BetaGroupsBetaTestersGetToManyRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaGroupsBetaTestersGetToManyRelationshipError = BetaGroupsBetaTestersGetToManyRelationshipErrors[keyof BetaGroupsBetaTestersGetToManyRelationshipErrors];

export type BetaGroupsBetaTestersGetToManyRelationshipResponses = {
    /**
     * List of related linkages
     */
    200: BetaGroupBetaTestersLinkagesResponse;
};

export type BetaGroupsBetaTestersGetToManyRelationshipResponse = BetaGroupsBetaTestersGetToManyRelationshipResponses[keyof BetaGroupsBetaTestersGetToManyRelationshipResponses];

export type BetaGroupsBetaTestersCreateToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BetaGroupBetaTestersLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaGroups/{id}/relationships/betaTesters';
};

export type BetaGroupsBetaTestersCreateToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaGroupsBetaTestersCreateToManyRelationshipError = BetaGroupsBetaTestersCreateToManyRelationshipErrors[keyof BetaGroupsBetaTestersCreateToManyRelationshipErrors];

export type BetaGroupsBetaTestersCreateToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type BetaGroupsBetaTestersCreateToManyRelationshipResponse = BetaGroupsBetaTestersCreateToManyRelationshipResponses[keyof BetaGroupsBetaTestersCreateToManyRelationshipResponses];

export type BetaGroupsBetaTestersGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaTesters
         */
        'fields[betaTesters]'?: Array<'firstName' | 'lastName' | 'email' | 'inviteType' | 'state' | 'apps' | 'betaGroups' | 'builds'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/betaGroups/{id}/betaTesters';
};

export type BetaGroupsBetaTestersGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaGroupsBetaTestersGetToManyRelatedError = BetaGroupsBetaTestersGetToManyRelatedErrors[keyof BetaGroupsBetaTestersGetToManyRelatedErrors];

export type BetaGroupsBetaTestersGetToManyRelatedResponses = {
    /**
     * List of BetaTesters with get
     */
    200: BetaTestersWithoutIncludesResponse;
};

export type BetaGroupsBetaTestersGetToManyRelatedResponse = BetaGroupsBetaTestersGetToManyRelatedResponses[keyof BetaGroupsBetaTestersGetToManyRelatedResponses];

export type BetaGroupsBuildsDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BetaGroupBuildsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaGroups/{id}/relationships/builds';
};

export type BetaGroupsBuildsDeleteToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaGroupsBuildsDeleteToManyRelationshipError = BetaGroupsBuildsDeleteToManyRelationshipErrors[keyof BetaGroupsBuildsDeleteToManyRelationshipErrors];

export type BetaGroupsBuildsDeleteToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type BetaGroupsBuildsDeleteToManyRelationshipResponse = BetaGroupsBuildsDeleteToManyRelationshipResponses[keyof BetaGroupsBuildsDeleteToManyRelationshipResponses];

export type BetaGroupsBuildsGetToManyRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/betaGroups/{id}/relationships/builds';
};

export type BetaGroupsBuildsGetToManyRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaGroupsBuildsGetToManyRelationshipError = BetaGroupsBuildsGetToManyRelationshipErrors[keyof BetaGroupsBuildsGetToManyRelationshipErrors];

export type BetaGroupsBuildsGetToManyRelationshipResponses = {
    /**
     * List of related linkages
     */
    200: BetaGroupBuildsLinkagesResponse;
};

export type BetaGroupsBuildsGetToManyRelationshipResponse = BetaGroupsBuildsGetToManyRelationshipResponses[keyof BetaGroupsBuildsGetToManyRelationshipResponses];

export type BetaGroupsBuildsCreateToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BetaGroupBuildsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaGroups/{id}/relationships/builds';
};

export type BetaGroupsBuildsCreateToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaGroupsBuildsCreateToManyRelationshipError = BetaGroupsBuildsCreateToManyRelationshipErrors[keyof BetaGroupsBuildsCreateToManyRelationshipErrors];

export type BetaGroupsBuildsCreateToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type BetaGroupsBuildsCreateToManyRelationshipResponse = BetaGroupsBuildsCreateToManyRelationshipResponses[keyof BetaGroupsBuildsCreateToManyRelationshipResponses];

export type BetaGroupsBuildsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/betaGroups/{id}/builds';
};

export type BetaGroupsBuildsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaGroupsBuildsGetToManyRelatedError = BetaGroupsBuildsGetToManyRelatedErrors[keyof BetaGroupsBuildsGetToManyRelatedErrors];

export type BetaGroupsBuildsGetToManyRelatedResponses = {
    /**
     * List of Builds with get
     */
    200: BuildsWithoutIncludesResponse;
};

export type BetaGroupsBuildsGetToManyRelatedResponse = BetaGroupsBuildsGetToManyRelatedResponses[keyof BetaGroupsBuildsGetToManyRelatedResponses];

export type BetaLicenseAgreementsAppGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
    };
    url: '/v1/betaLicenseAgreements/{id}/app';
};

export type BetaLicenseAgreementsAppGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaLicenseAgreementsAppGetToOneRelatedError = BetaLicenseAgreementsAppGetToOneRelatedErrors[keyof BetaLicenseAgreementsAppGetToOneRelatedErrors];

export type BetaLicenseAgreementsAppGetToOneRelatedResponses = {
    /**
     * Single App with get
     */
    200: AppWithoutIncludesResponse;
};

export type BetaLicenseAgreementsAppGetToOneRelatedResponse = BetaLicenseAgreementsAppGetToOneRelatedResponses[keyof BetaLicenseAgreementsAppGetToOneRelatedResponses];

export type BetaTestersAppsDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BetaTesterAppsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaTesters/{id}/relationships/apps';
};

export type BetaTestersAppsDeleteToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaTestersAppsDeleteToManyRelationshipError = BetaTestersAppsDeleteToManyRelationshipErrors[keyof BetaTestersAppsDeleteToManyRelationshipErrors];

export type BetaTestersAppsDeleteToManyRelationshipResponses = {
    /**
     * Accepted for future completion
     */
    202: unknown;
    /**
     * Success (no content)
     */
    204: void;
};

export type BetaTestersAppsDeleteToManyRelationshipResponse = BetaTestersAppsDeleteToManyRelationshipResponses[keyof BetaTestersAppsDeleteToManyRelationshipResponses];

export type BetaTestersAppsGetToManyRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/betaTesters/{id}/relationships/apps';
};

export type BetaTestersAppsGetToManyRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaTestersAppsGetToManyRelationshipError = BetaTestersAppsGetToManyRelationshipErrors[keyof BetaTestersAppsGetToManyRelationshipErrors];

export type BetaTestersAppsGetToManyRelationshipResponses = {
    /**
     * List of related linkages
     */
    200: BetaTesterAppsLinkagesResponse;
};

export type BetaTestersAppsGetToManyRelationshipResponse = BetaTestersAppsGetToManyRelationshipResponses[keyof BetaTestersAppsGetToManyRelationshipResponses];

export type BetaTestersAppsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/betaTesters/{id}/apps';
};

export type BetaTestersAppsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaTestersAppsGetToManyRelatedError = BetaTestersAppsGetToManyRelatedErrors[keyof BetaTestersAppsGetToManyRelatedErrors];

export type BetaTestersAppsGetToManyRelatedResponses = {
    /**
     * List of Apps with get
     */
    200: AppsWithoutIncludesResponse;
};

export type BetaTestersAppsGetToManyRelatedResponse = BetaTestersAppsGetToManyRelatedResponses[keyof BetaTestersAppsGetToManyRelatedResponses];

export type BetaTestersBetaGroupsDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BetaTesterBetaGroupsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaTesters/{id}/relationships/betaGroups';
};

export type BetaTestersBetaGroupsDeleteToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaTestersBetaGroupsDeleteToManyRelationshipError = BetaTestersBetaGroupsDeleteToManyRelationshipErrors[keyof BetaTestersBetaGroupsDeleteToManyRelationshipErrors];

export type BetaTestersBetaGroupsDeleteToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type BetaTestersBetaGroupsDeleteToManyRelationshipResponse = BetaTestersBetaGroupsDeleteToManyRelationshipResponses[keyof BetaTestersBetaGroupsDeleteToManyRelationshipResponses];

export type BetaTestersBetaGroupsGetToManyRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/betaTesters/{id}/relationships/betaGroups';
};

export type BetaTestersBetaGroupsGetToManyRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaTestersBetaGroupsGetToManyRelationshipError = BetaTestersBetaGroupsGetToManyRelationshipErrors[keyof BetaTestersBetaGroupsGetToManyRelationshipErrors];

export type BetaTestersBetaGroupsGetToManyRelationshipResponses = {
    /**
     * List of related linkages
     */
    200: BetaTesterBetaGroupsLinkagesResponse;
};

export type BetaTestersBetaGroupsGetToManyRelationshipResponse = BetaTestersBetaGroupsGetToManyRelationshipResponses[keyof BetaTestersBetaGroupsGetToManyRelationshipResponses];

export type BetaTestersBetaGroupsCreateToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BetaTesterBetaGroupsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaTesters/{id}/relationships/betaGroups';
};

export type BetaTestersBetaGroupsCreateToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaTestersBetaGroupsCreateToManyRelationshipError = BetaTestersBetaGroupsCreateToManyRelationshipErrors[keyof BetaTestersBetaGroupsCreateToManyRelationshipErrors];

export type BetaTestersBetaGroupsCreateToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type BetaTestersBetaGroupsCreateToManyRelationshipResponse = BetaTestersBetaGroupsCreateToManyRelationshipResponses[keyof BetaTestersBetaGroupsCreateToManyRelationshipResponses];

export type BetaTestersBetaGroupsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaGroups
         */
        'fields[betaGroups]'?: Array<'name' | 'createdDate' | 'isInternalGroup' | 'hasAccessToAllBuilds' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimitEnabled' | 'publicLinkLimit' | 'publicLink' | 'feedbackEnabled' | 'iosBuildsAvailableForAppleSiliconMac' | 'iosBuildsAvailableForAppleVision' | 'app' | 'builds' | 'betaTesters' | 'betaRecruitmentCriteria' | 'betaRecruitmentCriterionCompatibleBuildCheck'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/betaTesters/{id}/betaGroups';
};

export type BetaTestersBetaGroupsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaTestersBetaGroupsGetToManyRelatedError = BetaTestersBetaGroupsGetToManyRelatedErrors[keyof BetaTestersBetaGroupsGetToManyRelatedErrors];

export type BetaTestersBetaGroupsGetToManyRelatedResponses = {
    /**
     * List of BetaGroups with get
     */
    200: BetaGroupsWithoutIncludesResponse;
};

export type BetaTestersBetaGroupsGetToManyRelatedResponse = BetaTestersBetaGroupsGetToManyRelatedResponses[keyof BetaTestersBetaGroupsGetToManyRelatedResponses];

export type BetaTestersBuildsDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BetaTesterBuildsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaTesters/{id}/relationships/builds';
};

export type BetaTestersBuildsDeleteToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaTestersBuildsDeleteToManyRelationshipError = BetaTestersBuildsDeleteToManyRelationshipErrors[keyof BetaTestersBuildsDeleteToManyRelationshipErrors];

export type BetaTestersBuildsDeleteToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type BetaTestersBuildsDeleteToManyRelationshipResponse = BetaTestersBuildsDeleteToManyRelationshipResponses[keyof BetaTestersBuildsDeleteToManyRelationshipResponses];

export type BetaTestersBuildsGetToManyRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/betaTesters/{id}/relationships/builds';
};

export type BetaTestersBuildsGetToManyRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaTestersBuildsGetToManyRelationshipError = BetaTestersBuildsGetToManyRelationshipErrors[keyof BetaTestersBuildsGetToManyRelationshipErrors];

export type BetaTestersBuildsGetToManyRelationshipResponses = {
    /**
     * List of related linkages
     */
    200: BetaTesterBuildsLinkagesResponse;
};

export type BetaTestersBuildsGetToManyRelationshipResponse = BetaTestersBuildsGetToManyRelationshipResponses[keyof BetaTestersBuildsGetToManyRelationshipResponses];

export type BetaTestersBuildsCreateToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BetaTesterBuildsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/betaTesters/{id}/relationships/builds';
};

export type BetaTestersBuildsCreateToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BetaTestersBuildsCreateToManyRelationshipError = BetaTestersBuildsCreateToManyRelationshipErrors[keyof BetaTestersBuildsCreateToManyRelationshipErrors];

export type BetaTestersBuildsCreateToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type BetaTestersBuildsCreateToManyRelationshipResponse = BetaTestersBuildsCreateToManyRelationshipResponses[keyof BetaTestersBuildsCreateToManyRelationshipResponses];

export type BetaTestersBuildsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/betaTesters/{id}/builds';
};

export type BetaTestersBuildsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaTestersBuildsGetToManyRelatedError = BetaTestersBuildsGetToManyRelatedErrors[keyof BetaTestersBuildsGetToManyRelatedErrors];

export type BetaTestersBuildsGetToManyRelatedResponses = {
    /**
     * List of Builds with get
     */
    200: BuildsWithoutIncludesResponse;
};

export type BetaTestersBuildsGetToManyRelatedResponse = BetaTestersBuildsGetToManyRelatedResponses[keyof BetaTestersBuildsGetToManyRelatedResponses];

export type BuildBetaDetailsBuildGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * the fields to include for returned resources of type preReleaseVersions
         */
        'fields[preReleaseVersions]'?: Array<'version' | 'platform' | 'builds' | 'app'>;
        /**
         * the fields to include for returned resources of type betaTesters
         */
        'fields[betaTesters]'?: Array<'firstName' | 'lastName' | 'email' | 'inviteType' | 'state' | 'apps' | 'betaGroups' | 'builds'>;
        /**
         * the fields to include for returned resources of type betaGroups
         */
        'fields[betaGroups]'?: Array<'name' | 'createdDate' | 'isInternalGroup' | 'hasAccessToAllBuilds' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimitEnabled' | 'publicLinkLimit' | 'publicLink' | 'feedbackEnabled' | 'iosBuildsAvailableForAppleSiliconMac' | 'iosBuildsAvailableForAppleVision' | 'app' | 'builds' | 'betaTesters' | 'betaRecruitmentCriteria' | 'betaRecruitmentCriterionCompatibleBuildCheck'>;
        /**
         * the fields to include for returned resources of type betaBuildLocalizations
         */
        'fields[betaBuildLocalizations]'?: Array<'whatsNew' | 'locale' | 'build'>;
        /**
         * the fields to include for returned resources of type appEncryptionDeclarations
         */
        'fields[appEncryptionDeclarations]'?: Array<'appDescription' | 'createdDate' | 'usesEncryption' | 'exempt' | 'containsProprietaryCryptography' | 'containsThirdPartyCryptography' | 'availableOnFrenchStore' | 'platform' | 'uploadedDate' | 'documentUrl' | 'documentName' | 'documentType' | 'appEncryptionDeclarationState' | 'codeValue' | 'app' | 'builds' | 'appEncryptionDeclarationDocument'>;
        /**
         * the fields to include for returned resources of type betaAppReviewSubmissions
         */
        'fields[betaAppReviewSubmissions]'?: Array<'betaReviewState' | 'submittedDate' | 'build'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type buildBetaDetails
         */
        'fields[buildBetaDetails]'?: Array<'autoNotifyEnabled' | 'internalBuildState' | 'externalBuildState' | 'build'>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type buildIcons
         */
        'fields[buildIcons]'?: Array<'name' | 'iconAsset' | 'iconType'>;
        /**
         * the fields to include for returned resources of type buildBundles
         */
        'fields[buildBundles]'?: Array<'bundleId' | 'bundleType' | 'sdkBuild' | 'platformBuild' | 'fileName' | 'hasSirikit' | 'hasOnDemandResources' | 'hasPrerenderedIcon' | 'usesLocationServices' | 'isIosBuildMacAppStoreCompatible' | 'includesSymbols' | 'dSYMUrl' | 'supportedArchitectures' | 'requiredCapabilities' | 'deviceProtocols' | 'locales' | 'entitlements' | 'appClipDomainCacheStatus' | 'appClipDomainDebugStatus' | 'betaAppClipInvocations' | 'buildBundleFileSizes'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles'>;
        /**
         * maximum number of related individualTesters returned (when they are included)
         */
        'limit[individualTesters]'?: number;
        /**
         * maximum number of related betaGroups returned (when they are included)
         */
        'limit[betaGroups]'?: number;
        /**
         * maximum number of related betaBuildLocalizations returned (when they are included)
         */
        'limit[betaBuildLocalizations]'?: number;
        /**
         * maximum number of related icons returned (when they are included)
         */
        'limit[icons]'?: number;
        /**
         * maximum number of related buildBundles returned (when they are included)
         */
        'limit[buildBundles]'?: number;
    };
    url: '/v1/buildBetaDetails/{id}/build';
};

export type BuildBetaDetailsBuildGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BuildBetaDetailsBuildGetToOneRelatedError = BuildBetaDetailsBuildGetToOneRelatedErrors[keyof BuildBetaDetailsBuildGetToOneRelatedErrors];

export type BuildBetaDetailsBuildGetToOneRelatedResponses = {
    /**
     * Single Build
     */
    200: BuildResponse;
};

export type BuildBetaDetailsBuildGetToOneRelatedResponse = BuildBetaDetailsBuildGetToOneRelatedResponses[keyof BuildBetaDetailsBuildGetToOneRelatedResponses];

export type BuildBundlesAppClipDomainCacheStatusGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipDomainStatuses
         */
        'fields[appClipDomainStatuses]'?: Array<'domains' | 'lastUpdatedDate'>;
    };
    url: '/v1/buildBundles/{id}/appClipDomainCacheStatus';
};

export type BuildBundlesAppClipDomainCacheStatusGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BuildBundlesAppClipDomainCacheStatusGetToOneRelatedError = BuildBundlesAppClipDomainCacheStatusGetToOneRelatedErrors[keyof BuildBundlesAppClipDomainCacheStatusGetToOneRelatedErrors];

export type BuildBundlesAppClipDomainCacheStatusGetToOneRelatedResponses = {
    /**
     * Single AppClipDomainStatus
     */
    200: AppClipDomainStatusResponse;
};

export type BuildBundlesAppClipDomainCacheStatusGetToOneRelatedResponse = BuildBundlesAppClipDomainCacheStatusGetToOneRelatedResponses[keyof BuildBundlesAppClipDomainCacheStatusGetToOneRelatedResponses];

export type BuildBundlesAppClipDomainDebugStatusGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipDomainStatuses
         */
        'fields[appClipDomainStatuses]'?: Array<'domains' | 'lastUpdatedDate'>;
    };
    url: '/v1/buildBundles/{id}/appClipDomainDebugStatus';
};

export type BuildBundlesAppClipDomainDebugStatusGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BuildBundlesAppClipDomainDebugStatusGetToOneRelatedError = BuildBundlesAppClipDomainDebugStatusGetToOneRelatedErrors[keyof BuildBundlesAppClipDomainDebugStatusGetToOneRelatedErrors];

export type BuildBundlesAppClipDomainDebugStatusGetToOneRelatedResponses = {
    /**
     * Single AppClipDomainStatus
     */
    200: AppClipDomainStatusResponse;
};

export type BuildBundlesAppClipDomainDebugStatusGetToOneRelatedResponse = BuildBundlesAppClipDomainDebugStatusGetToOneRelatedResponses[keyof BuildBundlesAppClipDomainDebugStatusGetToOneRelatedResponses];

export type BuildBundlesBetaAppClipInvocationsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaAppClipInvocations
         */
        'fields[betaAppClipInvocations]'?: Array<'url' | 'betaAppClipInvocationLocalizations'>;
        /**
         * the fields to include for returned resources of type betaAppClipInvocationLocalizations
         */
        'fields[betaAppClipInvocationLocalizations]'?: Array<'title' | 'locale'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'betaAppClipInvocationLocalizations'>;
        /**
         * maximum number of related betaAppClipInvocationLocalizations returned (when they are included)
         */
        'limit[betaAppClipInvocationLocalizations]'?: number;
    };
    url: '/v1/buildBundles/{id}/betaAppClipInvocations';
};

export type BuildBundlesBetaAppClipInvocationsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BuildBundlesBetaAppClipInvocationsGetToManyRelatedError = BuildBundlesBetaAppClipInvocationsGetToManyRelatedErrors[keyof BuildBundlesBetaAppClipInvocationsGetToManyRelatedErrors];

export type BuildBundlesBetaAppClipInvocationsGetToManyRelatedResponses = {
    /**
     * List of BetaAppClipInvocations
     */
    200: BetaAppClipInvocationsResponse;
};

export type BuildBundlesBetaAppClipInvocationsGetToManyRelatedResponse = BuildBundlesBetaAppClipInvocationsGetToManyRelatedResponses[keyof BuildBundlesBetaAppClipInvocationsGetToManyRelatedResponses];

export type BuildBundlesBuildBundleFileSizesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type buildBundleFileSizes
         */
        'fields[buildBundleFileSizes]'?: Array<'deviceModel' | 'osVersion' | 'downloadBytes' | 'installBytes'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/buildBundles/{id}/buildBundleFileSizes';
};

export type BuildBundlesBuildBundleFileSizesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BuildBundlesBuildBundleFileSizesGetToManyRelatedError = BuildBundlesBuildBundleFileSizesGetToManyRelatedErrors[keyof BuildBundlesBuildBundleFileSizesGetToManyRelatedErrors];

export type BuildBundlesBuildBundleFileSizesGetToManyRelatedResponses = {
    /**
     * List of BuildBundleFileSizes
     */
    200: BuildBundleFileSizesResponse;
};

export type BuildBundlesBuildBundleFileSizesGetToManyRelatedResponse = BuildBundlesBuildBundleFileSizesGetToManyRelatedResponses[keyof BuildBundlesBuildBundleFileSizesGetToManyRelatedResponses];

export type BuildsAppGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
    };
    url: '/v1/builds/{id}/app';
};

export type BuildsAppGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BuildsAppGetToOneRelatedError = BuildsAppGetToOneRelatedErrors[keyof BuildsAppGetToOneRelatedErrors];

export type BuildsAppGetToOneRelatedResponses = {
    /**
     * Single App with get
     */
    200: AppWithoutIncludesResponse;
};

export type BuildsAppGetToOneRelatedResponse = BuildsAppGetToOneRelatedResponses[keyof BuildsAppGetToOneRelatedResponses];

export type BuildsAppEncryptionDeclarationGetToOneRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/builds/{id}/relationships/appEncryptionDeclaration';
};

export type BuildsAppEncryptionDeclarationGetToOneRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BuildsAppEncryptionDeclarationGetToOneRelationshipError = BuildsAppEncryptionDeclarationGetToOneRelationshipErrors[keyof BuildsAppEncryptionDeclarationGetToOneRelationshipErrors];

export type BuildsAppEncryptionDeclarationGetToOneRelationshipResponses = {
    /**
     * Related linkage
     */
    200: BuildAppEncryptionDeclarationLinkageResponse;
};

export type BuildsAppEncryptionDeclarationGetToOneRelationshipResponse = BuildsAppEncryptionDeclarationGetToOneRelationshipResponses[keyof BuildsAppEncryptionDeclarationGetToOneRelationshipResponses];

export type BuildsAppEncryptionDeclarationUpdateToOneRelationshipData = {
    /**
     * Related linkage
     */
    body: BuildAppEncryptionDeclarationLinkageRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/builds/{id}/relationships/appEncryptionDeclaration';
};

export type BuildsAppEncryptionDeclarationUpdateToOneRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BuildsAppEncryptionDeclarationUpdateToOneRelationshipError = BuildsAppEncryptionDeclarationUpdateToOneRelationshipErrors[keyof BuildsAppEncryptionDeclarationUpdateToOneRelationshipErrors];

export type BuildsAppEncryptionDeclarationUpdateToOneRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type BuildsAppEncryptionDeclarationUpdateToOneRelationshipResponse = BuildsAppEncryptionDeclarationUpdateToOneRelationshipResponses[keyof BuildsAppEncryptionDeclarationUpdateToOneRelationshipResponses];

export type BuildsAppEncryptionDeclarationGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEncryptionDeclarations
         */
        'fields[appEncryptionDeclarations]'?: Array<'appDescription' | 'createdDate' | 'usesEncryption' | 'exempt' | 'containsProprietaryCryptography' | 'containsThirdPartyCryptography' | 'availableOnFrenchStore' | 'platform' | 'uploadedDate' | 'documentUrl' | 'documentName' | 'documentType' | 'appEncryptionDeclarationState' | 'codeValue' | 'app' | 'builds' | 'appEncryptionDeclarationDocument'>;
    };
    url: '/v1/builds/{id}/appEncryptionDeclaration';
};

export type BuildsAppEncryptionDeclarationGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BuildsAppEncryptionDeclarationGetToOneRelatedError = BuildsAppEncryptionDeclarationGetToOneRelatedErrors[keyof BuildsAppEncryptionDeclarationGetToOneRelatedErrors];

export type BuildsAppEncryptionDeclarationGetToOneRelatedResponses = {
    /**
     * Single AppEncryptionDeclaration with get
     */
    200: AppEncryptionDeclarationWithoutIncludesResponse;
};

export type BuildsAppEncryptionDeclarationGetToOneRelatedResponse = BuildsAppEncryptionDeclarationGetToOneRelatedResponses[keyof BuildsAppEncryptionDeclarationGetToOneRelatedResponses];

export type BuildsAppStoreVersionGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type ageRatingDeclarations
         */
        'fields[ageRatingDeclarations]'?: Array<'alcoholTobaccoOrDrugUseOrReferences' | 'contests' | 'gamblingAndContests' | 'gambling' | 'gamblingSimulated' | 'kidsAgeBand' | 'lootBox' | 'medicalOrTreatmentInformation' | 'profanityOrCrudeHumor' | 'sexualContentGraphicAndNudity' | 'sexualContentOrNudity' | 'horrorOrFearThemes' | 'matureOrSuggestiveThemes' | 'unrestrictedWebAccess' | 'violenceCartoonOrFantasy' | 'violenceRealisticProlongedGraphicOrSadistic' | 'violenceRealistic' | 'ageRatingOverride' | 'koreaAgeRatingOverride' | 'seventeenPlus'>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<'description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * the fields to include for returned resources of type appStoreVersionPhasedReleases
         */
        'fields[appStoreVersionPhasedReleases]'?: Array<'phasedReleaseState' | 'startDate' | 'totalPauseDuration' | 'currentDayNumber'>;
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<'enabled' | 'compatibilityVersions' | 'appStoreVersion'>;
        /**
         * the fields to include for returned resources of type routingAppCoverages
         */
        'fields[routingAppCoverages]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'appStoreVersion'>;
        /**
         * the fields to include for returned resources of type appStoreReviewDetails
         */
        'fields[appStoreReviewDetails]'?: Array<'contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'appStoreVersion' | 'appStoreReviewAttachments'>;
        /**
         * the fields to include for returned resources of type appStoreVersionSubmissions
         */
        'fields[appStoreVersionSubmissions]'?: Array<'appStoreVersion'>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<'action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<'name' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'appStoreVersion' | 'appStoreVersionExperimentTreatments' | 'platform' | 'app' | 'latestControlVersion' | 'controlVersions'>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackages
         */
        'fields[alternativeDistributionPackages]'?: Array<'versions'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionPackage'>;
        /**
         * maximum number of related appStoreVersionLocalizations returned (when they are included)
         */
        'limit[appStoreVersionLocalizations]'?: number;
        /**
         * maximum number of related appStoreVersionExperiments returned (when they are included)
         * @deprecated
         */
        'limit[appStoreVersionExperiments]'?: number;
        /**
         * maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
         */
        'limit[appStoreVersionExperimentsV2]'?: number;
    };
    url: '/v1/builds/{id}/appStoreVersion';
};

export type BuildsAppStoreVersionGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BuildsAppStoreVersionGetToOneRelatedError = BuildsAppStoreVersionGetToOneRelatedErrors[keyof BuildsAppStoreVersionGetToOneRelatedErrors];

export type BuildsAppStoreVersionGetToOneRelatedResponses = {
    /**
     * Single AppStoreVersion
     */
    200: AppStoreVersionResponse;
};

export type BuildsAppStoreVersionGetToOneRelatedResponse = BuildsAppStoreVersionGetToOneRelatedResponses[keyof BuildsAppStoreVersionGetToOneRelatedResponses];

export type BuildsBetaAppReviewSubmissionGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaAppReviewSubmissions
         */
        'fields[betaAppReviewSubmissions]'?: Array<'betaReviewState' | 'submittedDate' | 'build'>;
    };
    url: '/v1/builds/{id}/betaAppReviewSubmission';
};

export type BuildsBetaAppReviewSubmissionGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BuildsBetaAppReviewSubmissionGetToOneRelatedError = BuildsBetaAppReviewSubmissionGetToOneRelatedErrors[keyof BuildsBetaAppReviewSubmissionGetToOneRelatedErrors];

export type BuildsBetaAppReviewSubmissionGetToOneRelatedResponses = {
    /**
     * Single BetaAppReviewSubmission with get
     */
    200: BetaAppReviewSubmissionWithoutIncludesResponse;
};

export type BuildsBetaAppReviewSubmissionGetToOneRelatedResponse = BuildsBetaAppReviewSubmissionGetToOneRelatedResponses[keyof BuildsBetaAppReviewSubmissionGetToOneRelatedResponses];

export type BuildsBetaBuildLocalizationsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaBuildLocalizations
         */
        'fields[betaBuildLocalizations]'?: Array<'whatsNew' | 'locale' | 'build'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/builds/{id}/betaBuildLocalizations';
};

export type BuildsBetaBuildLocalizationsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BuildsBetaBuildLocalizationsGetToManyRelatedError = BuildsBetaBuildLocalizationsGetToManyRelatedErrors[keyof BuildsBetaBuildLocalizationsGetToManyRelatedErrors];

export type BuildsBetaBuildLocalizationsGetToManyRelatedResponses = {
    /**
     * List of BetaBuildLocalizations with get
     */
    200: BetaBuildLocalizationsWithoutIncludesResponse;
};

export type BuildsBetaBuildLocalizationsGetToManyRelatedResponse = BuildsBetaBuildLocalizationsGetToManyRelatedResponses[keyof BuildsBetaBuildLocalizationsGetToManyRelatedResponses];

export type BuildsBetaGroupsDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BuildBetaGroupsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/builds/{id}/relationships/betaGroups';
};

export type BuildsBetaGroupsDeleteToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BuildsBetaGroupsDeleteToManyRelationshipError = BuildsBetaGroupsDeleteToManyRelationshipErrors[keyof BuildsBetaGroupsDeleteToManyRelationshipErrors];

export type BuildsBetaGroupsDeleteToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type BuildsBetaGroupsDeleteToManyRelationshipResponse = BuildsBetaGroupsDeleteToManyRelationshipResponses[keyof BuildsBetaGroupsDeleteToManyRelationshipResponses];

export type BuildsBetaGroupsCreateToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BuildBetaGroupsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/builds/{id}/relationships/betaGroups';
};

export type BuildsBetaGroupsCreateToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BuildsBetaGroupsCreateToManyRelationshipError = BuildsBetaGroupsCreateToManyRelationshipErrors[keyof BuildsBetaGroupsCreateToManyRelationshipErrors];

export type BuildsBetaGroupsCreateToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type BuildsBetaGroupsCreateToManyRelationshipResponse = BuildsBetaGroupsCreateToManyRelationshipResponses[keyof BuildsBetaGroupsCreateToManyRelationshipResponses];

export type BuildsBuildBetaDetailGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type buildBetaDetails
         */
        'fields[buildBetaDetails]'?: Array<'autoNotifyEnabled' | 'internalBuildState' | 'externalBuildState' | 'build'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'build'>;
    };
    url: '/v1/builds/{id}/buildBetaDetail';
};

export type BuildsBuildBetaDetailGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BuildsBuildBetaDetailGetToOneRelatedError = BuildsBuildBetaDetailGetToOneRelatedErrors[keyof BuildsBuildBetaDetailGetToOneRelatedErrors];

export type BuildsBuildBetaDetailGetToOneRelatedResponses = {
    /**
     * Single BuildBetaDetail
     */
    200: BuildBetaDetailResponse;
};

export type BuildsBuildBetaDetailGetToOneRelatedResponse = BuildsBuildBetaDetailGetToOneRelatedResponses[keyof BuildsBuildBetaDetailGetToOneRelatedResponses];

export type BuildsDiagnosticSignaturesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'diagnosticType'
         */
        'filter[diagnosticType]'?: Array<'DISK_WRITES' | 'HANGS' | 'LAUNCHES'>;
        /**
         * the fields to include for returned resources of type diagnosticSignatures
         */
        'fields[diagnosticSignatures]'?: Array<'diagnosticType' | 'signature' | 'weight' | 'insight' | 'logs'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/builds/{id}/diagnosticSignatures';
};

export type BuildsDiagnosticSignaturesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BuildsDiagnosticSignaturesGetToManyRelatedError = BuildsDiagnosticSignaturesGetToManyRelatedErrors[keyof BuildsDiagnosticSignaturesGetToManyRelatedErrors];

export type BuildsDiagnosticSignaturesGetToManyRelatedResponses = {
    /**
     * List of DiagnosticSignatures
     */
    200: DiagnosticSignaturesResponse;
};

export type BuildsDiagnosticSignaturesGetToManyRelatedResponse = BuildsDiagnosticSignaturesGetToManyRelatedResponses[keyof BuildsDiagnosticSignaturesGetToManyRelatedResponses];

export type BuildsIconsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type buildIcons
         */
        'fields[buildIcons]'?: Array<'name' | 'iconAsset' | 'iconType'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/builds/{id}/icons';
};

export type BuildsIconsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BuildsIconsGetToManyRelatedError = BuildsIconsGetToManyRelatedErrors[keyof BuildsIconsGetToManyRelatedErrors];

export type BuildsIconsGetToManyRelatedResponses = {
    /**
     * List of BuildIcons with get
     */
    200: BuildIconsWithoutIncludesResponse;
};

export type BuildsIconsGetToManyRelatedResponse = BuildsIconsGetToManyRelatedResponses[keyof BuildsIconsGetToManyRelatedResponses];

export type BuildsIndividualTestersDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BuildIndividualTestersLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/builds/{id}/relationships/individualTesters';
};

export type BuildsIndividualTestersDeleteToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BuildsIndividualTestersDeleteToManyRelationshipError = BuildsIndividualTestersDeleteToManyRelationshipErrors[keyof BuildsIndividualTestersDeleteToManyRelationshipErrors];

export type BuildsIndividualTestersDeleteToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type BuildsIndividualTestersDeleteToManyRelationshipResponse = BuildsIndividualTestersDeleteToManyRelationshipResponses[keyof BuildsIndividualTestersDeleteToManyRelationshipResponses];

export type BuildsIndividualTestersGetToManyRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/builds/{id}/relationships/individualTesters';
};

export type BuildsIndividualTestersGetToManyRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BuildsIndividualTestersGetToManyRelationshipError = BuildsIndividualTestersGetToManyRelationshipErrors[keyof BuildsIndividualTestersGetToManyRelationshipErrors];

export type BuildsIndividualTestersGetToManyRelationshipResponses = {
    /**
     * List of related linkages
     */
    200: BuildIndividualTestersLinkagesResponse;
};

export type BuildsIndividualTestersGetToManyRelationshipResponse = BuildsIndividualTestersGetToManyRelationshipResponses[keyof BuildsIndividualTestersGetToManyRelationshipResponses];

export type BuildsIndividualTestersCreateToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BuildIndividualTestersLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/builds/{id}/relationships/individualTesters';
};

export type BuildsIndividualTestersCreateToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type BuildsIndividualTestersCreateToManyRelationshipError = BuildsIndividualTestersCreateToManyRelationshipErrors[keyof BuildsIndividualTestersCreateToManyRelationshipErrors];

export type BuildsIndividualTestersCreateToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type BuildsIndividualTestersCreateToManyRelationshipResponse = BuildsIndividualTestersCreateToManyRelationshipResponses[keyof BuildsIndividualTestersCreateToManyRelationshipResponses];

export type BuildsIndividualTestersGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaTesters
         */
        'fields[betaTesters]'?: Array<'firstName' | 'lastName' | 'email' | 'inviteType' | 'state' | 'apps' | 'betaGroups' | 'builds'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/builds/{id}/individualTesters';
};

export type BuildsIndividualTestersGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BuildsIndividualTestersGetToManyRelatedError = BuildsIndividualTestersGetToManyRelatedErrors[keyof BuildsIndividualTestersGetToManyRelatedErrors];

export type BuildsIndividualTestersGetToManyRelatedResponses = {
    /**
     * List of BetaTesters with get
     */
    200: BetaTestersWithoutIncludesResponse;
};

export type BuildsIndividualTestersGetToManyRelatedResponse = BuildsIndividualTestersGetToManyRelatedResponses[keyof BuildsIndividualTestersGetToManyRelatedResponses];

export type BuildsPerfPowerMetricsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'platform'
         */
        'filter[platform]'?: Array<'IOS'>;
        /**
         * filter by attribute 'metricType'
         */
        'filter[metricType]'?: Array<'DISK' | 'HANG' | 'BATTERY' | 'LAUNCH' | 'MEMORY' | 'ANIMATION' | 'TERMINATION'>;
        /**
         * filter by attribute 'deviceType'
         */
        'filter[deviceType]'?: Array<string>;
    };
    url: '/v1/builds/{id}/perfPowerMetrics';
};

export type BuildsPerfPowerMetricsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BuildsPerfPowerMetricsGetToManyRelatedError = BuildsPerfPowerMetricsGetToManyRelatedErrors[keyof BuildsPerfPowerMetricsGetToManyRelatedErrors];

export type BuildsPerfPowerMetricsGetToManyRelatedResponses = {
    /**
     * List of PerfPowerMetrics
     */
    200: XcodeMetrics;
};

export type BuildsPerfPowerMetricsGetToManyRelatedResponse = BuildsPerfPowerMetricsGetToManyRelatedResponses[keyof BuildsPerfPowerMetricsGetToManyRelatedResponses];

export type BuildsPreReleaseVersionGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type preReleaseVersions
         */
        'fields[preReleaseVersions]'?: Array<'version' | 'platform' | 'builds' | 'app'>;
    };
    url: '/v1/builds/{id}/preReleaseVersion';
};

export type BuildsPreReleaseVersionGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BuildsPreReleaseVersionGetToOneRelatedError = BuildsPreReleaseVersionGetToOneRelatedErrors[keyof BuildsPreReleaseVersionGetToOneRelatedErrors];

export type BuildsPreReleaseVersionGetToOneRelatedResponses = {
    /**
     * Single PrereleaseVersion with get
     */
    200: PrereleaseVersionWithoutIncludesResponse;
};

export type BuildsPreReleaseVersionGetToOneRelatedResponse = BuildsPreReleaseVersionGetToOneRelatedResponses[keyof BuildsPreReleaseVersionGetToOneRelatedResponses];

export type BundleIdsAppGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
    };
    url: '/v1/bundleIds/{id}/app';
};

export type BundleIdsAppGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BundleIdsAppGetToOneRelatedError = BundleIdsAppGetToOneRelatedErrors[keyof BundleIdsAppGetToOneRelatedErrors];

export type BundleIdsAppGetToOneRelatedResponses = {
    /**
     * Single App with get
     */
    200: AppWithoutIncludesResponse;
};

export type BundleIdsAppGetToOneRelatedResponse = BundleIdsAppGetToOneRelatedResponses[keyof BundleIdsAppGetToOneRelatedResponses];

export type BundleIdsBundleIdCapabilitiesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type bundleIdCapabilities
         */
        'fields[bundleIdCapabilities]'?: Array<'capabilityType' | 'settings'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/bundleIds/{id}/bundleIdCapabilities';
};

export type BundleIdsBundleIdCapabilitiesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BundleIdsBundleIdCapabilitiesGetToManyRelatedError = BundleIdsBundleIdCapabilitiesGetToManyRelatedErrors[keyof BundleIdsBundleIdCapabilitiesGetToManyRelatedErrors];

export type BundleIdsBundleIdCapabilitiesGetToManyRelatedResponses = {
    /**
     * List of BundleIdCapabilities with get
     */
    200: BundleIdCapabilitiesWithoutIncludesResponse;
};

export type BundleIdsBundleIdCapabilitiesGetToManyRelatedResponse = BundleIdsBundleIdCapabilitiesGetToManyRelatedResponses[keyof BundleIdsBundleIdCapabilitiesGetToManyRelatedResponses];

export type BundleIdsProfilesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type profiles
         */
        'fields[profiles]'?: Array<'name' | 'platform' | 'profileType' | 'profileState' | 'profileContent' | 'uuid' | 'createdDate' | 'expirationDate' | 'bundleId' | 'devices' | 'certificates'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/bundleIds/{id}/profiles';
};

export type BundleIdsProfilesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BundleIdsProfilesGetToManyRelatedError = BundleIdsProfilesGetToManyRelatedErrors[keyof BundleIdsProfilesGetToManyRelatedErrors];

export type BundleIdsProfilesGetToManyRelatedResponses = {
    /**
     * List of Profiles with get
     */
    200: ProfilesWithoutIncludesResponse;
};

export type BundleIdsProfilesGetToManyRelatedResponse = BundleIdsProfilesGetToManyRelatedResponses[keyof BundleIdsProfilesGetToManyRelatedResponses];

export type CiBuildActionsArtifactsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciArtifacts
         */
        'fields[ciArtifacts]'?: Array<'fileType' | 'fileName' | 'fileSize' | 'downloadUrl'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/ciBuildActions/{id}/artifacts';
};

export type CiBuildActionsArtifactsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiBuildActionsArtifactsGetToManyRelatedError = CiBuildActionsArtifactsGetToManyRelatedErrors[keyof CiBuildActionsArtifactsGetToManyRelatedErrors];

export type CiBuildActionsArtifactsGetToManyRelatedResponses = {
    /**
     * List of CiArtifacts
     */
    200: CiArtifactsResponse;
};

export type CiBuildActionsArtifactsGetToManyRelatedResponse = CiBuildActionsArtifactsGetToManyRelatedResponses[keyof CiBuildActionsArtifactsGetToManyRelatedResponses];

export type CiBuildActionsBuildRunGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciBuildRuns
         */
        'fields[ciBuildRuns]'?: Array<'number' | 'createdDate' | 'startedDate' | 'finishedDate' | 'sourceCommit' | 'destinationCommit' | 'isPullRequestBuild' | 'issueCounts' | 'executionProgress' | 'completionStatus' | 'startReason' | 'cancelReason' | 'builds' | 'workflow' | 'product' | 'sourceBranchOrTag' | 'destinationBranch' | 'actions' | 'pullRequest'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * the fields to include for returned resources of type ciWorkflows
         */
        'fields[ciWorkflows]'?: Array<'name' | 'description' | 'branchStartCondition' | 'tagStartCondition' | 'pullRequestStartCondition' | 'scheduledStartCondition' | 'manualBranchStartCondition' | 'manualTagStartCondition' | 'manualPullRequestStartCondition' | 'actions' | 'isEnabled' | 'isLockedForEditing' | 'clean' | 'containerFilePath' | 'lastModifiedDate' | 'product' | 'repository' | 'xcodeVersion' | 'macOsVersion' | 'buildRuns'>;
        /**
         * the fields to include for returned resources of type ciProducts
         */
        'fields[ciProducts]'?: Array<'name' | 'createdDate' | 'productType' | 'app' | 'bundleId' | 'workflows' | 'primaryRepositories' | 'additionalRepositories' | 'buildRuns'>;
        /**
         * the fields to include for returned resources of type scmGitReferences
         */
        'fields[scmGitReferences]'?: Array<'name' | 'canonicalName' | 'isDeleted' | 'kind' | 'repository'>;
        /**
         * the fields to include for returned resources of type scmPullRequests
         */
        'fields[scmPullRequests]'?: Array<'title' | 'number' | 'webUrl' | 'sourceRepositoryOwner' | 'sourceRepositoryName' | 'sourceBranchName' | 'destinationRepositoryOwner' | 'destinationRepositoryName' | 'destinationBranchName' | 'isClosed' | 'isCrossRepository' | 'repository'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'builds' | 'workflow' | 'product' | 'sourceBranchOrTag' | 'destinationBranch' | 'pullRequest'>;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
    };
    url: '/v1/ciBuildActions/{id}/buildRun';
};

export type CiBuildActionsBuildRunGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiBuildActionsBuildRunGetToOneRelatedError = CiBuildActionsBuildRunGetToOneRelatedErrors[keyof CiBuildActionsBuildRunGetToOneRelatedErrors];

export type CiBuildActionsBuildRunGetToOneRelatedResponses = {
    /**
     * Single CiBuildRun
     */
    200: CiBuildRunResponse;
};

export type CiBuildActionsBuildRunGetToOneRelatedResponse = CiBuildActionsBuildRunGetToOneRelatedResponses[keyof CiBuildActionsBuildRunGetToOneRelatedResponses];

export type CiBuildActionsIssuesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciIssues
         */
        'fields[ciIssues]'?: Array<'issueType' | 'message' | 'fileSource' | 'category'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/ciBuildActions/{id}/issues';
};

export type CiBuildActionsIssuesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiBuildActionsIssuesGetToManyRelatedError = CiBuildActionsIssuesGetToManyRelatedErrors[keyof CiBuildActionsIssuesGetToManyRelatedErrors];

export type CiBuildActionsIssuesGetToManyRelatedResponses = {
    /**
     * List of CiIssues
     */
    200: CiIssuesResponse;
};

export type CiBuildActionsIssuesGetToManyRelatedResponse = CiBuildActionsIssuesGetToManyRelatedResponses[keyof CiBuildActionsIssuesGetToManyRelatedResponses];

export type CiBuildActionsTestResultsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciTestResults
         */
        'fields[ciTestResults]'?: Array<'className' | 'name' | 'status' | 'fileSource' | 'message' | 'destinationTestResults'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/ciBuildActions/{id}/testResults';
};

export type CiBuildActionsTestResultsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiBuildActionsTestResultsGetToManyRelatedError = CiBuildActionsTestResultsGetToManyRelatedErrors[keyof CiBuildActionsTestResultsGetToManyRelatedErrors];

export type CiBuildActionsTestResultsGetToManyRelatedResponses = {
    /**
     * List of CiTestResults
     */
    200: CiTestResultsResponse;
};

export type CiBuildActionsTestResultsGetToManyRelatedResponse = CiBuildActionsTestResultsGetToManyRelatedResponses[keyof CiBuildActionsTestResultsGetToManyRelatedResponses];

export type CiBuildRunsActionsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciBuildActions
         */
        'fields[ciBuildActions]'?: Array<'name' | 'actionType' | 'startedDate' | 'finishedDate' | 'issueCounts' | 'executionProgress' | 'completionStatus' | 'isRequiredToPass' | 'buildRun' | 'artifacts' | 'issues' | 'testResults'>;
        /**
         * the fields to include for returned resources of type ciBuildRuns
         */
        'fields[ciBuildRuns]'?: Array<'number' | 'createdDate' | 'startedDate' | 'finishedDate' | 'sourceCommit' | 'destinationCommit' | 'isPullRequestBuild' | 'issueCounts' | 'executionProgress' | 'completionStatus' | 'startReason' | 'cancelReason' | 'builds' | 'workflow' | 'product' | 'sourceBranchOrTag' | 'destinationBranch' | 'actions' | 'pullRequest'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'buildRun'>;
    };
    url: '/v1/ciBuildRuns/{id}/actions';
};

export type CiBuildRunsActionsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiBuildRunsActionsGetToManyRelatedError = CiBuildRunsActionsGetToManyRelatedErrors[keyof CiBuildRunsActionsGetToManyRelatedErrors];

export type CiBuildRunsActionsGetToManyRelatedResponses = {
    /**
     * List of CiBuildActions
     */
    200: CiBuildActionsResponse;
};

export type CiBuildRunsActionsGetToManyRelatedResponse = CiBuildRunsActionsGetToManyRelatedResponses[keyof CiBuildRunsActionsGetToManyRelatedResponses];

export type CiBuildRunsBuildsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'version'
         */
        'filter[version]'?: Array<string>;
        /**
         * filter by attribute 'expired'
         */
        'filter[expired]'?: Array<string>;
        /**
         * filter by attribute 'processingState'
         */
        'filter[processingState]'?: Array<'PROCESSING' | 'FAILED' | 'INVALID' | 'VALID'>;
        /**
         * filter by attribute 'betaAppReviewSubmission.betaReviewState'
         */
        'filter[betaAppReviewSubmission.betaReviewState]'?: Array<'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'REJECTED' | 'APPROVED'>;
        /**
         * filter by attribute 'usesNonExemptEncryption'
         */
        'filter[usesNonExemptEncryption]'?: Array<string>;
        /**
         * filter by attribute 'preReleaseVersion.version'
         */
        'filter[preReleaseVersion.version]'?: Array<string>;
        /**
         * filter by attribute 'preReleaseVersion.platform'
         */
        'filter[preReleaseVersion.platform]'?: Array<'IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS'>;
        /**
         * filter by attribute 'buildAudienceType'
         */
        'filter[buildAudienceType]'?: Array<'INTERNAL_ONLY' | 'APP_STORE_ELIGIBLE'>;
        /**
         * filter by id(s) of related 'preReleaseVersion'
         */
        'filter[preReleaseVersion]'?: Array<string>;
        /**
         * filter by id(s) of related 'app'
         */
        'filter[app]'?: Array<string>;
        /**
         * filter by id(s) of related 'betaGroups'
         */
        'filter[betaGroups]'?: Array<string>;
        /**
         * filter by id(s) of related 'appStoreVersion'
         */
        'filter[appStoreVersion]'?: Array<string>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'version' | '-version' | 'uploadedDate' | '-uploadedDate' | 'preReleaseVersion' | '-preReleaseVersion'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * the fields to include for returned resources of type preReleaseVersions
         */
        'fields[preReleaseVersions]'?: Array<'version' | 'platform' | 'builds' | 'app'>;
        /**
         * the fields to include for returned resources of type betaTesters
         */
        'fields[betaTesters]'?: Array<'firstName' | 'lastName' | 'email' | 'inviteType' | 'state' | 'apps' | 'betaGroups' | 'builds'>;
        /**
         * the fields to include for returned resources of type betaGroups
         */
        'fields[betaGroups]'?: Array<'name' | 'createdDate' | 'isInternalGroup' | 'hasAccessToAllBuilds' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimitEnabled' | 'publicLinkLimit' | 'publicLink' | 'feedbackEnabled' | 'iosBuildsAvailableForAppleSiliconMac' | 'iosBuildsAvailableForAppleVision' | 'app' | 'builds' | 'betaTesters' | 'betaRecruitmentCriteria' | 'betaRecruitmentCriterionCompatibleBuildCheck'>;
        /**
         * the fields to include for returned resources of type betaBuildLocalizations
         */
        'fields[betaBuildLocalizations]'?: Array<'whatsNew' | 'locale' | 'build'>;
        /**
         * the fields to include for returned resources of type appEncryptionDeclarations
         */
        'fields[appEncryptionDeclarations]'?: Array<'appDescription' | 'createdDate' | 'usesEncryption' | 'exempt' | 'containsProprietaryCryptography' | 'containsThirdPartyCryptography' | 'availableOnFrenchStore' | 'platform' | 'uploadedDate' | 'documentUrl' | 'documentName' | 'documentType' | 'appEncryptionDeclarationState' | 'codeValue' | 'app' | 'builds' | 'appEncryptionDeclarationDocument'>;
        /**
         * the fields to include for returned resources of type betaAppReviewSubmissions
         */
        'fields[betaAppReviewSubmissions]'?: Array<'betaReviewState' | 'submittedDate' | 'build'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type buildBetaDetails
         */
        'fields[buildBetaDetails]'?: Array<'autoNotifyEnabled' | 'internalBuildState' | 'externalBuildState' | 'build'>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type buildIcons
         */
        'fields[buildIcons]'?: Array<'name' | 'iconAsset' | 'iconType'>;
        /**
         * the fields to include for returned resources of type buildBundles
         */
        'fields[buildBundles]'?: Array<'bundleId' | 'bundleType' | 'sdkBuild' | 'platformBuild' | 'fileName' | 'hasSirikit' | 'hasOnDemandResources' | 'hasPrerenderedIcon' | 'usesLocationServices' | 'isIosBuildMacAppStoreCompatible' | 'includesSymbols' | 'dSYMUrl' | 'supportedArchitectures' | 'requiredCapabilities' | 'deviceProtocols' | 'locales' | 'entitlements' | 'appClipDomainCacheStatus' | 'appClipDomainDebugStatus' | 'betaAppClipInvocations' | 'buildBundleFileSizes'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles'>;
        /**
         * maximum number of related individualTesters returned (when they are included)
         */
        'limit[individualTesters]'?: number;
        /**
         * maximum number of related betaGroups returned (when they are included)
         */
        'limit[betaGroups]'?: number;
        /**
         * maximum number of related betaBuildLocalizations returned (when they are included)
         */
        'limit[betaBuildLocalizations]'?: number;
        /**
         * maximum number of related icons returned (when they are included)
         */
        'limit[icons]'?: number;
        /**
         * maximum number of related buildBundles returned (when they are included)
         */
        'limit[buildBundles]'?: number;
    };
    url: '/v1/ciBuildRuns/{id}/builds';
};

export type CiBuildRunsBuildsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiBuildRunsBuildsGetToManyRelatedError = CiBuildRunsBuildsGetToManyRelatedErrors[keyof CiBuildRunsBuildsGetToManyRelatedErrors];

export type CiBuildRunsBuildsGetToManyRelatedResponses = {
    /**
     * List of Builds
     */
    200: BuildsResponse;
};

export type CiBuildRunsBuildsGetToManyRelatedResponse = CiBuildRunsBuildsGetToManyRelatedResponses[keyof CiBuildRunsBuildsGetToManyRelatedResponses];

export type CiMacOsVersionsXcodeVersionsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciXcodeVersions
         */
        'fields[ciXcodeVersions]'?: Array<'version' | 'name' | 'testDestinations' | 'macOsVersions'>;
        /**
         * the fields to include for returned resources of type ciMacOsVersions
         */
        'fields[ciMacOsVersions]'?: Array<'version' | 'name' | 'xcodeVersions'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'macOsVersions'>;
        /**
         * maximum number of related macOsVersions returned (when they are included)
         */
        'limit[macOsVersions]'?: number;
    };
    url: '/v1/ciMacOsVersions/{id}/xcodeVersions';
};

export type CiMacOsVersionsXcodeVersionsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiMacOsVersionsXcodeVersionsGetToManyRelatedError = CiMacOsVersionsXcodeVersionsGetToManyRelatedErrors[keyof CiMacOsVersionsXcodeVersionsGetToManyRelatedErrors];

export type CiMacOsVersionsXcodeVersionsGetToManyRelatedResponses = {
    /**
     * List of CiXcodeVersions
     */
    200: CiXcodeVersionsResponse;
};

export type CiMacOsVersionsXcodeVersionsGetToManyRelatedResponse = CiMacOsVersionsXcodeVersionsGetToManyRelatedResponses[keyof CiMacOsVersionsXcodeVersionsGetToManyRelatedResponses];

export type CiProductsAdditionalRepositoriesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<'lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests'>;
        /**
         * the fields to include for returned resources of type scmProviders
         */
        'fields[scmProviders]'?: Array<'scmProviderType' | 'url' | 'repositories'>;
        /**
         * the fields to include for returned resources of type scmGitReferences
         */
        'fields[scmGitReferences]'?: Array<'name' | 'canonicalName' | 'isDeleted' | 'kind' | 'repository'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'scmProvider' | 'defaultBranch'>;
    };
    url: '/v1/ciProducts/{id}/additionalRepositories';
};

export type CiProductsAdditionalRepositoriesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiProductsAdditionalRepositoriesGetToManyRelatedError = CiProductsAdditionalRepositoriesGetToManyRelatedErrors[keyof CiProductsAdditionalRepositoriesGetToManyRelatedErrors];

export type CiProductsAdditionalRepositoriesGetToManyRelatedResponses = {
    /**
     * List of ScmRepositories
     */
    200: ScmRepositoriesResponse;
};

export type CiProductsAdditionalRepositoriesGetToManyRelatedResponse = CiProductsAdditionalRepositoriesGetToManyRelatedResponses[keyof CiProductsAdditionalRepositoriesGetToManyRelatedResponses];

export type CiProductsAppGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type appEncryptionDeclarations
         */
        'fields[appEncryptionDeclarations]'?: Array<'appDescription' | 'createdDate' | 'usesEncryption' | 'exempt' | 'containsProprietaryCryptography' | 'containsThirdPartyCryptography' | 'availableOnFrenchStore' | 'platform' | 'uploadedDate' | 'documentUrl' | 'documentName' | 'documentType' | 'appEncryptionDeclarationState' | 'codeValue' | 'app' | 'builds' | 'appEncryptionDeclarationDocument'>;
        /**
         * the fields to include for returned resources of type ciProducts
         */
        'fields[ciProducts]'?: Array<'name' | 'createdDate' | 'productType' | 'app' | 'bundleId' | 'workflows' | 'primaryRepositories' | 'additionalRepositories' | 'buildRuns'>;
        /**
         * the fields to include for returned resources of type betaGroups
         */
        'fields[betaGroups]'?: Array<'name' | 'createdDate' | 'isInternalGroup' | 'hasAccessToAllBuilds' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimitEnabled' | 'publicLinkLimit' | 'publicLink' | 'feedbackEnabled' | 'iosBuildsAvailableForAppleSiliconMac' | 'iosBuildsAvailableForAppleVision' | 'app' | 'builds' | 'betaTesters' | 'betaRecruitmentCriteria' | 'betaRecruitmentCriterionCompatibleBuildCheck'>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type preReleaseVersions
         */
        'fields[preReleaseVersions]'?: Array<'version' | 'platform' | 'builds' | 'app'>;
        /**
         * the fields to include for returned resources of type betaAppLocalizations
         */
        'fields[betaAppLocalizations]'?: Array<'feedbackEmail' | 'marketingUrl' | 'privacyPolicyUrl' | 'tvOsPrivacyPolicy' | 'description' | 'locale' | 'app'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * the fields to include for returned resources of type betaLicenseAgreements
         */
        'fields[betaLicenseAgreements]'?: Array<'agreementText' | 'app'>;
        /**
         * the fields to include for returned resources of type betaAppReviewDetails
         */
        'fields[betaAppReviewDetails]'?: Array<'contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'app'>;
        /**
         * the fields to include for returned resources of type appInfos
         */
        'fields[appInfos]'?: Array<'appStoreState' | 'state' | 'appStoreAgeRating' | 'australiaAgeRating' | 'brazilAgeRating' | 'brazilAgeRatingV2' | 'franceAgeRating' | 'koreaAgeRating' | 'kidsAgeBand' | 'app' | 'ageRatingDeclaration' | 'appInfoLocalizations' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo'>;
        /**
         * the fields to include for returned resources of type appClips
         */
        'fields[appClips]'?: Array<'bundleId' | 'app' | 'appClipDefaultExperiences' | 'appClipAdvancedExperiences'>;
        /**
         * the fields to include for returned resources of type endUserLicenseAgreements
         */
        'fields[endUserLicenseAgreements]'?: Array<'agreementText' | 'app' | 'territories'>;
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<'referenceName' | 'productId' | 'inAppPurchaseType' | 'state' | 'apps' | 'name' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images'>;
        /**
         * the fields to include for returned resources of type subscriptionGroups
         */
        'fields[subscriptionGroups]'?: Array<'referenceName' | 'subscriptions' | 'subscriptionGroupLocalizations'>;
        /**
         * the fields to include for returned resources of type gameCenterEnabledVersions
         */
        'fields[gameCenterEnabledVersions]'?: Array<'platform' | 'versionString' | 'iconAsset' | 'compatibleVersions' | 'app'>;
        /**
         * the fields to include for returned resources of type appCustomProductPages
         */
        'fields[appCustomProductPages]'?: Array<'name' | 'url' | 'visible' | 'app' | 'appCustomProductPageVersions'>;
        /**
         * the fields to include for returned resources of type promotedPurchases
         */
        'fields[promotedPurchases]'?: Array<'visibleForAllUsers' | 'enabled' | 'state' | 'inAppPurchaseV2' | 'subscription'>;
        /**
         * the fields to include for returned resources of type appEvents
         */
        'fields[appEvents]'?: Array<'referenceName' | 'badge' | 'eventState' | 'deepLink' | 'purchaseRequirement' | 'primaryLocale' | 'priority' | 'purpose' | 'territorySchedules' | 'archivedTerritorySchedules' | 'localizations'>;
        /**
         * the fields to include for returned resources of type reviewSubmissions
         */
        'fields[reviewSubmissions]'?: Array<'platform' | 'submittedDate' | 'state' | 'app' | 'items' | 'appStoreVersionForReview' | 'submittedByActor' | 'lastUpdatedByActor'>;
        /**
         * the fields to include for returned resources of type subscriptionGracePeriods
         */
        'fields[subscriptionGracePeriods]'?: Array<'optIn' | 'sandboxOptIn' | 'duration' | 'renewalType'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<'name' | 'platform' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'app' | 'latestControlVersion' | 'controlVersions' | 'appStoreVersionExperimentTreatments'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appEncryptionDeclarations' | 'ciProduct' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'endUserLicenseAgreement' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2'>;
        /**
         * maximum number of related appEncryptionDeclarations returned (when they are included)
         */
        'limit[appEncryptionDeclarations]'?: number;
        /**
         * maximum number of related betaGroups returned (when they are included)
         */
        'limit[betaGroups]'?: number;
        /**
         * maximum number of related appStoreVersions returned (when they are included)
         */
        'limit[appStoreVersions]'?: number;
        /**
         * maximum number of related preReleaseVersions returned (when they are included)
         */
        'limit[preReleaseVersions]'?: number;
        /**
         * maximum number of related betaAppLocalizations returned (when they are included)
         */
        'limit[betaAppLocalizations]'?: number;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
        /**
         * maximum number of related appInfos returned (when they are included)
         */
        'limit[appInfos]'?: number;
        /**
         * maximum number of related appClips returned (when they are included)
         */
        'limit[appClips]'?: number;
        /**
         * maximum number of related inAppPurchases returned (when they are included)
         * @deprecated
         */
        'limit[inAppPurchases]'?: number;
        /**
         * maximum number of related subscriptionGroups returned (when they are included)
         */
        'limit[subscriptionGroups]'?: number;
        /**
         * maximum number of related gameCenterEnabledVersions returned (when they are included)
         * @deprecated
         */
        'limit[gameCenterEnabledVersions]'?: number;
        /**
         * maximum number of related appCustomProductPages returned (when they are included)
         */
        'limit[appCustomProductPages]'?: number;
        /**
         * maximum number of related inAppPurchasesV2 returned (when they are included)
         */
        'limit[inAppPurchasesV2]'?: number;
        /**
         * maximum number of related promotedPurchases returned (when they are included)
         */
        'limit[promotedPurchases]'?: number;
        /**
         * maximum number of related appEvents returned (when they are included)
         */
        'limit[appEvents]'?: number;
        /**
         * maximum number of related reviewSubmissions returned (when they are included)
         */
        'limit[reviewSubmissions]'?: number;
        /**
         * maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
         */
        'limit[appStoreVersionExperimentsV2]'?: number;
    };
    url: '/v1/ciProducts/{id}/app';
};

export type CiProductsAppGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiProductsAppGetToOneRelatedError = CiProductsAppGetToOneRelatedErrors[keyof CiProductsAppGetToOneRelatedErrors];

export type CiProductsAppGetToOneRelatedResponses = {
    /**
     * Single App
     */
    200: AppResponse;
};

export type CiProductsAppGetToOneRelatedResponse = CiProductsAppGetToOneRelatedResponses[keyof CiProductsAppGetToOneRelatedResponses];

export type CiProductsBuildRunsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by id(s) of related 'builds'
         */
        'filter[builds]'?: Array<string>;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'number' | '-number'>;
        /**
         * the fields to include for returned resources of type ciBuildRuns
         */
        'fields[ciBuildRuns]'?: Array<'number' | 'createdDate' | 'startedDate' | 'finishedDate' | 'sourceCommit' | 'destinationCommit' | 'isPullRequestBuild' | 'issueCounts' | 'executionProgress' | 'completionStatus' | 'startReason' | 'cancelReason' | 'builds' | 'workflow' | 'product' | 'sourceBranchOrTag' | 'destinationBranch' | 'actions' | 'pullRequest'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * the fields to include for returned resources of type ciWorkflows
         */
        'fields[ciWorkflows]'?: Array<'name' | 'description' | 'branchStartCondition' | 'tagStartCondition' | 'pullRequestStartCondition' | 'scheduledStartCondition' | 'manualBranchStartCondition' | 'manualTagStartCondition' | 'manualPullRequestStartCondition' | 'actions' | 'isEnabled' | 'isLockedForEditing' | 'clean' | 'containerFilePath' | 'lastModifiedDate' | 'product' | 'repository' | 'xcodeVersion' | 'macOsVersion' | 'buildRuns'>;
        /**
         * the fields to include for returned resources of type ciProducts
         */
        'fields[ciProducts]'?: Array<'name' | 'createdDate' | 'productType' | 'app' | 'bundleId' | 'workflows' | 'primaryRepositories' | 'additionalRepositories' | 'buildRuns'>;
        /**
         * the fields to include for returned resources of type scmGitReferences
         */
        'fields[scmGitReferences]'?: Array<'name' | 'canonicalName' | 'isDeleted' | 'kind' | 'repository'>;
        /**
         * the fields to include for returned resources of type scmPullRequests
         */
        'fields[scmPullRequests]'?: Array<'title' | 'number' | 'webUrl' | 'sourceRepositoryOwner' | 'sourceRepositoryName' | 'sourceBranchName' | 'destinationRepositoryOwner' | 'destinationRepositoryName' | 'destinationBranchName' | 'isClosed' | 'isCrossRepository' | 'repository'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'builds' | 'workflow' | 'product' | 'sourceBranchOrTag' | 'destinationBranch' | 'pullRequest'>;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
    };
    url: '/v1/ciProducts/{id}/buildRuns';
};

export type CiProductsBuildRunsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiProductsBuildRunsGetToManyRelatedError = CiProductsBuildRunsGetToManyRelatedErrors[keyof CiProductsBuildRunsGetToManyRelatedErrors];

export type CiProductsBuildRunsGetToManyRelatedResponses = {
    /**
     * List of CiBuildRuns
     */
    200: CiBuildRunsResponse;
};

export type CiProductsBuildRunsGetToManyRelatedResponse = CiProductsBuildRunsGetToManyRelatedResponses[keyof CiProductsBuildRunsGetToManyRelatedResponses];

export type CiProductsPrimaryRepositoriesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<'lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests'>;
        /**
         * the fields to include for returned resources of type scmProviders
         */
        'fields[scmProviders]'?: Array<'scmProviderType' | 'url' | 'repositories'>;
        /**
         * the fields to include for returned resources of type scmGitReferences
         */
        'fields[scmGitReferences]'?: Array<'name' | 'canonicalName' | 'isDeleted' | 'kind' | 'repository'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'scmProvider' | 'defaultBranch'>;
    };
    url: '/v1/ciProducts/{id}/primaryRepositories';
};

export type CiProductsPrimaryRepositoriesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiProductsPrimaryRepositoriesGetToManyRelatedError = CiProductsPrimaryRepositoriesGetToManyRelatedErrors[keyof CiProductsPrimaryRepositoriesGetToManyRelatedErrors];

export type CiProductsPrimaryRepositoriesGetToManyRelatedResponses = {
    /**
     * List of ScmRepositories
     */
    200: ScmRepositoriesResponse;
};

export type CiProductsPrimaryRepositoriesGetToManyRelatedResponse = CiProductsPrimaryRepositoriesGetToManyRelatedResponses[keyof CiProductsPrimaryRepositoriesGetToManyRelatedResponses];

export type CiProductsWorkflowsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciWorkflows
         */
        'fields[ciWorkflows]'?: Array<'name' | 'description' | 'branchStartCondition' | 'tagStartCondition' | 'pullRequestStartCondition' | 'scheduledStartCondition' | 'manualBranchStartCondition' | 'manualTagStartCondition' | 'manualPullRequestStartCondition' | 'actions' | 'isEnabled' | 'isLockedForEditing' | 'clean' | 'containerFilePath' | 'lastModifiedDate' | 'product' | 'repository' | 'xcodeVersion' | 'macOsVersion' | 'buildRuns'>;
        /**
         * the fields to include for returned resources of type ciProducts
         */
        'fields[ciProducts]'?: Array<'name' | 'createdDate' | 'productType' | 'app' | 'bundleId' | 'workflows' | 'primaryRepositories' | 'additionalRepositories' | 'buildRuns'>;
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<'lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests'>;
        /**
         * the fields to include for returned resources of type ciXcodeVersions
         */
        'fields[ciXcodeVersions]'?: Array<'version' | 'name' | 'testDestinations' | 'macOsVersions'>;
        /**
         * the fields to include for returned resources of type ciMacOsVersions
         */
        'fields[ciMacOsVersions]'?: Array<'version' | 'name' | 'xcodeVersions'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'product' | 'repository' | 'xcodeVersion' | 'macOsVersion'>;
    };
    url: '/v1/ciProducts/{id}/workflows';
};

export type CiProductsWorkflowsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiProductsWorkflowsGetToManyRelatedError = CiProductsWorkflowsGetToManyRelatedErrors[keyof CiProductsWorkflowsGetToManyRelatedErrors];

export type CiProductsWorkflowsGetToManyRelatedResponses = {
    /**
     * List of CiWorkflows
     */
    200: CiWorkflowsResponse;
};

export type CiProductsWorkflowsGetToManyRelatedResponse = CiProductsWorkflowsGetToManyRelatedResponses[keyof CiProductsWorkflowsGetToManyRelatedResponses];

export type CiWorkflowsBuildRunsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by id(s) of related 'builds'
         */
        'filter[builds]'?: Array<string>;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'number' | '-number'>;
        /**
         * the fields to include for returned resources of type ciBuildRuns
         */
        'fields[ciBuildRuns]'?: Array<'number' | 'createdDate' | 'startedDate' | 'finishedDate' | 'sourceCommit' | 'destinationCommit' | 'isPullRequestBuild' | 'issueCounts' | 'executionProgress' | 'completionStatus' | 'startReason' | 'cancelReason' | 'builds' | 'workflow' | 'product' | 'sourceBranchOrTag' | 'destinationBranch' | 'actions' | 'pullRequest'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * the fields to include for returned resources of type ciWorkflows
         */
        'fields[ciWorkflows]'?: Array<'name' | 'description' | 'branchStartCondition' | 'tagStartCondition' | 'pullRequestStartCondition' | 'scheduledStartCondition' | 'manualBranchStartCondition' | 'manualTagStartCondition' | 'manualPullRequestStartCondition' | 'actions' | 'isEnabled' | 'isLockedForEditing' | 'clean' | 'containerFilePath' | 'lastModifiedDate' | 'product' | 'repository' | 'xcodeVersion' | 'macOsVersion' | 'buildRuns'>;
        /**
         * the fields to include for returned resources of type ciProducts
         */
        'fields[ciProducts]'?: Array<'name' | 'createdDate' | 'productType' | 'app' | 'bundleId' | 'workflows' | 'primaryRepositories' | 'additionalRepositories' | 'buildRuns'>;
        /**
         * the fields to include for returned resources of type scmGitReferences
         */
        'fields[scmGitReferences]'?: Array<'name' | 'canonicalName' | 'isDeleted' | 'kind' | 'repository'>;
        /**
         * the fields to include for returned resources of type scmPullRequests
         */
        'fields[scmPullRequests]'?: Array<'title' | 'number' | 'webUrl' | 'sourceRepositoryOwner' | 'sourceRepositoryName' | 'sourceBranchName' | 'destinationRepositoryOwner' | 'destinationRepositoryName' | 'destinationBranchName' | 'isClosed' | 'isCrossRepository' | 'repository'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'builds' | 'workflow' | 'product' | 'sourceBranchOrTag' | 'destinationBranch' | 'pullRequest'>;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
    };
    url: '/v1/ciWorkflows/{id}/buildRuns';
};

export type CiWorkflowsBuildRunsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiWorkflowsBuildRunsGetToManyRelatedError = CiWorkflowsBuildRunsGetToManyRelatedErrors[keyof CiWorkflowsBuildRunsGetToManyRelatedErrors];

export type CiWorkflowsBuildRunsGetToManyRelatedResponses = {
    /**
     * List of CiBuildRuns
     */
    200: CiBuildRunsResponse;
};

export type CiWorkflowsBuildRunsGetToManyRelatedResponse = CiWorkflowsBuildRunsGetToManyRelatedResponses[keyof CiWorkflowsBuildRunsGetToManyRelatedResponses];

export type CiWorkflowsRepositoryGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<'lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests'>;
        /**
         * the fields to include for returned resources of type scmProviders
         */
        'fields[scmProviders]'?: Array<'scmProviderType' | 'url' | 'repositories'>;
        /**
         * the fields to include for returned resources of type scmGitReferences
         */
        'fields[scmGitReferences]'?: Array<'name' | 'canonicalName' | 'isDeleted' | 'kind' | 'repository'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'scmProvider' | 'defaultBranch'>;
    };
    url: '/v1/ciWorkflows/{id}/repository';
};

export type CiWorkflowsRepositoryGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiWorkflowsRepositoryGetToOneRelatedError = CiWorkflowsRepositoryGetToOneRelatedErrors[keyof CiWorkflowsRepositoryGetToOneRelatedErrors];

export type CiWorkflowsRepositoryGetToOneRelatedResponses = {
    /**
     * Single ScmRepository
     */
    200: ScmRepositoryResponse;
};

export type CiWorkflowsRepositoryGetToOneRelatedResponse = CiWorkflowsRepositoryGetToOneRelatedResponses[keyof CiWorkflowsRepositoryGetToOneRelatedResponses];

export type CiXcodeVersionsMacOsVersionsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciMacOsVersions
         */
        'fields[ciMacOsVersions]'?: Array<'version' | 'name' | 'xcodeVersions'>;
        /**
         * the fields to include for returned resources of type ciXcodeVersions
         */
        'fields[ciXcodeVersions]'?: Array<'version' | 'name' | 'testDestinations' | 'macOsVersions'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'xcodeVersions'>;
        /**
         * maximum number of related xcodeVersions returned (when they are included)
         */
        'limit[xcodeVersions]'?: number;
    };
    url: '/v1/ciXcodeVersions/{id}/macOsVersions';
};

export type CiXcodeVersionsMacOsVersionsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CiXcodeVersionsMacOsVersionsGetToManyRelatedError = CiXcodeVersionsMacOsVersionsGetToManyRelatedErrors[keyof CiXcodeVersionsMacOsVersionsGetToManyRelatedErrors];

export type CiXcodeVersionsMacOsVersionsGetToManyRelatedResponses = {
    /**
     * List of CiMacOsVersions
     */
    200: CiMacOsVersionsResponse;
};

export type CiXcodeVersionsMacOsVersionsGetToManyRelatedResponse = CiXcodeVersionsMacOsVersionsGetToManyRelatedResponses[keyof CiXcodeVersionsMacOsVersionsGetToManyRelatedResponses];

export type CustomerReviewsResponseGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type customerReviewResponses
         */
        'fields[customerReviewResponses]'?: Array<'responseBody' | 'lastModifiedDate' | 'state' | 'review'>;
        /**
         * the fields to include for returned resources of type customerReviews
         */
        'fields[customerReviews]'?: Array<'rating' | 'title' | 'body' | 'reviewerNickname' | 'createdDate' | 'territory' | 'response'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'review'>;
    };
    url: '/v1/customerReviews/{id}/response';
};

export type CustomerReviewsResponseGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type CustomerReviewsResponseGetToOneRelatedError = CustomerReviewsResponseGetToOneRelatedErrors[keyof CustomerReviewsResponseGetToOneRelatedErrors];

export type CustomerReviewsResponseGetToOneRelatedResponses = {
    /**
     * Single CustomerReviewResponse
     */
    200: CustomerReviewResponseV1Response;
};

export type CustomerReviewsResponseGetToOneRelatedResponse = CustomerReviewsResponseGetToOneRelatedResponses[keyof CustomerReviewsResponseGetToOneRelatedResponses];

export type DiagnosticSignaturesLogsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/diagnosticSignatures/{id}/logs';
};

export type DiagnosticSignaturesLogsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type DiagnosticSignaturesLogsGetToManyRelatedError = DiagnosticSignaturesLogsGetToManyRelatedErrors[keyof DiagnosticSignaturesLogsGetToManyRelatedErrors];

export type DiagnosticSignaturesLogsGetToManyRelatedResponses = {
    /**
     * List of DiagnosticLogs
     */
    200: DiagnosticLogs;
};

export type DiagnosticSignaturesLogsGetToManyRelatedResponse = DiagnosticSignaturesLogsGetToManyRelatedResponses[keyof DiagnosticSignaturesLogsGetToManyRelatedResponses];

export type EndUserLicenseAgreementsTerritoriesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/endUserLicenseAgreements/{id}/territories';
};

export type EndUserLicenseAgreementsTerritoriesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type EndUserLicenseAgreementsTerritoriesGetToManyRelatedError = EndUserLicenseAgreementsTerritoriesGetToManyRelatedErrors[keyof EndUserLicenseAgreementsTerritoriesGetToManyRelatedErrors];

export type EndUserLicenseAgreementsTerritoriesGetToManyRelatedResponses = {
    /**
     * List of Territories with get
     */
    200: TerritoriesWithoutIncludesResponse;
};

export type EndUserLicenseAgreementsTerritoriesGetToManyRelatedResponse = EndUserLicenseAgreementsTerritoriesGetToManyRelatedResponses[keyof EndUserLicenseAgreementsTerritoriesGetToManyRelatedResponses];

export type GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<'referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<'referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementLocalizations
         */
        'fields[gameCenterAchievementLocalizations]'?: Array<'locale' | 'name' | 'beforeEarnedDescription' | 'afterEarnedDescription' | 'gameCenterAchievement' | 'gameCenterAchievementImage'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementReleases
         */
        'fields[gameCenterAchievementReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterAchievement'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases'>;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
    url: '/v1/gameCenterAchievementLocalizations/{id}/gameCenterAchievement';
};

export type GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedError = GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedErrors[keyof GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedErrors];

export type GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedResponses = {
    /**
     * Single GameCenterAchievement
     */
    200: GameCenterAchievementResponse;
};

export type GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedResponse = GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedResponses[keyof GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedResponses];

export type GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievementImages
         */
        'fields[gameCenterAchievementImages]'?: Array<'fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'gameCenterAchievementLocalization'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementLocalizations
         */
        'fields[gameCenterAchievementLocalizations]'?: Array<'locale' | 'name' | 'beforeEarnedDescription' | 'afterEarnedDescription' | 'gameCenterAchievement' | 'gameCenterAchievementImage'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterAchievementLocalization'>;
    };
    url: '/v1/gameCenterAchievementLocalizations/{id}/gameCenterAchievementImage';
};

export type GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedError = GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedErrors[keyof GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedErrors];

export type GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedResponses = {
    /**
     * Single GameCenterAchievementImage
     */
    200: GameCenterAchievementImageResponse;
};

export type GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedResponse = GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedResponses[keyof GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedResponses];

export type GameCenterAchievementsGroupAchievementGetToOneRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterAchievements/{id}/relationships/groupAchievement';
};

export type GameCenterAchievementsGroupAchievementGetToOneRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterAchievementsGroupAchievementGetToOneRelationshipError = GameCenterAchievementsGroupAchievementGetToOneRelationshipErrors[keyof GameCenterAchievementsGroupAchievementGetToOneRelationshipErrors];

export type GameCenterAchievementsGroupAchievementGetToOneRelationshipResponses = {
    /**
     * Related linkage
     */
    200: GameCenterAchievementGroupAchievementLinkageResponse;
};

export type GameCenterAchievementsGroupAchievementGetToOneRelationshipResponse = GameCenterAchievementsGroupAchievementGetToOneRelationshipResponses[keyof GameCenterAchievementsGroupAchievementGetToOneRelationshipResponses];

export type GameCenterAchievementsGroupAchievementUpdateToOneRelationshipData = {
    /**
     * Related linkage
     */
    body: GameCenterAchievementGroupAchievementLinkageRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterAchievements/{id}/relationships/groupAchievement';
};

export type GameCenterAchievementsGroupAchievementUpdateToOneRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterAchievementsGroupAchievementUpdateToOneRelationshipError = GameCenterAchievementsGroupAchievementUpdateToOneRelationshipErrors[keyof GameCenterAchievementsGroupAchievementUpdateToOneRelationshipErrors];

export type GameCenterAchievementsGroupAchievementUpdateToOneRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterAchievementsGroupAchievementUpdateToOneRelationshipResponse = GameCenterAchievementsGroupAchievementUpdateToOneRelationshipResponses[keyof GameCenterAchievementsGroupAchievementUpdateToOneRelationshipResponses];

export type GameCenterAchievementsGroupAchievementGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<'referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<'referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementLocalizations
         */
        'fields[gameCenterAchievementLocalizations]'?: Array<'locale' | 'name' | 'beforeEarnedDescription' | 'afterEarnedDescription' | 'gameCenterAchievement' | 'gameCenterAchievementImage'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementReleases
         */
        'fields[gameCenterAchievementReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterAchievement'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases'>;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
    url: '/v1/gameCenterAchievements/{id}/groupAchievement';
};

export type GameCenterAchievementsGroupAchievementGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterAchievementsGroupAchievementGetToOneRelatedError = GameCenterAchievementsGroupAchievementGetToOneRelatedErrors[keyof GameCenterAchievementsGroupAchievementGetToOneRelatedErrors];

export type GameCenterAchievementsGroupAchievementGetToOneRelatedResponses = {
    /**
     * Single GameCenterAchievement
     */
    200: GameCenterAchievementResponse;
};

export type GameCenterAchievementsGroupAchievementGetToOneRelatedResponse = GameCenterAchievementsGroupAchievementGetToOneRelatedResponses[keyof GameCenterAchievementsGroupAchievementGetToOneRelatedResponses];

export type GameCenterAchievementsLocalizationsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievementLocalizations
         */
        'fields[gameCenterAchievementLocalizations]'?: Array<'locale' | 'name' | 'beforeEarnedDescription' | 'afterEarnedDescription' | 'gameCenterAchievement' | 'gameCenterAchievementImage'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<'referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementImages
         */
        'fields[gameCenterAchievementImages]'?: Array<'fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'gameCenterAchievementLocalization'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterAchievement' | 'gameCenterAchievementImage'>;
    };
    url: '/v1/gameCenterAchievements/{id}/localizations';
};

export type GameCenterAchievementsLocalizationsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterAchievementsLocalizationsGetToManyRelatedError = GameCenterAchievementsLocalizationsGetToManyRelatedErrors[keyof GameCenterAchievementsLocalizationsGetToManyRelatedErrors];

export type GameCenterAchievementsLocalizationsGetToManyRelatedResponses = {
    /**
     * List of GameCenterAchievementLocalizations
     */
    200: GameCenterAchievementLocalizationsResponse;
};

export type GameCenterAchievementsLocalizationsGetToManyRelatedResponse = GameCenterAchievementsLocalizationsGetToManyRelatedResponses[keyof GameCenterAchievementsLocalizationsGetToManyRelatedResponses];

export type GameCenterAchievementsReleasesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'live'
         */
        'filter[live]'?: Array<string>;
        /**
         * filter by id(s) of related 'gameCenterDetail'
         */
        'filter[gameCenterDetail]'?: Array<string>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementReleases
         */
        'fields[gameCenterAchievementReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterAchievement'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<'referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterAchievement'>;
    };
    url: '/v1/gameCenterAchievements/{id}/releases';
};

export type GameCenterAchievementsReleasesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterAchievementsReleasesGetToManyRelatedError = GameCenterAchievementsReleasesGetToManyRelatedErrors[keyof GameCenterAchievementsReleasesGetToManyRelatedErrors];

export type GameCenterAchievementsReleasesGetToManyRelatedResponses = {
    /**
     * List of GameCenterAchievementReleases
     */
    200: GameCenterAchievementReleasesResponse;
};

export type GameCenterAchievementsReleasesGetToManyRelatedResponse = GameCenterAchievementsReleasesGetToManyRelatedResponses[keyof GameCenterAchievementsReleasesGetToManyRelatedResponses];

export type GameCenterAppVersionsAppStoreVersionGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type ageRatingDeclarations
         */
        'fields[ageRatingDeclarations]'?: Array<'alcoholTobaccoOrDrugUseOrReferences' | 'contests' | 'gamblingAndContests' | 'gambling' | 'gamblingSimulated' | 'kidsAgeBand' | 'lootBox' | 'medicalOrTreatmentInformation' | 'profanityOrCrudeHumor' | 'sexualContentGraphicAndNudity' | 'sexualContentOrNudity' | 'horrorOrFearThemes' | 'matureOrSuggestiveThemes' | 'unrestrictedWebAccess' | 'violenceCartoonOrFantasy' | 'violenceRealisticProlongedGraphicOrSadistic' | 'violenceRealistic' | 'ageRatingOverride' | 'koreaAgeRatingOverride' | 'seventeenPlus'>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<'description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets'>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * the fields to include for returned resources of type appStoreVersionPhasedReleases
         */
        'fields[appStoreVersionPhasedReleases]'?: Array<'phasedReleaseState' | 'startDate' | 'totalPauseDuration' | 'currentDayNumber'>;
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<'enabled' | 'compatibilityVersions' | 'appStoreVersion'>;
        /**
         * the fields to include for returned resources of type routingAppCoverages
         */
        'fields[routingAppCoverages]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'appStoreVersion'>;
        /**
         * the fields to include for returned resources of type appStoreReviewDetails
         */
        'fields[appStoreReviewDetails]'?: Array<'contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'appStoreVersion' | 'appStoreReviewAttachments'>;
        /**
         * the fields to include for returned resources of type appStoreVersionSubmissions
         */
        'fields[appStoreVersionSubmissions]'?: Array<'appStoreVersion'>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<'action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<'name' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'appStoreVersion' | 'appStoreVersionExperimentTreatments' | 'platform' | 'app' | 'latestControlVersion' | 'controlVersions'>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackages
         */
        'fields[alternativeDistributionPackages]'?: Array<'versions'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionPackage'>;
        /**
         * maximum number of related appStoreVersionLocalizations returned (when they are included)
         */
        'limit[appStoreVersionLocalizations]'?: number;
        /**
         * maximum number of related appStoreVersionExperiments returned (when they are included)
         * @deprecated
         */
        'limit[appStoreVersionExperiments]'?: number;
        /**
         * maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
         */
        'limit[appStoreVersionExperimentsV2]'?: number;
    };
    url: '/v1/gameCenterAppVersions/{id}/appStoreVersion';
};

export type GameCenterAppVersionsAppStoreVersionGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterAppVersionsAppStoreVersionGetToOneRelatedError = GameCenterAppVersionsAppStoreVersionGetToOneRelatedErrors[keyof GameCenterAppVersionsAppStoreVersionGetToOneRelatedErrors];

export type GameCenterAppVersionsAppStoreVersionGetToOneRelatedResponses = {
    /**
     * Single AppStoreVersion
     */
    200: AppStoreVersionResponse;
};

export type GameCenterAppVersionsAppStoreVersionGetToOneRelatedResponse = GameCenterAppVersionsAppStoreVersionGetToOneRelatedResponses[keyof GameCenterAppVersionsAppStoreVersionGetToOneRelatedResponses];

export type GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterAppVersionCompatibilityVersionsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions';
};

export type GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipError = GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipErrors[keyof GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipErrors];

export type GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipResponse = GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipResponses[keyof GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipResponses];

export type GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions';
};

export type GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipError = GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipErrors[keyof GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipErrors];

export type GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipResponses = {
    /**
     * List of related linkages
     */
    200: GameCenterAppVersionCompatibilityVersionsLinkagesResponse;
};

export type GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipResponse = GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipResponses[keyof GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipResponses];

export type GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterAppVersionCompatibilityVersionsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions';
};

export type GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipError = GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipErrors[keyof GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipErrors];

export type GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipResponse = GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipResponses[keyof GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipResponses];

export type GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'enabled'
         */
        'filter[enabled]'?: Array<string>;
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<'enabled' | 'compatibilityVersions' | 'appStoreVersion'>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'compatibilityVersions' | 'appStoreVersion'>;
        /**
         * maximum number of related compatibilityVersions returned (when they are included)
         */
        'limit[compatibilityVersions]'?: number;
    };
    url: '/v1/gameCenterAppVersions/{id}/compatibilityVersions';
};

export type GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedError = GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedErrors[keyof GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedErrors];

export type GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedResponses = {
    /**
     * List of GameCenterAppVersions
     */
    200: GameCenterAppVersionsResponse;
};

export type GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedResponse = GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedResponses[keyof GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedResponses];

export type GameCenterDetailsAchievementReleasesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'live'
         */
        'filter[live]'?: Array<string>;
        /**
         * filter by id(s) of related 'gameCenterAchievement'
         */
        'filter[gameCenterAchievement]'?: Array<string>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementReleases
         */
        'fields[gameCenterAchievementReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterAchievement'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<'referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterAchievement'>;
    };
    url: '/v1/gameCenterDetails/{id}/achievementReleases';
};

export type GameCenterDetailsAchievementReleasesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterDetailsAchievementReleasesGetToManyRelatedError = GameCenterDetailsAchievementReleasesGetToManyRelatedErrors[keyof GameCenterDetailsAchievementReleasesGetToManyRelatedErrors];

export type GameCenterDetailsAchievementReleasesGetToManyRelatedResponses = {
    /**
     * List of GameCenterAchievementReleases
     */
    200: GameCenterAchievementReleasesResponse;
};

export type GameCenterDetailsAchievementReleasesGetToManyRelatedResponse = GameCenterDetailsAchievementReleasesGetToManyRelatedResponses[keyof GameCenterDetailsAchievementReleasesGetToManyRelatedResponses];

export type GameCenterDetailsGameCenterAchievementsGetToManyRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/gameCenterDetails/{id}/relationships/gameCenterAchievements';
};

export type GameCenterDetailsGameCenterAchievementsGetToManyRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterDetailsGameCenterAchievementsGetToManyRelationshipError = GameCenterDetailsGameCenterAchievementsGetToManyRelationshipErrors[keyof GameCenterDetailsGameCenterAchievementsGetToManyRelationshipErrors];

export type GameCenterDetailsGameCenterAchievementsGetToManyRelationshipResponses = {
    /**
     * List of related linkages
     */
    200: GameCenterDetailGameCenterAchievementsLinkagesResponse;
};

export type GameCenterDetailsGameCenterAchievementsGetToManyRelationshipResponse = GameCenterDetailsGameCenterAchievementsGetToManyRelationshipResponses[keyof GameCenterDetailsGameCenterAchievementsGetToManyRelationshipResponses];

export type GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterDetailGameCenterAchievementsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterDetails/{id}/relationships/gameCenterAchievements';
};

export type GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipError = GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipErrors[keyof GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipErrors];

export type GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipResponse = GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipResponses[keyof GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipResponses];

export type GameCenterDetailsGameCenterAchievementsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'referenceName'
         */
        'filter[referenceName]'?: Array<string>;
        /**
         * filter by attribute 'archived'
         */
        'filter[archived]'?: Array<string>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<'referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<'referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementLocalizations
         */
        'fields[gameCenterAchievementLocalizations]'?: Array<'locale' | 'name' | 'beforeEarnedDescription' | 'afterEarnedDescription' | 'gameCenterAchievement' | 'gameCenterAchievementImage'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementReleases
         */
        'fields[gameCenterAchievementReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterAchievement'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases'>;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
    url: '/v1/gameCenterDetails/{id}/gameCenterAchievements';
};

export type GameCenterDetailsGameCenterAchievementsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterDetailsGameCenterAchievementsGetToManyRelatedError = GameCenterDetailsGameCenterAchievementsGetToManyRelatedErrors[keyof GameCenterDetailsGameCenterAchievementsGetToManyRelatedErrors];

export type GameCenterDetailsGameCenterAchievementsGetToManyRelatedResponses = {
    /**
     * List of GameCenterAchievements
     */
    200: GameCenterAchievementsResponse;
};

export type GameCenterDetailsGameCenterAchievementsGetToManyRelatedResponse = GameCenterDetailsGameCenterAchievementsGetToManyRelatedResponses[keyof GameCenterDetailsGameCenterAchievementsGetToManyRelatedResponses];

export type GameCenterDetailsGameCenterAppVersionsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'enabled'
         */
        'filter[enabled]'?: Array<string>;
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<'enabled' | 'compatibilityVersions' | 'appStoreVersion'>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'compatibilityVersions' | 'appStoreVersion'>;
        /**
         * maximum number of related compatibilityVersions returned (when they are included)
         */
        'limit[compatibilityVersions]'?: number;
    };
    url: '/v1/gameCenterDetails/{id}/gameCenterAppVersions';
};

export type GameCenterDetailsGameCenterAppVersionsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterDetailsGameCenterAppVersionsGetToManyRelatedError = GameCenterDetailsGameCenterAppVersionsGetToManyRelatedErrors[keyof GameCenterDetailsGameCenterAppVersionsGetToManyRelatedErrors];

export type GameCenterDetailsGameCenterAppVersionsGetToManyRelatedResponses = {
    /**
     * List of GameCenterAppVersions
     */
    200: GameCenterAppVersionsResponse;
};

export type GameCenterDetailsGameCenterAppVersionsGetToManyRelatedResponse = GameCenterDetailsGameCenterAppVersionsGetToManyRelatedResponses[keyof GameCenterDetailsGameCenterAppVersionsGetToManyRelatedResponses];

export type GameCenterDetailsGameCenterGroupGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<'referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<'defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<'referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<'referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements'>;
        /**
         * maximum number of related gameCenterDetails returned (when they are included)
         */
        'limit[gameCenterDetails]'?: number;
        /**
         * maximum number of related gameCenterLeaderboards returned (when they are included)
         */
        'limit[gameCenterLeaderboards]'?: number;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
        /**
         * maximum number of related gameCenterAchievements returned (when they are included)
         */
        'limit[gameCenterAchievements]'?: number;
    };
    url: '/v1/gameCenterDetails/{id}/gameCenterGroup';
};

export type GameCenterDetailsGameCenterGroupGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterDetailsGameCenterGroupGetToOneRelatedError = GameCenterDetailsGameCenterGroupGetToOneRelatedErrors[keyof GameCenterDetailsGameCenterGroupGetToOneRelatedErrors];

export type GameCenterDetailsGameCenterGroupGetToOneRelatedResponses = {
    /**
     * Single GameCenterGroup
     */
    200: GameCenterGroupResponse;
};

export type GameCenterDetailsGameCenterGroupGetToOneRelatedResponse = GameCenterDetailsGameCenterGroupGetToOneRelatedResponses[keyof GameCenterDetailsGameCenterGroupGetToOneRelatedResponses];

export type GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboardSets';
};

export type GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipError = GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipErrors[keyof GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipErrors];

export type GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipResponses = {
    /**
     * List of related linkages
     */
    200: GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse;
};

export type GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipResponse = GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipResponses[keyof GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipResponses];

export type GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboardSets';
};

export type GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipError = GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipErrors[keyof GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipErrors];

export type GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipResponse = GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipResponses[keyof GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipResponses];

export type GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'referenceName'
         */
        'filter[referenceName]'?: Array<string>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<'referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<'referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
         */
        'fields[gameCenterLeaderboardSetLocalizations]'?: Array<'locale' | 'name' | 'gameCenterLeaderboardSet' | 'gameCenterLeaderboardSetImage'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<'defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetReleases
         */
        'fields[gameCenterLeaderboardSetReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterLeaderboardSet'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related gameCenterLeaderboards returned (when they are included)
         */
        'limit[gameCenterLeaderboards]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
    url: '/v1/gameCenterDetails/{id}/gameCenterLeaderboardSets';
};

export type GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedError = GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedErrors[keyof GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedErrors];

export type GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedResponses = {
    /**
     * List of GameCenterLeaderboardSets
     */
    200: GameCenterLeaderboardSetsResponse;
};

export type GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedResponse = GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedResponses[keyof GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedResponses];

export type GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboards';
};

export type GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipError = GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipErrors[keyof GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipErrors];

export type GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipResponses = {
    /**
     * List of related linkages
     */
    200: GameCenterDetailGameCenterLeaderboardsLinkagesResponse;
};

export type GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipResponse = GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipResponses[keyof GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipResponses];

export type GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterDetailGameCenterLeaderboardsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboards';
};

export type GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipError = GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipErrors[keyof GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipErrors];

export type GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipResponse = GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipResponses[keyof GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipResponses];

export type GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'referenceName'
         */
        'filter[referenceName]'?: Array<string>;
        /**
         * filter by attribute 'archived'
         */
        'filter[archived]'?: Array<string>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<'defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<'referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<'referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardLocalizations
         */
        'fields[gameCenterLeaderboardLocalizations]'?: Array<'locale' | 'name' | 'formatterOverride' | 'formatterSuffix' | 'formatterSuffixSingular' | 'gameCenterLeaderboard' | 'gameCenterLeaderboardImage'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterLeaderboard'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
    url: '/v1/gameCenterDetails/{id}/gameCenterLeaderboards';
};

export type GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedError = GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedErrors[keyof GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedErrors];

export type GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedResponses = {
    /**
     * List of GameCenterLeaderboards
     */
    200: GameCenterLeaderboardsResponse;
};

export type GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedResponse = GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedResponses[keyof GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedResponses];

export type GameCenterDetailsLeaderboardReleasesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'live'
         */
        'filter[live]'?: Array<string>;
        /**
         * filter by id(s) of related 'gameCenterLeaderboard'
         */
        'filter[gameCenterLeaderboard]'?: Array<string>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterLeaderboard'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<'defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterLeaderboard'>;
    };
    url: '/v1/gameCenterDetails/{id}/leaderboardReleases';
};

export type GameCenterDetailsLeaderboardReleasesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterDetailsLeaderboardReleasesGetToManyRelatedError = GameCenterDetailsLeaderboardReleasesGetToManyRelatedErrors[keyof GameCenterDetailsLeaderboardReleasesGetToManyRelatedErrors];

export type GameCenterDetailsLeaderboardReleasesGetToManyRelatedResponses = {
    /**
     * List of GameCenterLeaderboardReleases
     */
    200: GameCenterLeaderboardReleasesResponse;
};

export type GameCenterDetailsLeaderboardReleasesGetToManyRelatedResponse = GameCenterDetailsLeaderboardReleasesGetToManyRelatedResponses[keyof GameCenterDetailsLeaderboardReleasesGetToManyRelatedResponses];

export type GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'live'
         */
        'filter[live]'?: Array<string>;
        /**
         * filter by id(s) of related 'gameCenterLeaderboardSet'
         */
        'filter[gameCenterLeaderboardSet]'?: Array<string>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetReleases
         */
        'fields[gameCenterLeaderboardSetReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterLeaderboardSet'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<'referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterLeaderboardSet'>;
    };
    url: '/v1/gameCenterDetails/{id}/leaderboardSetReleases';
};

export type GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedError = GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedErrors[keyof GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedErrors];

export type GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedResponses = {
    /**
     * List of GameCenterLeaderboardSetReleases
     */
    200: GameCenterLeaderboardSetReleasesResponse;
};

export type GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedResponse = GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedResponses[keyof GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedResponses];

export type GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterEnabledVersionCompatibleVersionsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions';
};

export type GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipError = GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipErrors[keyof GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipErrors];

export type GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipResponse = GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipResponses[keyof GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipResponses];

export type GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions';
};

export type GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipError = GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipErrors[keyof GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipErrors];

export type GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipResponses = {
    /**
     * List of related linkages
     */
    200: GameCenterEnabledVersionCompatibleVersionsLinkagesResponse;
};

export type GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipResponse = GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipResponses[keyof GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipResponses];

export type GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterEnabledVersionCompatibleVersionsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions';
};

export type GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipError = GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipErrors[keyof GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipErrors];

export type GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipResponse = GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipResponses[keyof GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipResponses];

export type GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterEnabledVersionCompatibleVersionsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions';
};

export type GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipError = GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipErrors[keyof GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipErrors];

export type GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipResponse = GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipResponses[keyof GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipResponses];

export type GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'platform'
         */
        'filter[platform]'?: Array<'IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS'>;
        /**
         * filter by attribute 'versionString'
         */
        'filter[versionString]'?: Array<string>;
        /**
         * filter by id(s) of related 'app'
         */
        'filter[app]'?: Array<string>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'versionString' | '-versionString'>;
        /**
         * the fields to include for returned resources of type gameCenterEnabledVersions
         */
        'fields[gameCenterEnabledVersions]'?: Array<'platform' | 'versionString' | 'iconAsset' | 'compatibleVersions' | 'app'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'compatibleVersions' | 'app'>;
        /**
         * maximum number of related compatibleVersions returned (when they are included)
         * @deprecated
         */
        'limit[compatibleVersions]'?: number;
    };
    url: '/v1/gameCenterEnabledVersions/{id}/compatibleVersions';
};

export type GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedError = GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedErrors[keyof GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedErrors];

export type GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedResponses = {
    /**
     * List of GameCenterEnabledVersions
     */
    200: GameCenterEnabledVersionsResponse;
};

export type GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedResponse = GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedResponses[keyof GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedResponses];

export type GameCenterGroupsGameCenterAchievementsGetToManyRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/gameCenterGroups/{id}/relationships/gameCenterAchievements';
};

export type GameCenterGroupsGameCenterAchievementsGetToManyRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterGroupsGameCenterAchievementsGetToManyRelationshipError = GameCenterGroupsGameCenterAchievementsGetToManyRelationshipErrors[keyof GameCenterGroupsGameCenterAchievementsGetToManyRelationshipErrors];

export type GameCenterGroupsGameCenterAchievementsGetToManyRelationshipResponses = {
    /**
     * List of related linkages
     */
    200: GameCenterGroupGameCenterAchievementsLinkagesResponse;
};

export type GameCenterGroupsGameCenterAchievementsGetToManyRelationshipResponse = GameCenterGroupsGameCenterAchievementsGetToManyRelationshipResponses[keyof GameCenterGroupsGameCenterAchievementsGetToManyRelationshipResponses];

export type GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterGroupGameCenterAchievementsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterGroups/{id}/relationships/gameCenterAchievements';
};

export type GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipError = GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipErrors[keyof GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipErrors];

export type GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipResponse = GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipResponses[keyof GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipResponses];

export type GameCenterGroupsGameCenterAchievementsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'referenceName'
         */
        'filter[referenceName]'?: Array<string>;
        /**
         * filter by attribute 'archived'
         */
        'filter[archived]'?: Array<string>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<'referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<'referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementLocalizations
         */
        'fields[gameCenterAchievementLocalizations]'?: Array<'locale' | 'name' | 'beforeEarnedDescription' | 'afterEarnedDescription' | 'gameCenterAchievement' | 'gameCenterAchievementImage'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementReleases
         */
        'fields[gameCenterAchievementReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterAchievement'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases'>;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
    url: '/v1/gameCenterGroups/{id}/gameCenterAchievements';
};

export type GameCenterGroupsGameCenterAchievementsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterGroupsGameCenterAchievementsGetToManyRelatedError = GameCenterGroupsGameCenterAchievementsGetToManyRelatedErrors[keyof GameCenterGroupsGameCenterAchievementsGetToManyRelatedErrors];

export type GameCenterGroupsGameCenterAchievementsGetToManyRelatedResponses = {
    /**
     * List of GameCenterAchievements
     */
    200: GameCenterAchievementsResponse;
};

export type GameCenterGroupsGameCenterAchievementsGetToManyRelatedResponse = GameCenterGroupsGameCenterAchievementsGetToManyRelatedResponses[keyof GameCenterGroupsGameCenterAchievementsGetToManyRelatedResponses];

export type GameCenterGroupsGameCenterDetailsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'gameCenterAppVersions.enabled'
         */
        'filter[gameCenterAppVersions.enabled]'?: Array<string>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<'enabled' | 'compatibilityVersions' | 'appStoreVersion'>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<'referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<'defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<'referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<'referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementReleases
         */
        'fields[gameCenterAchievementReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterAchievement'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterLeaderboard'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetReleases
         */
        'fields[gameCenterLeaderboardSetReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterLeaderboardSet'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * maximum number of related gameCenterAppVersions returned (when they are included)
         */
        'limit[gameCenterAppVersions]'?: number;
        /**
         * maximum number of related gameCenterLeaderboards returned (when they are included)
         */
        'limit[gameCenterLeaderboards]'?: number;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
        /**
         * maximum number of related gameCenterAchievements returned (when they are included)
         */
        'limit[gameCenterAchievements]'?: number;
        /**
         * maximum number of related achievementReleases returned (when they are included)
         */
        'limit[achievementReleases]'?: number;
        /**
         * maximum number of related leaderboardReleases returned (when they are included)
         */
        'limit[leaderboardReleases]'?: number;
        /**
         * maximum number of related leaderboardSetReleases returned (when they are included)
         */
        'limit[leaderboardSetReleases]'?: number;
    };
    url: '/v1/gameCenterGroups/{id}/gameCenterDetails';
};

export type GameCenterGroupsGameCenterDetailsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterGroupsGameCenterDetailsGetToManyRelatedError = GameCenterGroupsGameCenterDetailsGetToManyRelatedErrors[keyof GameCenterGroupsGameCenterDetailsGetToManyRelatedErrors];

export type GameCenterGroupsGameCenterDetailsGetToManyRelatedResponses = {
    /**
     * List of GameCenterDetails
     */
    200: GameCenterDetailsResponse;
};

export type GameCenterGroupsGameCenterDetailsGetToManyRelatedResponse = GameCenterGroupsGameCenterDetailsGetToManyRelatedResponses[keyof GameCenterGroupsGameCenterDetailsGetToManyRelatedResponses];

export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets';
};

export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipError = GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipErrors[keyof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipErrors];

export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipResponses = {
    /**
     * List of related linkages
     */
    200: GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse;
};

export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipResponse = GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipResponses[keyof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipResponses];

export type GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets';
};

export type GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipError = GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipErrors[keyof GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipErrors];

export type GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipResponse = GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipResponses[keyof GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipResponses];

export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'referenceName'
         */
        'filter[referenceName]'?: Array<string>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<'referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<'referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
         */
        'fields[gameCenterLeaderboardSetLocalizations]'?: Array<'locale' | 'name' | 'gameCenterLeaderboardSet' | 'gameCenterLeaderboardSetImage'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<'defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetReleases
         */
        'fields[gameCenterLeaderboardSetReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterLeaderboardSet'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related gameCenterLeaderboards returned (when they are included)
         */
        'limit[gameCenterLeaderboards]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
    url: '/v1/gameCenterGroups/{id}/gameCenterLeaderboardSets';
};

export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedError = GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedErrors[keyof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedErrors];

export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedResponses = {
    /**
     * List of GameCenterLeaderboardSets
     */
    200: GameCenterLeaderboardSetsResponse;
};

export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedResponse = GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedResponses[keyof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedResponses];

export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards';
};

export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipError = GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipErrors[keyof GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipErrors];

export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipResponses = {
    /**
     * List of related linkages
     */
    200: GameCenterGroupGameCenterLeaderboardsLinkagesResponse;
};

export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipResponse = GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipResponses[keyof GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipResponses];

export type GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterGroupGameCenterLeaderboardsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards';
};

export type GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipError = GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipErrors[keyof GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipErrors];

export type GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipResponse = GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipResponses[keyof GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipResponses];

export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'referenceName'
         */
        'filter[referenceName]'?: Array<string>;
        /**
         * filter by attribute 'archived'
         */
        'filter[archived]'?: Array<string>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<'defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<'referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<'referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardLocalizations
         */
        'fields[gameCenterLeaderboardLocalizations]'?: Array<'locale' | 'name' | 'formatterOverride' | 'formatterSuffix' | 'formatterSuffixSingular' | 'gameCenterLeaderboard' | 'gameCenterLeaderboardImage'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterLeaderboard'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
    url: '/v1/gameCenterGroups/{id}/gameCenterLeaderboards';
};

export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedError = GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedErrors[keyof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedErrors];

export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedResponses = {
    /**
     * List of GameCenterLeaderboards
     */
    200: GameCenterLeaderboardsResponse;
};

export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedResponse = GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedResponses[keyof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedResponses];

export type GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardImages
         */
        'fields[gameCenterLeaderboardImages]'?: Array<'fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'gameCenterLeaderboardLocalization'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardLocalizations
         */
        'fields[gameCenterLeaderboardLocalizations]'?: Array<'locale' | 'name' | 'formatterOverride' | 'formatterSuffix' | 'formatterSuffixSingular' | 'gameCenterLeaderboard' | 'gameCenterLeaderboardImage'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterLeaderboardLocalization'>;
    };
    url: '/v1/gameCenterLeaderboardLocalizations/{id}/gameCenterLeaderboardImage';
};

export type GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedError = GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedErrors[keyof GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedErrors];

export type GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedResponses = {
    /**
     * Single GameCenterLeaderboardImage
     */
    200: GameCenterLeaderboardImageResponse;
};

export type GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedResponse = GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedResponses[keyof GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedResponses];

export type GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetImages
         */
        'fields[gameCenterLeaderboardSetImages]'?: Array<'fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'gameCenterLeaderboardSetLocalization'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
         */
        'fields[gameCenterLeaderboardSetLocalizations]'?: Array<'locale' | 'name' | 'gameCenterLeaderboardSet' | 'gameCenterLeaderboardSetImage'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterLeaderboardSetLocalization'>;
    };
    url: '/v1/gameCenterLeaderboardSetLocalizations/{id}/gameCenterLeaderboardSetImage';
};

export type GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedError = GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedErrors[keyof GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedErrors];

export type GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedResponses = {
    /**
     * Single GameCenterLeaderboardSetImage
     */
    200: GameCenterLeaderboardSetImageResponse;
};

export type GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedResponse = GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedResponses[keyof GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedResponses];

export type GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<'defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<'referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<'referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardLocalizations
         */
        'fields[gameCenterLeaderboardLocalizations]'?: Array<'locale' | 'name' | 'formatterOverride' | 'formatterSuffix' | 'formatterSuffixSingular' | 'gameCenterLeaderboard' | 'gameCenterLeaderboardImage'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterLeaderboard'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
    url: '/v1/gameCenterLeaderboardSetMemberLocalizations/{id}/gameCenterLeaderboard';
};

export type GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedError = GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedErrors[keyof GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedErrors];

export type GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedResponses = {
    /**
     * Single GameCenterLeaderboard
     */
    200: GameCenterLeaderboardResponse;
};

export type GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedResponse = GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedResponses[keyof GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedResponses];

export type GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<'referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<'referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
         */
        'fields[gameCenterLeaderboardSetLocalizations]'?: Array<'locale' | 'name' | 'gameCenterLeaderboardSet' | 'gameCenterLeaderboardSetImage'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<'defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetReleases
         */
        'fields[gameCenterLeaderboardSetReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterLeaderboardSet'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related gameCenterLeaderboards returned (when they are included)
         */
        'limit[gameCenterLeaderboards]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
    url: '/v1/gameCenterLeaderboardSetMemberLocalizations/{id}/gameCenterLeaderboardSet';
};

export type GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedError = GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedErrors[keyof GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedErrors];

export type GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedResponses = {
    /**
     * Single GameCenterLeaderboardSet
     */
    200: GameCenterLeaderboardSetResponse;
};

export type GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedResponse = GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedResponses[keyof GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedResponses];

export type GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards';
};

export type GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipError = GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipErrors[keyof GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipErrors];

export type GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipResponse = GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipResponses[keyof GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipResponses];

export type GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards';
};

export type GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipError = GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipErrors[keyof GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipErrors];

export type GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipResponses = {
    /**
     * List of related linkages
     */
    200: GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse;
};

export type GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipResponse = GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipResponses[keyof GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipResponses];

export type GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards';
};

export type GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipError = GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipErrors[keyof GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipErrors];

export type GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipResponse = GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipResponses[keyof GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipResponses];

export type GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards';
};

export type GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipError = GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipErrors[keyof GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipErrors];

export type GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipResponse = GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipResponses[keyof GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipResponses];

export type GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'referenceName'
         */
        'filter[referenceName]'?: Array<string>;
        /**
         * filter by attribute 'archived'
         */
        'filter[archived]'?: Array<string>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<'defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<'referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<'referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardLocalizations
         */
        'fields[gameCenterLeaderboardLocalizations]'?: Array<'locale' | 'name' | 'formatterOverride' | 'formatterSuffix' | 'formatterSuffixSingular' | 'gameCenterLeaderboard' | 'gameCenterLeaderboardImage'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterLeaderboard'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
    url: '/v1/gameCenterLeaderboardSets/{id}/gameCenterLeaderboards';
};

export type GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedError = GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedErrors[keyof GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedErrors];

export type GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedResponses = {
    /**
     * List of GameCenterLeaderboards
     */
    200: GameCenterLeaderboardsResponse;
};

export type GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedResponse = GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedResponses[keyof GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedResponses];

export type GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet';
};

export type GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipError = GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipErrors[keyof GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipErrors];

export type GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipResponses = {
    /**
     * Related linkage
     */
    200: GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse;
};

export type GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipResponse = GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipResponses[keyof GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipResponses];

export type GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipData = {
    /**
     * Related linkage
     */
    body: GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet';
};

export type GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipError = GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipErrors[keyof GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipErrors];

export type GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipResponse = GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipResponses[keyof GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipResponses];

export type GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<'referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<'referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
         */
        'fields[gameCenterLeaderboardSetLocalizations]'?: Array<'locale' | 'name' | 'gameCenterLeaderboardSet' | 'gameCenterLeaderboardSetImage'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<'defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetReleases
         */
        'fields[gameCenterLeaderboardSetReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterLeaderboardSet'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related gameCenterLeaderboards returned (when they are included)
         */
        'limit[gameCenterLeaderboards]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
    url: '/v1/gameCenterLeaderboardSets/{id}/groupLeaderboardSet';
};

export type GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedError = GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedErrors[keyof GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedErrors];

export type GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedResponses = {
    /**
     * Single GameCenterLeaderboardSet
     */
    200: GameCenterLeaderboardSetResponse;
};

export type GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedResponse = GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedResponses[keyof GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedResponses];

export type GameCenterLeaderboardSetsLocalizationsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
         */
        'fields[gameCenterLeaderboardSetLocalizations]'?: Array<'locale' | 'name' | 'gameCenterLeaderboardSet' | 'gameCenterLeaderboardSetImage'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<'referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetImages
         */
        'fields[gameCenterLeaderboardSetImages]'?: Array<'fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'gameCenterLeaderboardSetLocalization'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterLeaderboardSet' | 'gameCenterLeaderboardSetImage'>;
    };
    url: '/v1/gameCenterLeaderboardSets/{id}/localizations';
};

export type GameCenterLeaderboardSetsLocalizationsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterLeaderboardSetsLocalizationsGetToManyRelatedError = GameCenterLeaderboardSetsLocalizationsGetToManyRelatedErrors[keyof GameCenterLeaderboardSetsLocalizationsGetToManyRelatedErrors];

export type GameCenterLeaderboardSetsLocalizationsGetToManyRelatedResponses = {
    /**
     * List of GameCenterLeaderboardSetLocalizations
     */
    200: GameCenterLeaderboardSetLocalizationsResponse;
};

export type GameCenterLeaderboardSetsLocalizationsGetToManyRelatedResponse = GameCenterLeaderboardSetsLocalizationsGetToManyRelatedResponses[keyof GameCenterLeaderboardSetsLocalizationsGetToManyRelatedResponses];

export type GameCenterLeaderboardSetsReleasesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'live'
         */
        'filter[live]'?: Array<string>;
        /**
         * filter by id(s) of related 'gameCenterDetail'
         */
        'filter[gameCenterDetail]'?: Array<string>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetReleases
         */
        'fields[gameCenterLeaderboardSetReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterLeaderboardSet'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<'referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterLeaderboardSet'>;
    };
    url: '/v1/gameCenterLeaderboardSets/{id}/releases';
};

export type GameCenterLeaderboardSetsReleasesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterLeaderboardSetsReleasesGetToManyRelatedError = GameCenterLeaderboardSetsReleasesGetToManyRelatedErrors[keyof GameCenterLeaderboardSetsReleasesGetToManyRelatedErrors];

export type GameCenterLeaderboardSetsReleasesGetToManyRelatedResponses = {
    /**
     * List of GameCenterLeaderboardSetReleases
     */
    200: GameCenterLeaderboardSetReleasesResponse;
};

export type GameCenterLeaderboardSetsReleasesGetToManyRelatedResponse = GameCenterLeaderboardSetsReleasesGetToManyRelatedResponses[keyof GameCenterLeaderboardSetsReleasesGetToManyRelatedResponses];

export type GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterLeaderboards/{id}/relationships/groupLeaderboard';
};

export type GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipError = GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipErrors[keyof GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipErrors];

export type GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipResponses = {
    /**
     * Related linkage
     */
    200: GameCenterLeaderboardGroupLeaderboardLinkageResponse;
};

export type GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipResponse = GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipResponses[keyof GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipResponses];

export type GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipData = {
    /**
     * Related linkage
     */
    body: GameCenterLeaderboardGroupLeaderboardLinkageRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/gameCenterLeaderboards/{id}/relationships/groupLeaderboard';
};

export type GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipError = GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipErrors[keyof GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipErrors];

export type GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipResponse = GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipResponses[keyof GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipResponses];

export type GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<'defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<'referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<'referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardLocalizations
         */
        'fields[gameCenterLeaderboardLocalizations]'?: Array<'locale' | 'name' | 'formatterOverride' | 'formatterSuffix' | 'formatterSuffixSingular' | 'gameCenterLeaderboard' | 'gameCenterLeaderboardImage'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterLeaderboard'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
    url: '/v1/gameCenterLeaderboards/{id}/groupLeaderboard';
};

export type GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedError = GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedErrors[keyof GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedErrors];

export type GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedResponses = {
    /**
     * Single GameCenterLeaderboard
     */
    200: GameCenterLeaderboardResponse;
};

export type GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedResponse = GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedResponses[keyof GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedResponses];

export type GameCenterLeaderboardsLocalizationsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardLocalizations
         */
        'fields[gameCenterLeaderboardLocalizations]'?: Array<'locale' | 'name' | 'formatterOverride' | 'formatterSuffix' | 'formatterSuffixSingular' | 'gameCenterLeaderboard' | 'gameCenterLeaderboardImage'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<'defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardImages
         */
        'fields[gameCenterLeaderboardImages]'?: Array<'fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'gameCenterLeaderboardLocalization'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterLeaderboard' | 'gameCenterLeaderboardImage'>;
    };
    url: '/v1/gameCenterLeaderboards/{id}/localizations';
};

export type GameCenterLeaderboardsLocalizationsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterLeaderboardsLocalizationsGetToManyRelatedError = GameCenterLeaderboardsLocalizationsGetToManyRelatedErrors[keyof GameCenterLeaderboardsLocalizationsGetToManyRelatedErrors];

export type GameCenterLeaderboardsLocalizationsGetToManyRelatedResponses = {
    /**
     * List of GameCenterLeaderboardLocalizations
     */
    200: GameCenterLeaderboardLocalizationsResponse;
};

export type GameCenterLeaderboardsLocalizationsGetToManyRelatedResponse = GameCenterLeaderboardsLocalizationsGetToManyRelatedResponses[keyof GameCenterLeaderboardsLocalizationsGetToManyRelatedResponses];

export type GameCenterLeaderboardsReleasesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'live'
         */
        'filter[live]'?: Array<string>;
        /**
         * filter by id(s) of related 'gameCenterDetail'
         */
        'filter[gameCenterDetail]'?: Array<string>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<'live' | 'gameCenterDetail' | 'gameCenterLeaderboard'>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<'arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases'>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<'defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'gameCenterDetail' | 'gameCenterLeaderboard'>;
    };
    url: '/v1/gameCenterLeaderboards/{id}/releases';
};

export type GameCenterLeaderboardsReleasesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterLeaderboardsReleasesGetToManyRelatedError = GameCenterLeaderboardsReleasesGetToManyRelatedErrors[keyof GameCenterLeaderboardsReleasesGetToManyRelatedErrors];

export type GameCenterLeaderboardsReleasesGetToManyRelatedResponses = {
    /**
     * List of GameCenterLeaderboardReleases
     */
    200: GameCenterLeaderboardReleasesResponse;
};

export type GameCenterLeaderboardsReleasesGetToManyRelatedResponse = GameCenterLeaderboardsReleasesGetToManyRelatedResponses[keyof GameCenterLeaderboardsReleasesGetToManyRelatedResponses];

export type GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingQueues
         */
        'fields[gameCenterMatchmakingQueues]'?: Array<'referenceName' | 'classicMatchmakingBundleIds' | 'ruleSet' | 'experimentRuleSet'>;
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingRuleSets
         */
        'fields[gameCenterMatchmakingRuleSets]'?: Array<'referenceName' | 'ruleLanguageVersion' | 'minPlayers' | 'maxPlayers' | 'teams' | 'rules' | 'matchmakingQueues'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'ruleSet' | 'experimentRuleSet'>;
    };
    url: '/v1/gameCenterMatchmakingRuleSets/{id}/matchmakingQueues';
};

export type GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedError = GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedErrors[keyof GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedErrors];

export type GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedResponses = {
    /**
     * List of GameCenterMatchmakingQueues
     */
    200: GameCenterMatchmakingQueuesResponse;
};

export type GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedResponse = GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedResponses[keyof GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedResponses];

export type GameCenterMatchmakingRuleSetsRulesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingRules
         */
        'fields[gameCenterMatchmakingRules]'?: Array<'referenceName' | 'description' | 'type' | 'expression' | 'weight'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/gameCenterMatchmakingRuleSets/{id}/rules';
};

export type GameCenterMatchmakingRuleSetsRulesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterMatchmakingRuleSetsRulesGetToManyRelatedError = GameCenterMatchmakingRuleSetsRulesGetToManyRelatedErrors[keyof GameCenterMatchmakingRuleSetsRulesGetToManyRelatedErrors];

export type GameCenterMatchmakingRuleSetsRulesGetToManyRelatedResponses = {
    /**
     * List of GameCenterMatchmakingRules
     */
    200: GameCenterMatchmakingRulesResponse;
};

export type GameCenterMatchmakingRuleSetsRulesGetToManyRelatedResponse = GameCenterMatchmakingRuleSetsRulesGetToManyRelatedResponses[keyof GameCenterMatchmakingRuleSetsRulesGetToManyRelatedResponses];

export type GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingTeams
         */
        'fields[gameCenterMatchmakingTeams]'?: Array<'referenceName' | 'minPlayers' | 'maxPlayers'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/gameCenterMatchmakingRuleSets/{id}/teams';
};

export type GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedError = GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedErrors[keyof GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedErrors];

export type GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedResponses = {
    /**
     * List of GameCenterMatchmakingTeams
     */
    200: GameCenterMatchmakingTeamsResponse;
};

export type GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedResponse = GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedResponses[keyof GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedResponses];

export type InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/inAppPurchaseAvailabilities/{id}/availableTerritories';
};

export type InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedError = InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedErrors[keyof InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedErrors];

export type InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedResponses = {
    /**
     * List of Territories
     */
    200: TerritoriesResponse;
};

export type InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedResponse = InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedResponses[keyof InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedResponses];

export type InAppPurchasePricePointsEqualizationsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<string>;
        /**
         * filter by id(s) of related 'inAppPurchaseV2'
         */
        'filter[inAppPurchaseV2]'?: Array<string>;
        /**
         * the fields to include for returned resources of type inAppPurchasePricePoints
         */
        'fields[inAppPurchasePricePoints]'?: Array<'customerPrice' | 'proceeds' | 'territory' | 'equalizations'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'territory'>;
    };
    url: '/v1/inAppPurchasePricePoints/{id}/equalizations';
};

export type InAppPurchasePricePointsEqualizationsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type InAppPurchasePricePointsEqualizationsGetToManyRelatedError = InAppPurchasePricePointsEqualizationsGetToManyRelatedErrors[keyof InAppPurchasePricePointsEqualizationsGetToManyRelatedErrors];

export type InAppPurchasePricePointsEqualizationsGetToManyRelatedResponses = {
    /**
     * List of InAppPurchasePricePoints
     */
    200: InAppPurchasePricePointsResponse;
};

export type InAppPurchasePricePointsEqualizationsGetToManyRelatedResponse = InAppPurchasePricePointsEqualizationsGetToManyRelatedResponses[keyof InAppPurchasePricePointsEqualizationsGetToManyRelatedResponses];

export type InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<string>;
        /**
         * the fields to include for returned resources of type inAppPurchasePrices
         */
        'fields[inAppPurchasePrices]'?: Array<'startDate' | 'endDate' | 'manual' | 'inAppPurchasePricePoint' | 'territory'>;
        /**
         * the fields to include for returned resources of type inAppPurchasePricePoints
         */
        'fields[inAppPurchasePricePoints]'?: Array<'customerPrice' | 'proceeds' | 'territory' | 'equalizations'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'inAppPurchasePricePoint' | 'territory'>;
    };
    url: '/v1/inAppPurchasePriceSchedules/{id}/automaticPrices';
};

export type InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedError = InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedErrors[keyof InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedErrors];

export type InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedResponses = {
    /**
     * List of InAppPurchasePrices
     */
    200: InAppPurchasePricesResponse;
};

export type InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedResponse = InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedResponses[keyof InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedResponses];

export type InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
    };
    url: '/v1/inAppPurchasePriceSchedules/{id}/baseTerritory';
};

export type InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedError = InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedErrors[keyof InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedErrors];

export type InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedResponses = {
    /**
     * Single Territory
     */
    200: TerritoryResponse;
};

export type InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedResponse = InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedResponses[keyof InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedResponses];

export type InAppPurchasePriceSchedulesManualPricesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<string>;
        /**
         * the fields to include for returned resources of type inAppPurchasePrices
         */
        'fields[inAppPurchasePrices]'?: Array<'startDate' | 'endDate' | 'manual' | 'inAppPurchasePricePoint' | 'territory'>;
        /**
         * the fields to include for returned resources of type inAppPurchasePricePoints
         */
        'fields[inAppPurchasePricePoints]'?: Array<'customerPrice' | 'proceeds' | 'territory' | 'equalizations'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'inAppPurchasePricePoint' | 'territory'>;
    };
    url: '/v1/inAppPurchasePriceSchedules/{id}/manualPrices';
};

export type InAppPurchasePriceSchedulesManualPricesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type InAppPurchasePriceSchedulesManualPricesGetToManyRelatedError = InAppPurchasePriceSchedulesManualPricesGetToManyRelatedErrors[keyof InAppPurchasePriceSchedulesManualPricesGetToManyRelatedErrors];

export type InAppPurchasePriceSchedulesManualPricesGetToManyRelatedResponses = {
    /**
     * List of InAppPurchasePrices
     */
    200: InAppPurchasePricesResponse;
};

export type InAppPurchasePriceSchedulesManualPricesGetToManyRelatedResponse = InAppPurchasePriceSchedulesManualPricesGetToManyRelatedResponses[keyof InAppPurchasePriceSchedulesManualPricesGetToManyRelatedResponses];

export type InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots
         */
        'fields[inAppPurchaseAppStoreReviewScreenshots]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'inAppPurchaseV2'>;
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<'name' | 'productId' | 'inAppPurchaseType' | 'state' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'inAppPurchaseV2'>;
    };
    url: '/v2/inAppPurchases/{id}/appStoreReviewScreenshot';
};

export type InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedError = InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedErrors[keyof InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedErrors];

export type InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedResponses = {
    /**
     * Single InAppPurchaseAppStoreReviewScreenshot
     */
    200: InAppPurchaseAppStoreReviewScreenshotResponse;
};

export type InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedResponse = InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedResponses[keyof InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedResponses];

export type InAppPurchasesV2ContentGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchaseContents
         */
        'fields[inAppPurchaseContents]'?: Array<'fileName' | 'fileSize' | 'url' | 'lastModifiedDate' | 'inAppPurchaseV2'>;
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<'name' | 'productId' | 'inAppPurchaseType' | 'state' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'inAppPurchaseV2'>;
    };
    url: '/v2/inAppPurchases/{id}/content';
};

export type InAppPurchasesV2ContentGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type InAppPurchasesV2ContentGetToOneRelatedError = InAppPurchasesV2ContentGetToOneRelatedErrors[keyof InAppPurchasesV2ContentGetToOneRelatedErrors];

export type InAppPurchasesV2ContentGetToOneRelatedResponses = {
    /**
     * Single InAppPurchaseContent
     */
    200: InAppPurchaseContentResponse;
};

export type InAppPurchasesV2ContentGetToOneRelatedResponse = InAppPurchasesV2ContentGetToOneRelatedResponses[keyof InAppPurchasesV2ContentGetToOneRelatedResponses];

export type InAppPurchasesV2IapPriceScheduleGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchasePriceSchedules
         */
        'fields[inAppPurchasePriceSchedules]'?: Array<'baseTerritory' | 'manualPrices' | 'automaticPrices'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * the fields to include for returned resources of type inAppPurchasePrices
         */
        'fields[inAppPurchasePrices]'?: Array<'startDate' | 'endDate' | 'manual' | 'inAppPurchasePricePoint' | 'territory'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'baseTerritory' | 'manualPrices' | 'automaticPrices'>;
        /**
         * maximum number of related manualPrices returned (when they are included)
         */
        'limit[manualPrices]'?: number;
        /**
         * maximum number of related automaticPrices returned (when they are included)
         */
        'limit[automaticPrices]'?: number;
    };
    url: '/v2/inAppPurchases/{id}/iapPriceSchedule';
};

export type InAppPurchasesV2IapPriceScheduleGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type InAppPurchasesV2IapPriceScheduleGetToOneRelatedError = InAppPurchasesV2IapPriceScheduleGetToOneRelatedErrors[keyof InAppPurchasesV2IapPriceScheduleGetToOneRelatedErrors];

export type InAppPurchasesV2IapPriceScheduleGetToOneRelatedResponses = {
    /**
     * Single InAppPurchasePriceSchedule
     */
    200: InAppPurchasePriceScheduleResponse;
};

export type InAppPurchasesV2IapPriceScheduleGetToOneRelatedResponse = InAppPurchasesV2IapPriceScheduleGetToOneRelatedResponses[keyof InAppPurchasesV2IapPriceScheduleGetToOneRelatedResponses];

export type InAppPurchasesV2ImagesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchaseImages
         */
        'fields[inAppPurchaseImages]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'assetToken' | 'imageAsset' | 'uploadOperations' | 'state' | 'inAppPurchase'>;
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<'name' | 'productId' | 'inAppPurchaseType' | 'state' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'inAppPurchase'>;
    };
    url: '/v2/inAppPurchases/{id}/images';
};

export type InAppPurchasesV2ImagesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type InAppPurchasesV2ImagesGetToManyRelatedError = InAppPurchasesV2ImagesGetToManyRelatedErrors[keyof InAppPurchasesV2ImagesGetToManyRelatedErrors];

export type InAppPurchasesV2ImagesGetToManyRelatedResponses = {
    /**
     * List of InAppPurchaseImages
     */
    200: InAppPurchaseImagesResponse;
};

export type InAppPurchasesV2ImagesGetToManyRelatedResponse = InAppPurchasesV2ImagesGetToManyRelatedResponses[keyof InAppPurchasesV2ImagesGetToManyRelatedResponses];

export type InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchaseAvailabilities
         */
        'fields[inAppPurchaseAvailabilities]'?: Array<'availableInNewTerritories' | 'availableTerritories'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'availableTerritories'>;
        /**
         * maximum number of related availableTerritories returned (when they are included)
         */
        'limit[availableTerritories]'?: number;
    };
    url: '/v2/inAppPurchases/{id}/inAppPurchaseAvailability';
};

export type InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedError = InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedErrors[keyof InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedErrors];

export type InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedResponses = {
    /**
     * Single InAppPurchaseAvailability
     */
    200: InAppPurchaseAvailabilityResponse;
};

export type InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedResponse = InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedResponses[keyof InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedResponses];

export type InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchaseLocalizations
         */
        'fields[inAppPurchaseLocalizations]'?: Array<'name' | 'locale' | 'description' | 'state' | 'inAppPurchaseV2'>;
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<'name' | 'productId' | 'inAppPurchaseType' | 'state' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'inAppPurchaseV2'>;
    };
    url: '/v2/inAppPurchases/{id}/inAppPurchaseLocalizations';
};

export type InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedError = InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedErrors[keyof InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedErrors];

export type InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedResponses = {
    /**
     * List of InAppPurchaseLocalizations
     */
    200: InAppPurchaseLocalizationsResponse;
};

export type InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedResponse = InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedResponses[keyof InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedResponses];

export type InAppPurchasesV2PricePointsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<string>;
        /**
         * the fields to include for returned resources of type inAppPurchasePricePoints
         */
        'fields[inAppPurchasePricePoints]'?: Array<'customerPrice' | 'proceeds' | 'territory' | 'equalizations'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'territory'>;
    };
    url: '/v2/inAppPurchases/{id}/pricePoints';
};

export type InAppPurchasesV2PricePointsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type InAppPurchasesV2PricePointsGetToManyRelatedError = InAppPurchasesV2PricePointsGetToManyRelatedErrors[keyof InAppPurchasesV2PricePointsGetToManyRelatedErrors];

export type InAppPurchasesV2PricePointsGetToManyRelatedResponses = {
    /**
     * List of InAppPurchasePricePoints
     */
    200: InAppPurchasePricePointsResponse;
};

export type InAppPurchasesV2PricePointsGetToManyRelatedResponse = InAppPurchasesV2PricePointsGetToManyRelatedResponses[keyof InAppPurchasesV2PricePointsGetToManyRelatedResponses];

export type InAppPurchasesV2PromotedPurchaseGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type promotedPurchases
         */
        'fields[promotedPurchases]'?: Array<'visibleForAllUsers' | 'enabled' | 'state' | 'inAppPurchaseV2' | 'subscription'>;
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<'name' | 'productId' | 'inAppPurchaseType' | 'state' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images'>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<'name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'inAppPurchaseV2' | 'subscription'>;
    };
    url: '/v2/inAppPurchases/{id}/promotedPurchase';
};

export type InAppPurchasesV2PromotedPurchaseGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type InAppPurchasesV2PromotedPurchaseGetToOneRelatedError = InAppPurchasesV2PromotedPurchaseGetToOneRelatedErrors[keyof InAppPurchasesV2PromotedPurchaseGetToOneRelatedErrors];

export type InAppPurchasesV2PromotedPurchaseGetToOneRelatedResponses = {
    /**
     * Single PromotedPurchase
     */
    200: PromotedPurchaseResponse;
};

export type InAppPurchasesV2PromotedPurchaseGetToOneRelatedResponse = InAppPurchasesV2PromotedPurchaseGetToOneRelatedResponses[keyof InAppPurchasesV2PromotedPurchaseGetToOneRelatedResponses];

export type MerchantIdsCertificatesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'displayName'
         */
        'filter[displayName]'?: Array<string>;
        /**
         * filter by attribute 'certificateType'
         */
        'filter[certificateType]'?: Array<'APPLE_PAY' | 'APPLE_PAY_MERCHANT_IDENTITY' | 'APPLE_PAY_PSP_IDENTITY' | 'APPLE_PAY_RSA' | 'DEVELOPER_ID_KEXT' | 'DEVELOPER_ID_KEXT_G2' | 'DEVELOPER_ID_APPLICATION' | 'DEVELOPER_ID_APPLICATION_G2' | 'DEVELOPMENT' | 'DISTRIBUTION' | 'IDENTITY_ACCESS' | 'IOS_DEVELOPMENT' | 'IOS_DISTRIBUTION' | 'MAC_APP_DISTRIBUTION' | 'MAC_INSTALLER_DISTRIBUTION' | 'MAC_APP_DEVELOPMENT' | 'PASS_TYPE_ID' | 'PASS_TYPE_ID_WITH_NFC'>;
        /**
         * filter by attribute 'serialNumber'
         */
        'filter[serialNumber]'?: Array<string>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'displayName' | '-displayName' | 'certificateType' | '-certificateType' | 'serialNumber' | '-serialNumber' | 'id' | '-id'>;
        /**
         * the fields to include for returned resources of type certificates
         */
        'fields[certificates]'?: Array<'name' | 'certificateType' | 'displayName' | 'serialNumber' | 'platform' | 'expirationDate' | 'certificateContent' | 'activated'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/merchantIds/{id}/certificates';
};

export type MerchantIdsCertificatesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type MerchantIdsCertificatesGetToManyRelatedError = MerchantIdsCertificatesGetToManyRelatedErrors[keyof MerchantIdsCertificatesGetToManyRelatedErrors];

export type MerchantIdsCertificatesGetToManyRelatedResponses = {
    /**
     * List of Certificates
     */
    200: CertificatesResponse;
};

export type MerchantIdsCertificatesGetToManyRelatedResponse = MerchantIdsCertificatesGetToManyRelatedResponses[keyof MerchantIdsCertificatesGetToManyRelatedResponses];

export type PreReleaseVersionsAppGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
    };
    url: '/v1/preReleaseVersions/{id}/app';
};

export type PreReleaseVersionsAppGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type PreReleaseVersionsAppGetToOneRelatedError = PreReleaseVersionsAppGetToOneRelatedErrors[keyof PreReleaseVersionsAppGetToOneRelatedErrors];

export type PreReleaseVersionsAppGetToOneRelatedResponses = {
    /**
     * Single App with get
     */
    200: AppWithoutIncludesResponse;
};

export type PreReleaseVersionsAppGetToOneRelatedResponse = PreReleaseVersionsAppGetToOneRelatedResponses[keyof PreReleaseVersionsAppGetToOneRelatedResponses];

export type PreReleaseVersionsBuildsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<'version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/preReleaseVersions/{id}/builds';
};

export type PreReleaseVersionsBuildsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type PreReleaseVersionsBuildsGetToManyRelatedError = PreReleaseVersionsBuildsGetToManyRelatedErrors[keyof PreReleaseVersionsBuildsGetToManyRelatedErrors];

export type PreReleaseVersionsBuildsGetToManyRelatedResponses = {
    /**
     * List of Builds with get
     */
    200: BuildsWithoutIncludesResponse;
};

export type PreReleaseVersionsBuildsGetToManyRelatedResponse = PreReleaseVersionsBuildsGetToManyRelatedResponses[keyof PreReleaseVersionsBuildsGetToManyRelatedResponses];

export type ProfilesBundleIdGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type bundleIds
         */
        'fields[bundleIds]'?: Array<'name' | 'platform' | 'identifier' | 'seedId' | 'profiles' | 'bundleIdCapabilities' | 'app'>;
    };
    url: '/v1/profiles/{id}/bundleId';
};

export type ProfilesBundleIdGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type ProfilesBundleIdGetToOneRelatedError = ProfilesBundleIdGetToOneRelatedErrors[keyof ProfilesBundleIdGetToOneRelatedErrors];

export type ProfilesBundleIdGetToOneRelatedResponses = {
    /**
     * Single BundleId with get
     */
    200: BundleIdWithoutIncludesResponse;
};

export type ProfilesBundleIdGetToOneRelatedResponse = ProfilesBundleIdGetToOneRelatedResponses[keyof ProfilesBundleIdGetToOneRelatedResponses];

export type ProfilesCertificatesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type certificates
         */
        'fields[certificates]'?: Array<'name' | 'certificateType' | 'displayName' | 'serialNumber' | 'platform' | 'expirationDate' | 'certificateContent' | 'activated'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/profiles/{id}/certificates';
};

export type ProfilesCertificatesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type ProfilesCertificatesGetToManyRelatedError = ProfilesCertificatesGetToManyRelatedErrors[keyof ProfilesCertificatesGetToManyRelatedErrors];

export type ProfilesCertificatesGetToManyRelatedResponses = {
    /**
     * List of Certificates with get
     */
    200: CertificatesWithoutIncludesResponse;
};

export type ProfilesCertificatesGetToManyRelatedResponse = ProfilesCertificatesGetToManyRelatedResponses[keyof ProfilesCertificatesGetToManyRelatedResponses];

export type ProfilesDevicesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type devices
         */
        'fields[devices]'?: Array<'name' | 'platform' | 'udid' | 'deviceClass' | 'status' | 'model' | 'addedDate'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/profiles/{id}/devices';
};

export type ProfilesDevicesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type ProfilesDevicesGetToManyRelatedError = ProfilesDevicesGetToManyRelatedErrors[keyof ProfilesDevicesGetToManyRelatedErrors];

export type ProfilesDevicesGetToManyRelatedResponses = {
    /**
     * List of Devices with get
     */
    200: DevicesWithoutIncludesResponse;
};

export type ProfilesDevicesGetToManyRelatedResponse = ProfilesDevicesGetToManyRelatedResponses[keyof ProfilesDevicesGetToManyRelatedResponses];

export type ReviewSubmissionsItemsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type reviewSubmissionItems
         */
        'fields[reviewSubmissionItems]'?: Array<'state' | 'appStoreVersion' | 'appCustomProductPageVersion' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appEvent'>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<'platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage'>;
        /**
         * the fields to include for returned resources of type appCustomProductPageVersions
         */
        'fields[appCustomProductPageVersions]'?: Array<'version' | 'state' | 'deepLink' | 'appCustomProductPage' | 'appCustomProductPageLocalizations'>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<'name' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'appStoreVersion' | 'appStoreVersionExperimentTreatments' | 'platform' | 'app' | 'latestControlVersion' | 'controlVersions'>;
        /**
         * the fields to include for returned resources of type appEvents
         */
        'fields[appEvents]'?: Array<'referenceName' | 'badge' | 'eventState' | 'deepLink' | 'purchaseRequirement' | 'primaryLocale' | 'priority' | 'purpose' | 'territorySchedules' | 'archivedTerritorySchedules' | 'localizations'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'appStoreVersion' | 'appCustomProductPageVersion' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appEvent'>;
    };
    url: '/v1/reviewSubmissions/{id}/items';
};

export type ReviewSubmissionsItemsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type ReviewSubmissionsItemsGetToManyRelatedError = ReviewSubmissionsItemsGetToManyRelatedErrors[keyof ReviewSubmissionsItemsGetToManyRelatedErrors];

export type ReviewSubmissionsItemsGetToManyRelatedResponses = {
    /**
     * List of ReviewSubmissionItems
     */
    200: ReviewSubmissionItemsResponse;
};

export type ReviewSubmissionsItemsGetToManyRelatedResponse = ReviewSubmissionsItemsGetToManyRelatedResponses[keyof ReviewSubmissionsItemsGetToManyRelatedResponses];

export type ScmProvidersRepositoriesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<string>;
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<'lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests'>;
        /**
         * the fields to include for returned resources of type scmProviders
         */
        'fields[scmProviders]'?: Array<'scmProviderType' | 'url' | 'repositories'>;
        /**
         * the fields to include for returned resources of type scmGitReferences
         */
        'fields[scmGitReferences]'?: Array<'name' | 'canonicalName' | 'isDeleted' | 'kind' | 'repository'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'scmProvider' | 'defaultBranch'>;
    };
    url: '/v1/scmProviders/{id}/repositories';
};

export type ScmProvidersRepositoriesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type ScmProvidersRepositoriesGetToManyRelatedError = ScmProvidersRepositoriesGetToManyRelatedErrors[keyof ScmProvidersRepositoriesGetToManyRelatedErrors];

export type ScmProvidersRepositoriesGetToManyRelatedResponses = {
    /**
     * List of ScmRepositories
     */
    200: ScmRepositoriesResponse;
};

export type ScmProvidersRepositoriesGetToManyRelatedResponse = ScmProvidersRepositoriesGetToManyRelatedResponses[keyof ScmProvidersRepositoriesGetToManyRelatedResponses];

export type ScmRepositoriesGitReferencesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type scmGitReferences
         */
        'fields[scmGitReferences]'?: Array<'name' | 'canonicalName' | 'isDeleted' | 'kind' | 'repository'>;
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<'lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'repository'>;
    };
    url: '/v1/scmRepositories/{id}/gitReferences';
};

export type ScmRepositoriesGitReferencesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type ScmRepositoriesGitReferencesGetToManyRelatedError = ScmRepositoriesGitReferencesGetToManyRelatedErrors[keyof ScmRepositoriesGitReferencesGetToManyRelatedErrors];

export type ScmRepositoriesGitReferencesGetToManyRelatedResponses = {
    /**
     * List of ScmGitReferences
     */
    200: ScmGitReferencesResponse;
};

export type ScmRepositoriesGitReferencesGetToManyRelatedResponse = ScmRepositoriesGitReferencesGetToManyRelatedResponses[keyof ScmRepositoriesGitReferencesGetToManyRelatedResponses];

export type ScmRepositoriesPullRequestsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type scmPullRequests
         */
        'fields[scmPullRequests]'?: Array<'title' | 'number' | 'webUrl' | 'sourceRepositoryOwner' | 'sourceRepositoryName' | 'sourceBranchName' | 'destinationRepositoryOwner' | 'destinationRepositoryName' | 'destinationBranchName' | 'isClosed' | 'isCrossRepository' | 'repository'>;
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<'lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'repository'>;
    };
    url: '/v1/scmRepositories/{id}/pullRequests';
};

export type ScmRepositoriesPullRequestsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type ScmRepositoriesPullRequestsGetToManyRelatedError = ScmRepositoriesPullRequestsGetToManyRelatedErrors[keyof ScmRepositoriesPullRequestsGetToManyRelatedErrors];

export type ScmRepositoriesPullRequestsGetToManyRelatedResponses = {
    /**
     * List of ScmPullRequests
     */
    200: ScmPullRequestsResponse;
};

export type ScmRepositoriesPullRequestsGetToManyRelatedResponse = ScmRepositoriesPullRequestsGetToManyRelatedResponses[keyof ScmRepositoriesPullRequestsGetToManyRelatedResponses];

export type SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/subscriptionAvailabilities/{id}/availableTerritories';
};

export type SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedError = SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedErrors[keyof SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedErrors];

export type SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedResponses = {
    /**
     * List of Territories
     */
    200: TerritoriesResponse;
};

export type SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedResponse = SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedResponses[keyof SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedResponses];

export type SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionGroupLocalizations
         */
        'fields[subscriptionGroupLocalizations]'?: Array<'name' | 'customAppName' | 'locale' | 'state' | 'subscriptionGroup'>;
        /**
         * the fields to include for returned resources of type subscriptionGroups
         */
        'fields[subscriptionGroups]'?: Array<'referenceName' | 'subscriptions' | 'subscriptionGroupLocalizations'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subscriptionGroup'>;
    };
    url: '/v1/subscriptionGroups/{id}/subscriptionGroupLocalizations';
};

export type SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedError = SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedErrors[keyof SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedErrors];

export type SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedResponses = {
    /**
     * List of SubscriptionGroupLocalizations
     */
    200: SubscriptionGroupLocalizationsResponse;
};

export type SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedResponse = SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedResponses[keyof SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedResponses];

export type SubscriptionGroupsSubscriptionsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'productId'
         */
        'filter[productId]'?: Array<string>;
        /**
         * filter by attribute 'name'
         */
        'filter[name]'?: Array<string>;
        /**
         * filter by attribute 'state'
         */
        'filter[state]'?: Array<'MISSING_METADATA' | 'READY_TO_SUBMIT' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'DEVELOPER_ACTION_NEEDED' | 'PENDING_BINARY_APPROVAL' | 'APPROVED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'REMOVED_FROM_SALE' | 'REJECTED'>;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<'name' | '-name'>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<'name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images'>;
        /**
         * the fields to include for returned resources of type subscriptionLocalizations
         */
        'fields[subscriptionLocalizations]'?: Array<'name' | 'locale' | 'description' | 'state' | 'subscription'>;
        /**
         * the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots
         */
        'fields[subscriptionAppStoreReviewScreenshots]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'subscription'>;
        /**
         * the fields to include for returned resources of type subscriptionGroups
         */
        'fields[subscriptionGroups]'?: Array<'referenceName' | 'subscriptions' | 'subscriptionGroupLocalizations'>;
        /**
         * the fields to include for returned resources of type subscriptionIntroductoryOffers
         */
        'fields[subscriptionIntroductoryOffers]'?: Array<'startDate' | 'endDate' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'subscription' | 'territory' | 'subscriptionPricePoint'>;
        /**
         * the fields to include for returned resources of type subscriptionPromotionalOffers
         */
        'fields[subscriptionPromotionalOffers]'?: Array<'name' | 'offerCode' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'subscription' | 'prices'>;
        /**
         * the fields to include for returned resources of type subscriptionOfferCodes
         */
        'fields[subscriptionOfferCodes]'?: Array<'name' | 'customerEligibilities' | 'offerEligibility' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'totalNumberOfCodes' | 'active' | 'subscription' | 'oneTimeUseCodes' | 'customCodes' | 'prices'>;
        /**
         * the fields to include for returned resources of type subscriptionPrices
         */
        'fields[subscriptionPrices]'?: Array<'startDate' | 'preserved' | 'territory' | 'subscriptionPricePoint'>;
        /**
         * the fields to include for returned resources of type promotedPurchases
         */
        'fields[promotedPurchases]'?: Array<'visibleForAllUsers' | 'enabled' | 'state' | 'inAppPurchaseV2' | 'subscription'>;
        /**
         * the fields to include for returned resources of type subscriptionAvailabilities
         */
        'fields[subscriptionAvailabilities]'?: Array<'availableInNewTerritories' | 'availableTerritories'>;
        /**
         * the fields to include for returned resources of type winBackOffers
         */
        'fields[winBackOffers]'?: Array<'referenceName' | 'offerId' | 'duration' | 'offerMode' | 'periodCount' | 'customerEligibilityPaidSubscriptionDurationInMonths' | 'customerEligibilityTimeSinceLastSubscribedInMonths' | 'customerEligibilityWaitBetweenOffersInMonths' | 'startDate' | 'endDate' | 'priority' | 'promotionIntent' | 'prices'>;
        /**
         * the fields to include for returned resources of type subscriptionImages
         */
        'fields[subscriptionImages]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'assetToken' | 'imageAsset' | 'uploadOperations' | 'state' | 'subscription'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images'>;
        /**
         * maximum number of related subscriptionLocalizations returned (when they are included)
         */
        'limit[subscriptionLocalizations]'?: number;
        /**
         * maximum number of related introductoryOffers returned (when they are included)
         */
        'limit[introductoryOffers]'?: number;
        /**
         * maximum number of related promotionalOffers returned (when they are included)
         */
        'limit[promotionalOffers]'?: number;
        /**
         * maximum number of related offerCodes returned (when they are included)
         */
        'limit[offerCodes]'?: number;
        /**
         * maximum number of related prices returned (when they are included)
         */
        'limit[prices]'?: number;
        /**
         * maximum number of related winBackOffers returned (when they are included)
         */
        'limit[winBackOffers]'?: number;
        /**
         * maximum number of related images returned (when they are included)
         */
        'limit[images]'?: number;
    };
    url: '/v1/subscriptionGroups/{id}/subscriptions';
};

export type SubscriptionGroupsSubscriptionsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionGroupsSubscriptionsGetToManyRelatedError = SubscriptionGroupsSubscriptionsGetToManyRelatedErrors[keyof SubscriptionGroupsSubscriptionsGetToManyRelatedErrors];

export type SubscriptionGroupsSubscriptionsGetToManyRelatedResponses = {
    /**
     * List of Subscriptions
     */
    200: SubscriptionsResponse;
};

export type SubscriptionGroupsSubscriptionsGetToManyRelatedResponse = SubscriptionGroupsSubscriptionsGetToManyRelatedResponses[keyof SubscriptionGroupsSubscriptionsGetToManyRelatedResponses];

export type SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptionOfferCodeOneTimeUseCodes/{id}/values';
};

export type SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedError = SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedErrors[keyof SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedErrors];

export type SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedResponses = {
    /**
     * Single SubscriptionOfferCodeOneTimeUseCodeValue
     */
    200: Csv;
};

export type SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedResponse = SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedResponses[keyof SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedResponses];

export type SubscriptionOfferCodesCustomCodesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionOfferCodeCustomCodes
         */
        'fields[subscriptionOfferCodeCustomCodes]'?: Array<'customCode' | 'numberOfCodes' | 'createdDate' | 'expirationDate' | 'active' | 'offerCode'>;
        /**
         * the fields to include for returned resources of type subscriptionOfferCodes
         */
        'fields[subscriptionOfferCodes]'?: Array<'name' | 'customerEligibilities' | 'offerEligibility' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'totalNumberOfCodes' | 'active' | 'subscription' | 'oneTimeUseCodes' | 'customCodes' | 'prices'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'offerCode'>;
    };
    url: '/v1/subscriptionOfferCodes/{id}/customCodes';
};

export type SubscriptionOfferCodesCustomCodesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionOfferCodesCustomCodesGetToManyRelatedError = SubscriptionOfferCodesCustomCodesGetToManyRelatedErrors[keyof SubscriptionOfferCodesCustomCodesGetToManyRelatedErrors];

export type SubscriptionOfferCodesCustomCodesGetToManyRelatedResponses = {
    /**
     * List of SubscriptionOfferCodeCustomCodes
     */
    200: SubscriptionOfferCodeCustomCodesResponse;
};

export type SubscriptionOfferCodesCustomCodesGetToManyRelatedResponse = SubscriptionOfferCodesCustomCodesGetToManyRelatedResponses[keyof SubscriptionOfferCodesCustomCodesGetToManyRelatedResponses];

export type SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes
         */
        'fields[subscriptionOfferCodeOneTimeUseCodes]'?: Array<'numberOfCodes' | 'createdDate' | 'expirationDate' | 'active' | 'offerCode' | 'values'>;
        /**
         * the fields to include for returned resources of type subscriptionOfferCodes
         */
        'fields[subscriptionOfferCodes]'?: Array<'name' | 'customerEligibilities' | 'offerEligibility' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'totalNumberOfCodes' | 'active' | 'subscription' | 'oneTimeUseCodes' | 'customCodes' | 'prices'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'offerCode'>;
    };
    url: '/v1/subscriptionOfferCodes/{id}/oneTimeUseCodes';
};

export type SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedError = SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedErrors[keyof SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedErrors];

export type SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedResponses = {
    /**
     * List of SubscriptionOfferCodeOneTimeUseCodes
     */
    200: SubscriptionOfferCodeOneTimeUseCodesResponse;
};

export type SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedResponse = SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedResponses[keyof SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedResponses];

export type SubscriptionOfferCodesPricesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<string>;
        /**
         * the fields to include for returned resources of type subscriptionOfferCodePrices
         */
        'fields[subscriptionOfferCodePrices]'?: Array<'territory' | 'subscriptionPricePoint'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * the fields to include for returned resources of type subscriptionPricePoints
         */
        'fields[subscriptionPricePoints]'?: Array<'customerPrice' | 'proceeds' | 'proceedsYear2' | 'territory' | 'equalizations'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'territory' | 'subscriptionPricePoint'>;
    };
    url: '/v1/subscriptionOfferCodes/{id}/prices';
};

export type SubscriptionOfferCodesPricesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionOfferCodesPricesGetToManyRelatedError = SubscriptionOfferCodesPricesGetToManyRelatedErrors[keyof SubscriptionOfferCodesPricesGetToManyRelatedErrors];

export type SubscriptionOfferCodesPricesGetToManyRelatedResponses = {
    /**
     * List of SubscriptionOfferCodePrices
     */
    200: SubscriptionOfferCodePricesResponse;
};

export type SubscriptionOfferCodesPricesGetToManyRelatedResponse = SubscriptionOfferCodesPricesGetToManyRelatedResponses[keyof SubscriptionOfferCodesPricesGetToManyRelatedResponses];

export type SubscriptionPricePointsEqualizationsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<string>;
        /**
         * filter by id(s) of related 'subscription'
         */
        'filter[subscription]'?: Array<string>;
        /**
         * the fields to include for returned resources of type subscriptionPricePoints
         */
        'fields[subscriptionPricePoints]'?: Array<'customerPrice' | 'proceeds' | 'proceedsYear2' | 'territory' | 'equalizations'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'territory'>;
    };
    url: '/v1/subscriptionPricePoints/{id}/equalizations';
};

export type SubscriptionPricePointsEqualizationsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionPricePointsEqualizationsGetToManyRelatedError = SubscriptionPricePointsEqualizationsGetToManyRelatedErrors[keyof SubscriptionPricePointsEqualizationsGetToManyRelatedErrors];

export type SubscriptionPricePointsEqualizationsGetToManyRelatedResponses = {
    /**
     * List of SubscriptionPricePoints
     */
    200: SubscriptionPricePointsResponse;
};

export type SubscriptionPricePointsEqualizationsGetToManyRelatedResponse = SubscriptionPricePointsEqualizationsGetToManyRelatedResponses[keyof SubscriptionPricePointsEqualizationsGetToManyRelatedResponses];

export type SubscriptionPromotionalOffersPricesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<string>;
        /**
         * the fields to include for returned resources of type subscriptionPromotionalOfferPrices
         */
        'fields[subscriptionPromotionalOfferPrices]'?: Array<'territory' | 'subscriptionPricePoint'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * the fields to include for returned resources of type subscriptionPricePoints
         */
        'fields[subscriptionPricePoints]'?: Array<'customerPrice' | 'proceeds' | 'proceedsYear2' | 'territory' | 'equalizations'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'territory' | 'subscriptionPricePoint'>;
    };
    url: '/v1/subscriptionPromotionalOffers/{id}/prices';
};

export type SubscriptionPromotionalOffersPricesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionPromotionalOffersPricesGetToManyRelatedError = SubscriptionPromotionalOffersPricesGetToManyRelatedErrors[keyof SubscriptionPromotionalOffersPricesGetToManyRelatedErrors];

export type SubscriptionPromotionalOffersPricesGetToManyRelatedResponses = {
    /**
     * List of SubscriptionPromotionalOfferPrices
     */
    200: SubscriptionPromotionalOfferPricesResponse;
};

export type SubscriptionPromotionalOffersPricesGetToManyRelatedResponse = SubscriptionPromotionalOffersPricesGetToManyRelatedResponses[keyof SubscriptionPromotionalOffersPricesGetToManyRelatedResponses];

export type SubscriptionsAppStoreReviewScreenshotGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots
         */
        'fields[subscriptionAppStoreReviewScreenshots]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'subscription'>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<'name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subscription'>;
    };
    url: '/v1/subscriptions/{id}/appStoreReviewScreenshot';
};

export type SubscriptionsAppStoreReviewScreenshotGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionsAppStoreReviewScreenshotGetToOneRelatedError = SubscriptionsAppStoreReviewScreenshotGetToOneRelatedErrors[keyof SubscriptionsAppStoreReviewScreenshotGetToOneRelatedErrors];

export type SubscriptionsAppStoreReviewScreenshotGetToOneRelatedResponses = {
    /**
     * Single SubscriptionAppStoreReviewScreenshot
     */
    200: SubscriptionAppStoreReviewScreenshotResponse;
};

export type SubscriptionsAppStoreReviewScreenshotGetToOneRelatedResponse = SubscriptionsAppStoreReviewScreenshotGetToOneRelatedResponses[keyof SubscriptionsAppStoreReviewScreenshotGetToOneRelatedResponses];

export type SubscriptionsImagesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionImages
         */
        'fields[subscriptionImages]'?: Array<'fileSize' | 'fileName' | 'sourceFileChecksum' | 'assetToken' | 'imageAsset' | 'uploadOperations' | 'state' | 'subscription'>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<'name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subscription'>;
    };
    url: '/v1/subscriptions/{id}/images';
};

export type SubscriptionsImagesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionsImagesGetToManyRelatedError = SubscriptionsImagesGetToManyRelatedErrors[keyof SubscriptionsImagesGetToManyRelatedErrors];

export type SubscriptionsImagesGetToManyRelatedResponses = {
    /**
     * List of SubscriptionImages
     */
    200: SubscriptionImagesResponse;
};

export type SubscriptionsImagesGetToManyRelatedResponse = SubscriptionsImagesGetToManyRelatedResponses[keyof SubscriptionsImagesGetToManyRelatedResponses];

export type SubscriptionsIntroductoryOffersDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: SubscriptionIntroductoryOffersLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptions/{id}/relationships/introductoryOffers';
};

export type SubscriptionsIntroductoryOffersDeleteToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionsIntroductoryOffersDeleteToManyRelationshipError = SubscriptionsIntroductoryOffersDeleteToManyRelationshipErrors[keyof SubscriptionsIntroductoryOffersDeleteToManyRelationshipErrors];

export type SubscriptionsIntroductoryOffersDeleteToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type SubscriptionsIntroductoryOffersDeleteToManyRelationshipResponse = SubscriptionsIntroductoryOffersDeleteToManyRelationshipResponses[keyof SubscriptionsIntroductoryOffersDeleteToManyRelationshipResponses];

export type SubscriptionsIntroductoryOffersGetToManyRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/subscriptions/{id}/relationships/introductoryOffers';
};

export type SubscriptionsIntroductoryOffersGetToManyRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionsIntroductoryOffersGetToManyRelationshipError = SubscriptionsIntroductoryOffersGetToManyRelationshipErrors[keyof SubscriptionsIntroductoryOffersGetToManyRelationshipErrors];

export type SubscriptionsIntroductoryOffersGetToManyRelationshipResponses = {
    /**
     * List of related linkages
     */
    200: SubscriptionIntroductoryOffersLinkagesResponse;
};

export type SubscriptionsIntroductoryOffersGetToManyRelationshipResponse = SubscriptionsIntroductoryOffersGetToManyRelationshipResponses[keyof SubscriptionsIntroductoryOffersGetToManyRelationshipResponses];

export type SubscriptionsIntroductoryOffersGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<string>;
        /**
         * the fields to include for returned resources of type subscriptionIntroductoryOffers
         */
        'fields[subscriptionIntroductoryOffers]'?: Array<'startDate' | 'endDate' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'subscription' | 'territory' | 'subscriptionPricePoint'>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<'name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * the fields to include for returned resources of type subscriptionPricePoints
         */
        'fields[subscriptionPricePoints]'?: Array<'customerPrice' | 'proceeds' | 'proceedsYear2' | 'territory' | 'equalizations'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subscription' | 'territory' | 'subscriptionPricePoint'>;
    };
    url: '/v1/subscriptions/{id}/introductoryOffers';
};

export type SubscriptionsIntroductoryOffersGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionsIntroductoryOffersGetToManyRelatedError = SubscriptionsIntroductoryOffersGetToManyRelatedErrors[keyof SubscriptionsIntroductoryOffersGetToManyRelatedErrors];

export type SubscriptionsIntroductoryOffersGetToManyRelatedResponses = {
    /**
     * List of SubscriptionIntroductoryOffers
     */
    200: SubscriptionIntroductoryOffersResponse;
};

export type SubscriptionsIntroductoryOffersGetToManyRelatedResponse = SubscriptionsIntroductoryOffersGetToManyRelatedResponses[keyof SubscriptionsIntroductoryOffersGetToManyRelatedResponses];

export type SubscriptionsOfferCodesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by territory
         */
        'filter[territory]'?: Array<string>;
        /**
         * the fields to include for returned resources of type subscriptionOfferCodes
         */
        'fields[subscriptionOfferCodes]'?: Array<'name' | 'customerEligibilities' | 'offerEligibility' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'totalNumberOfCodes' | 'active' | 'subscription' | 'oneTimeUseCodes' | 'customCodes' | 'prices'>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<'name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images'>;
        /**
         * the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes
         */
        'fields[subscriptionOfferCodeOneTimeUseCodes]'?: Array<'numberOfCodes' | 'createdDate' | 'expirationDate' | 'active' | 'offerCode' | 'values'>;
        /**
         * the fields to include for returned resources of type subscriptionOfferCodeCustomCodes
         */
        'fields[subscriptionOfferCodeCustomCodes]'?: Array<'customCode' | 'numberOfCodes' | 'createdDate' | 'expirationDate' | 'active' | 'offerCode'>;
        /**
         * the fields to include for returned resources of type subscriptionOfferCodePrices
         */
        'fields[subscriptionOfferCodePrices]'?: Array<'territory' | 'subscriptionPricePoint'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subscription' | 'oneTimeUseCodes' | 'customCodes' | 'prices'>;
        /**
         * maximum number of related oneTimeUseCodes returned (when they are included)
         */
        'limit[oneTimeUseCodes]'?: number;
        /**
         * maximum number of related customCodes returned (when they are included)
         */
        'limit[customCodes]'?: number;
        /**
         * maximum number of related prices returned (when they are included)
         */
        'limit[prices]'?: number;
    };
    url: '/v1/subscriptions/{id}/offerCodes';
};

export type SubscriptionsOfferCodesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionsOfferCodesGetToManyRelatedError = SubscriptionsOfferCodesGetToManyRelatedErrors[keyof SubscriptionsOfferCodesGetToManyRelatedErrors];

export type SubscriptionsOfferCodesGetToManyRelatedResponses = {
    /**
     * List of SubscriptionOfferCodes
     */
    200: SubscriptionOfferCodesResponse;
};

export type SubscriptionsOfferCodesGetToManyRelatedResponse = SubscriptionsOfferCodesGetToManyRelatedResponses[keyof SubscriptionsOfferCodesGetToManyRelatedResponses];

export type SubscriptionsPricePointsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<string>;
        /**
         * the fields to include for returned resources of type subscriptionPricePoints
         */
        'fields[subscriptionPricePoints]'?: Array<'customerPrice' | 'proceeds' | 'proceedsYear2' | 'territory' | 'equalizations'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'territory'>;
    };
    url: '/v1/subscriptions/{id}/pricePoints';
};

export type SubscriptionsPricePointsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionsPricePointsGetToManyRelatedError = SubscriptionsPricePointsGetToManyRelatedErrors[keyof SubscriptionsPricePointsGetToManyRelatedErrors];

export type SubscriptionsPricePointsGetToManyRelatedResponses = {
    /**
     * List of SubscriptionPricePoints
     */
    200: SubscriptionPricePointsResponse;
};

export type SubscriptionsPricePointsGetToManyRelatedResponse = SubscriptionsPricePointsGetToManyRelatedResponses[keyof SubscriptionsPricePointsGetToManyRelatedResponses];

export type SubscriptionsPricesDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: SubscriptionPricesLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/subscriptions/{id}/relationships/prices';
};

export type SubscriptionsPricesDeleteToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type SubscriptionsPricesDeleteToManyRelationshipError = SubscriptionsPricesDeleteToManyRelationshipErrors[keyof SubscriptionsPricesDeleteToManyRelationshipErrors];

export type SubscriptionsPricesDeleteToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type SubscriptionsPricesDeleteToManyRelationshipResponse = SubscriptionsPricesDeleteToManyRelationshipResponses[keyof SubscriptionsPricesDeleteToManyRelationshipResponses];

export type SubscriptionsPricesGetToManyRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/subscriptions/{id}/relationships/prices';
};

export type SubscriptionsPricesGetToManyRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionsPricesGetToManyRelationshipError = SubscriptionsPricesGetToManyRelationshipErrors[keyof SubscriptionsPricesGetToManyRelationshipErrors];

export type SubscriptionsPricesGetToManyRelationshipResponses = {
    /**
     * List of related linkages
     */
    200: SubscriptionPricesLinkagesResponse;
};

export type SubscriptionsPricesGetToManyRelationshipResponse = SubscriptionsPricesGetToManyRelationshipResponses[keyof SubscriptionsPricesGetToManyRelationshipResponses];

export type SubscriptionsPricesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by id(s) of related 'subscriptionPricePoint'
         */
        'filter[subscriptionPricePoint]'?: Array<string>;
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<string>;
        /**
         * the fields to include for returned resources of type subscriptionPrices
         */
        'fields[subscriptionPrices]'?: Array<'startDate' | 'preserved' | 'territory' | 'subscriptionPricePoint'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * the fields to include for returned resources of type subscriptionPricePoints
         */
        'fields[subscriptionPricePoints]'?: Array<'customerPrice' | 'proceeds' | 'proceedsYear2' | 'territory' | 'equalizations'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'territory' | 'subscriptionPricePoint'>;
    };
    url: '/v1/subscriptions/{id}/prices';
};

export type SubscriptionsPricesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionsPricesGetToManyRelatedError = SubscriptionsPricesGetToManyRelatedErrors[keyof SubscriptionsPricesGetToManyRelatedErrors];

export type SubscriptionsPricesGetToManyRelatedResponses = {
    /**
     * List of SubscriptionPrices
     */
    200: SubscriptionPricesResponse;
};

export type SubscriptionsPricesGetToManyRelatedResponse = SubscriptionsPricesGetToManyRelatedResponses[keyof SubscriptionsPricesGetToManyRelatedResponses];

export type SubscriptionsPromotedPurchaseGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type promotedPurchases
         */
        'fields[promotedPurchases]'?: Array<'visibleForAllUsers' | 'enabled' | 'state' | 'inAppPurchaseV2' | 'subscription'>;
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<'name' | 'productId' | 'inAppPurchaseType' | 'state' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images'>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<'name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'inAppPurchaseV2' | 'subscription'>;
    };
    url: '/v1/subscriptions/{id}/promotedPurchase';
};

export type SubscriptionsPromotedPurchaseGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionsPromotedPurchaseGetToOneRelatedError = SubscriptionsPromotedPurchaseGetToOneRelatedErrors[keyof SubscriptionsPromotedPurchaseGetToOneRelatedErrors];

export type SubscriptionsPromotedPurchaseGetToOneRelatedResponses = {
    /**
     * Single PromotedPurchase
     */
    200: PromotedPurchaseResponse;
};

export type SubscriptionsPromotedPurchaseGetToOneRelatedResponse = SubscriptionsPromotedPurchaseGetToOneRelatedResponses[keyof SubscriptionsPromotedPurchaseGetToOneRelatedResponses];

export type SubscriptionsPromotionalOffersGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by territory
         */
        'filter[territory]'?: Array<string>;
        /**
         * the fields to include for returned resources of type subscriptionPromotionalOffers
         */
        'fields[subscriptionPromotionalOffers]'?: Array<'name' | 'offerCode' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'subscription' | 'prices'>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<'name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images'>;
        /**
         * the fields to include for returned resources of type subscriptionPromotionalOfferPrices
         */
        'fields[subscriptionPromotionalOfferPrices]'?: Array<'territory' | 'subscriptionPricePoint'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subscription' | 'prices'>;
        /**
         * maximum number of related prices returned (when they are included)
         */
        'limit[prices]'?: number;
    };
    url: '/v1/subscriptions/{id}/promotionalOffers';
};

export type SubscriptionsPromotionalOffersGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionsPromotionalOffersGetToManyRelatedError = SubscriptionsPromotionalOffersGetToManyRelatedErrors[keyof SubscriptionsPromotionalOffersGetToManyRelatedErrors];

export type SubscriptionsPromotionalOffersGetToManyRelatedResponses = {
    /**
     * List of SubscriptionPromotionalOffers
     */
    200: SubscriptionPromotionalOffersResponse;
};

export type SubscriptionsPromotionalOffersGetToManyRelatedResponse = SubscriptionsPromotionalOffersGetToManyRelatedResponses[keyof SubscriptionsPromotionalOffersGetToManyRelatedResponses];

export type SubscriptionsSubscriptionAvailabilityGetToOneRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionAvailabilities
         */
        'fields[subscriptionAvailabilities]'?: Array<'availableInNewTerritories' | 'availableTerritories'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'availableTerritories'>;
        /**
         * maximum number of related availableTerritories returned (when they are included)
         */
        'limit[availableTerritories]'?: number;
    };
    url: '/v1/subscriptions/{id}/subscriptionAvailability';
};

export type SubscriptionsSubscriptionAvailabilityGetToOneRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionsSubscriptionAvailabilityGetToOneRelatedError = SubscriptionsSubscriptionAvailabilityGetToOneRelatedErrors[keyof SubscriptionsSubscriptionAvailabilityGetToOneRelatedErrors];

export type SubscriptionsSubscriptionAvailabilityGetToOneRelatedResponses = {
    /**
     * Single SubscriptionAvailability
     */
    200: SubscriptionAvailabilityResponse;
};

export type SubscriptionsSubscriptionAvailabilityGetToOneRelatedResponse = SubscriptionsSubscriptionAvailabilityGetToOneRelatedResponses[keyof SubscriptionsSubscriptionAvailabilityGetToOneRelatedResponses];

export type SubscriptionsSubscriptionLocalizationsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionLocalizations
         */
        'fields[subscriptionLocalizations]'?: Array<'name' | 'locale' | 'description' | 'state' | 'subscription'>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<'name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'subscription'>;
    };
    url: '/v1/subscriptions/{id}/subscriptionLocalizations';
};

export type SubscriptionsSubscriptionLocalizationsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionsSubscriptionLocalizationsGetToManyRelatedError = SubscriptionsSubscriptionLocalizationsGetToManyRelatedErrors[keyof SubscriptionsSubscriptionLocalizationsGetToManyRelatedErrors];

export type SubscriptionsSubscriptionLocalizationsGetToManyRelatedResponses = {
    /**
     * List of SubscriptionLocalizations
     */
    200: SubscriptionLocalizationsResponse;
};

export type SubscriptionsSubscriptionLocalizationsGetToManyRelatedResponse = SubscriptionsSubscriptionLocalizationsGetToManyRelatedResponses[keyof SubscriptionsSubscriptionLocalizationsGetToManyRelatedResponses];

export type SubscriptionsWinBackOffersGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type winBackOffers
         */
        'fields[winBackOffers]'?: Array<'referenceName' | 'offerId' | 'duration' | 'offerMode' | 'periodCount' | 'customerEligibilityPaidSubscriptionDurationInMonths' | 'customerEligibilityTimeSinceLastSubscribedInMonths' | 'customerEligibilityWaitBetweenOffersInMonths' | 'startDate' | 'endDate' | 'priority' | 'promotionIntent' | 'prices'>;
        /**
         * the fields to include for returned resources of type winBackOfferPrices
         */
        'fields[winBackOfferPrices]'?: Array<'territory' | 'subscriptionPricePoint'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'prices'>;
        /**
         * maximum number of related prices returned (when they are included)
         */
        'limit[prices]'?: number;
    };
    url: '/v1/subscriptions/{id}/winBackOffers';
};

export type SubscriptionsWinBackOffersGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type SubscriptionsWinBackOffersGetToManyRelatedError = SubscriptionsWinBackOffersGetToManyRelatedErrors[keyof SubscriptionsWinBackOffersGetToManyRelatedErrors];

export type SubscriptionsWinBackOffersGetToManyRelatedResponses = {
    /**
     * List of WinBackOffers
     */
    200: WinBackOffersResponse;
};

export type SubscriptionsWinBackOffersGetToManyRelatedResponse = SubscriptionsWinBackOffersGetToManyRelatedResponses[keyof SubscriptionsWinBackOffersGetToManyRelatedResponses];

export type UserInvitationsVisibleAppsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/userInvitations/{id}/visibleApps';
};

export type UserInvitationsVisibleAppsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type UserInvitationsVisibleAppsGetToManyRelatedError = UserInvitationsVisibleAppsGetToManyRelatedErrors[keyof UserInvitationsVisibleAppsGetToManyRelatedErrors];

export type UserInvitationsVisibleAppsGetToManyRelatedResponses = {
    /**
     * List of Apps with get
     */
    200: AppsWithoutIncludesResponse;
};

export type UserInvitationsVisibleAppsGetToManyRelatedResponse = UserInvitationsVisibleAppsGetToManyRelatedResponses[keyof UserInvitationsVisibleAppsGetToManyRelatedResponses];

export type UsersVisibleAppsDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: UserVisibleAppsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/users/{id}/relationships/visibleApps';
};

export type UsersVisibleAppsDeleteToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type UsersVisibleAppsDeleteToManyRelationshipError = UsersVisibleAppsDeleteToManyRelationshipErrors[keyof UsersVisibleAppsDeleteToManyRelationshipErrors];

export type UsersVisibleAppsDeleteToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type UsersVisibleAppsDeleteToManyRelationshipResponse = UsersVisibleAppsDeleteToManyRelationshipResponses[keyof UsersVisibleAppsDeleteToManyRelationshipResponses];

export type UsersVisibleAppsGetToManyRelationshipData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/users/{id}/relationships/visibleApps';
};

export type UsersVisibleAppsGetToManyRelationshipErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type UsersVisibleAppsGetToManyRelationshipError = UsersVisibleAppsGetToManyRelationshipErrors[keyof UsersVisibleAppsGetToManyRelationshipErrors];

export type UsersVisibleAppsGetToManyRelationshipResponses = {
    /**
     * List of related linkages
     */
    200: UserVisibleAppsLinkagesResponse;
};

export type UsersVisibleAppsGetToManyRelationshipResponse = UsersVisibleAppsGetToManyRelationshipResponses[keyof UsersVisibleAppsGetToManyRelationshipResponses];

export type UsersVisibleAppsReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: UserVisibleAppsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/users/{id}/relationships/visibleApps';
};

export type UsersVisibleAppsReplaceToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type UsersVisibleAppsReplaceToManyRelationshipError = UsersVisibleAppsReplaceToManyRelationshipErrors[keyof UsersVisibleAppsReplaceToManyRelationshipErrors];

export type UsersVisibleAppsReplaceToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type UsersVisibleAppsReplaceToManyRelationshipResponse = UsersVisibleAppsReplaceToManyRelationshipResponses[keyof UsersVisibleAppsReplaceToManyRelationshipResponses];

export type UsersVisibleAppsCreateToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: UserVisibleAppsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: never;
    url: '/v1/users/{id}/relationships/visibleApps';
};

export type UsersVisibleAppsCreateToManyRelationshipErrors = {
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
    /**
     * Request entity error(s)
     */
    409: ErrorResponse;
    /**
     * Unprocessable request entity error(s)
     */
    422: ErrorResponse;
};

export type UsersVisibleAppsCreateToManyRelationshipError = UsersVisibleAppsCreateToManyRelationshipErrors[keyof UsersVisibleAppsCreateToManyRelationshipErrors];

export type UsersVisibleAppsCreateToManyRelationshipResponses = {
    /**
     * Success (no content)
     */
    204: void;
};

export type UsersVisibleAppsCreateToManyRelationshipResponse = UsersVisibleAppsCreateToManyRelationshipResponses[keyof UsersVisibleAppsCreateToManyRelationshipResponses];

export type UsersVisibleAppsGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<'name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'appPriceSchedule' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail'>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
    url: '/v1/users/{id}/visibleApps';
};

export type UsersVisibleAppsGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type UsersVisibleAppsGetToManyRelatedError = UsersVisibleAppsGetToManyRelatedErrors[keyof UsersVisibleAppsGetToManyRelatedErrors];

export type UsersVisibleAppsGetToManyRelatedResponses = {
    /**
     * List of Apps with get
     */
    200: AppsWithoutIncludesResponse;
};

export type UsersVisibleAppsGetToManyRelatedResponse = UsersVisibleAppsGetToManyRelatedResponses[keyof UsersVisibleAppsGetToManyRelatedResponses];

export type WinBackOffersPricesGetToManyRelatedData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<string>;
        /**
         * the fields to include for returned resources of type winBackOfferPrices
         */
        'fields[winBackOfferPrices]'?: Array<'territory' | 'subscriptionPricePoint'>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<'currency'>;
        /**
         * the fields to include for returned resources of type subscriptionPricePoints
         */
        'fields[subscriptionPricePoints]'?: Array<'customerPrice' | 'proceeds' | 'proceedsYear2' | 'territory' | 'equalizations'>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<'territory' | 'subscriptionPricePoint'>;
    };
    url: '/v1/winBackOffers/{id}/prices';
};

export type WinBackOffersPricesGetToManyRelatedErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type WinBackOffersPricesGetToManyRelatedError = WinBackOffersPricesGetToManyRelatedErrors[keyof WinBackOffersPricesGetToManyRelatedErrors];

export type WinBackOffersPricesGetToManyRelatedResponses = {
    /**
     * List of WinBackOfferPrices
     */
    200: WinBackOfferPricesResponse;
};

export type WinBackOffersPricesGetToManyRelatedResponse = WinBackOffersPricesGetToManyRelatedResponses[keyof WinBackOffersPricesGetToManyRelatedResponses];

export type AppsBetaTesterUsagesGetMetricsData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the duration of the reporting period
         */
        period?: 'P7D' | 'P30D' | 'P90D' | 'P365D';
        /**
         * the dimension by which to group the results
         */
        groupBy?: Array<'betaTesters'>;
        /**
         * filter by 'betaTesters' relationship dimension
         */
        'filter[betaTesters]'?: string;
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
    };
    url: '/v1/apps/{id}/metrics/betaTesterUsages';
};

export type AppsBetaTesterUsagesGetMetricsErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type AppsBetaTesterUsagesGetMetricsError = AppsBetaTesterUsagesGetMetricsErrors[keyof AppsBetaTesterUsagesGetMetricsErrors];

export type AppsBetaTesterUsagesGetMetricsResponses = {
    /**
     * Metrics data response
     */
    200: AppsBetaTesterUsagesV1MetricResponse;
};

export type AppsBetaTesterUsagesGetMetricsResponse = AppsBetaTesterUsagesGetMetricsResponses[keyof AppsBetaTesterUsagesGetMetricsResponses];

export type BetaGroupsBetaTesterUsagesGetMetricsData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the duration of the reporting period
         */
        period?: 'P7D' | 'P30D' | 'P90D' | 'P365D';
        /**
         * the dimension by which to group the results
         */
        groupBy?: Array<'betaTesters'>;
        /**
         * filter by 'betaTesters' relationship dimension
         */
        'filter[betaTesters]'?: string;
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
    };
    url: '/v1/betaGroups/{id}/metrics/betaTesterUsages';
};

export type BetaGroupsBetaTesterUsagesGetMetricsErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaGroupsBetaTesterUsagesGetMetricsError = BetaGroupsBetaTesterUsagesGetMetricsErrors[keyof BetaGroupsBetaTesterUsagesGetMetricsErrors];

export type BetaGroupsBetaTesterUsagesGetMetricsResponses = {
    /**
     * Metrics data response
     */
    200: AppsBetaTesterUsagesV1MetricResponse;
};

export type BetaGroupsBetaTesterUsagesGetMetricsResponse = BetaGroupsBetaTesterUsagesGetMetricsResponses[keyof BetaGroupsBetaTesterUsagesGetMetricsResponses];

export type BetaGroupsPublicLinkUsagesGetMetricsData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
    };
    url: '/v1/betaGroups/{id}/metrics/publicLinkUsages';
};

export type BetaGroupsPublicLinkUsagesGetMetricsErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaGroupsPublicLinkUsagesGetMetricsError = BetaGroupsPublicLinkUsagesGetMetricsErrors[keyof BetaGroupsPublicLinkUsagesGetMetricsErrors];

export type BetaGroupsPublicLinkUsagesGetMetricsResponses = {
    /**
     * Metrics data response
     */
    200: BetaPublicLinkUsagesV1MetricResponse;
};

export type BetaGroupsPublicLinkUsagesGetMetricsResponse = BetaGroupsPublicLinkUsagesGetMetricsResponses[keyof BetaGroupsPublicLinkUsagesGetMetricsResponses];

export type BetaTestersBetaTesterUsagesGetMetricsData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query: {
        /**
         * the duration of the reporting period
         */
        period?: 'P7D' | 'P30D' | 'P90D' | 'P365D';
        /**
         * filter by 'apps' relationship dimension
         */
        'filter[apps]': string;
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
    };
    url: '/v1/betaTesters/{id}/metrics/betaTesterUsages';
};

export type BetaTestersBetaTesterUsagesGetMetricsErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BetaTestersBetaTesterUsagesGetMetricsError = BetaTestersBetaTesterUsagesGetMetricsErrors[keyof BetaTestersBetaTesterUsagesGetMetricsErrors];

export type BetaTestersBetaTesterUsagesGetMetricsResponses = {
    /**
     * Metrics data response
     */
    200: BetaTesterUsagesV1MetricResponse;
};

export type BetaTestersBetaTesterUsagesGetMetricsResponse = BetaTestersBetaTesterUsagesGetMetricsResponses[keyof BetaTestersBetaTesterUsagesGetMetricsResponses];

export type BuildsBetaBuildUsagesGetMetricsData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
    };
    url: '/v1/builds/{id}/metrics/betaBuildUsages';
};

export type BuildsBetaBuildUsagesGetMetricsErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type BuildsBetaBuildUsagesGetMetricsError = BuildsBetaBuildUsagesGetMetricsErrors[keyof BuildsBetaBuildUsagesGetMetricsErrors];

export type BuildsBetaBuildUsagesGetMetricsResponses = {
    /**
     * Metrics data response
     */
    200: BetaBuildUsagesV1MetricResponse;
};

export type BuildsBetaBuildUsagesGetMetricsResponse = BuildsBetaBuildUsagesGetMetricsResponses[keyof BuildsBetaBuildUsagesGetMetricsResponses];

export type GameCenterDetailsClassicMatchmakingRequestsGetMetricsData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query: {
        /**
         * the granularity of the per-group dataset
         */
        granularity: 'P1D' | 'PT1H' | 'PT15M';
        /**
         * the dimension by which to group the results
         */
        groupBy?: Array<'result'>;
        /**
         * filter by 'result' attribute dimension
         */
        'filter[result]'?: 'MATCHED' | 'CANCELED' | 'EXPIRED';
        /**
         * comma-separated list of sort expressions; metrics will be sorted as specified
         */
        sort?: Array<'count' | '-count' | 'averageSecondsInQueue' | '-averageSecondsInQueue' | 'p50SecondsInQueue' | '-p50SecondsInQueue' | 'p95SecondsInQueue' | '-p95SecondsInQueue'>;
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
    };
    url: '/v1/gameCenterDetails/{id}/metrics/classicMatchmakingRequests';
};

export type GameCenterDetailsClassicMatchmakingRequestsGetMetricsErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterDetailsClassicMatchmakingRequestsGetMetricsError = GameCenterDetailsClassicMatchmakingRequestsGetMetricsErrors[keyof GameCenterDetailsClassicMatchmakingRequestsGetMetricsErrors];

export type GameCenterDetailsClassicMatchmakingRequestsGetMetricsResponses = {
    /**
     * Metrics data response
     */
    200: GameCenterMatchmakingAppRequestsV1MetricResponse;
};

export type GameCenterDetailsClassicMatchmakingRequestsGetMetricsResponse = GameCenterDetailsClassicMatchmakingRequestsGetMetricsResponses[keyof GameCenterDetailsClassicMatchmakingRequestsGetMetricsResponses];

export type GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query: {
        /**
         * the granularity of the per-group dataset
         */
        granularity: 'P1D' | 'PT1H' | 'PT15M';
        /**
         * the dimension by which to group the results
         */
        groupBy?: Array<'result'>;
        /**
         * filter by 'result' attribute dimension
         */
        'filter[result]'?: 'MATCHED' | 'CANCELED' | 'EXPIRED';
        /**
         * comma-separated list of sort expressions; metrics will be sorted as specified
         */
        sort?: Array<'count' | '-count' | 'averageSecondsInQueue' | '-averageSecondsInQueue' | 'p50SecondsInQueue' | '-p50SecondsInQueue' | 'p95SecondsInQueue' | '-p95SecondsInQueue'>;
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
    };
    url: '/v1/gameCenterDetails/{id}/metrics/ruleBasedMatchmakingRequests';
};

export type GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsError = GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsErrors[keyof GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsErrors];

export type GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsResponses = {
    /**
     * Metrics data response
     */
    200: GameCenterMatchmakingAppRequestsV1MetricResponse;
};

export type GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsResponse = GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsResponses[keyof GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsResponses];

export type GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query: {
        /**
         * the granularity of the per-group dataset
         */
        granularity: 'P1D' | 'PT1H' | 'PT15M';
        /**
         * comma-separated list of sort expressions; metrics will be sorted as specified
         */
        sort?: Array<'count' | '-count' | 'averageNumberOfRequests' | '-averageNumberOfRequests' | 'p50NumberOfRequests' | '-p50NumberOfRequests' | 'p95NumberOfRequests' | '-p95NumberOfRequests'>;
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
    };
    url: '/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingQueueSizes';
};

export type GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsError = GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsErrors[keyof GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsErrors];

export type GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsResponses = {
    /**
     * Metrics data response
     */
    200: GameCenterMatchmakingQueueSizesV1MetricResponse;
};

export type GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsResponse = GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsResponses[keyof GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsResponses];

export type GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query: {
        /**
         * the granularity of the per-group dataset
         */
        granularity: 'P1D' | 'PT1H' | 'PT15M';
        /**
         * the dimension by which to group the results
         */
        groupBy?: Array<'result' | 'gameCenterDetail'>;
        /**
         * filter by 'result' attribute dimension
         */
        'filter[result]'?: 'MATCHED' | 'CANCELED' | 'EXPIRED';
        /**
         * filter by 'gameCenterDetail' relationship dimension
         */
        'filter[gameCenterDetail]'?: string;
        /**
         * comma-separated list of sort expressions; metrics will be sorted as specified
         */
        sort?: Array<'count' | '-count' | 'averageSecondsInQueue' | '-averageSecondsInQueue' | 'p50SecondsInQueue' | '-p50SecondsInQueue' | 'p95SecondsInQueue' | '-p95SecondsInQueue'>;
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
    };
    url: '/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingRequests';
};

export type GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsError = GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsErrors[keyof GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsErrors];

export type GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsResponses = {
    /**
     * Metrics data response
     */
    200: GameCenterMatchmakingQueueRequestsV1MetricResponse;
};

export type GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsResponse = GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsResponses[keyof GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsResponses];

export type GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query: {
        /**
         * the granularity of the per-group dataset
         */
        granularity: 'P1D' | 'PT1H' | 'PT15M';
        /**
         * comma-separated list of sort expressions; metrics will be sorted as specified
         */
        sort?: Array<'count' | '-count' | 'averageNumberOfRequests' | '-averageNumberOfRequests' | 'p50NumberOfRequests' | '-p50NumberOfRequests' | 'p95NumberOfRequests' | '-p95NumberOfRequests'>;
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
    };
    url: '/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingQueueSizes';
};

export type GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsError = GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsErrors[keyof GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsErrors];

export type GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsResponses = {
    /**
     * Metrics data response
     */
    200: GameCenterMatchmakingQueueSizesV1MetricResponse;
};

export type GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsResponse = GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsResponses[keyof GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsResponses];

export type GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query: {
        /**
         * the granularity of the per-group dataset
         */
        granularity: 'P1D' | 'PT1H' | 'PT15M';
        /**
         * the dimension by which to group the results
         */
        groupBy?: Array<'result' | 'gameCenterDetail'>;
        /**
         * filter by 'result' attribute dimension
         */
        'filter[result]'?: 'MATCHED' | 'CANCELED' | 'EXPIRED';
        /**
         * filter by 'gameCenterDetail' relationship dimension
         */
        'filter[gameCenterDetail]'?: string;
        /**
         * comma-separated list of sort expressions; metrics will be sorted as specified
         */
        sort?: Array<'count' | '-count' | 'averageSecondsInQueue' | '-averageSecondsInQueue' | 'p50SecondsInQueue' | '-p50SecondsInQueue' | 'p95SecondsInQueue' | '-p95SecondsInQueue'>;
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
    };
    url: '/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingRequests';
};

export type GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsError = GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsErrors[keyof GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsErrors];

export type GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsResponses = {
    /**
     * Metrics data response
     */
    200: GameCenterMatchmakingQueueRequestsV1MetricResponse;
};

export type GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsResponse = GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsResponses[keyof GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsResponses];

export type GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query: {
        /**
         * the granularity of the per-group dataset
         */
        granularity: 'P1D' | 'PT1H' | 'PT15M';
        /**
         * comma-separated list of sort expressions; metrics will be sorted as specified
         */
        sort?: Array<'count' | '-count' | 'averagePlayerCount' | '-averagePlayerCount' | 'p50PlayerCount' | '-p50PlayerCount' | 'p95PlayerCount' | '-p95PlayerCount'>;
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
    };
    url: '/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingSessions';
};

export type GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsError = GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsErrors[keyof GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsErrors];

export type GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsResponses = {
    /**
     * Metrics data response
     */
    200: GameCenterMatchmakingSessionsV1MetricResponse;
};

export type GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsResponse = GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsResponses[keyof GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsResponses];

export type GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query: {
        /**
         * the granularity of the per-group dataset
         */
        granularity: 'P1D' | 'PT1H' | 'PT15M';
        /**
         * the dimension by which to group the results
         */
        groupBy?: Array<'result' | 'gameCenterMatchmakingQueue'>;
        /**
         * filter by 'result' attribute dimension
         */
        'filter[result]'?: string;
        /**
         * filter by 'gameCenterMatchmakingQueue' relationship dimension
         */
        'filter[gameCenterMatchmakingQueue]'?: string;
        /**
         * comma-separated list of sort expressions; metrics will be sorted as specified
         */
        sort?: Array<'count' | '-count'>;
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
    };
    url: '/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingBooleanRuleResults';
};

export type GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsError = GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsErrors[keyof GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsErrors];

export type GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsResponses = {
    /**
     * Metrics data response
     */
    200: GameCenterMatchmakingBooleanRuleResultsV1MetricResponse;
};

export type GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsResponse = GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsResponses[keyof GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsResponses];

export type GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query: {
        /**
         * the granularity of the per-group dataset
         */
        granularity: 'P1D' | 'PT1H' | 'PT15M';
        /**
         * the dimension by which to group the results
         */
        groupBy?: Array<'gameCenterMatchmakingQueue'>;
        /**
         * filter by 'gameCenterMatchmakingQueue' relationship dimension
         */
        'filter[gameCenterMatchmakingQueue]'?: string;
        /**
         * comma-separated list of sort expressions; metrics will be sorted as specified
         */
        sort?: Array<'count' | '-count' | 'averageResult' | '-averageResult' | 'p50Result' | '-p50Result' | 'p95Result' | '-p95Result'>;
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
    };
    url: '/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingNumberRuleResults';
};

export type GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsError = GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsErrors[keyof GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsErrors];

export type GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsResponses = {
    /**
     * Metrics data response
     */
    200: GameCenterMatchmakingNumberRuleResultsV1MetricResponse;
};

export type GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsResponse = GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsResponses[keyof GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsResponses];

export type GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsData = {
    body?: never;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query: {
        /**
         * the granularity of the per-group dataset
         */
        granularity: 'P1D' | 'PT1H' | 'PT15M';
        /**
         * the dimension by which to group the results
         */
        groupBy?: Array<'gameCenterMatchmakingQueue'>;
        /**
         * filter by 'gameCenterMatchmakingQueue' relationship dimension
         */
        'filter[gameCenterMatchmakingQueue]'?: string;
        /**
         * comma-separated list of sort expressions; metrics will be sorted as specified
         */
        sort?: Array<'count' | '-count'>;
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
    };
    url: '/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingRuleErrors';
};

export type GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsErrors = {
    /**
     * Parameter error(s)
     */
    400: ErrorResponse;
    /**
     * Unauthorized error(s)
     */
    401: ErrorResponse;
    /**
     * Forbidden error
     */
    403: ErrorResponse;
    /**
     * Not found error
     */
    404: ErrorResponse;
};

export type GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsError = GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsErrors[keyof GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsErrors];

export type GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsResponses = {
    /**
     * Metrics data response
     */
    200: GameCenterMatchmakingRuleErrorsV1MetricResponse;
};

export type GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsResponse = GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsResponses[keyof GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsResponses];

export type ClientOptions = {
    baseUrl: 'https://api.appstoreconnect.apple.com/' | (string & {});
};