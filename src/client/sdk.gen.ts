// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { ActorsGetCollectionData, ActorsGetCollectionResponse, ActorsGetCollectionError, ActorsGetInstanceData, ActorsGetInstanceResponse, ActorsGetInstanceError, AgeRatingDeclarationsUpdateInstanceData, AgeRatingDeclarationsUpdateInstanceResponse, AgeRatingDeclarationsUpdateInstanceError, AlternativeDistributionDomainsGetCollectionData, AlternativeDistributionDomainsGetCollectionResponse, AlternativeDistributionDomainsGetCollectionError, AlternativeDistributionDomainsCreateInstanceData, AlternativeDistributionDomainsCreateInstanceResponse, AlternativeDistributionDomainsCreateInstanceError, AlternativeDistributionDomainsDeleteInstanceData, AlternativeDistributionDomainsDeleteInstanceResponse, AlternativeDistributionDomainsDeleteInstanceError, AlternativeDistributionDomainsGetInstanceData, AlternativeDistributionDomainsGetInstanceResponse, AlternativeDistributionDomainsGetInstanceError, AlternativeDistributionKeysGetCollectionData, AlternativeDistributionKeysGetCollectionResponse, AlternativeDistributionKeysGetCollectionError, AlternativeDistributionKeysCreateInstanceData, AlternativeDistributionKeysCreateInstanceResponse, AlternativeDistributionKeysCreateInstanceError, AlternativeDistributionKeysDeleteInstanceData, AlternativeDistributionKeysDeleteInstanceResponse, AlternativeDistributionKeysDeleteInstanceError, AlternativeDistributionKeysGetInstanceData, AlternativeDistributionKeysGetInstanceResponse, AlternativeDistributionKeysGetInstanceError, AlternativeDistributionPackageDeltasGetInstanceData, AlternativeDistributionPackageDeltasGetInstanceResponse, AlternativeDistributionPackageDeltasGetInstanceError, AlternativeDistributionPackageVariantsGetInstanceData, AlternativeDistributionPackageVariantsGetInstanceResponse, AlternativeDistributionPackageVariantsGetInstanceError, AlternativeDistributionPackageVersionsGetInstanceData, AlternativeDistributionPackageVersionsGetInstanceResponse, AlternativeDistributionPackageVersionsGetInstanceError, AlternativeDistributionPackagesCreateInstanceData, AlternativeDistributionPackagesCreateInstanceResponse, AlternativeDistributionPackagesCreateInstanceError, AlternativeDistributionPackagesGetInstanceData, AlternativeDistributionPackagesGetInstanceResponse, AlternativeDistributionPackagesGetInstanceError, AnalyticsReportInstancesGetInstanceData, AnalyticsReportInstancesGetInstanceResponse, AnalyticsReportInstancesGetInstanceError, AnalyticsReportRequestsCreateInstanceData, AnalyticsReportRequestsCreateInstanceResponse, AnalyticsReportRequestsCreateInstanceError, AnalyticsReportRequestsDeleteInstanceData, AnalyticsReportRequestsDeleteInstanceResponse, AnalyticsReportRequestsDeleteInstanceError, AnalyticsReportRequestsGetInstanceData, AnalyticsReportRequestsGetInstanceResponse, AnalyticsReportRequestsGetInstanceError, AnalyticsReportSegmentsGetInstanceData, AnalyticsReportSegmentsGetInstanceResponse, AnalyticsReportSegmentsGetInstanceError, AnalyticsReportsGetInstanceData, AnalyticsReportsGetInstanceResponse, AnalyticsReportsGetInstanceError, AppAvailabilitiesV2CreateInstanceData, AppAvailabilitiesV2CreateInstanceResponse, AppAvailabilitiesV2CreateInstanceError, AppAvailabilitiesV2GetInstanceData, AppAvailabilitiesV2GetInstanceResponse, AppAvailabilitiesV2GetInstanceError, AppCategoriesGetCollectionData, AppCategoriesGetCollectionResponse, AppCategoriesGetCollectionError, AppCategoriesGetInstanceData, AppCategoriesGetInstanceResponse, AppCategoriesGetInstanceError, AppClipAdvancedExperienceImagesCreateInstanceData, AppClipAdvancedExperienceImagesCreateInstanceResponse, AppClipAdvancedExperienceImagesCreateInstanceError, AppClipAdvancedExperienceImagesGetInstanceData, AppClipAdvancedExperienceImagesGetInstanceResponse, AppClipAdvancedExperienceImagesGetInstanceError, AppClipAdvancedExperienceImagesUpdateInstanceData, AppClipAdvancedExperienceImagesUpdateInstanceResponse, AppClipAdvancedExperienceImagesUpdateInstanceError, AppClipAdvancedExperiencesCreateInstanceData, AppClipAdvancedExperiencesCreateInstanceResponse, AppClipAdvancedExperiencesCreateInstanceError, AppClipAdvancedExperiencesGetInstanceData, AppClipAdvancedExperiencesGetInstanceResponse, AppClipAdvancedExperiencesGetInstanceError, AppClipAdvancedExperiencesUpdateInstanceData, AppClipAdvancedExperiencesUpdateInstanceResponse, AppClipAdvancedExperiencesUpdateInstanceError, AppClipAppStoreReviewDetailsCreateInstanceData, AppClipAppStoreReviewDetailsCreateInstanceResponse, AppClipAppStoreReviewDetailsCreateInstanceError, AppClipAppStoreReviewDetailsGetInstanceData, AppClipAppStoreReviewDetailsGetInstanceResponse, AppClipAppStoreReviewDetailsGetInstanceError, AppClipAppStoreReviewDetailsUpdateInstanceData, AppClipAppStoreReviewDetailsUpdateInstanceResponse, AppClipAppStoreReviewDetailsUpdateInstanceError, AppClipDefaultExperienceLocalizationsCreateInstanceData, AppClipDefaultExperienceLocalizationsCreateInstanceResponse, AppClipDefaultExperienceLocalizationsCreateInstanceError, AppClipDefaultExperienceLocalizationsDeleteInstanceData, AppClipDefaultExperienceLocalizationsDeleteInstanceResponse, AppClipDefaultExperienceLocalizationsDeleteInstanceError, AppClipDefaultExperienceLocalizationsGetInstanceData, AppClipDefaultExperienceLocalizationsGetInstanceResponse, AppClipDefaultExperienceLocalizationsGetInstanceError, AppClipDefaultExperienceLocalizationsUpdateInstanceData, AppClipDefaultExperienceLocalizationsUpdateInstanceResponse, AppClipDefaultExperienceLocalizationsUpdateInstanceError, AppClipDefaultExperiencesCreateInstanceData, AppClipDefaultExperiencesCreateInstanceResponse, AppClipDefaultExperiencesCreateInstanceError, AppClipDefaultExperiencesDeleteInstanceData, AppClipDefaultExperiencesDeleteInstanceResponse, AppClipDefaultExperiencesDeleteInstanceError, AppClipDefaultExperiencesGetInstanceData, AppClipDefaultExperiencesGetInstanceResponse, AppClipDefaultExperiencesGetInstanceError, AppClipDefaultExperiencesUpdateInstanceData, AppClipDefaultExperiencesUpdateInstanceResponse, AppClipDefaultExperiencesUpdateInstanceError, AppClipHeaderImagesCreateInstanceData, AppClipHeaderImagesCreateInstanceResponse, AppClipHeaderImagesCreateInstanceError, AppClipHeaderImagesDeleteInstanceData, AppClipHeaderImagesDeleteInstanceResponse, AppClipHeaderImagesDeleteInstanceError, AppClipHeaderImagesGetInstanceData, AppClipHeaderImagesGetInstanceResponse, AppClipHeaderImagesGetInstanceError, AppClipHeaderImagesUpdateInstanceData, AppClipHeaderImagesUpdateInstanceResponse, AppClipHeaderImagesUpdateInstanceError, AppClipsGetInstanceData, AppClipsGetInstanceResponse, AppClipsGetInstanceError, AppCustomProductPageLocalizationsCreateInstanceData, AppCustomProductPageLocalizationsCreateInstanceResponse, AppCustomProductPageLocalizationsCreateInstanceError, AppCustomProductPageLocalizationsDeleteInstanceData, AppCustomProductPageLocalizationsDeleteInstanceResponse, AppCustomProductPageLocalizationsDeleteInstanceError, AppCustomProductPageLocalizationsGetInstanceData, AppCustomProductPageLocalizationsGetInstanceResponse, AppCustomProductPageLocalizationsGetInstanceError, AppCustomProductPageLocalizationsUpdateInstanceData, AppCustomProductPageLocalizationsUpdateInstanceResponse, AppCustomProductPageLocalizationsUpdateInstanceError, AppCustomProductPageVersionsCreateInstanceData, AppCustomProductPageVersionsCreateInstanceResponse, AppCustomProductPageVersionsCreateInstanceError, AppCustomProductPageVersionsGetInstanceData, AppCustomProductPageVersionsGetInstanceResponse, AppCustomProductPageVersionsGetInstanceError, AppCustomProductPageVersionsUpdateInstanceData, AppCustomProductPageVersionsUpdateInstanceResponse, AppCustomProductPageVersionsUpdateInstanceError, AppCustomProductPagesCreateInstanceData, AppCustomProductPagesCreateInstanceResponse, AppCustomProductPagesCreateInstanceError, AppCustomProductPagesDeleteInstanceData, AppCustomProductPagesDeleteInstanceResponse, AppCustomProductPagesDeleteInstanceError, AppCustomProductPagesGetInstanceData, AppCustomProductPagesGetInstanceResponse, AppCustomProductPagesGetInstanceError, AppCustomProductPagesUpdateInstanceData, AppCustomProductPagesUpdateInstanceResponse, AppCustomProductPagesUpdateInstanceError, AppEncryptionDeclarationDocumentsCreateInstanceData, AppEncryptionDeclarationDocumentsCreateInstanceResponse, AppEncryptionDeclarationDocumentsCreateInstanceError, AppEncryptionDeclarationDocumentsGetInstanceData, AppEncryptionDeclarationDocumentsGetInstanceResponse, AppEncryptionDeclarationDocumentsGetInstanceError, AppEncryptionDeclarationDocumentsUpdateInstanceData, AppEncryptionDeclarationDocumentsUpdateInstanceResponse, AppEncryptionDeclarationDocumentsUpdateInstanceError, AppEncryptionDeclarationsGetCollectionData, AppEncryptionDeclarationsGetCollectionResponse, AppEncryptionDeclarationsGetCollectionError, AppEncryptionDeclarationsCreateInstanceData, AppEncryptionDeclarationsCreateInstanceResponse, AppEncryptionDeclarationsCreateInstanceError, AppEncryptionDeclarationsGetInstanceData, AppEncryptionDeclarationsGetInstanceResponse, AppEncryptionDeclarationsGetInstanceError, AppEventLocalizationsCreateInstanceData, AppEventLocalizationsCreateInstanceResponse, AppEventLocalizationsCreateInstanceError, AppEventLocalizationsDeleteInstanceData, AppEventLocalizationsDeleteInstanceResponse, AppEventLocalizationsDeleteInstanceError, AppEventLocalizationsGetInstanceData, AppEventLocalizationsGetInstanceResponse, AppEventLocalizationsGetInstanceError, AppEventLocalizationsUpdateInstanceData, AppEventLocalizationsUpdateInstanceResponse, AppEventLocalizationsUpdateInstanceError, AppEventScreenshotsCreateInstanceData, AppEventScreenshotsCreateInstanceResponse, AppEventScreenshotsCreateInstanceError, AppEventScreenshotsDeleteInstanceData, AppEventScreenshotsDeleteInstanceResponse, AppEventScreenshotsDeleteInstanceError, AppEventScreenshotsGetInstanceData, AppEventScreenshotsGetInstanceResponse, AppEventScreenshotsGetInstanceError, AppEventScreenshotsUpdateInstanceData, AppEventScreenshotsUpdateInstanceResponse, AppEventScreenshotsUpdateInstanceError, AppEventVideoClipsCreateInstanceData, AppEventVideoClipsCreateInstanceResponse, AppEventVideoClipsCreateInstanceError, AppEventVideoClipsDeleteInstanceData, AppEventVideoClipsDeleteInstanceResponse, AppEventVideoClipsDeleteInstanceError, AppEventVideoClipsGetInstanceData, AppEventVideoClipsGetInstanceResponse, AppEventVideoClipsGetInstanceError, AppEventVideoClipsUpdateInstanceData, AppEventVideoClipsUpdateInstanceResponse, AppEventVideoClipsUpdateInstanceError, AppEventsCreateInstanceData, AppEventsCreateInstanceResponse, AppEventsCreateInstanceError, AppEventsDeleteInstanceData, AppEventsDeleteInstanceResponse, AppEventsDeleteInstanceError, AppEventsGetInstanceData, AppEventsGetInstanceResponse, AppEventsGetInstanceError, AppEventsUpdateInstanceData, AppEventsUpdateInstanceResponse, AppEventsUpdateInstanceError, AppInfoLocalizationsCreateInstanceData, AppInfoLocalizationsCreateInstanceResponse, AppInfoLocalizationsCreateInstanceError, AppInfoLocalizationsDeleteInstanceData, AppInfoLocalizationsDeleteInstanceResponse, AppInfoLocalizationsDeleteInstanceError, AppInfoLocalizationsGetInstanceData, AppInfoLocalizationsGetInstanceResponse, AppInfoLocalizationsGetInstanceError, AppInfoLocalizationsUpdateInstanceData, AppInfoLocalizationsUpdateInstanceResponse, AppInfoLocalizationsUpdateInstanceError, AppInfosGetInstanceData, AppInfosGetInstanceResponse, AppInfosGetInstanceError, AppInfosUpdateInstanceData, AppInfosUpdateInstanceResponse, AppInfosUpdateInstanceError, AppPreviewSetsCreateInstanceData, AppPreviewSetsCreateInstanceResponse, AppPreviewSetsCreateInstanceError, AppPreviewSetsDeleteInstanceData, AppPreviewSetsDeleteInstanceResponse, AppPreviewSetsDeleteInstanceError, AppPreviewSetsGetInstanceData, AppPreviewSetsGetInstanceResponse, AppPreviewSetsGetInstanceError, AppPreviewsCreateInstanceData, AppPreviewsCreateInstanceResponse, AppPreviewsCreateInstanceError, AppPreviewsDeleteInstanceData, AppPreviewsDeleteInstanceResponse, AppPreviewsDeleteInstanceError, AppPreviewsGetInstanceData, AppPreviewsGetInstanceResponse, AppPreviewsGetInstanceError, AppPreviewsUpdateInstanceData, AppPreviewsUpdateInstanceResponse, AppPreviewsUpdateInstanceError, AppPricePointsV3GetInstanceData, AppPricePointsV3GetInstanceResponse, AppPricePointsV3GetInstanceError, AppPriceSchedulesCreateInstanceData, AppPriceSchedulesCreateInstanceResponse, AppPriceSchedulesCreateInstanceError, AppPriceSchedulesGetInstanceData, AppPriceSchedulesGetInstanceResponse, AppPriceSchedulesGetInstanceError, AppScreenshotSetsCreateInstanceData, AppScreenshotSetsCreateInstanceResponse, AppScreenshotSetsCreateInstanceError, AppScreenshotSetsDeleteInstanceData, AppScreenshotSetsDeleteInstanceResponse, AppScreenshotSetsDeleteInstanceError, AppScreenshotSetsGetInstanceData, AppScreenshotSetsGetInstanceResponse, AppScreenshotSetsGetInstanceError, AppScreenshotsCreateInstanceData, AppScreenshotsCreateInstanceResponse, AppScreenshotsCreateInstanceError, AppScreenshotsDeleteInstanceData, AppScreenshotsDeleteInstanceResponse, AppScreenshotsDeleteInstanceError, AppScreenshotsGetInstanceData, AppScreenshotsGetInstanceResponse, AppScreenshotsGetInstanceError, AppScreenshotsUpdateInstanceData, AppScreenshotsUpdateInstanceResponse, AppScreenshotsUpdateInstanceError, AppStoreReviewAttachmentsCreateInstanceData, AppStoreReviewAttachmentsCreateInstanceResponse, AppStoreReviewAttachmentsCreateInstanceError, AppStoreReviewAttachmentsDeleteInstanceData, AppStoreReviewAttachmentsDeleteInstanceResponse, AppStoreReviewAttachmentsDeleteInstanceError, AppStoreReviewAttachmentsGetInstanceData, AppStoreReviewAttachmentsGetInstanceResponse, AppStoreReviewAttachmentsGetInstanceError, AppStoreReviewAttachmentsUpdateInstanceData, AppStoreReviewAttachmentsUpdateInstanceResponse, AppStoreReviewAttachmentsUpdateInstanceError, AppStoreReviewDetailsCreateInstanceData, AppStoreReviewDetailsCreateInstanceResponse, AppStoreReviewDetailsCreateInstanceError, AppStoreReviewDetailsGetInstanceData, AppStoreReviewDetailsGetInstanceResponse, AppStoreReviewDetailsGetInstanceError, AppStoreReviewDetailsUpdateInstanceData, AppStoreReviewDetailsUpdateInstanceResponse, AppStoreReviewDetailsUpdateInstanceError, AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceData, AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceResponse, AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceError, AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceData, AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceResponse, AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceError, AppStoreVersionExperimentTreatmentLocalizationsGetInstanceData, AppStoreVersionExperimentTreatmentLocalizationsGetInstanceResponse, AppStoreVersionExperimentTreatmentLocalizationsGetInstanceError, AppStoreVersionExperimentTreatmentsCreateInstanceData, AppStoreVersionExperimentTreatmentsCreateInstanceResponse, AppStoreVersionExperimentTreatmentsCreateInstanceError, AppStoreVersionExperimentTreatmentsDeleteInstanceData, AppStoreVersionExperimentTreatmentsDeleteInstanceResponse, AppStoreVersionExperimentTreatmentsDeleteInstanceError, AppStoreVersionExperimentTreatmentsGetInstanceData, AppStoreVersionExperimentTreatmentsGetInstanceResponse, AppStoreVersionExperimentTreatmentsGetInstanceError, AppStoreVersionExperimentTreatmentsUpdateInstanceData, AppStoreVersionExperimentTreatmentsUpdateInstanceResponse, AppStoreVersionExperimentTreatmentsUpdateInstanceError, AppStoreVersionExperimentsV2CreateInstanceData, AppStoreVersionExperimentsV2CreateInstanceResponse, AppStoreVersionExperimentsV2CreateInstanceError, AppStoreVersionExperimentsV2DeleteInstanceData, AppStoreVersionExperimentsV2DeleteInstanceResponse, AppStoreVersionExperimentsV2DeleteInstanceError, AppStoreVersionExperimentsV2GetInstanceData, AppStoreVersionExperimentsV2GetInstanceResponse, AppStoreVersionExperimentsV2GetInstanceError, AppStoreVersionExperimentsV2UpdateInstanceData, AppStoreVersionExperimentsV2UpdateInstanceResponse, AppStoreVersionExperimentsV2UpdateInstanceError, AppStoreVersionExperimentsCreateInstanceData, AppStoreVersionExperimentsCreateInstanceResponse, AppStoreVersionExperimentsCreateInstanceError, AppStoreVersionExperimentsDeleteInstanceData, AppStoreVersionExperimentsDeleteInstanceResponse, AppStoreVersionExperimentsDeleteInstanceError, AppStoreVersionExperimentsGetInstanceData, AppStoreVersionExperimentsGetInstanceResponse, AppStoreVersionExperimentsGetInstanceError, AppStoreVersionExperimentsUpdateInstanceData, AppStoreVersionExperimentsUpdateInstanceResponse, AppStoreVersionExperimentsUpdateInstanceError, AppStoreVersionLocalizationsCreateInstanceData, AppStoreVersionLocalizationsCreateInstanceResponse, AppStoreVersionLocalizationsCreateInstanceError, AppStoreVersionLocalizationsDeleteInstanceData, AppStoreVersionLocalizationsDeleteInstanceResponse, AppStoreVersionLocalizationsDeleteInstanceError, AppStoreVersionLocalizationsGetInstanceData, AppStoreVersionLocalizationsGetInstanceResponse, AppStoreVersionLocalizationsGetInstanceError, AppStoreVersionLocalizationsUpdateInstanceData, AppStoreVersionLocalizationsUpdateInstanceResponse, AppStoreVersionLocalizationsUpdateInstanceError, AppStoreVersionPhasedReleasesCreateInstanceData, AppStoreVersionPhasedReleasesCreateInstanceResponse, AppStoreVersionPhasedReleasesCreateInstanceError, AppStoreVersionPhasedReleasesDeleteInstanceData, AppStoreVersionPhasedReleasesDeleteInstanceResponse, AppStoreVersionPhasedReleasesDeleteInstanceError, AppStoreVersionPhasedReleasesUpdateInstanceData, AppStoreVersionPhasedReleasesUpdateInstanceResponse, AppStoreVersionPhasedReleasesUpdateInstanceError, AppStoreVersionPromotionsCreateInstanceData, AppStoreVersionPromotionsCreateInstanceResponse, AppStoreVersionPromotionsCreateInstanceError, AppStoreVersionReleaseRequestsCreateInstanceData, AppStoreVersionReleaseRequestsCreateInstanceResponse, AppStoreVersionReleaseRequestsCreateInstanceError, AppStoreVersionSubmissionsCreateInstanceData, AppStoreVersionSubmissionsCreateInstanceResponse, AppStoreVersionSubmissionsCreateInstanceError, AppStoreVersionSubmissionsDeleteInstanceData, AppStoreVersionSubmissionsDeleteInstanceResponse, AppStoreVersionSubmissionsDeleteInstanceError, AppStoreVersionsCreateInstanceData, AppStoreVersionsCreateInstanceResponse, AppStoreVersionsCreateInstanceError, AppStoreVersionsDeleteInstanceData, AppStoreVersionsDeleteInstanceResponse, AppStoreVersionsDeleteInstanceError, AppStoreVersionsGetInstanceData, AppStoreVersionsGetInstanceResponse, AppStoreVersionsGetInstanceError, AppStoreVersionsUpdateInstanceData, AppStoreVersionsUpdateInstanceResponse, AppStoreVersionsUpdateInstanceError, AppsGetCollectionData, AppsGetCollectionResponse, AppsGetCollectionError, AppsGetInstanceData, AppsGetInstanceResponse, AppsGetInstanceError, AppsUpdateInstanceData, AppsUpdateInstanceResponse, AppsUpdateInstanceError, BetaAppClipInvocationLocalizationsCreateInstanceData, BetaAppClipInvocationLocalizationsCreateInstanceResponse, BetaAppClipInvocationLocalizationsCreateInstanceError, BetaAppClipInvocationLocalizationsDeleteInstanceData, BetaAppClipInvocationLocalizationsDeleteInstanceResponse, BetaAppClipInvocationLocalizationsDeleteInstanceError, BetaAppClipInvocationLocalizationsUpdateInstanceData, BetaAppClipInvocationLocalizationsUpdateInstanceResponse, BetaAppClipInvocationLocalizationsUpdateInstanceError, BetaAppClipInvocationsCreateInstanceData, BetaAppClipInvocationsCreateInstanceResponse, BetaAppClipInvocationsCreateInstanceError, BetaAppClipInvocationsDeleteInstanceData, BetaAppClipInvocationsDeleteInstanceResponse, BetaAppClipInvocationsDeleteInstanceError, BetaAppClipInvocationsGetInstanceData, BetaAppClipInvocationsGetInstanceResponse, BetaAppClipInvocationsGetInstanceError, BetaAppClipInvocationsUpdateInstanceData, BetaAppClipInvocationsUpdateInstanceResponse, BetaAppClipInvocationsUpdateInstanceError, BetaAppLocalizationsGetCollectionData, BetaAppLocalizationsGetCollectionResponse, BetaAppLocalizationsGetCollectionError, BetaAppLocalizationsCreateInstanceData, BetaAppLocalizationsCreateInstanceResponse, BetaAppLocalizationsCreateInstanceError, BetaAppLocalizationsDeleteInstanceData, BetaAppLocalizationsDeleteInstanceResponse, BetaAppLocalizationsDeleteInstanceError, BetaAppLocalizationsGetInstanceData, BetaAppLocalizationsGetInstanceResponse, BetaAppLocalizationsGetInstanceError, BetaAppLocalizationsUpdateInstanceData, BetaAppLocalizationsUpdateInstanceResponse, BetaAppLocalizationsUpdateInstanceError, BetaAppReviewDetailsGetCollectionData, BetaAppReviewDetailsGetCollectionResponse, BetaAppReviewDetailsGetCollectionError, BetaAppReviewDetailsGetInstanceData, BetaAppReviewDetailsGetInstanceResponse, BetaAppReviewDetailsGetInstanceError, BetaAppReviewDetailsUpdateInstanceData, BetaAppReviewDetailsUpdateInstanceResponse, BetaAppReviewDetailsUpdateInstanceError, BetaAppReviewSubmissionsGetCollectionData, BetaAppReviewSubmissionsGetCollectionResponse, BetaAppReviewSubmissionsGetCollectionError, BetaAppReviewSubmissionsCreateInstanceData, BetaAppReviewSubmissionsCreateInstanceResponse, BetaAppReviewSubmissionsCreateInstanceError, BetaAppReviewSubmissionsGetInstanceData, BetaAppReviewSubmissionsGetInstanceResponse, BetaAppReviewSubmissionsGetInstanceError, BetaBuildLocalizationsGetCollectionData, BetaBuildLocalizationsGetCollectionResponse, BetaBuildLocalizationsGetCollectionError, BetaBuildLocalizationsCreateInstanceData, BetaBuildLocalizationsCreateInstanceResponse, BetaBuildLocalizationsCreateInstanceError, BetaBuildLocalizationsDeleteInstanceData, BetaBuildLocalizationsDeleteInstanceResponse, BetaBuildLocalizationsDeleteInstanceError, BetaBuildLocalizationsGetInstanceData, BetaBuildLocalizationsGetInstanceResponse, BetaBuildLocalizationsGetInstanceError, BetaBuildLocalizationsUpdateInstanceData, BetaBuildLocalizationsUpdateInstanceResponse, BetaBuildLocalizationsUpdateInstanceError, BetaGroupsGetCollectionData, BetaGroupsGetCollectionResponse, BetaGroupsGetCollectionError, BetaGroupsCreateInstanceData, BetaGroupsCreateInstanceResponse, BetaGroupsCreateInstanceError, BetaGroupsDeleteInstanceData, BetaGroupsDeleteInstanceResponse, BetaGroupsDeleteInstanceError, BetaGroupsGetInstanceData, BetaGroupsGetInstanceResponse, BetaGroupsGetInstanceError, BetaGroupsUpdateInstanceData, BetaGroupsUpdateInstanceResponse, BetaGroupsUpdateInstanceError, BetaLicenseAgreementsGetCollectionData, BetaLicenseAgreementsGetCollectionResponse, BetaLicenseAgreementsGetCollectionError, BetaLicenseAgreementsGetInstanceData, BetaLicenseAgreementsGetInstanceResponse, BetaLicenseAgreementsGetInstanceError, BetaLicenseAgreementsUpdateInstanceData, BetaLicenseAgreementsUpdateInstanceResponse, BetaLicenseAgreementsUpdateInstanceError, BetaRecruitmentCriteriaCreateInstanceData, BetaRecruitmentCriteriaCreateInstanceResponse, BetaRecruitmentCriteriaCreateInstanceError, BetaRecruitmentCriteriaDeleteInstanceData, BetaRecruitmentCriteriaDeleteInstanceResponse, BetaRecruitmentCriteriaDeleteInstanceError, BetaRecruitmentCriteriaUpdateInstanceData, BetaRecruitmentCriteriaUpdateInstanceResponse, BetaRecruitmentCriteriaUpdateInstanceError, BetaRecruitmentCriterionOptionsGetCollectionData, BetaRecruitmentCriterionOptionsGetCollectionResponse, BetaRecruitmentCriterionOptionsGetCollectionError, BetaTesterInvitationsCreateInstanceData, BetaTesterInvitationsCreateInstanceResponse, BetaTesterInvitationsCreateInstanceError, BetaTestersGetCollectionData, BetaTestersGetCollectionResponse, BetaTestersGetCollectionError, BetaTestersCreateInstanceData, BetaTestersCreateInstanceResponse, BetaTestersCreateInstanceError, BetaTestersDeleteInstanceData, BetaTestersDeleteInstanceResponse, BetaTestersDeleteInstanceError, BetaTestersGetInstanceData, BetaTestersGetInstanceResponse, BetaTestersGetInstanceError, BuildBetaDetailsGetCollectionData, BuildBetaDetailsGetCollectionResponse, BuildBetaDetailsGetCollectionError, BuildBetaDetailsGetInstanceData, BuildBetaDetailsGetInstanceResponse, BuildBetaDetailsGetInstanceError, BuildBetaDetailsUpdateInstanceData, BuildBetaDetailsUpdateInstanceResponse, BuildBetaDetailsUpdateInstanceError, BuildBetaNotificationsCreateInstanceData, BuildBetaNotificationsCreateInstanceResponse, BuildBetaNotificationsCreateInstanceError, BuildsGetCollectionData, BuildsGetCollectionResponse, BuildsGetCollectionError, BuildsGetInstanceData, BuildsGetInstanceResponse, BuildsGetInstanceError, BuildsUpdateInstanceData, BuildsUpdateInstanceResponse, BuildsUpdateInstanceError, BundleIdCapabilitiesCreateInstanceData, BundleIdCapabilitiesCreateInstanceResponse, BundleIdCapabilitiesCreateInstanceError, BundleIdCapabilitiesDeleteInstanceData, BundleIdCapabilitiesDeleteInstanceResponse, BundleIdCapabilitiesDeleteInstanceError, BundleIdCapabilitiesUpdateInstanceData, BundleIdCapabilitiesUpdateInstanceResponse, BundleIdCapabilitiesUpdateInstanceError, BundleIdsGetCollectionData, BundleIdsGetCollectionResponse, BundleIdsGetCollectionError, BundleIdsCreateInstanceData, BundleIdsCreateInstanceResponse, BundleIdsCreateInstanceError, BundleIdsDeleteInstanceData, BundleIdsDeleteInstanceResponse, BundleIdsDeleteInstanceError, BundleIdsGetInstanceData, BundleIdsGetInstanceResponse, BundleIdsGetInstanceError, BundleIdsUpdateInstanceData, BundleIdsUpdateInstanceResponse, BundleIdsUpdateInstanceError, CertificatesGetCollectionData, CertificatesGetCollectionResponse, CertificatesGetCollectionError, CertificatesCreateInstanceData, CertificatesCreateInstanceResponse, CertificatesCreateInstanceError, CertificatesDeleteInstanceData, CertificatesDeleteInstanceResponse, CertificatesDeleteInstanceError, CertificatesGetInstanceData, CertificatesGetInstanceResponse, CertificatesGetInstanceError, CertificatesUpdateInstanceData, CertificatesUpdateInstanceResponse, CertificatesUpdateInstanceError, CiArtifactsGetInstanceData, CiArtifactsGetInstanceResponse, CiArtifactsGetInstanceError, CiBuildActionsGetInstanceData, CiBuildActionsGetInstanceResponse, CiBuildActionsGetInstanceError, CiBuildRunsCreateInstanceData, CiBuildRunsCreateInstanceResponse, CiBuildRunsCreateInstanceError, CiBuildRunsGetInstanceData, CiBuildRunsGetInstanceResponse, CiBuildRunsGetInstanceError, CiIssuesGetInstanceData, CiIssuesGetInstanceResponse, CiIssuesGetInstanceError, CiMacOsVersionsGetCollectionData, CiMacOsVersionsGetCollectionResponse, CiMacOsVersionsGetCollectionError, CiMacOsVersionsGetInstanceData, CiMacOsVersionsGetInstanceResponse, CiMacOsVersionsGetInstanceError, CiProductsGetCollectionData, CiProductsGetCollectionResponse, CiProductsGetCollectionError, CiProductsDeleteInstanceData, CiProductsDeleteInstanceResponse, CiProductsDeleteInstanceError, CiProductsGetInstanceData, CiProductsGetInstanceResponse, CiProductsGetInstanceError, CiTestResultsGetInstanceData, CiTestResultsGetInstanceResponse, CiTestResultsGetInstanceError, CiWorkflowsCreateInstanceData, CiWorkflowsCreateInstanceResponse, CiWorkflowsCreateInstanceError, CiWorkflowsDeleteInstanceData, CiWorkflowsDeleteInstanceResponse, CiWorkflowsDeleteInstanceError, CiWorkflowsGetInstanceData, CiWorkflowsGetInstanceResponse, CiWorkflowsGetInstanceError, CiWorkflowsUpdateInstanceData, CiWorkflowsUpdateInstanceResponse, CiWorkflowsUpdateInstanceError, CiXcodeVersionsGetCollectionData, CiXcodeVersionsGetCollectionResponse, CiXcodeVersionsGetCollectionError, CiXcodeVersionsGetInstanceData, CiXcodeVersionsGetInstanceResponse, CiXcodeVersionsGetInstanceError, CustomerReviewResponsesCreateInstanceData, CustomerReviewResponsesCreateInstanceResponse, CustomerReviewResponsesCreateInstanceError, CustomerReviewResponsesDeleteInstanceData, CustomerReviewResponsesDeleteInstanceResponse, CustomerReviewResponsesDeleteInstanceError, CustomerReviewResponsesGetInstanceData, CustomerReviewResponsesGetInstanceResponse, CustomerReviewResponsesGetInstanceError, CustomerReviewsGetInstanceData, CustomerReviewsGetInstanceResponse, CustomerReviewsGetInstanceError, DevicesGetCollectionData, DevicesGetCollectionResponse, DevicesGetCollectionError, DevicesCreateInstanceData, DevicesCreateInstanceResponse, DevicesCreateInstanceError, DevicesGetInstanceData, DevicesGetInstanceResponse, DevicesGetInstanceError, DevicesUpdateInstanceData, DevicesUpdateInstanceResponse, DevicesUpdateInstanceError, EndAppAvailabilityPreOrdersCreateInstanceData, EndAppAvailabilityPreOrdersCreateInstanceResponse, EndAppAvailabilityPreOrdersCreateInstanceError, EndUserLicenseAgreementsCreateInstanceData, EndUserLicenseAgreementsCreateInstanceResponse, EndUserLicenseAgreementsCreateInstanceError, EndUserLicenseAgreementsDeleteInstanceData, EndUserLicenseAgreementsDeleteInstanceResponse, EndUserLicenseAgreementsDeleteInstanceError, EndUserLicenseAgreementsGetInstanceData, EndUserLicenseAgreementsGetInstanceResponse, EndUserLicenseAgreementsGetInstanceError, EndUserLicenseAgreementsUpdateInstanceData, EndUserLicenseAgreementsUpdateInstanceResponse, EndUserLicenseAgreementsUpdateInstanceError, FinanceReportsGetCollectionData, FinanceReportsGetCollectionResponse, FinanceReportsGetCollectionError, GameCenterAchievementImagesCreateInstanceData, GameCenterAchievementImagesCreateInstanceResponse, GameCenterAchievementImagesCreateInstanceError, GameCenterAchievementImagesDeleteInstanceData, GameCenterAchievementImagesDeleteInstanceResponse, GameCenterAchievementImagesDeleteInstanceError, GameCenterAchievementImagesGetInstanceData, GameCenterAchievementImagesGetInstanceResponse, GameCenterAchievementImagesGetInstanceError, GameCenterAchievementImagesUpdateInstanceData, GameCenterAchievementImagesUpdateInstanceResponse, GameCenterAchievementImagesUpdateInstanceError, GameCenterAchievementLocalizationsCreateInstanceData, GameCenterAchievementLocalizationsCreateInstanceResponse, GameCenterAchievementLocalizationsCreateInstanceError, GameCenterAchievementLocalizationsDeleteInstanceData, GameCenterAchievementLocalizationsDeleteInstanceResponse, GameCenterAchievementLocalizationsDeleteInstanceError, GameCenterAchievementLocalizationsGetInstanceData, GameCenterAchievementLocalizationsGetInstanceResponse, GameCenterAchievementLocalizationsGetInstanceError, GameCenterAchievementLocalizationsUpdateInstanceData, GameCenterAchievementLocalizationsUpdateInstanceResponse, GameCenterAchievementLocalizationsUpdateInstanceError, GameCenterAchievementReleasesCreateInstanceData, GameCenterAchievementReleasesCreateInstanceResponse, GameCenterAchievementReleasesCreateInstanceError, GameCenterAchievementReleasesDeleteInstanceData, GameCenterAchievementReleasesDeleteInstanceResponse, GameCenterAchievementReleasesDeleteInstanceError, GameCenterAchievementReleasesGetInstanceData, GameCenterAchievementReleasesGetInstanceResponse, GameCenterAchievementReleasesGetInstanceError, GameCenterAchievementsCreateInstanceData, GameCenterAchievementsCreateInstanceResponse, GameCenterAchievementsCreateInstanceError, GameCenterAchievementsDeleteInstanceData, GameCenterAchievementsDeleteInstanceResponse, GameCenterAchievementsDeleteInstanceError, GameCenterAchievementsGetInstanceData, GameCenterAchievementsGetInstanceResponse, GameCenterAchievementsGetInstanceError, GameCenterAchievementsUpdateInstanceData, GameCenterAchievementsUpdateInstanceResponse, GameCenterAchievementsUpdateInstanceError, GameCenterAppVersionsCreateInstanceData, GameCenterAppVersionsCreateInstanceResponse, GameCenterAppVersionsCreateInstanceError, GameCenterAppVersionsGetInstanceData, GameCenterAppVersionsGetInstanceResponse, GameCenterAppVersionsGetInstanceError, GameCenterAppVersionsUpdateInstanceData, GameCenterAppVersionsUpdateInstanceResponse, GameCenterAppVersionsUpdateInstanceError, GameCenterDetailsCreateInstanceData, GameCenterDetailsCreateInstanceResponse, GameCenterDetailsCreateInstanceError, GameCenterDetailsGetInstanceData, GameCenterDetailsGetInstanceResponse, GameCenterDetailsGetInstanceError, GameCenterDetailsUpdateInstanceData, GameCenterDetailsUpdateInstanceResponse, GameCenterDetailsUpdateInstanceError, GameCenterGroupsGetCollectionData, GameCenterGroupsGetCollectionResponse, GameCenterGroupsGetCollectionError, GameCenterGroupsCreateInstanceData, GameCenterGroupsCreateInstanceResponse, GameCenterGroupsCreateInstanceError, GameCenterGroupsDeleteInstanceData, GameCenterGroupsDeleteInstanceResponse, GameCenterGroupsDeleteInstanceError, GameCenterGroupsGetInstanceData, GameCenterGroupsGetInstanceResponse, GameCenterGroupsGetInstanceError, GameCenterGroupsUpdateInstanceData, GameCenterGroupsUpdateInstanceResponse, GameCenterGroupsUpdateInstanceError, GameCenterLeaderboardEntrySubmissionsCreateInstanceData, GameCenterLeaderboardEntrySubmissionsCreateInstanceResponse, GameCenterLeaderboardEntrySubmissionsCreateInstanceError, GameCenterLeaderboardImagesCreateInstanceData, GameCenterLeaderboardImagesCreateInstanceResponse, GameCenterLeaderboardImagesCreateInstanceError, GameCenterLeaderboardImagesDeleteInstanceData, GameCenterLeaderboardImagesDeleteInstanceResponse, GameCenterLeaderboardImagesDeleteInstanceError, GameCenterLeaderboardImagesGetInstanceData, GameCenterLeaderboardImagesGetInstanceResponse, GameCenterLeaderboardImagesGetInstanceError, GameCenterLeaderboardImagesUpdateInstanceData, GameCenterLeaderboardImagesUpdateInstanceResponse, GameCenterLeaderboardImagesUpdateInstanceError, GameCenterLeaderboardLocalizationsCreateInstanceData, GameCenterLeaderboardLocalizationsCreateInstanceResponse, GameCenterLeaderboardLocalizationsCreateInstanceError, GameCenterLeaderboardLocalizationsDeleteInstanceData, GameCenterLeaderboardLocalizationsDeleteInstanceResponse, GameCenterLeaderboardLocalizationsDeleteInstanceError, GameCenterLeaderboardLocalizationsGetInstanceData, GameCenterLeaderboardLocalizationsGetInstanceResponse, GameCenterLeaderboardLocalizationsGetInstanceError, GameCenterLeaderboardLocalizationsUpdateInstanceData, GameCenterLeaderboardLocalizationsUpdateInstanceResponse, GameCenterLeaderboardLocalizationsUpdateInstanceError, GameCenterLeaderboardReleasesCreateInstanceData, GameCenterLeaderboardReleasesCreateInstanceResponse, GameCenterLeaderboardReleasesCreateInstanceError, GameCenterLeaderboardReleasesDeleteInstanceData, GameCenterLeaderboardReleasesDeleteInstanceResponse, GameCenterLeaderboardReleasesDeleteInstanceError, GameCenterLeaderboardReleasesGetInstanceData, GameCenterLeaderboardReleasesGetInstanceResponse, GameCenterLeaderboardReleasesGetInstanceError, GameCenterLeaderboardSetImagesCreateInstanceData, GameCenterLeaderboardSetImagesCreateInstanceResponse, GameCenterLeaderboardSetImagesCreateInstanceError, GameCenterLeaderboardSetImagesDeleteInstanceData, GameCenterLeaderboardSetImagesDeleteInstanceResponse, GameCenterLeaderboardSetImagesDeleteInstanceError, GameCenterLeaderboardSetImagesGetInstanceData, GameCenterLeaderboardSetImagesGetInstanceResponse, GameCenterLeaderboardSetImagesGetInstanceError, GameCenterLeaderboardSetImagesUpdateInstanceData, GameCenterLeaderboardSetImagesUpdateInstanceResponse, GameCenterLeaderboardSetImagesUpdateInstanceError, GameCenterLeaderboardSetLocalizationsCreateInstanceData, GameCenterLeaderboardSetLocalizationsCreateInstanceResponse, GameCenterLeaderboardSetLocalizationsCreateInstanceError, GameCenterLeaderboardSetLocalizationsDeleteInstanceData, GameCenterLeaderboardSetLocalizationsDeleteInstanceResponse, GameCenterLeaderboardSetLocalizationsDeleteInstanceError, GameCenterLeaderboardSetLocalizationsGetInstanceData, GameCenterLeaderboardSetLocalizationsGetInstanceResponse, GameCenterLeaderboardSetLocalizationsGetInstanceError, GameCenterLeaderboardSetLocalizationsUpdateInstanceData, GameCenterLeaderboardSetLocalizationsUpdateInstanceResponse, GameCenterLeaderboardSetLocalizationsUpdateInstanceError, GameCenterLeaderboardSetMemberLocalizationsGetCollectionData, GameCenterLeaderboardSetMemberLocalizationsGetCollectionResponse, GameCenterLeaderboardSetMemberLocalizationsGetCollectionError, GameCenterLeaderboardSetMemberLocalizationsCreateInstanceData, GameCenterLeaderboardSetMemberLocalizationsCreateInstanceResponse, GameCenterLeaderboardSetMemberLocalizationsCreateInstanceError, GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceData, GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceResponse, GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceError, GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceData, GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceResponse, GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceError, GameCenterLeaderboardSetReleasesCreateInstanceData, GameCenterLeaderboardSetReleasesCreateInstanceResponse, GameCenterLeaderboardSetReleasesCreateInstanceError, GameCenterLeaderboardSetReleasesDeleteInstanceData, GameCenterLeaderboardSetReleasesDeleteInstanceResponse, GameCenterLeaderboardSetReleasesDeleteInstanceError, GameCenterLeaderboardSetReleasesGetInstanceData, GameCenterLeaderboardSetReleasesGetInstanceResponse, GameCenterLeaderboardSetReleasesGetInstanceError, GameCenterLeaderboardSetsCreateInstanceData, GameCenterLeaderboardSetsCreateInstanceResponse, GameCenterLeaderboardSetsCreateInstanceError, GameCenterLeaderboardSetsDeleteInstanceData, GameCenterLeaderboardSetsDeleteInstanceResponse, GameCenterLeaderboardSetsDeleteInstanceError, GameCenterLeaderboardSetsGetInstanceData, GameCenterLeaderboardSetsGetInstanceResponse, GameCenterLeaderboardSetsGetInstanceError, GameCenterLeaderboardSetsUpdateInstanceData, GameCenterLeaderboardSetsUpdateInstanceResponse, GameCenterLeaderboardSetsUpdateInstanceError, GameCenterLeaderboardsCreateInstanceData, GameCenterLeaderboardsCreateInstanceResponse, GameCenterLeaderboardsCreateInstanceError, GameCenterLeaderboardsDeleteInstanceData, GameCenterLeaderboardsDeleteInstanceResponse, GameCenterLeaderboardsDeleteInstanceError, GameCenterLeaderboardsGetInstanceData, GameCenterLeaderboardsGetInstanceResponse, GameCenterLeaderboardsGetInstanceError, GameCenterLeaderboardsUpdateInstanceData, GameCenterLeaderboardsUpdateInstanceResponse, GameCenterLeaderboardsUpdateInstanceError, GameCenterMatchmakingQueuesGetCollectionData, GameCenterMatchmakingQueuesGetCollectionResponse, GameCenterMatchmakingQueuesGetCollectionError, GameCenterMatchmakingQueuesCreateInstanceData, GameCenterMatchmakingQueuesCreateInstanceResponse, GameCenterMatchmakingQueuesCreateInstanceError, GameCenterMatchmakingQueuesDeleteInstanceData, GameCenterMatchmakingQueuesDeleteInstanceResponse, GameCenterMatchmakingQueuesDeleteInstanceError, GameCenterMatchmakingQueuesGetInstanceData, GameCenterMatchmakingQueuesGetInstanceResponse, GameCenterMatchmakingQueuesGetInstanceError, GameCenterMatchmakingQueuesUpdateInstanceData, GameCenterMatchmakingQueuesUpdateInstanceResponse, GameCenterMatchmakingQueuesUpdateInstanceError, GameCenterMatchmakingRuleSetTestsCreateInstanceData, GameCenterMatchmakingRuleSetTestsCreateInstanceResponse, GameCenterMatchmakingRuleSetTestsCreateInstanceError, GameCenterMatchmakingRuleSetsGetCollectionData, GameCenterMatchmakingRuleSetsGetCollectionResponse, GameCenterMatchmakingRuleSetsGetCollectionError, GameCenterMatchmakingRuleSetsCreateInstanceData, GameCenterMatchmakingRuleSetsCreateInstanceResponse, GameCenterMatchmakingRuleSetsCreateInstanceError, GameCenterMatchmakingRuleSetsDeleteInstanceData, GameCenterMatchmakingRuleSetsDeleteInstanceResponse, GameCenterMatchmakingRuleSetsDeleteInstanceError, GameCenterMatchmakingRuleSetsGetInstanceData, GameCenterMatchmakingRuleSetsGetInstanceResponse, GameCenterMatchmakingRuleSetsGetInstanceError, GameCenterMatchmakingRuleSetsUpdateInstanceData, GameCenterMatchmakingRuleSetsUpdateInstanceResponse, GameCenterMatchmakingRuleSetsUpdateInstanceError, GameCenterMatchmakingRulesCreateInstanceData, GameCenterMatchmakingRulesCreateInstanceResponse, GameCenterMatchmakingRulesCreateInstanceError, GameCenterMatchmakingRulesDeleteInstanceData, GameCenterMatchmakingRulesDeleteInstanceResponse, GameCenterMatchmakingRulesDeleteInstanceError, GameCenterMatchmakingRulesUpdateInstanceData, GameCenterMatchmakingRulesUpdateInstanceResponse, GameCenterMatchmakingRulesUpdateInstanceError, GameCenterMatchmakingTeamsCreateInstanceData, GameCenterMatchmakingTeamsCreateInstanceResponse, GameCenterMatchmakingTeamsCreateInstanceError, GameCenterMatchmakingTeamsDeleteInstanceData, GameCenterMatchmakingTeamsDeleteInstanceResponse, GameCenterMatchmakingTeamsDeleteInstanceError, GameCenterMatchmakingTeamsUpdateInstanceData, GameCenterMatchmakingTeamsUpdateInstanceResponse, GameCenterMatchmakingTeamsUpdateInstanceError, GameCenterPlayerAchievementSubmissionsCreateInstanceData, GameCenterPlayerAchievementSubmissionsCreateInstanceResponse, GameCenterPlayerAchievementSubmissionsCreateInstanceError, InAppPurchaseAppStoreReviewScreenshotsCreateInstanceData, InAppPurchaseAppStoreReviewScreenshotsCreateInstanceResponse, InAppPurchaseAppStoreReviewScreenshotsCreateInstanceError, InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceData, InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceResponse, InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceError, InAppPurchaseAppStoreReviewScreenshotsGetInstanceData, InAppPurchaseAppStoreReviewScreenshotsGetInstanceResponse, InAppPurchaseAppStoreReviewScreenshotsGetInstanceError, InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceData, InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceResponse, InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceError, InAppPurchaseAvailabilitiesCreateInstanceData, InAppPurchaseAvailabilitiesCreateInstanceResponse, InAppPurchaseAvailabilitiesCreateInstanceError, InAppPurchaseAvailabilitiesGetInstanceData, InAppPurchaseAvailabilitiesGetInstanceResponse, InAppPurchaseAvailabilitiesGetInstanceError, InAppPurchaseContentsGetInstanceData, InAppPurchaseContentsGetInstanceResponse, InAppPurchaseContentsGetInstanceError, InAppPurchaseImagesCreateInstanceData, InAppPurchaseImagesCreateInstanceResponse, InAppPurchaseImagesCreateInstanceError, InAppPurchaseImagesDeleteInstanceData, InAppPurchaseImagesDeleteInstanceResponse, InAppPurchaseImagesDeleteInstanceError, InAppPurchaseImagesGetInstanceData, InAppPurchaseImagesGetInstanceResponse, InAppPurchaseImagesGetInstanceError, InAppPurchaseImagesUpdateInstanceData, InAppPurchaseImagesUpdateInstanceResponse, InAppPurchaseImagesUpdateInstanceError, InAppPurchaseLocalizationsCreateInstanceData, InAppPurchaseLocalizationsCreateInstanceResponse, InAppPurchaseLocalizationsCreateInstanceError, InAppPurchaseLocalizationsDeleteInstanceData, InAppPurchaseLocalizationsDeleteInstanceResponse, InAppPurchaseLocalizationsDeleteInstanceError, InAppPurchaseLocalizationsGetInstanceData, InAppPurchaseLocalizationsGetInstanceResponse, InAppPurchaseLocalizationsGetInstanceError, InAppPurchaseLocalizationsUpdateInstanceData, InAppPurchaseLocalizationsUpdateInstanceResponse, InAppPurchaseLocalizationsUpdateInstanceError, InAppPurchasePriceSchedulesCreateInstanceData, InAppPurchasePriceSchedulesCreateInstanceResponse, InAppPurchasePriceSchedulesCreateInstanceError, InAppPurchasePriceSchedulesGetInstanceData, InAppPurchasePriceSchedulesGetInstanceResponse, InAppPurchasePriceSchedulesGetInstanceError, InAppPurchaseSubmissionsCreateInstanceData, InAppPurchaseSubmissionsCreateInstanceResponse, InAppPurchaseSubmissionsCreateInstanceError, InAppPurchasesGetInstanceData, InAppPurchasesGetInstanceResponse, InAppPurchasesGetInstanceError, InAppPurchasesV2CreateInstanceData, InAppPurchasesV2CreateInstanceResponse, InAppPurchasesV2CreateInstanceError, InAppPurchasesV2DeleteInstanceData, InAppPurchasesV2DeleteInstanceResponse, InAppPurchasesV2DeleteInstanceError, InAppPurchasesV2GetInstanceData, InAppPurchasesV2GetInstanceResponse, InAppPurchasesV2GetInstanceError, InAppPurchasesV2UpdateInstanceData, InAppPurchasesV2UpdateInstanceResponse, InAppPurchasesV2UpdateInstanceError, MarketplaceDomainsGetCollectionData, MarketplaceDomainsGetCollectionResponse, MarketplaceDomainsGetCollectionError, MarketplaceDomainsCreateInstanceData, MarketplaceDomainsCreateInstanceResponse, MarketplaceDomainsCreateInstanceError, MarketplaceDomainsDeleteInstanceData, MarketplaceDomainsDeleteInstanceResponse, MarketplaceDomainsDeleteInstanceError, MarketplaceDomainsGetInstanceData, MarketplaceDomainsGetInstanceResponse, MarketplaceDomainsGetInstanceError, MarketplaceSearchDetailsCreateInstanceData, MarketplaceSearchDetailsCreateInstanceResponse, MarketplaceSearchDetailsCreateInstanceError, MarketplaceSearchDetailsDeleteInstanceData, MarketplaceSearchDetailsDeleteInstanceResponse, MarketplaceSearchDetailsDeleteInstanceError, MarketplaceSearchDetailsUpdateInstanceData, MarketplaceSearchDetailsUpdateInstanceResponse, MarketplaceSearchDetailsUpdateInstanceError, MarketplaceWebhooksGetCollectionData, MarketplaceWebhooksGetCollectionResponse, MarketplaceWebhooksGetCollectionError, MarketplaceWebhooksCreateInstanceData, MarketplaceWebhooksCreateInstanceResponse, MarketplaceWebhooksCreateInstanceError, MarketplaceWebhooksDeleteInstanceData, MarketplaceWebhooksDeleteInstanceResponse, MarketplaceWebhooksDeleteInstanceError, MarketplaceWebhooksUpdateInstanceData, MarketplaceWebhooksUpdateInstanceResponse, MarketplaceWebhooksUpdateInstanceError, MerchantIdsGetCollectionData, MerchantIdsGetCollectionResponse, MerchantIdsGetCollectionError, MerchantIdsCreateInstanceData, MerchantIdsCreateInstanceResponse, MerchantIdsCreateInstanceError, MerchantIdsDeleteInstanceData, MerchantIdsDeleteInstanceResponse, MerchantIdsDeleteInstanceError, MerchantIdsGetInstanceData, MerchantIdsGetInstanceResponse, MerchantIdsGetInstanceError, MerchantIdsUpdateInstanceData, MerchantIdsUpdateInstanceResponse, MerchantIdsUpdateInstanceError, NominationsGetCollectionData, NominationsGetCollectionResponse, NominationsGetCollectionError, NominationsCreateInstanceData, NominationsCreateInstanceResponse, NominationsCreateInstanceError, NominationsDeleteInstanceData, NominationsDeleteInstanceResponse, NominationsDeleteInstanceError, NominationsGetInstanceData, NominationsGetInstanceResponse, NominationsGetInstanceError, NominationsUpdateInstanceData, NominationsUpdateInstanceResponse, NominationsUpdateInstanceError, PreReleaseVersionsGetCollectionData, PreReleaseVersionsGetCollectionResponse, PreReleaseVersionsGetCollectionError, PreReleaseVersionsGetInstanceData, PreReleaseVersionsGetInstanceResponse, PreReleaseVersionsGetInstanceError, ProfilesGetCollectionData, ProfilesGetCollectionResponse, ProfilesGetCollectionError, ProfilesCreateInstanceData, ProfilesCreateInstanceResponse, ProfilesCreateInstanceError, ProfilesDeleteInstanceData, ProfilesDeleteInstanceResponse, ProfilesDeleteInstanceError, ProfilesGetInstanceData, ProfilesGetInstanceResponse, ProfilesGetInstanceError, PromotedPurchasesCreateInstanceData, PromotedPurchasesCreateInstanceResponse, PromotedPurchasesCreateInstanceError, PromotedPurchasesDeleteInstanceData, PromotedPurchasesDeleteInstanceResponse, PromotedPurchasesDeleteInstanceError, PromotedPurchasesGetInstanceData, PromotedPurchasesGetInstanceResponse, PromotedPurchasesGetInstanceError, PromotedPurchasesUpdateInstanceData, PromotedPurchasesUpdateInstanceResponse, PromotedPurchasesUpdateInstanceError, ReviewSubmissionItemsCreateInstanceData, ReviewSubmissionItemsCreateInstanceResponse, ReviewSubmissionItemsCreateInstanceError, ReviewSubmissionItemsDeleteInstanceData, ReviewSubmissionItemsDeleteInstanceResponse, ReviewSubmissionItemsDeleteInstanceError, ReviewSubmissionItemsUpdateInstanceData, ReviewSubmissionItemsUpdateInstanceResponse, ReviewSubmissionItemsUpdateInstanceError, ReviewSubmissionsGetCollectionData, ReviewSubmissionsGetCollectionResponse, ReviewSubmissionsGetCollectionError, ReviewSubmissionsCreateInstanceData, ReviewSubmissionsCreateInstanceResponse, ReviewSubmissionsCreateInstanceError, ReviewSubmissionsGetInstanceData, ReviewSubmissionsGetInstanceResponse, ReviewSubmissionsGetInstanceError, ReviewSubmissionsUpdateInstanceData, ReviewSubmissionsUpdateInstanceResponse, ReviewSubmissionsUpdateInstanceError, RoutingAppCoveragesCreateInstanceData, RoutingAppCoveragesCreateInstanceResponse, RoutingAppCoveragesCreateInstanceError, RoutingAppCoveragesDeleteInstanceData, RoutingAppCoveragesDeleteInstanceResponse, RoutingAppCoveragesDeleteInstanceError, RoutingAppCoveragesGetInstanceData, RoutingAppCoveragesGetInstanceResponse, RoutingAppCoveragesGetInstanceError, RoutingAppCoveragesUpdateInstanceData, RoutingAppCoveragesUpdateInstanceResponse, RoutingAppCoveragesUpdateInstanceError, SalesReportsGetCollectionData, SalesReportsGetCollectionResponse, SalesReportsGetCollectionError, SandboxTestersV2GetCollectionData, SandboxTestersV2GetCollectionResponse, SandboxTestersV2GetCollectionError, SandboxTestersV2UpdateInstanceData, SandboxTestersV2UpdateInstanceResponse, SandboxTestersV2UpdateInstanceError, SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceData, SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceResponse, SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceError, ScmGitReferencesGetInstanceData, ScmGitReferencesGetInstanceResponse, ScmGitReferencesGetInstanceError, ScmProvidersGetCollectionData, ScmProvidersGetCollectionResponse, ScmProvidersGetCollectionError, ScmProvidersGetInstanceData, ScmProvidersGetInstanceResponse, ScmProvidersGetInstanceError, ScmPullRequestsGetInstanceData, ScmPullRequestsGetInstanceResponse, ScmPullRequestsGetInstanceError, ScmRepositoriesGetCollectionData, ScmRepositoriesGetCollectionResponse, ScmRepositoriesGetCollectionError, ScmRepositoriesGetInstanceData, ScmRepositoriesGetInstanceResponse, ScmRepositoriesGetInstanceError, SubscriptionAppStoreReviewScreenshotsCreateInstanceData, SubscriptionAppStoreReviewScreenshotsCreateInstanceResponse, SubscriptionAppStoreReviewScreenshotsCreateInstanceError, SubscriptionAppStoreReviewScreenshotsDeleteInstanceData, SubscriptionAppStoreReviewScreenshotsDeleteInstanceResponse, SubscriptionAppStoreReviewScreenshotsDeleteInstanceError, SubscriptionAppStoreReviewScreenshotsGetInstanceData, SubscriptionAppStoreReviewScreenshotsGetInstanceResponse, SubscriptionAppStoreReviewScreenshotsGetInstanceError, SubscriptionAppStoreReviewScreenshotsUpdateInstanceData, SubscriptionAppStoreReviewScreenshotsUpdateInstanceResponse, SubscriptionAppStoreReviewScreenshotsUpdateInstanceError, SubscriptionAvailabilitiesCreateInstanceData, SubscriptionAvailabilitiesCreateInstanceResponse, SubscriptionAvailabilitiesCreateInstanceError, SubscriptionAvailabilitiesGetInstanceData, SubscriptionAvailabilitiesGetInstanceResponse, SubscriptionAvailabilitiesGetInstanceError, SubscriptionGracePeriodsGetInstanceData, SubscriptionGracePeriodsGetInstanceResponse, SubscriptionGracePeriodsGetInstanceError, SubscriptionGracePeriodsUpdateInstanceData, SubscriptionGracePeriodsUpdateInstanceResponse, SubscriptionGracePeriodsUpdateInstanceError, SubscriptionGroupLocalizationsCreateInstanceData, SubscriptionGroupLocalizationsCreateInstanceResponse, SubscriptionGroupLocalizationsCreateInstanceError, SubscriptionGroupLocalizationsDeleteInstanceData, SubscriptionGroupLocalizationsDeleteInstanceResponse, SubscriptionGroupLocalizationsDeleteInstanceError, SubscriptionGroupLocalizationsGetInstanceData, SubscriptionGroupLocalizationsGetInstanceResponse, SubscriptionGroupLocalizationsGetInstanceError, SubscriptionGroupLocalizationsUpdateInstanceData, SubscriptionGroupLocalizationsUpdateInstanceResponse, SubscriptionGroupLocalizationsUpdateInstanceError, SubscriptionGroupSubmissionsCreateInstanceData, SubscriptionGroupSubmissionsCreateInstanceResponse, SubscriptionGroupSubmissionsCreateInstanceError, SubscriptionGroupsCreateInstanceData, SubscriptionGroupsCreateInstanceResponse, SubscriptionGroupsCreateInstanceError, SubscriptionGroupsDeleteInstanceData, SubscriptionGroupsDeleteInstanceResponse, SubscriptionGroupsDeleteInstanceError, SubscriptionGroupsGetInstanceData, SubscriptionGroupsGetInstanceResponse, SubscriptionGroupsGetInstanceError, SubscriptionGroupsUpdateInstanceData, SubscriptionGroupsUpdateInstanceResponse, SubscriptionGroupsUpdateInstanceError, SubscriptionImagesCreateInstanceData, SubscriptionImagesCreateInstanceResponse, SubscriptionImagesCreateInstanceError, SubscriptionImagesDeleteInstanceData, SubscriptionImagesDeleteInstanceResponse, SubscriptionImagesDeleteInstanceError, SubscriptionImagesGetInstanceData, SubscriptionImagesGetInstanceResponse, SubscriptionImagesGetInstanceError, SubscriptionImagesUpdateInstanceData, SubscriptionImagesUpdateInstanceResponse, SubscriptionImagesUpdateInstanceError, SubscriptionIntroductoryOffersCreateInstanceData, SubscriptionIntroductoryOffersCreateInstanceResponse, SubscriptionIntroductoryOffersCreateInstanceError, SubscriptionIntroductoryOffersDeleteInstanceData, SubscriptionIntroductoryOffersDeleteInstanceResponse, SubscriptionIntroductoryOffersDeleteInstanceError, SubscriptionIntroductoryOffersUpdateInstanceData, SubscriptionIntroductoryOffersUpdateInstanceResponse, SubscriptionIntroductoryOffersUpdateInstanceError, SubscriptionLocalizationsCreateInstanceData, SubscriptionLocalizationsCreateInstanceResponse, SubscriptionLocalizationsCreateInstanceError, SubscriptionLocalizationsDeleteInstanceData, SubscriptionLocalizationsDeleteInstanceResponse, SubscriptionLocalizationsDeleteInstanceError, SubscriptionLocalizationsGetInstanceData, SubscriptionLocalizationsGetInstanceResponse, SubscriptionLocalizationsGetInstanceError, SubscriptionLocalizationsUpdateInstanceData, SubscriptionLocalizationsUpdateInstanceResponse, SubscriptionLocalizationsUpdateInstanceError, SubscriptionOfferCodeCustomCodesCreateInstanceData, SubscriptionOfferCodeCustomCodesCreateInstanceResponse, SubscriptionOfferCodeCustomCodesCreateInstanceError, SubscriptionOfferCodeCustomCodesGetInstanceData, SubscriptionOfferCodeCustomCodesGetInstanceResponse, SubscriptionOfferCodeCustomCodesGetInstanceError, SubscriptionOfferCodeCustomCodesUpdateInstanceData, SubscriptionOfferCodeCustomCodesUpdateInstanceResponse, SubscriptionOfferCodeCustomCodesUpdateInstanceError, SubscriptionOfferCodeOneTimeUseCodesCreateInstanceData, SubscriptionOfferCodeOneTimeUseCodesCreateInstanceResponse, SubscriptionOfferCodeOneTimeUseCodesCreateInstanceError, SubscriptionOfferCodeOneTimeUseCodesGetInstanceData, SubscriptionOfferCodeOneTimeUseCodesGetInstanceResponse, SubscriptionOfferCodeOneTimeUseCodesGetInstanceError, SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceData, SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceResponse, SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceError, SubscriptionOfferCodesCreateInstanceData, SubscriptionOfferCodesCreateInstanceResponse, SubscriptionOfferCodesCreateInstanceError, SubscriptionOfferCodesGetInstanceData, SubscriptionOfferCodesGetInstanceResponse, SubscriptionOfferCodesGetInstanceError, SubscriptionOfferCodesUpdateInstanceData, SubscriptionOfferCodesUpdateInstanceResponse, SubscriptionOfferCodesUpdateInstanceError, SubscriptionPricePointsGetInstanceData, SubscriptionPricePointsGetInstanceResponse, SubscriptionPricePointsGetInstanceError, SubscriptionPricesCreateInstanceData, SubscriptionPricesCreateInstanceResponse, SubscriptionPricesCreateInstanceError, SubscriptionPricesDeleteInstanceData, SubscriptionPricesDeleteInstanceResponse, SubscriptionPricesDeleteInstanceError, SubscriptionPromotionalOffersCreateInstanceData, SubscriptionPromotionalOffersCreateInstanceResponse, SubscriptionPromotionalOffersCreateInstanceError, SubscriptionPromotionalOffersDeleteInstanceData, SubscriptionPromotionalOffersDeleteInstanceResponse, SubscriptionPromotionalOffersDeleteInstanceError, SubscriptionPromotionalOffersGetInstanceData, SubscriptionPromotionalOffersGetInstanceResponse, SubscriptionPromotionalOffersGetInstanceError, SubscriptionPromotionalOffersUpdateInstanceData, SubscriptionPromotionalOffersUpdateInstanceResponse, SubscriptionPromotionalOffersUpdateInstanceError, SubscriptionSubmissionsCreateInstanceData, SubscriptionSubmissionsCreateInstanceResponse, SubscriptionSubmissionsCreateInstanceError, SubscriptionsCreateInstanceData, SubscriptionsCreateInstanceResponse, SubscriptionsCreateInstanceError, SubscriptionsDeleteInstanceData, SubscriptionsDeleteInstanceResponse, SubscriptionsDeleteInstanceError, SubscriptionsGetInstanceData, SubscriptionsGetInstanceResponse, SubscriptionsGetInstanceError, SubscriptionsUpdateInstanceData, SubscriptionsUpdateInstanceResponse, SubscriptionsUpdateInstanceError, TerritoriesGetCollectionData, TerritoriesGetCollectionResponse, TerritoriesGetCollectionError, TerritoryAvailabilitiesUpdateInstanceData, TerritoryAvailabilitiesUpdateInstanceResponse, TerritoryAvailabilitiesUpdateInstanceError, UserInvitationsGetCollectionData, UserInvitationsGetCollectionResponse, UserInvitationsGetCollectionError, UserInvitationsCreateInstanceData, UserInvitationsCreateInstanceResponse, UserInvitationsCreateInstanceError, UserInvitationsDeleteInstanceData, UserInvitationsDeleteInstanceResponse, UserInvitationsDeleteInstanceError, UserInvitationsGetInstanceData, UserInvitationsGetInstanceResponse, UserInvitationsGetInstanceError, UsersGetCollectionData, UsersGetCollectionResponse, UsersGetCollectionError, UsersDeleteInstanceData, UsersDeleteInstanceResponse, UsersDeleteInstanceError, UsersGetInstanceData, UsersGetInstanceResponse, UsersGetInstanceError, UsersUpdateInstanceData, UsersUpdateInstanceResponse, UsersUpdateInstanceError, WinBackOffersCreateInstanceData, WinBackOffersCreateInstanceResponse, WinBackOffersCreateInstanceError, WinBackOffersDeleteInstanceData, WinBackOffersDeleteInstanceResponse, WinBackOffersDeleteInstanceError, WinBackOffersGetInstanceData, WinBackOffersGetInstanceResponse, WinBackOffersGetInstanceError, WinBackOffersUpdateInstanceData, WinBackOffersUpdateInstanceResponse, WinBackOffersUpdateInstanceError, AlternativeDistributionPackageVersionsDeltasGetToManyRelatedData, AlternativeDistributionPackageVersionsDeltasGetToManyRelatedResponse, AlternativeDistributionPackageVersionsDeltasGetToManyRelatedError, AlternativeDistributionPackageVersionsVariantsGetToManyRelatedData, AlternativeDistributionPackageVersionsVariantsGetToManyRelatedResponse, AlternativeDistributionPackageVersionsVariantsGetToManyRelatedError, AlternativeDistributionPackagesVersionsGetToManyRelatedData, AlternativeDistributionPackagesVersionsGetToManyRelatedResponse, AlternativeDistributionPackagesVersionsGetToManyRelatedError, AnalyticsReportInstancesSegmentsGetToManyRelatedData, AnalyticsReportInstancesSegmentsGetToManyRelatedResponse, AnalyticsReportInstancesSegmentsGetToManyRelatedError, AnalyticsReportRequestsReportsGetToManyRelatedData, AnalyticsReportRequestsReportsGetToManyRelatedResponse, AnalyticsReportRequestsReportsGetToManyRelatedError, AnalyticsReportsInstancesGetToManyRelatedData, AnalyticsReportsInstancesGetToManyRelatedResponse, AnalyticsReportsInstancesGetToManyRelatedError, AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedData, AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedResponse, AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedError, AppCategoriesParentGetToOneRelatedData, AppCategoriesParentGetToOneRelatedResponse, AppCategoriesParentGetToOneRelatedError, AppCategoriesSubcategoriesGetToManyRelatedData, AppCategoriesSubcategoriesGetToManyRelatedResponse, AppCategoriesSubcategoriesGetToManyRelatedError, AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedData, AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedResponse, AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedError, AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedData, AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedResponse, AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedError, AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedData, AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedResponse, AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedError, AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipData, AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipResponse, AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipError, AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipData, AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipResponse, AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipError, AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedData, AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedResponse, AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedError, AppClipsAppClipAdvancedExperiencesGetToManyRelatedData, AppClipsAppClipAdvancedExperiencesGetToManyRelatedResponse, AppClipsAppClipAdvancedExperiencesGetToManyRelatedError, AppClipsAppClipDefaultExperiencesGetToManyRelatedData, AppClipsAppClipDefaultExperiencesGetToManyRelatedResponse, AppClipsAppClipDefaultExperiencesGetToManyRelatedError, AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedData, AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedResponse, AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedError, AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedData, AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedResponse, AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedError, AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedData, AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedResponse, AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedError, AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedData, AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedResponse, AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedError, AppEncryptionDeclarationsAppGetToOneRelatedData, AppEncryptionDeclarationsAppGetToOneRelatedResponse, AppEncryptionDeclarationsAppGetToOneRelatedError, AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedData, AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedResponse, AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedError, AppEncryptionDeclarationsBuildsCreateToManyRelationshipData, AppEncryptionDeclarationsBuildsCreateToManyRelationshipResponse, AppEncryptionDeclarationsBuildsCreateToManyRelationshipError, AppEventLocalizationsAppEventScreenshotsGetToManyRelatedData, AppEventLocalizationsAppEventScreenshotsGetToManyRelatedResponse, AppEventLocalizationsAppEventScreenshotsGetToManyRelatedError, AppEventLocalizationsAppEventVideoClipsGetToManyRelatedData, AppEventLocalizationsAppEventVideoClipsGetToManyRelatedResponse, AppEventLocalizationsAppEventVideoClipsGetToManyRelatedError, AppEventsLocalizationsGetToManyRelatedData, AppEventsLocalizationsGetToManyRelatedResponse, AppEventsLocalizationsGetToManyRelatedError, AppInfosAgeRatingDeclarationGetToOneRelatedData, AppInfosAgeRatingDeclarationGetToOneRelatedResponse, AppInfosAgeRatingDeclarationGetToOneRelatedError, AppInfosAppInfoLocalizationsGetToManyRelatedData, AppInfosAppInfoLocalizationsGetToManyRelatedResponse, AppInfosAppInfoLocalizationsGetToManyRelatedError, AppInfosPrimaryCategoryGetToOneRelatedData, AppInfosPrimaryCategoryGetToOneRelatedResponse, AppInfosPrimaryCategoryGetToOneRelatedError, AppInfosPrimarySubcategoryOneGetToOneRelatedData, AppInfosPrimarySubcategoryOneGetToOneRelatedResponse, AppInfosPrimarySubcategoryOneGetToOneRelatedError, AppInfosPrimarySubcategoryTwoGetToOneRelatedData, AppInfosPrimarySubcategoryTwoGetToOneRelatedResponse, AppInfosPrimarySubcategoryTwoGetToOneRelatedError, AppInfosSecondaryCategoryGetToOneRelatedData, AppInfosSecondaryCategoryGetToOneRelatedResponse, AppInfosSecondaryCategoryGetToOneRelatedError, AppInfosSecondarySubcategoryOneGetToOneRelatedData, AppInfosSecondarySubcategoryOneGetToOneRelatedResponse, AppInfosSecondarySubcategoryOneGetToOneRelatedError, AppInfosSecondarySubcategoryTwoGetToOneRelatedData, AppInfosSecondarySubcategoryTwoGetToOneRelatedResponse, AppInfosSecondarySubcategoryTwoGetToOneRelatedError, AppPreviewSetsAppPreviewsGetToManyRelationshipData, AppPreviewSetsAppPreviewsGetToManyRelationshipResponse, AppPreviewSetsAppPreviewsGetToManyRelationshipError, AppPreviewSetsAppPreviewsReplaceToManyRelationshipData, AppPreviewSetsAppPreviewsReplaceToManyRelationshipResponse, AppPreviewSetsAppPreviewsReplaceToManyRelationshipError, AppPreviewSetsAppPreviewsGetToManyRelatedData, AppPreviewSetsAppPreviewsGetToManyRelatedResponse, AppPreviewSetsAppPreviewsGetToManyRelatedError, AppPricePointsV3EqualizationsGetToManyRelatedData, AppPricePointsV3EqualizationsGetToManyRelatedResponse, AppPricePointsV3EqualizationsGetToManyRelatedError, AppPriceSchedulesAutomaticPricesGetToManyRelatedData, AppPriceSchedulesAutomaticPricesGetToManyRelatedResponse, AppPriceSchedulesAutomaticPricesGetToManyRelatedError, AppPriceSchedulesBaseTerritoryGetToOneRelatedData, AppPriceSchedulesBaseTerritoryGetToOneRelatedResponse, AppPriceSchedulesBaseTerritoryGetToOneRelatedError, AppPriceSchedulesManualPricesGetToManyRelatedData, AppPriceSchedulesManualPricesGetToManyRelatedResponse, AppPriceSchedulesManualPricesGetToManyRelatedError, AppScreenshotSetsAppScreenshotsGetToManyRelationshipData, AppScreenshotSetsAppScreenshotsGetToManyRelationshipResponse, AppScreenshotSetsAppScreenshotsGetToManyRelationshipError, AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipData, AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipResponse, AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipError, AppScreenshotSetsAppScreenshotsGetToManyRelatedData, AppScreenshotSetsAppScreenshotsGetToManyRelatedResponse, AppScreenshotSetsAppScreenshotsGetToManyRelatedError, AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedData, AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedResponse, AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedError, AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedData, AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedResponse, AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedError, AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedData, AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedResponse, AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedError, AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedData, AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedResponse, AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedError, AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedData, AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedResponse, AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedError, AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedData, AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedResponse, AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedError, AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedData, AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedResponse, AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedError, AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedData, AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedResponse, AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedError, AppStoreVersionsAgeRatingDeclarationGetToOneRelatedData, AppStoreVersionsAgeRatingDeclarationGetToOneRelatedResponse, AppStoreVersionsAgeRatingDeclarationGetToOneRelatedError, AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedData, AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedResponse, AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedError, AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipData, AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipResponse, AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipError, AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipData, AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipResponse, AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipError, AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedData, AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedResponse, AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedError, AppStoreVersionsAppStoreReviewDetailGetToOneRelatedData, AppStoreVersionsAppStoreReviewDetailGetToOneRelatedResponse, AppStoreVersionsAppStoreReviewDetailGetToOneRelatedError, AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedData, AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedResponse, AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedError, AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedData, AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedResponse, AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedError, AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedData, AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedResponse, AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedError, AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedData, AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedResponse, AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedError, AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedData, AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedResponse, AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedError, AppStoreVersionsBuildGetToOneRelationshipData, AppStoreVersionsBuildGetToOneRelationshipResponse, AppStoreVersionsBuildGetToOneRelationshipError, AppStoreVersionsBuildUpdateToOneRelationshipData, AppStoreVersionsBuildUpdateToOneRelationshipResponse, AppStoreVersionsBuildUpdateToOneRelationshipError, AppStoreVersionsBuildGetToOneRelatedData, AppStoreVersionsBuildGetToOneRelatedResponse, AppStoreVersionsBuildGetToOneRelatedError, AppStoreVersionsCustomerReviewsGetToManyRelatedData, AppStoreVersionsCustomerReviewsGetToManyRelatedResponse, AppStoreVersionsCustomerReviewsGetToManyRelatedError, AppStoreVersionsGameCenterAppVersionGetToOneRelatedData, AppStoreVersionsGameCenterAppVersionGetToOneRelatedResponse, AppStoreVersionsGameCenterAppVersionGetToOneRelatedError, AppStoreVersionsRoutingAppCoverageGetToOneRelatedData, AppStoreVersionsRoutingAppCoverageGetToOneRelatedResponse, AppStoreVersionsRoutingAppCoverageGetToOneRelatedError, AppsAlternativeDistributionKeyGetToOneRelatedData, AppsAlternativeDistributionKeyGetToOneRelatedResponse, AppsAlternativeDistributionKeyGetToOneRelatedError, AppsAnalyticsReportRequestsGetToManyRelatedData, AppsAnalyticsReportRequestsGetToManyRelatedResponse, AppsAnalyticsReportRequestsGetToManyRelatedError, AppsAppAvailabilityV2GetToOneRelatedData, AppsAppAvailabilityV2GetToOneRelatedResponse, AppsAppAvailabilityV2GetToOneRelatedError, AppsAppClipsGetToManyRelatedData, AppsAppClipsGetToManyRelatedResponse, AppsAppClipsGetToManyRelatedError, AppsAppCustomProductPagesGetToManyRelatedData, AppsAppCustomProductPagesGetToManyRelatedResponse, AppsAppCustomProductPagesGetToManyRelatedError, AppsAppEncryptionDeclarationsGetToManyRelatedData, AppsAppEncryptionDeclarationsGetToManyRelatedResponse, AppsAppEncryptionDeclarationsGetToManyRelatedError, AppsAppEventsGetToManyRelatedData, AppsAppEventsGetToManyRelatedResponse, AppsAppEventsGetToManyRelatedError, AppsAppInfosGetToManyRelatedData, AppsAppInfosGetToManyRelatedResponse, AppsAppInfosGetToManyRelatedError, AppsAppPricePointsGetToManyRelatedData, AppsAppPricePointsGetToManyRelatedResponse, AppsAppPricePointsGetToManyRelatedError, AppsAppPriceScheduleGetToOneRelatedData, AppsAppPriceScheduleGetToOneRelatedResponse, AppsAppPriceScheduleGetToOneRelatedError, AppsAppStoreVersionExperimentsV2GetToManyRelatedData, AppsAppStoreVersionExperimentsV2GetToManyRelatedResponse, AppsAppStoreVersionExperimentsV2GetToManyRelatedError, AppsAppStoreVersionsGetToManyRelatedData, AppsAppStoreVersionsGetToManyRelatedResponse, AppsAppStoreVersionsGetToManyRelatedError, AppsBetaAppLocalizationsGetToManyRelatedData, AppsBetaAppLocalizationsGetToManyRelatedResponse, AppsBetaAppLocalizationsGetToManyRelatedError, AppsBetaAppReviewDetailGetToOneRelatedData, AppsBetaAppReviewDetailGetToOneRelatedResponse, AppsBetaAppReviewDetailGetToOneRelatedError, AppsBetaGroupsGetToManyRelatedData, AppsBetaGroupsGetToManyRelatedResponse, AppsBetaGroupsGetToManyRelatedError, AppsBetaLicenseAgreementGetToOneRelatedData, AppsBetaLicenseAgreementGetToOneRelatedResponse, AppsBetaLicenseAgreementGetToOneRelatedError, AppsBetaTestersDeleteToManyRelationshipData, AppsBetaTestersDeleteToManyRelationshipResponse, AppsBetaTestersDeleteToManyRelationshipError, AppsBuildsGetToManyRelatedData, AppsBuildsGetToManyRelatedResponse, AppsBuildsGetToManyRelatedError, AppsCiProductGetToOneRelatedData, AppsCiProductGetToOneRelatedResponse, AppsCiProductGetToOneRelatedError, AppsCustomerReviewsGetToManyRelatedData, AppsCustomerReviewsGetToManyRelatedResponse, AppsCustomerReviewsGetToManyRelatedError, AppsEndUserLicenseAgreementGetToOneRelatedData, AppsEndUserLicenseAgreementGetToOneRelatedResponse, AppsEndUserLicenseAgreementGetToOneRelatedError, AppsGameCenterDetailGetToOneRelatedData, AppsGameCenterDetailGetToOneRelatedResponse, AppsGameCenterDetailGetToOneRelatedError, AppsGameCenterEnabledVersionsGetToManyRelatedData, AppsGameCenterEnabledVersionsGetToManyRelatedResponse, AppsGameCenterEnabledVersionsGetToManyRelatedError, AppsInAppPurchasesGetToManyRelatedData, AppsInAppPurchasesGetToManyRelatedResponse, AppsInAppPurchasesGetToManyRelatedError, AppsInAppPurchasesV2GetToManyRelatedData, AppsInAppPurchasesV2GetToManyRelatedResponse, AppsInAppPurchasesV2GetToManyRelatedError, AppsMarketplaceSearchDetailGetToOneRelatedData, AppsMarketplaceSearchDetailGetToOneRelatedResponse, AppsMarketplaceSearchDetailGetToOneRelatedError, AppsPerfPowerMetricsGetToManyRelatedData, AppsPerfPowerMetricsGetToManyRelatedResponse, AppsPerfPowerMetricsGetToManyRelatedError, AppsPreReleaseVersionsGetToManyRelatedData, AppsPreReleaseVersionsGetToManyRelatedResponse, AppsPreReleaseVersionsGetToManyRelatedError, AppsPromotedPurchasesGetToManyRelationshipData, AppsPromotedPurchasesGetToManyRelationshipResponse, AppsPromotedPurchasesGetToManyRelationshipError, AppsPromotedPurchasesReplaceToManyRelationshipData, AppsPromotedPurchasesReplaceToManyRelationshipResponse, AppsPromotedPurchasesReplaceToManyRelationshipError, AppsPromotedPurchasesGetToManyRelatedData, AppsPromotedPurchasesGetToManyRelatedResponse, AppsPromotedPurchasesGetToManyRelatedError, AppsReviewSubmissionsGetToManyRelatedData, AppsReviewSubmissionsGetToManyRelatedResponse, AppsReviewSubmissionsGetToManyRelatedError, AppsSubscriptionGracePeriodGetToOneRelatedData, AppsSubscriptionGracePeriodGetToOneRelatedResponse, AppsSubscriptionGracePeriodGetToOneRelatedError, AppsSubscriptionGroupsGetToManyRelatedData, AppsSubscriptionGroupsGetToManyRelatedResponse, AppsSubscriptionGroupsGetToManyRelatedError, BetaAppLocalizationsAppGetToOneRelatedData, BetaAppLocalizationsAppGetToOneRelatedResponse, BetaAppLocalizationsAppGetToOneRelatedError, BetaAppReviewDetailsAppGetToOneRelatedData, BetaAppReviewDetailsAppGetToOneRelatedResponse, BetaAppReviewDetailsAppGetToOneRelatedError, BetaAppReviewSubmissionsBuildGetToOneRelatedData, BetaAppReviewSubmissionsBuildGetToOneRelatedResponse, BetaAppReviewSubmissionsBuildGetToOneRelatedError, BetaBuildLocalizationsBuildGetToOneRelatedData, BetaBuildLocalizationsBuildGetToOneRelatedResponse, BetaBuildLocalizationsBuildGetToOneRelatedError, BetaGroupsAppGetToOneRelatedData, BetaGroupsAppGetToOneRelatedResponse, BetaGroupsAppGetToOneRelatedError, BetaGroupsBetaRecruitmentCriteriaGetToOneRelatedData, BetaGroupsBetaRecruitmentCriteriaGetToOneRelatedResponse, BetaGroupsBetaRecruitmentCriteriaGetToOneRelatedError, BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelatedData, BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelatedResponse, BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelatedError, BetaGroupsBetaTestersDeleteToManyRelationshipData, BetaGroupsBetaTestersDeleteToManyRelationshipResponse, BetaGroupsBetaTestersDeleteToManyRelationshipError, BetaGroupsBetaTestersGetToManyRelationshipData, BetaGroupsBetaTestersGetToManyRelationshipResponse, BetaGroupsBetaTestersGetToManyRelationshipError, BetaGroupsBetaTestersCreateToManyRelationshipData, BetaGroupsBetaTestersCreateToManyRelationshipResponse, BetaGroupsBetaTestersCreateToManyRelationshipError, BetaGroupsBetaTestersGetToManyRelatedData, BetaGroupsBetaTestersGetToManyRelatedResponse, BetaGroupsBetaTestersGetToManyRelatedError, BetaGroupsBuildsDeleteToManyRelationshipData, BetaGroupsBuildsDeleteToManyRelationshipResponse, BetaGroupsBuildsDeleteToManyRelationshipError, BetaGroupsBuildsGetToManyRelationshipData, BetaGroupsBuildsGetToManyRelationshipResponse, BetaGroupsBuildsGetToManyRelationshipError, BetaGroupsBuildsCreateToManyRelationshipData, BetaGroupsBuildsCreateToManyRelationshipResponse, BetaGroupsBuildsCreateToManyRelationshipError, BetaGroupsBuildsGetToManyRelatedData, BetaGroupsBuildsGetToManyRelatedResponse, BetaGroupsBuildsGetToManyRelatedError, BetaLicenseAgreementsAppGetToOneRelatedData, BetaLicenseAgreementsAppGetToOneRelatedResponse, BetaLicenseAgreementsAppGetToOneRelatedError, BetaTestersAppsDeleteToManyRelationshipData, BetaTestersAppsDeleteToManyRelationshipResponse, BetaTestersAppsDeleteToManyRelationshipError, BetaTestersAppsGetToManyRelationshipData, BetaTestersAppsGetToManyRelationshipResponse, BetaTestersAppsGetToManyRelationshipError, BetaTestersAppsGetToManyRelatedData, BetaTestersAppsGetToManyRelatedResponse, BetaTestersAppsGetToManyRelatedError, BetaTestersBetaGroupsDeleteToManyRelationshipData, BetaTestersBetaGroupsDeleteToManyRelationshipResponse, BetaTestersBetaGroupsDeleteToManyRelationshipError, BetaTestersBetaGroupsGetToManyRelationshipData, BetaTestersBetaGroupsGetToManyRelationshipResponse, BetaTestersBetaGroupsGetToManyRelationshipError, BetaTestersBetaGroupsCreateToManyRelationshipData, BetaTestersBetaGroupsCreateToManyRelationshipResponse, BetaTestersBetaGroupsCreateToManyRelationshipError, BetaTestersBetaGroupsGetToManyRelatedData, BetaTestersBetaGroupsGetToManyRelatedResponse, BetaTestersBetaGroupsGetToManyRelatedError, BetaTestersBuildsDeleteToManyRelationshipData, BetaTestersBuildsDeleteToManyRelationshipResponse, BetaTestersBuildsDeleteToManyRelationshipError, BetaTestersBuildsGetToManyRelationshipData, BetaTestersBuildsGetToManyRelationshipResponse, BetaTestersBuildsGetToManyRelationshipError, BetaTestersBuildsCreateToManyRelationshipData, BetaTestersBuildsCreateToManyRelationshipResponse, BetaTestersBuildsCreateToManyRelationshipError, BetaTestersBuildsGetToManyRelatedData, BetaTestersBuildsGetToManyRelatedResponse, BetaTestersBuildsGetToManyRelatedError, BuildBetaDetailsBuildGetToOneRelatedData, BuildBetaDetailsBuildGetToOneRelatedResponse, BuildBetaDetailsBuildGetToOneRelatedError, BuildBundlesAppClipDomainCacheStatusGetToOneRelatedData, BuildBundlesAppClipDomainCacheStatusGetToOneRelatedResponse, BuildBundlesAppClipDomainCacheStatusGetToOneRelatedError, BuildBundlesAppClipDomainDebugStatusGetToOneRelatedData, BuildBundlesAppClipDomainDebugStatusGetToOneRelatedResponse, BuildBundlesAppClipDomainDebugStatusGetToOneRelatedError, BuildBundlesBetaAppClipInvocationsGetToManyRelatedData, BuildBundlesBetaAppClipInvocationsGetToManyRelatedResponse, BuildBundlesBetaAppClipInvocationsGetToManyRelatedError, BuildBundlesBuildBundleFileSizesGetToManyRelatedData, BuildBundlesBuildBundleFileSizesGetToManyRelatedResponse, BuildBundlesBuildBundleFileSizesGetToManyRelatedError, BuildsAppGetToOneRelatedData, BuildsAppGetToOneRelatedResponse, BuildsAppGetToOneRelatedError, BuildsAppEncryptionDeclarationGetToOneRelationshipData, BuildsAppEncryptionDeclarationGetToOneRelationshipResponse, BuildsAppEncryptionDeclarationGetToOneRelationshipError, BuildsAppEncryptionDeclarationUpdateToOneRelationshipData, BuildsAppEncryptionDeclarationUpdateToOneRelationshipResponse, BuildsAppEncryptionDeclarationUpdateToOneRelationshipError, BuildsAppEncryptionDeclarationGetToOneRelatedData, BuildsAppEncryptionDeclarationGetToOneRelatedResponse, BuildsAppEncryptionDeclarationGetToOneRelatedError, BuildsAppStoreVersionGetToOneRelatedData, BuildsAppStoreVersionGetToOneRelatedResponse, BuildsAppStoreVersionGetToOneRelatedError, BuildsBetaAppReviewSubmissionGetToOneRelatedData, BuildsBetaAppReviewSubmissionGetToOneRelatedResponse, BuildsBetaAppReviewSubmissionGetToOneRelatedError, BuildsBetaBuildLocalizationsGetToManyRelatedData, BuildsBetaBuildLocalizationsGetToManyRelatedResponse, BuildsBetaBuildLocalizationsGetToManyRelatedError, BuildsBetaGroupsDeleteToManyRelationshipData, BuildsBetaGroupsDeleteToManyRelationshipResponse, BuildsBetaGroupsDeleteToManyRelationshipError, BuildsBetaGroupsCreateToManyRelationshipData, BuildsBetaGroupsCreateToManyRelationshipResponse, BuildsBetaGroupsCreateToManyRelationshipError, BuildsBuildBetaDetailGetToOneRelatedData, BuildsBuildBetaDetailGetToOneRelatedResponse, BuildsBuildBetaDetailGetToOneRelatedError, BuildsDiagnosticSignaturesGetToManyRelatedData, BuildsDiagnosticSignaturesGetToManyRelatedResponse, BuildsDiagnosticSignaturesGetToManyRelatedError, BuildsIconsGetToManyRelatedData, BuildsIconsGetToManyRelatedResponse, BuildsIconsGetToManyRelatedError, BuildsIndividualTestersDeleteToManyRelationshipData, BuildsIndividualTestersDeleteToManyRelationshipResponse, BuildsIndividualTestersDeleteToManyRelationshipError, BuildsIndividualTestersGetToManyRelationshipData, BuildsIndividualTestersGetToManyRelationshipResponse, BuildsIndividualTestersGetToManyRelationshipError, BuildsIndividualTestersCreateToManyRelationshipData, BuildsIndividualTestersCreateToManyRelationshipResponse, BuildsIndividualTestersCreateToManyRelationshipError, BuildsIndividualTestersGetToManyRelatedData, BuildsIndividualTestersGetToManyRelatedResponse, BuildsIndividualTestersGetToManyRelatedError, BuildsPerfPowerMetricsGetToManyRelatedData, BuildsPerfPowerMetricsGetToManyRelatedResponse, BuildsPerfPowerMetricsGetToManyRelatedError, BuildsPreReleaseVersionGetToOneRelatedData, BuildsPreReleaseVersionGetToOneRelatedResponse, BuildsPreReleaseVersionGetToOneRelatedError, BundleIdsAppGetToOneRelatedData, BundleIdsAppGetToOneRelatedResponse, BundleIdsAppGetToOneRelatedError, BundleIdsBundleIdCapabilitiesGetToManyRelatedData, BundleIdsBundleIdCapabilitiesGetToManyRelatedResponse, BundleIdsBundleIdCapabilitiesGetToManyRelatedError, BundleIdsProfilesGetToManyRelatedData, BundleIdsProfilesGetToManyRelatedResponse, BundleIdsProfilesGetToManyRelatedError, CiBuildActionsArtifactsGetToManyRelatedData, CiBuildActionsArtifactsGetToManyRelatedResponse, CiBuildActionsArtifactsGetToManyRelatedError, CiBuildActionsBuildRunGetToOneRelatedData, CiBuildActionsBuildRunGetToOneRelatedResponse, CiBuildActionsBuildRunGetToOneRelatedError, CiBuildActionsIssuesGetToManyRelatedData, CiBuildActionsIssuesGetToManyRelatedResponse, CiBuildActionsIssuesGetToManyRelatedError, CiBuildActionsTestResultsGetToManyRelatedData, CiBuildActionsTestResultsGetToManyRelatedResponse, CiBuildActionsTestResultsGetToManyRelatedError, CiBuildRunsActionsGetToManyRelatedData, CiBuildRunsActionsGetToManyRelatedResponse, CiBuildRunsActionsGetToManyRelatedError, CiBuildRunsBuildsGetToManyRelatedData, CiBuildRunsBuildsGetToManyRelatedResponse, CiBuildRunsBuildsGetToManyRelatedError, CiMacOsVersionsXcodeVersionsGetToManyRelatedData, CiMacOsVersionsXcodeVersionsGetToManyRelatedResponse, CiMacOsVersionsXcodeVersionsGetToManyRelatedError, CiProductsAdditionalRepositoriesGetToManyRelatedData, CiProductsAdditionalRepositoriesGetToManyRelatedResponse, CiProductsAdditionalRepositoriesGetToManyRelatedError, CiProductsAppGetToOneRelatedData, CiProductsAppGetToOneRelatedResponse, CiProductsAppGetToOneRelatedError, CiProductsBuildRunsGetToManyRelatedData, CiProductsBuildRunsGetToManyRelatedResponse, CiProductsBuildRunsGetToManyRelatedError, CiProductsPrimaryRepositoriesGetToManyRelatedData, CiProductsPrimaryRepositoriesGetToManyRelatedResponse, CiProductsPrimaryRepositoriesGetToManyRelatedError, CiProductsWorkflowsGetToManyRelatedData, CiProductsWorkflowsGetToManyRelatedResponse, CiProductsWorkflowsGetToManyRelatedError, CiWorkflowsBuildRunsGetToManyRelatedData, CiWorkflowsBuildRunsGetToManyRelatedResponse, CiWorkflowsBuildRunsGetToManyRelatedError, CiWorkflowsRepositoryGetToOneRelatedData, CiWorkflowsRepositoryGetToOneRelatedResponse, CiWorkflowsRepositoryGetToOneRelatedError, CiXcodeVersionsMacOsVersionsGetToManyRelatedData, CiXcodeVersionsMacOsVersionsGetToManyRelatedResponse, CiXcodeVersionsMacOsVersionsGetToManyRelatedError, CustomerReviewsResponseGetToOneRelatedData, CustomerReviewsResponseGetToOneRelatedResponse, CustomerReviewsResponseGetToOneRelatedError, DiagnosticSignaturesLogsGetToManyRelatedData, DiagnosticSignaturesLogsGetToManyRelatedResponse, DiagnosticSignaturesLogsGetToManyRelatedError, EndUserLicenseAgreementsTerritoriesGetToManyRelatedData, EndUserLicenseAgreementsTerritoriesGetToManyRelatedResponse, EndUserLicenseAgreementsTerritoriesGetToManyRelatedError, GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedData, GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedResponse, GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedError, GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedData, GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedResponse, GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedError, GameCenterAchievementsGroupAchievementGetToOneRelationshipData, GameCenterAchievementsGroupAchievementGetToOneRelationshipResponse, GameCenterAchievementsGroupAchievementGetToOneRelationshipError, GameCenterAchievementsGroupAchievementUpdateToOneRelationshipData, GameCenterAchievementsGroupAchievementUpdateToOneRelationshipResponse, GameCenterAchievementsGroupAchievementUpdateToOneRelationshipError, GameCenterAchievementsGroupAchievementGetToOneRelatedData, GameCenterAchievementsGroupAchievementGetToOneRelatedResponse, GameCenterAchievementsGroupAchievementGetToOneRelatedError, GameCenterAchievementsLocalizationsGetToManyRelatedData, GameCenterAchievementsLocalizationsGetToManyRelatedResponse, GameCenterAchievementsLocalizationsGetToManyRelatedError, GameCenterAchievementsReleasesGetToManyRelatedData, GameCenterAchievementsReleasesGetToManyRelatedResponse, GameCenterAchievementsReleasesGetToManyRelatedError, GameCenterAppVersionsAppStoreVersionGetToOneRelatedData, GameCenterAppVersionsAppStoreVersionGetToOneRelatedResponse, GameCenterAppVersionsAppStoreVersionGetToOneRelatedError, GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipData, GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipResponse, GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipError, GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipData, GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipResponse, GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipError, GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipData, GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipResponse, GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipError, GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedData, GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedResponse, GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedError, GameCenterDetailsAchievementReleasesGetToManyRelatedData, GameCenterDetailsAchievementReleasesGetToManyRelatedResponse, GameCenterDetailsAchievementReleasesGetToManyRelatedError, GameCenterDetailsGameCenterAchievementsGetToManyRelationshipData, GameCenterDetailsGameCenterAchievementsGetToManyRelationshipResponse, GameCenterDetailsGameCenterAchievementsGetToManyRelationshipError, GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipData, GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipResponse, GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipError, GameCenterDetailsGameCenterAchievementsGetToManyRelatedData, GameCenterDetailsGameCenterAchievementsGetToManyRelatedResponse, GameCenterDetailsGameCenterAchievementsGetToManyRelatedError, GameCenterDetailsGameCenterAppVersionsGetToManyRelatedData, GameCenterDetailsGameCenterAppVersionsGetToManyRelatedResponse, GameCenterDetailsGameCenterAppVersionsGetToManyRelatedError, GameCenterDetailsGameCenterGroupGetToOneRelatedData, GameCenterDetailsGameCenterGroupGetToOneRelatedResponse, GameCenterDetailsGameCenterGroupGetToOneRelatedError, GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipData, GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipResponse, GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipError, GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipData, GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipResponse, GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipError, GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedData, GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedResponse, GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedError, GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipData, GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipResponse, GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipError, GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipData, GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipResponse, GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipError, GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedData, GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedResponse, GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedError, GameCenterDetailsLeaderboardReleasesGetToManyRelatedData, GameCenterDetailsLeaderboardReleasesGetToManyRelatedResponse, GameCenterDetailsLeaderboardReleasesGetToManyRelatedError, GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedData, GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedResponse, GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedError, GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipData, GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipResponse, GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipError, GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipData, GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipResponse, GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipError, GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipData, GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipResponse, GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipError, GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipData, GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipResponse, GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipError, GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedData, GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedResponse, GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedError, GameCenterGroupsGameCenterAchievementsGetToManyRelationshipData, GameCenterGroupsGameCenterAchievementsGetToManyRelationshipResponse, GameCenterGroupsGameCenterAchievementsGetToManyRelationshipError, GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipData, GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipResponse, GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipError, GameCenterGroupsGameCenterAchievementsGetToManyRelatedData, GameCenterGroupsGameCenterAchievementsGetToManyRelatedResponse, GameCenterGroupsGameCenterAchievementsGetToManyRelatedError, GameCenterGroupsGameCenterDetailsGetToManyRelatedData, GameCenterGroupsGameCenterDetailsGetToManyRelatedResponse, GameCenterGroupsGameCenterDetailsGetToManyRelatedError, GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipData, GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipResponse, GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipError, GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipData, GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipResponse, GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipError, GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedData, GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedResponse, GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedError, GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipData, GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipResponse, GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipError, GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipData, GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipResponse, GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipError, GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedData, GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedResponse, GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedError, GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedData, GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedResponse, GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedError, GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedData, GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedResponse, GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedError, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedData, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedResponse, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedError, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedData, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedResponse, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedError, GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipData, GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipResponse, GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipError, GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipData, GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipResponse, GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipError, GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipData, GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipResponse, GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipError, GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipData, GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipResponse, GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipError, GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedData, GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedResponse, GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedError, GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipData, GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipResponse, GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipError, GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipData, GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipResponse, GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipError, GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedData, GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedResponse, GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedError, GameCenterLeaderboardSetsLocalizationsGetToManyRelatedData, GameCenterLeaderboardSetsLocalizationsGetToManyRelatedResponse, GameCenterLeaderboardSetsLocalizationsGetToManyRelatedError, GameCenterLeaderboardSetsReleasesGetToManyRelatedData, GameCenterLeaderboardSetsReleasesGetToManyRelatedResponse, GameCenterLeaderboardSetsReleasesGetToManyRelatedError, GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipData, GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipResponse, GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipError, GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipData, GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipResponse, GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipError, GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedData, GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedResponse, GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedError, GameCenterLeaderboardsLocalizationsGetToManyRelatedData, GameCenterLeaderboardsLocalizationsGetToManyRelatedResponse, GameCenterLeaderboardsLocalizationsGetToManyRelatedError, GameCenterLeaderboardsReleasesGetToManyRelatedData, GameCenterLeaderboardsReleasesGetToManyRelatedResponse, GameCenterLeaderboardsReleasesGetToManyRelatedError, GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedData, GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedResponse, GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedError, GameCenterMatchmakingRuleSetsRulesGetToManyRelatedData, GameCenterMatchmakingRuleSetsRulesGetToManyRelatedResponse, GameCenterMatchmakingRuleSetsRulesGetToManyRelatedError, GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedData, GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedResponse, GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedError, InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedData, InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedResponse, InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedError, InAppPurchasePricePointsEqualizationsGetToManyRelatedData, InAppPurchasePricePointsEqualizationsGetToManyRelatedResponse, InAppPurchasePricePointsEqualizationsGetToManyRelatedError, InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedData, InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedResponse, InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedError, InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedData, InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedResponse, InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedError, InAppPurchasePriceSchedulesManualPricesGetToManyRelatedData, InAppPurchasePriceSchedulesManualPricesGetToManyRelatedResponse, InAppPurchasePriceSchedulesManualPricesGetToManyRelatedError, InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedData, InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedResponse, InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedError, InAppPurchasesV2ContentGetToOneRelatedData, InAppPurchasesV2ContentGetToOneRelatedResponse, InAppPurchasesV2ContentGetToOneRelatedError, InAppPurchasesV2IapPriceScheduleGetToOneRelatedData, InAppPurchasesV2IapPriceScheduleGetToOneRelatedResponse, InAppPurchasesV2IapPriceScheduleGetToOneRelatedError, InAppPurchasesV2ImagesGetToManyRelatedData, InAppPurchasesV2ImagesGetToManyRelatedResponse, InAppPurchasesV2ImagesGetToManyRelatedError, InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedData, InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedResponse, InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedError, InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedData, InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedResponse, InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedError, InAppPurchasesV2PricePointsGetToManyRelatedData, InAppPurchasesV2PricePointsGetToManyRelatedResponse, InAppPurchasesV2PricePointsGetToManyRelatedError, InAppPurchasesV2PromotedPurchaseGetToOneRelatedData, InAppPurchasesV2PromotedPurchaseGetToOneRelatedResponse, InAppPurchasesV2PromotedPurchaseGetToOneRelatedError, MerchantIdsCertificatesGetToManyRelatedData, MerchantIdsCertificatesGetToManyRelatedResponse, MerchantIdsCertificatesGetToManyRelatedError, PreReleaseVersionsAppGetToOneRelatedData, PreReleaseVersionsAppGetToOneRelatedResponse, PreReleaseVersionsAppGetToOneRelatedError, PreReleaseVersionsBuildsGetToManyRelatedData, PreReleaseVersionsBuildsGetToManyRelatedResponse, PreReleaseVersionsBuildsGetToManyRelatedError, ProfilesBundleIdGetToOneRelatedData, ProfilesBundleIdGetToOneRelatedResponse, ProfilesBundleIdGetToOneRelatedError, ProfilesCertificatesGetToManyRelatedData, ProfilesCertificatesGetToManyRelatedResponse, ProfilesCertificatesGetToManyRelatedError, ProfilesDevicesGetToManyRelatedData, ProfilesDevicesGetToManyRelatedResponse, ProfilesDevicesGetToManyRelatedError, ReviewSubmissionsItemsGetToManyRelatedData, ReviewSubmissionsItemsGetToManyRelatedResponse, ReviewSubmissionsItemsGetToManyRelatedError, ScmProvidersRepositoriesGetToManyRelatedData, ScmProvidersRepositoriesGetToManyRelatedResponse, ScmProvidersRepositoriesGetToManyRelatedError, ScmRepositoriesGitReferencesGetToManyRelatedData, ScmRepositoriesGitReferencesGetToManyRelatedResponse, ScmRepositoriesGitReferencesGetToManyRelatedError, ScmRepositoriesPullRequestsGetToManyRelatedData, ScmRepositoriesPullRequestsGetToManyRelatedResponse, ScmRepositoriesPullRequestsGetToManyRelatedError, SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedData, SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedResponse, SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedError, SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedData, SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedResponse, SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedError, SubscriptionGroupsSubscriptionsGetToManyRelatedData, SubscriptionGroupsSubscriptionsGetToManyRelatedResponse, SubscriptionGroupsSubscriptionsGetToManyRelatedError, SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedData, SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedResponse, SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedError, SubscriptionOfferCodesCustomCodesGetToManyRelatedData, SubscriptionOfferCodesCustomCodesGetToManyRelatedResponse, SubscriptionOfferCodesCustomCodesGetToManyRelatedError, SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedData, SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedResponse, SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedError, SubscriptionOfferCodesPricesGetToManyRelatedData, SubscriptionOfferCodesPricesGetToManyRelatedResponse, SubscriptionOfferCodesPricesGetToManyRelatedError, SubscriptionPricePointsEqualizationsGetToManyRelatedData, SubscriptionPricePointsEqualizationsGetToManyRelatedResponse, SubscriptionPricePointsEqualizationsGetToManyRelatedError, SubscriptionPromotionalOffersPricesGetToManyRelatedData, SubscriptionPromotionalOffersPricesGetToManyRelatedResponse, SubscriptionPromotionalOffersPricesGetToManyRelatedError, SubscriptionsAppStoreReviewScreenshotGetToOneRelatedData, SubscriptionsAppStoreReviewScreenshotGetToOneRelatedResponse, SubscriptionsAppStoreReviewScreenshotGetToOneRelatedError, SubscriptionsImagesGetToManyRelatedData, SubscriptionsImagesGetToManyRelatedResponse, SubscriptionsImagesGetToManyRelatedError, SubscriptionsIntroductoryOffersDeleteToManyRelationshipData, SubscriptionsIntroductoryOffersDeleteToManyRelationshipResponse, SubscriptionsIntroductoryOffersDeleteToManyRelationshipError, SubscriptionsIntroductoryOffersGetToManyRelationshipData, SubscriptionsIntroductoryOffersGetToManyRelationshipResponse, SubscriptionsIntroductoryOffersGetToManyRelationshipError, SubscriptionsIntroductoryOffersGetToManyRelatedData, SubscriptionsIntroductoryOffersGetToManyRelatedResponse, SubscriptionsIntroductoryOffersGetToManyRelatedError, SubscriptionsOfferCodesGetToManyRelatedData, SubscriptionsOfferCodesGetToManyRelatedResponse, SubscriptionsOfferCodesGetToManyRelatedError, SubscriptionsPricePointsGetToManyRelatedData, SubscriptionsPricePointsGetToManyRelatedResponse, SubscriptionsPricePointsGetToManyRelatedError, SubscriptionsPricesDeleteToManyRelationshipData, SubscriptionsPricesDeleteToManyRelationshipResponse, SubscriptionsPricesDeleteToManyRelationshipError, SubscriptionsPricesGetToManyRelationshipData, SubscriptionsPricesGetToManyRelationshipResponse, SubscriptionsPricesGetToManyRelationshipError, SubscriptionsPricesGetToManyRelatedData, SubscriptionsPricesGetToManyRelatedResponse, SubscriptionsPricesGetToManyRelatedError, SubscriptionsPromotedPurchaseGetToOneRelatedData, SubscriptionsPromotedPurchaseGetToOneRelatedResponse, SubscriptionsPromotedPurchaseGetToOneRelatedError, SubscriptionsPromotionalOffersGetToManyRelatedData, SubscriptionsPromotionalOffersGetToManyRelatedResponse, SubscriptionsPromotionalOffersGetToManyRelatedError, SubscriptionsSubscriptionAvailabilityGetToOneRelatedData, SubscriptionsSubscriptionAvailabilityGetToOneRelatedResponse, SubscriptionsSubscriptionAvailabilityGetToOneRelatedError, SubscriptionsSubscriptionLocalizationsGetToManyRelatedData, SubscriptionsSubscriptionLocalizationsGetToManyRelatedResponse, SubscriptionsSubscriptionLocalizationsGetToManyRelatedError, SubscriptionsWinBackOffersGetToManyRelatedData, SubscriptionsWinBackOffersGetToManyRelatedResponse, SubscriptionsWinBackOffersGetToManyRelatedError, UserInvitationsVisibleAppsGetToManyRelatedData, UserInvitationsVisibleAppsGetToManyRelatedResponse, UserInvitationsVisibleAppsGetToManyRelatedError, UsersVisibleAppsDeleteToManyRelationshipData, UsersVisibleAppsDeleteToManyRelationshipResponse, UsersVisibleAppsDeleteToManyRelationshipError, UsersVisibleAppsGetToManyRelationshipData, UsersVisibleAppsGetToManyRelationshipResponse, UsersVisibleAppsGetToManyRelationshipError, UsersVisibleAppsReplaceToManyRelationshipData, UsersVisibleAppsReplaceToManyRelationshipResponse, UsersVisibleAppsReplaceToManyRelationshipError, UsersVisibleAppsCreateToManyRelationshipData, UsersVisibleAppsCreateToManyRelationshipResponse, UsersVisibleAppsCreateToManyRelationshipError, UsersVisibleAppsGetToManyRelatedData, UsersVisibleAppsGetToManyRelatedResponse, UsersVisibleAppsGetToManyRelatedError, WinBackOffersPricesGetToManyRelatedData, WinBackOffersPricesGetToManyRelatedResponse, WinBackOffersPricesGetToManyRelatedError, AppsBetaTesterUsagesGetMetricsData, AppsBetaTesterUsagesGetMetricsResponse, AppsBetaTesterUsagesGetMetricsError, BetaGroupsBetaTesterUsagesGetMetricsData, BetaGroupsBetaTesterUsagesGetMetricsResponse, BetaGroupsBetaTesterUsagesGetMetricsError, BetaGroupsPublicLinkUsagesGetMetricsData, BetaGroupsPublicLinkUsagesGetMetricsResponse, BetaGroupsPublicLinkUsagesGetMetricsError, BetaTestersBetaTesterUsagesGetMetricsData, BetaTestersBetaTesterUsagesGetMetricsResponse, BetaTestersBetaTesterUsagesGetMetricsError, BuildsBetaBuildUsagesGetMetricsData, BuildsBetaBuildUsagesGetMetricsResponse, BuildsBetaBuildUsagesGetMetricsError, GameCenterDetailsClassicMatchmakingRequestsGetMetricsData, GameCenterDetailsClassicMatchmakingRequestsGetMetricsResponse, GameCenterDetailsClassicMatchmakingRequestsGetMetricsError, GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsData, GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsResponse, GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsError, GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsData, GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsResponse, GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsError, GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsData, GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsResponse, GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsError, GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsData, GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsResponse, GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsError, GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsData, GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsResponse, GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsError, GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsData, GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsResponse, GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsError, GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsData, GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsResponse, GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsError, GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsData, GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsResponse, GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsError, GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsData, GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsResponse, GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const actorsGetCollection = <ThrowOnError extends boolean = false>(options: Options<ActorsGetCollectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ActorsGetCollectionResponse, ActorsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/actors',
        ...options
    });
};

export const actorsGetInstance = <ThrowOnError extends boolean = false>(options: Options<ActorsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ActorsGetInstanceResponse, ActorsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/actors/{id}',
        ...options
    });
};

export const ageRatingDeclarationsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AgeRatingDeclarationsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AgeRatingDeclarationsUpdateInstanceResponse, AgeRatingDeclarationsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ageRatingDeclarations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const alternativeDistributionDomainsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<AlternativeDistributionDomainsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AlternativeDistributionDomainsGetCollectionResponse, AlternativeDistributionDomainsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/alternativeDistributionDomains',
        ...options
    });
};

export const alternativeDistributionDomainsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionDomainsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AlternativeDistributionDomainsCreateInstanceResponse, AlternativeDistributionDomainsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/alternativeDistributionDomains',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const alternativeDistributionDomainsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionDomainsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AlternativeDistributionDomainsDeleteInstanceResponse, AlternativeDistributionDomainsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/alternativeDistributionDomains/{id}',
        ...options
    });
};

export const alternativeDistributionDomainsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionDomainsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AlternativeDistributionDomainsGetInstanceResponse, AlternativeDistributionDomainsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/alternativeDistributionDomains/{id}',
        ...options
    });
};

export const alternativeDistributionKeysGetCollection = <ThrowOnError extends boolean = false>(options?: Options<AlternativeDistributionKeysGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AlternativeDistributionKeysGetCollectionResponse, AlternativeDistributionKeysGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/alternativeDistributionKeys',
        ...options
    });
};

export const alternativeDistributionKeysCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionKeysCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AlternativeDistributionKeysCreateInstanceResponse, AlternativeDistributionKeysCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/alternativeDistributionKeys',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const alternativeDistributionKeysDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionKeysDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AlternativeDistributionKeysDeleteInstanceResponse, AlternativeDistributionKeysDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/alternativeDistributionKeys/{id}',
        ...options
    });
};

export const alternativeDistributionKeysGetInstance = <ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionKeysGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AlternativeDistributionKeysGetInstanceResponse, AlternativeDistributionKeysGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/alternativeDistributionKeys/{id}',
        ...options
    });
};

export const alternativeDistributionPackageDeltasGetInstance = <ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionPackageDeltasGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AlternativeDistributionPackageDeltasGetInstanceResponse, AlternativeDistributionPackageDeltasGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/alternativeDistributionPackageDeltas/{id}',
        ...options
    });
};

export const alternativeDistributionPackageVariantsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionPackageVariantsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AlternativeDistributionPackageVariantsGetInstanceResponse, AlternativeDistributionPackageVariantsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/alternativeDistributionPackageVariants/{id}',
        ...options
    });
};

export const alternativeDistributionPackageVersionsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionPackageVersionsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AlternativeDistributionPackageVersionsGetInstanceResponse, AlternativeDistributionPackageVersionsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/alternativeDistributionPackageVersions/{id}',
        ...options
    });
};

export const alternativeDistributionPackagesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionPackagesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AlternativeDistributionPackagesCreateInstanceResponse, AlternativeDistributionPackagesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/alternativeDistributionPackages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const alternativeDistributionPackagesGetInstance = <ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionPackagesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AlternativeDistributionPackagesGetInstanceResponse, AlternativeDistributionPackagesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/alternativeDistributionPackages/{id}',
        ...options
    });
};

export const analyticsReportInstancesGetInstance = <ThrowOnError extends boolean = false>(options: Options<AnalyticsReportInstancesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AnalyticsReportInstancesGetInstanceResponse, AnalyticsReportInstancesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/analyticsReportInstances/{id}',
        ...options
    });
};

export const analyticsReportRequestsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AnalyticsReportRequestsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AnalyticsReportRequestsCreateInstanceResponse, AnalyticsReportRequestsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/analyticsReportRequests',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const analyticsReportRequestsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AnalyticsReportRequestsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AnalyticsReportRequestsDeleteInstanceResponse, AnalyticsReportRequestsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/analyticsReportRequests/{id}',
        ...options
    });
};

export const analyticsReportRequestsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AnalyticsReportRequestsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AnalyticsReportRequestsGetInstanceResponse, AnalyticsReportRequestsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/analyticsReportRequests/{id}',
        ...options
    });
};

export const analyticsReportSegmentsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AnalyticsReportSegmentsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AnalyticsReportSegmentsGetInstanceResponse, AnalyticsReportSegmentsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/analyticsReportSegments/{id}',
        ...options
    });
};

export const analyticsReportsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AnalyticsReportsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AnalyticsReportsGetInstanceResponse, AnalyticsReportsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/analyticsReports/{id}',
        ...options
    });
};

export const appAvailabilitiesV2CreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppAvailabilitiesV2CreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppAvailabilitiesV2CreateInstanceResponse, AppAvailabilitiesV2CreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v2/appAvailabilities',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appAvailabilitiesV2GetInstance = <ThrowOnError extends boolean = false>(options: Options<AppAvailabilitiesV2GetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppAvailabilitiesV2GetInstanceResponse, AppAvailabilitiesV2GetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v2/appAvailabilities/{id}',
        ...options
    });
};

export const appCategoriesGetCollection = <ThrowOnError extends boolean = false>(options?: Options<AppCategoriesGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppCategoriesGetCollectionResponse, AppCategoriesGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appCategories',
        ...options
    });
};

export const appCategoriesGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppCategoriesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppCategoriesGetInstanceResponse, AppCategoriesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appCategories/{id}',
        ...options
    });
};

export const appClipAdvancedExperienceImagesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppClipAdvancedExperienceImagesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppClipAdvancedExperienceImagesCreateInstanceResponse, AppClipAdvancedExperienceImagesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appClipAdvancedExperienceImages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appClipAdvancedExperienceImagesGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppClipAdvancedExperienceImagesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppClipAdvancedExperienceImagesGetInstanceResponse, AppClipAdvancedExperienceImagesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appClipAdvancedExperienceImages/{id}',
        ...options
    });
};

export const appClipAdvancedExperienceImagesUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppClipAdvancedExperienceImagesUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppClipAdvancedExperienceImagesUpdateInstanceResponse, AppClipAdvancedExperienceImagesUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appClipAdvancedExperienceImages/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appClipAdvancedExperiencesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppClipAdvancedExperiencesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppClipAdvancedExperiencesCreateInstanceResponse, AppClipAdvancedExperiencesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appClipAdvancedExperiences',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appClipAdvancedExperiencesGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppClipAdvancedExperiencesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppClipAdvancedExperiencesGetInstanceResponse, AppClipAdvancedExperiencesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appClipAdvancedExperiences/{id}',
        ...options
    });
};

export const appClipAdvancedExperiencesUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppClipAdvancedExperiencesUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppClipAdvancedExperiencesUpdateInstanceResponse, AppClipAdvancedExperiencesUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appClipAdvancedExperiences/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appClipAppStoreReviewDetailsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppClipAppStoreReviewDetailsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppClipAppStoreReviewDetailsCreateInstanceResponse, AppClipAppStoreReviewDetailsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appClipAppStoreReviewDetails',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appClipAppStoreReviewDetailsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppClipAppStoreReviewDetailsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppClipAppStoreReviewDetailsGetInstanceResponse, AppClipAppStoreReviewDetailsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appClipAppStoreReviewDetails/{id}',
        ...options
    });
};

export const appClipAppStoreReviewDetailsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppClipAppStoreReviewDetailsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppClipAppStoreReviewDetailsUpdateInstanceResponse, AppClipAppStoreReviewDetailsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appClipAppStoreReviewDetails/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appClipDefaultExperienceLocalizationsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperienceLocalizationsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppClipDefaultExperienceLocalizationsCreateInstanceResponse, AppClipDefaultExperienceLocalizationsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appClipDefaultExperienceLocalizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appClipDefaultExperienceLocalizationsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperienceLocalizationsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppClipDefaultExperienceLocalizationsDeleteInstanceResponse, AppClipDefaultExperienceLocalizationsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appClipDefaultExperienceLocalizations/{id}',
        ...options
    });
};

export const appClipDefaultExperienceLocalizationsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperienceLocalizationsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppClipDefaultExperienceLocalizationsGetInstanceResponse, AppClipDefaultExperienceLocalizationsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appClipDefaultExperienceLocalizations/{id}',
        ...options
    });
};

export const appClipDefaultExperienceLocalizationsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperienceLocalizationsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppClipDefaultExperienceLocalizationsUpdateInstanceResponse, AppClipDefaultExperienceLocalizationsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appClipDefaultExperienceLocalizations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appClipDefaultExperiencesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperiencesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppClipDefaultExperiencesCreateInstanceResponse, AppClipDefaultExperiencesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appClipDefaultExperiences',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appClipDefaultExperiencesDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperiencesDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppClipDefaultExperiencesDeleteInstanceResponse, AppClipDefaultExperiencesDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appClipDefaultExperiences/{id}',
        ...options
    });
};

export const appClipDefaultExperiencesGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperiencesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppClipDefaultExperiencesGetInstanceResponse, AppClipDefaultExperiencesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appClipDefaultExperiences/{id}',
        ...options
    });
};

export const appClipDefaultExperiencesUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperiencesUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppClipDefaultExperiencesUpdateInstanceResponse, AppClipDefaultExperiencesUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appClipDefaultExperiences/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appClipHeaderImagesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppClipHeaderImagesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppClipHeaderImagesCreateInstanceResponse, AppClipHeaderImagesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appClipHeaderImages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appClipHeaderImagesDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AppClipHeaderImagesDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppClipHeaderImagesDeleteInstanceResponse, AppClipHeaderImagesDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appClipHeaderImages/{id}',
        ...options
    });
};

export const appClipHeaderImagesGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppClipHeaderImagesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppClipHeaderImagesGetInstanceResponse, AppClipHeaderImagesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appClipHeaderImages/{id}',
        ...options
    });
};

export const appClipHeaderImagesUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppClipHeaderImagesUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppClipHeaderImagesUpdateInstanceResponse, AppClipHeaderImagesUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appClipHeaderImages/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appClipsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppClipsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppClipsGetInstanceResponse, AppClipsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appClips/{id}',
        ...options
    });
};

export const appCustomProductPageLocalizationsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageLocalizationsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppCustomProductPageLocalizationsCreateInstanceResponse, AppCustomProductPageLocalizationsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appCustomProductPageLocalizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appCustomProductPageLocalizationsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageLocalizationsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppCustomProductPageLocalizationsDeleteInstanceResponse, AppCustomProductPageLocalizationsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appCustomProductPageLocalizations/{id}',
        ...options
    });
};

export const appCustomProductPageLocalizationsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageLocalizationsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppCustomProductPageLocalizationsGetInstanceResponse, AppCustomProductPageLocalizationsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appCustomProductPageLocalizations/{id}',
        ...options
    });
};

export const appCustomProductPageLocalizationsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageLocalizationsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppCustomProductPageLocalizationsUpdateInstanceResponse, AppCustomProductPageLocalizationsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appCustomProductPageLocalizations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appCustomProductPageVersionsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageVersionsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppCustomProductPageVersionsCreateInstanceResponse, AppCustomProductPageVersionsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appCustomProductPageVersions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appCustomProductPageVersionsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageVersionsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppCustomProductPageVersionsGetInstanceResponse, AppCustomProductPageVersionsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appCustomProductPageVersions/{id}',
        ...options
    });
};

export const appCustomProductPageVersionsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageVersionsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppCustomProductPageVersionsUpdateInstanceResponse, AppCustomProductPageVersionsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appCustomProductPageVersions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appCustomProductPagesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppCustomProductPagesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppCustomProductPagesCreateInstanceResponse, AppCustomProductPagesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appCustomProductPages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appCustomProductPagesDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AppCustomProductPagesDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppCustomProductPagesDeleteInstanceResponse, AppCustomProductPagesDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appCustomProductPages/{id}',
        ...options
    });
};

export const appCustomProductPagesGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppCustomProductPagesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppCustomProductPagesGetInstanceResponse, AppCustomProductPagesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appCustomProductPages/{id}',
        ...options
    });
};

export const appCustomProductPagesUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppCustomProductPagesUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppCustomProductPagesUpdateInstanceResponse, AppCustomProductPagesUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appCustomProductPages/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appEncryptionDeclarationDocumentsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppEncryptionDeclarationDocumentsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppEncryptionDeclarationDocumentsCreateInstanceResponse, AppEncryptionDeclarationDocumentsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appEncryptionDeclarationDocuments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appEncryptionDeclarationDocumentsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppEncryptionDeclarationDocumentsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppEncryptionDeclarationDocumentsGetInstanceResponse, AppEncryptionDeclarationDocumentsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appEncryptionDeclarationDocuments/{id}',
        ...options
    });
};

export const appEncryptionDeclarationDocumentsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppEncryptionDeclarationDocumentsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppEncryptionDeclarationDocumentsUpdateInstanceResponse, AppEncryptionDeclarationDocumentsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appEncryptionDeclarationDocuments/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appEncryptionDeclarationsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<AppEncryptionDeclarationsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppEncryptionDeclarationsGetCollectionResponse, AppEncryptionDeclarationsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appEncryptionDeclarations',
        ...options
    });
};

export const appEncryptionDeclarationsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppEncryptionDeclarationsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppEncryptionDeclarationsCreateInstanceResponse, AppEncryptionDeclarationsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appEncryptionDeclarations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appEncryptionDeclarationsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppEncryptionDeclarationsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppEncryptionDeclarationsGetInstanceResponse, AppEncryptionDeclarationsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appEncryptionDeclarations/{id}',
        ...options
    });
};

export const appEventLocalizationsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppEventLocalizationsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppEventLocalizationsCreateInstanceResponse, AppEventLocalizationsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appEventLocalizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appEventLocalizationsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AppEventLocalizationsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppEventLocalizationsDeleteInstanceResponse, AppEventLocalizationsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appEventLocalizations/{id}',
        ...options
    });
};

export const appEventLocalizationsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppEventLocalizationsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppEventLocalizationsGetInstanceResponse, AppEventLocalizationsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appEventLocalizations/{id}',
        ...options
    });
};

export const appEventLocalizationsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppEventLocalizationsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppEventLocalizationsUpdateInstanceResponse, AppEventLocalizationsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appEventLocalizations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appEventScreenshotsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppEventScreenshotsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppEventScreenshotsCreateInstanceResponse, AppEventScreenshotsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appEventScreenshots',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appEventScreenshotsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AppEventScreenshotsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppEventScreenshotsDeleteInstanceResponse, AppEventScreenshotsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appEventScreenshots/{id}',
        ...options
    });
};

export const appEventScreenshotsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppEventScreenshotsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppEventScreenshotsGetInstanceResponse, AppEventScreenshotsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appEventScreenshots/{id}',
        ...options
    });
};

export const appEventScreenshotsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppEventScreenshotsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppEventScreenshotsUpdateInstanceResponse, AppEventScreenshotsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appEventScreenshots/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appEventVideoClipsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppEventVideoClipsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppEventVideoClipsCreateInstanceResponse, AppEventVideoClipsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appEventVideoClips',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appEventVideoClipsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AppEventVideoClipsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppEventVideoClipsDeleteInstanceResponse, AppEventVideoClipsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appEventVideoClips/{id}',
        ...options
    });
};

export const appEventVideoClipsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppEventVideoClipsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppEventVideoClipsGetInstanceResponse, AppEventVideoClipsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appEventVideoClips/{id}',
        ...options
    });
};

export const appEventVideoClipsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppEventVideoClipsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppEventVideoClipsUpdateInstanceResponse, AppEventVideoClipsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appEventVideoClips/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appEventsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppEventsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppEventsCreateInstanceResponse, AppEventsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appEvents',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appEventsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AppEventsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppEventsDeleteInstanceResponse, AppEventsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appEvents/{id}',
        ...options
    });
};

export const appEventsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppEventsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppEventsGetInstanceResponse, AppEventsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appEvents/{id}',
        ...options
    });
};

export const appEventsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppEventsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppEventsUpdateInstanceResponse, AppEventsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appEvents/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appInfoLocalizationsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppInfoLocalizationsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppInfoLocalizationsCreateInstanceResponse, AppInfoLocalizationsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appInfoLocalizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appInfoLocalizationsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AppInfoLocalizationsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppInfoLocalizationsDeleteInstanceResponse, AppInfoLocalizationsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appInfoLocalizations/{id}',
        ...options
    });
};

export const appInfoLocalizationsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppInfoLocalizationsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppInfoLocalizationsGetInstanceResponse, AppInfoLocalizationsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appInfoLocalizations/{id}',
        ...options
    });
};

export const appInfoLocalizationsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppInfoLocalizationsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppInfoLocalizationsUpdateInstanceResponse, AppInfoLocalizationsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appInfoLocalizations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appInfosGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppInfosGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppInfosGetInstanceResponse, AppInfosGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appInfos/{id}',
        ...options
    });
};

export const appInfosUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppInfosUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppInfosUpdateInstanceResponse, AppInfosUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appInfos/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appPreviewSetsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppPreviewSetsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppPreviewSetsCreateInstanceResponse, AppPreviewSetsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appPreviewSets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appPreviewSetsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AppPreviewSetsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppPreviewSetsDeleteInstanceResponse, AppPreviewSetsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appPreviewSets/{id}',
        ...options
    });
};

export const appPreviewSetsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppPreviewSetsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppPreviewSetsGetInstanceResponse, AppPreviewSetsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appPreviewSets/{id}',
        ...options
    });
};

export const appPreviewsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppPreviewsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppPreviewsCreateInstanceResponse, AppPreviewsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appPreviews',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appPreviewsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AppPreviewsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppPreviewsDeleteInstanceResponse, AppPreviewsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appPreviews/{id}',
        ...options
    });
};

export const appPreviewsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppPreviewsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppPreviewsGetInstanceResponse, AppPreviewsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appPreviews/{id}',
        ...options
    });
};

export const appPreviewsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppPreviewsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppPreviewsUpdateInstanceResponse, AppPreviewsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appPreviews/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appPricePointsV3GetInstance = <ThrowOnError extends boolean = false>(options: Options<AppPricePointsV3GetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppPricePointsV3GetInstanceResponse, AppPricePointsV3GetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v3/appPricePoints/{id}',
        ...options
    });
};

export const appPriceSchedulesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppPriceSchedulesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppPriceSchedulesCreateInstanceResponse, AppPriceSchedulesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appPriceSchedules',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appPriceSchedulesGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppPriceSchedulesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppPriceSchedulesGetInstanceResponse, AppPriceSchedulesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appPriceSchedules/{id}',
        ...options
    });
};

export const appScreenshotSetsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppScreenshotSetsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppScreenshotSetsCreateInstanceResponse, AppScreenshotSetsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appScreenshotSets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appScreenshotSetsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AppScreenshotSetsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppScreenshotSetsDeleteInstanceResponse, AppScreenshotSetsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appScreenshotSets/{id}',
        ...options
    });
};

export const appScreenshotSetsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppScreenshotSetsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppScreenshotSetsGetInstanceResponse, AppScreenshotSetsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appScreenshotSets/{id}',
        ...options
    });
};

export const appScreenshotsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppScreenshotsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppScreenshotsCreateInstanceResponse, AppScreenshotsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appScreenshots',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appScreenshotsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AppScreenshotsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppScreenshotsDeleteInstanceResponse, AppScreenshotsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appScreenshots/{id}',
        ...options
    });
};

export const appScreenshotsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppScreenshotsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppScreenshotsGetInstanceResponse, AppScreenshotsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appScreenshots/{id}',
        ...options
    });
};

export const appScreenshotsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppScreenshotsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppScreenshotsUpdateInstanceResponse, AppScreenshotsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appScreenshots/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appStoreReviewAttachmentsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreReviewAttachmentsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppStoreReviewAttachmentsCreateInstanceResponse, AppStoreReviewAttachmentsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreReviewAttachments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appStoreReviewAttachmentsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreReviewAttachmentsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppStoreReviewAttachmentsDeleteInstanceResponse, AppStoreReviewAttachmentsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreReviewAttachments/{id}',
        ...options
    });
};

export const appStoreReviewAttachmentsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreReviewAttachmentsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreReviewAttachmentsGetInstanceResponse, AppStoreReviewAttachmentsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreReviewAttachments/{id}',
        ...options
    });
};

export const appStoreReviewAttachmentsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreReviewAttachmentsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppStoreReviewAttachmentsUpdateInstanceResponse, AppStoreReviewAttachmentsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreReviewAttachments/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appStoreReviewDetailsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreReviewDetailsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppStoreReviewDetailsCreateInstanceResponse, AppStoreReviewDetailsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreReviewDetails',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appStoreReviewDetailsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreReviewDetailsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreReviewDetailsGetInstanceResponse, AppStoreReviewDetailsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreReviewDetails/{id}',
        ...options
    });
};

export const appStoreReviewDetailsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreReviewDetailsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppStoreReviewDetailsUpdateInstanceResponse, AppStoreReviewDetailsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreReviewDetails/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appStoreVersionExperimentTreatmentLocalizationsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceResponse, AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersionExperimentTreatmentLocalizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appStoreVersionExperimentTreatmentLocalizationsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceResponse, AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersionExperimentTreatmentLocalizations/{id}',
        ...options
    });
};

export const appStoreVersionExperimentTreatmentLocalizationsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentTreatmentLocalizationsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionExperimentTreatmentLocalizationsGetInstanceResponse, AppStoreVersionExperimentTreatmentLocalizationsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersionExperimentTreatmentLocalizations/{id}',
        ...options
    });
};

export const appStoreVersionExperimentTreatmentsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentTreatmentsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppStoreVersionExperimentTreatmentsCreateInstanceResponse, AppStoreVersionExperimentTreatmentsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersionExperimentTreatments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appStoreVersionExperimentTreatmentsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentTreatmentsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppStoreVersionExperimentTreatmentsDeleteInstanceResponse, AppStoreVersionExperimentTreatmentsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersionExperimentTreatments/{id}',
        ...options
    });
};

export const appStoreVersionExperimentTreatmentsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentTreatmentsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionExperimentTreatmentsGetInstanceResponse, AppStoreVersionExperimentTreatmentsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersionExperimentTreatments/{id}',
        ...options
    });
};

export const appStoreVersionExperimentTreatmentsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentTreatmentsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppStoreVersionExperimentTreatmentsUpdateInstanceResponse, AppStoreVersionExperimentTreatmentsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersionExperimentTreatments/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appStoreVersionExperimentsV2CreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentsV2CreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppStoreVersionExperimentsV2CreateInstanceResponse, AppStoreVersionExperimentsV2CreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v2/appStoreVersionExperiments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appStoreVersionExperimentsV2DeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentsV2DeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppStoreVersionExperimentsV2DeleteInstanceResponse, AppStoreVersionExperimentsV2DeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v2/appStoreVersionExperiments/{id}',
        ...options
    });
};

export const appStoreVersionExperimentsV2GetInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentsV2GetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionExperimentsV2GetInstanceResponse, AppStoreVersionExperimentsV2GetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v2/appStoreVersionExperiments/{id}',
        ...options
    });
};

export const appStoreVersionExperimentsV2UpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentsV2UpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppStoreVersionExperimentsV2UpdateInstanceResponse, AppStoreVersionExperimentsV2UpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v2/appStoreVersionExperiments/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 */
export const appStoreVersionExperimentsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppStoreVersionExperimentsCreateInstanceResponse, AppStoreVersionExperimentsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersionExperiments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 */
export const appStoreVersionExperimentsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppStoreVersionExperimentsDeleteInstanceResponse, AppStoreVersionExperimentsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersionExperiments/{id}',
        ...options
    });
};

/**
 * @deprecated
 */
export const appStoreVersionExperimentsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionExperimentsGetInstanceResponse, AppStoreVersionExperimentsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersionExperiments/{id}',
        ...options
    });
};

/**
 * @deprecated
 */
export const appStoreVersionExperimentsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppStoreVersionExperimentsUpdateInstanceResponse, AppStoreVersionExperimentsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersionExperiments/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appStoreVersionLocalizationsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionLocalizationsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppStoreVersionLocalizationsCreateInstanceResponse, AppStoreVersionLocalizationsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersionLocalizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appStoreVersionLocalizationsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionLocalizationsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppStoreVersionLocalizationsDeleteInstanceResponse, AppStoreVersionLocalizationsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersionLocalizations/{id}',
        ...options
    });
};

export const appStoreVersionLocalizationsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionLocalizationsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionLocalizationsGetInstanceResponse, AppStoreVersionLocalizationsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersionLocalizations/{id}',
        ...options
    });
};

export const appStoreVersionLocalizationsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionLocalizationsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppStoreVersionLocalizationsUpdateInstanceResponse, AppStoreVersionLocalizationsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersionLocalizations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appStoreVersionPhasedReleasesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionPhasedReleasesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppStoreVersionPhasedReleasesCreateInstanceResponse, AppStoreVersionPhasedReleasesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersionPhasedReleases',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appStoreVersionPhasedReleasesDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionPhasedReleasesDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppStoreVersionPhasedReleasesDeleteInstanceResponse, AppStoreVersionPhasedReleasesDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersionPhasedReleases/{id}',
        ...options
    });
};

export const appStoreVersionPhasedReleasesUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionPhasedReleasesUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppStoreVersionPhasedReleasesUpdateInstanceResponse, AppStoreVersionPhasedReleasesUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersionPhasedReleases/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appStoreVersionPromotionsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionPromotionsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppStoreVersionPromotionsCreateInstanceResponse, AppStoreVersionPromotionsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersionPromotions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appStoreVersionReleaseRequestsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionReleaseRequestsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppStoreVersionReleaseRequestsCreateInstanceResponse, AppStoreVersionReleaseRequestsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersionReleaseRequests',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 */
export const appStoreVersionSubmissionsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionSubmissionsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppStoreVersionSubmissionsCreateInstanceResponse, AppStoreVersionSubmissionsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersionSubmissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 */
export const appStoreVersionSubmissionsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionSubmissionsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppStoreVersionSubmissionsDeleteInstanceResponse, AppStoreVersionSubmissionsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersionSubmissions/{id}',
        ...options
    });
};

export const appStoreVersionsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppStoreVersionsCreateInstanceResponse, AppStoreVersionsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appStoreVersionsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppStoreVersionsDeleteInstanceResponse, AppStoreVersionsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersions/{id}',
        ...options
    });
};

export const appStoreVersionsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionsGetInstanceResponse, AppStoreVersionsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersions/{id}',
        ...options
    });
};

export const appStoreVersionsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppStoreVersionsUpdateInstanceResponse, AppStoreVersionsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<AppsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppsGetCollectionResponse, AppsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps',
        ...options
    });
};

export const appsGetInstance = <ThrowOnError extends boolean = false>(options: Options<AppsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsGetInstanceResponse, AppsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}',
        ...options
    });
};

export const appsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<AppsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppsUpdateInstanceResponse, AppsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/apps/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaAppClipInvocationLocalizationsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<BetaAppClipInvocationLocalizationsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BetaAppClipInvocationLocalizationsCreateInstanceResponse, BetaAppClipInvocationLocalizationsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaAppClipInvocationLocalizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaAppClipInvocationLocalizationsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<BetaAppClipInvocationLocalizationsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BetaAppClipInvocationLocalizationsDeleteInstanceResponse, BetaAppClipInvocationLocalizationsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaAppClipInvocationLocalizations/{id}',
        ...options
    });
};

export const betaAppClipInvocationLocalizationsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<BetaAppClipInvocationLocalizationsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BetaAppClipInvocationLocalizationsUpdateInstanceResponse, BetaAppClipInvocationLocalizationsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaAppClipInvocationLocalizations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaAppClipInvocationsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<BetaAppClipInvocationsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BetaAppClipInvocationsCreateInstanceResponse, BetaAppClipInvocationsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaAppClipInvocations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaAppClipInvocationsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<BetaAppClipInvocationsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BetaAppClipInvocationsDeleteInstanceResponse, BetaAppClipInvocationsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaAppClipInvocations/{id}',
        ...options
    });
};

export const betaAppClipInvocationsGetInstance = <ThrowOnError extends boolean = false>(options: Options<BetaAppClipInvocationsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaAppClipInvocationsGetInstanceResponse, BetaAppClipInvocationsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaAppClipInvocations/{id}',
        ...options
    });
};

export const betaAppClipInvocationsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<BetaAppClipInvocationsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BetaAppClipInvocationsUpdateInstanceResponse, BetaAppClipInvocationsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaAppClipInvocations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaAppLocalizationsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<BetaAppLocalizationsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BetaAppLocalizationsGetCollectionResponse, BetaAppLocalizationsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaAppLocalizations',
        ...options
    });
};

export const betaAppLocalizationsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<BetaAppLocalizationsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BetaAppLocalizationsCreateInstanceResponse, BetaAppLocalizationsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaAppLocalizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaAppLocalizationsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<BetaAppLocalizationsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BetaAppLocalizationsDeleteInstanceResponse, BetaAppLocalizationsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaAppLocalizations/{id}',
        ...options
    });
};

export const betaAppLocalizationsGetInstance = <ThrowOnError extends boolean = false>(options: Options<BetaAppLocalizationsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaAppLocalizationsGetInstanceResponse, BetaAppLocalizationsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaAppLocalizations/{id}',
        ...options
    });
};

export const betaAppLocalizationsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<BetaAppLocalizationsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BetaAppLocalizationsUpdateInstanceResponse, BetaAppLocalizationsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaAppLocalizations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaAppReviewDetailsGetCollection = <ThrowOnError extends boolean = false>(options: Options<BetaAppReviewDetailsGetCollectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaAppReviewDetailsGetCollectionResponse, BetaAppReviewDetailsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaAppReviewDetails',
        ...options
    });
};

export const betaAppReviewDetailsGetInstance = <ThrowOnError extends boolean = false>(options: Options<BetaAppReviewDetailsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaAppReviewDetailsGetInstanceResponse, BetaAppReviewDetailsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaAppReviewDetails/{id}',
        ...options
    });
};

export const betaAppReviewDetailsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<BetaAppReviewDetailsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BetaAppReviewDetailsUpdateInstanceResponse, BetaAppReviewDetailsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaAppReviewDetails/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaAppReviewSubmissionsGetCollection = <ThrowOnError extends boolean = false>(options: Options<BetaAppReviewSubmissionsGetCollectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaAppReviewSubmissionsGetCollectionResponse, BetaAppReviewSubmissionsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaAppReviewSubmissions',
        ...options
    });
};

export const betaAppReviewSubmissionsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<BetaAppReviewSubmissionsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BetaAppReviewSubmissionsCreateInstanceResponse, BetaAppReviewSubmissionsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaAppReviewSubmissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaAppReviewSubmissionsGetInstance = <ThrowOnError extends boolean = false>(options: Options<BetaAppReviewSubmissionsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaAppReviewSubmissionsGetInstanceResponse, BetaAppReviewSubmissionsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaAppReviewSubmissions/{id}',
        ...options
    });
};

export const betaBuildLocalizationsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<BetaBuildLocalizationsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BetaBuildLocalizationsGetCollectionResponse, BetaBuildLocalizationsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaBuildLocalizations',
        ...options
    });
};

export const betaBuildLocalizationsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<BetaBuildLocalizationsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BetaBuildLocalizationsCreateInstanceResponse, BetaBuildLocalizationsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaBuildLocalizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaBuildLocalizationsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<BetaBuildLocalizationsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BetaBuildLocalizationsDeleteInstanceResponse, BetaBuildLocalizationsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaBuildLocalizations/{id}',
        ...options
    });
};

export const betaBuildLocalizationsGetInstance = <ThrowOnError extends boolean = false>(options: Options<BetaBuildLocalizationsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaBuildLocalizationsGetInstanceResponse, BetaBuildLocalizationsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaBuildLocalizations/{id}',
        ...options
    });
};

export const betaBuildLocalizationsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<BetaBuildLocalizationsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BetaBuildLocalizationsUpdateInstanceResponse, BetaBuildLocalizationsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaBuildLocalizations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaGroupsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<BetaGroupsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BetaGroupsGetCollectionResponse, BetaGroupsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaGroups',
        ...options
    });
};

export const betaGroupsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<BetaGroupsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BetaGroupsCreateInstanceResponse, BetaGroupsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaGroups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaGroupsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<BetaGroupsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BetaGroupsDeleteInstanceResponse, BetaGroupsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaGroups/{id}',
        ...options
    });
};

export const betaGroupsGetInstance = <ThrowOnError extends boolean = false>(options: Options<BetaGroupsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaGroupsGetInstanceResponse, BetaGroupsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaGroups/{id}',
        ...options
    });
};

export const betaGroupsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<BetaGroupsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BetaGroupsUpdateInstanceResponse, BetaGroupsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaGroups/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaLicenseAgreementsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<BetaLicenseAgreementsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BetaLicenseAgreementsGetCollectionResponse, BetaLicenseAgreementsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaLicenseAgreements',
        ...options
    });
};

export const betaLicenseAgreementsGetInstance = <ThrowOnError extends boolean = false>(options: Options<BetaLicenseAgreementsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaLicenseAgreementsGetInstanceResponse, BetaLicenseAgreementsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaLicenseAgreements/{id}',
        ...options
    });
};

export const betaLicenseAgreementsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<BetaLicenseAgreementsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BetaLicenseAgreementsUpdateInstanceResponse, BetaLicenseAgreementsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaLicenseAgreements/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaRecruitmentCriteriaCreateInstance = <ThrowOnError extends boolean = false>(options: Options<BetaRecruitmentCriteriaCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BetaRecruitmentCriteriaCreateInstanceResponse, BetaRecruitmentCriteriaCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaRecruitmentCriteria',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaRecruitmentCriteriaDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<BetaRecruitmentCriteriaDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BetaRecruitmentCriteriaDeleteInstanceResponse, BetaRecruitmentCriteriaDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaRecruitmentCriteria/{id}',
        ...options
    });
};

export const betaRecruitmentCriteriaUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<BetaRecruitmentCriteriaUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BetaRecruitmentCriteriaUpdateInstanceResponse, BetaRecruitmentCriteriaUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaRecruitmentCriteria/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaRecruitmentCriterionOptionsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<BetaRecruitmentCriterionOptionsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BetaRecruitmentCriterionOptionsGetCollectionResponse, BetaRecruitmentCriterionOptionsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaRecruitmentCriterionOptions',
        ...options
    });
};

export const betaTesterInvitationsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<BetaTesterInvitationsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BetaTesterInvitationsCreateInstanceResponse, BetaTesterInvitationsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaTesterInvitations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaTestersGetCollection = <ThrowOnError extends boolean = false>(options?: Options<BetaTestersGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BetaTestersGetCollectionResponse, BetaTestersGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaTesters',
        ...options
    });
};

export const betaTestersCreateInstance = <ThrowOnError extends boolean = false>(options: Options<BetaTestersCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BetaTestersCreateInstanceResponse, BetaTestersCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaTesters',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaTestersDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<BetaTestersDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BetaTestersDeleteInstanceResponse, BetaTestersDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaTesters/{id}',
        ...options
    });
};

export const betaTestersGetInstance = <ThrowOnError extends boolean = false>(options: Options<BetaTestersGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaTestersGetInstanceResponse, BetaTestersGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaTesters/{id}',
        ...options
    });
};

export const buildBetaDetailsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<BuildBetaDetailsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BuildBetaDetailsGetCollectionResponse, BuildBetaDetailsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/buildBetaDetails',
        ...options
    });
};

export const buildBetaDetailsGetInstance = <ThrowOnError extends boolean = false>(options: Options<BuildBetaDetailsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BuildBetaDetailsGetInstanceResponse, BuildBetaDetailsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/buildBetaDetails/{id}',
        ...options
    });
};

export const buildBetaDetailsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<BuildBetaDetailsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BuildBetaDetailsUpdateInstanceResponse, BuildBetaDetailsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/buildBetaDetails/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const buildBetaNotificationsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<BuildBetaNotificationsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BuildBetaNotificationsCreateInstanceResponse, BuildBetaNotificationsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/buildBetaNotifications',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const buildsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<BuildsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BuildsGetCollectionResponse, BuildsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/builds',
        ...options
    });
};

export const buildsGetInstance = <ThrowOnError extends boolean = false>(options: Options<BuildsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BuildsGetInstanceResponse, BuildsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/builds/{id}',
        ...options
    });
};

export const buildsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<BuildsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BuildsUpdateInstanceResponse, BuildsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/builds/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const bundleIdCapabilitiesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<BundleIdCapabilitiesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BundleIdCapabilitiesCreateInstanceResponse, BundleIdCapabilitiesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/bundleIdCapabilities',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const bundleIdCapabilitiesDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<BundleIdCapabilitiesDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BundleIdCapabilitiesDeleteInstanceResponse, BundleIdCapabilitiesDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/bundleIdCapabilities/{id}',
        ...options
    });
};

export const bundleIdCapabilitiesUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<BundleIdCapabilitiesUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BundleIdCapabilitiesUpdateInstanceResponse, BundleIdCapabilitiesUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/bundleIdCapabilities/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const bundleIdsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<BundleIdsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BundleIdsGetCollectionResponse, BundleIdsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/bundleIds',
        ...options
    });
};

export const bundleIdsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<BundleIdsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BundleIdsCreateInstanceResponse, BundleIdsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/bundleIds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const bundleIdsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<BundleIdsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BundleIdsDeleteInstanceResponse, BundleIdsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/bundleIds/{id}',
        ...options
    });
};

export const bundleIdsGetInstance = <ThrowOnError extends boolean = false>(options: Options<BundleIdsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BundleIdsGetInstanceResponse, BundleIdsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/bundleIds/{id}',
        ...options
    });
};

export const bundleIdsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<BundleIdsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BundleIdsUpdateInstanceResponse, BundleIdsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/bundleIds/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const certificatesGetCollection = <ThrowOnError extends boolean = false>(options?: Options<CertificatesGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CertificatesGetCollectionResponse, CertificatesGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/certificates',
        ...options
    });
};

export const certificatesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<CertificatesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CertificatesCreateInstanceResponse, CertificatesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/certificates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const certificatesDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<CertificatesDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CertificatesDeleteInstanceResponse, CertificatesDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/certificates/{id}',
        ...options
    });
};

export const certificatesGetInstance = <ThrowOnError extends boolean = false>(options: Options<CertificatesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CertificatesGetInstanceResponse, CertificatesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/certificates/{id}',
        ...options
    });
};

export const certificatesUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<CertificatesUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CertificatesUpdateInstanceResponse, CertificatesUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/certificates/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const ciArtifactsGetInstance = <ThrowOnError extends boolean = false>(options: Options<CiArtifactsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiArtifactsGetInstanceResponse, CiArtifactsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciArtifacts/{id}',
        ...options
    });
};

export const ciBuildActionsGetInstance = <ThrowOnError extends boolean = false>(options: Options<CiBuildActionsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiBuildActionsGetInstanceResponse, CiBuildActionsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciBuildActions/{id}',
        ...options
    });
};

export const ciBuildRunsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<CiBuildRunsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CiBuildRunsCreateInstanceResponse, CiBuildRunsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ciBuildRuns',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const ciBuildRunsGetInstance = <ThrowOnError extends boolean = false>(options: Options<CiBuildRunsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiBuildRunsGetInstanceResponse, CiBuildRunsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciBuildRuns/{id}',
        ...options
    });
};

export const ciIssuesGetInstance = <ThrowOnError extends boolean = false>(options: Options<CiIssuesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiIssuesGetInstanceResponse, CiIssuesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciIssues/{id}',
        ...options
    });
};

export const ciMacOsVersionsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<CiMacOsVersionsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CiMacOsVersionsGetCollectionResponse, CiMacOsVersionsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciMacOsVersions',
        ...options
    });
};

export const ciMacOsVersionsGetInstance = <ThrowOnError extends boolean = false>(options: Options<CiMacOsVersionsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiMacOsVersionsGetInstanceResponse, CiMacOsVersionsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciMacOsVersions/{id}',
        ...options
    });
};

export const ciProductsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<CiProductsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CiProductsGetCollectionResponse, CiProductsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciProducts',
        ...options
    });
};

export const ciProductsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<CiProductsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CiProductsDeleteInstanceResponse, CiProductsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ciProducts/{id}',
        ...options
    });
};

export const ciProductsGetInstance = <ThrowOnError extends boolean = false>(options: Options<CiProductsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiProductsGetInstanceResponse, CiProductsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciProducts/{id}',
        ...options
    });
};

export const ciTestResultsGetInstance = <ThrowOnError extends boolean = false>(options: Options<CiTestResultsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiTestResultsGetInstanceResponse, CiTestResultsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciTestResults/{id}',
        ...options
    });
};

export const ciWorkflowsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<CiWorkflowsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CiWorkflowsCreateInstanceResponse, CiWorkflowsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ciWorkflows',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const ciWorkflowsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<CiWorkflowsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CiWorkflowsDeleteInstanceResponse, CiWorkflowsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ciWorkflows/{id}',
        ...options
    });
};

export const ciWorkflowsGetInstance = <ThrowOnError extends boolean = false>(options: Options<CiWorkflowsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiWorkflowsGetInstanceResponse, CiWorkflowsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciWorkflows/{id}',
        ...options
    });
};

export const ciWorkflowsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<CiWorkflowsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CiWorkflowsUpdateInstanceResponse, CiWorkflowsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/ciWorkflows/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const ciXcodeVersionsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<CiXcodeVersionsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CiXcodeVersionsGetCollectionResponse, CiXcodeVersionsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciXcodeVersions',
        ...options
    });
};

export const ciXcodeVersionsGetInstance = <ThrowOnError extends boolean = false>(options: Options<CiXcodeVersionsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiXcodeVersionsGetInstanceResponse, CiXcodeVersionsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciXcodeVersions/{id}',
        ...options
    });
};

export const customerReviewResponsesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<CustomerReviewResponsesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CustomerReviewResponsesCreateInstanceResponse, CustomerReviewResponsesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/customerReviewResponses',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const customerReviewResponsesDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<CustomerReviewResponsesDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CustomerReviewResponsesDeleteInstanceResponse, CustomerReviewResponsesDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/customerReviewResponses/{id}',
        ...options
    });
};

export const customerReviewResponsesGetInstance = <ThrowOnError extends boolean = false>(options: Options<CustomerReviewResponsesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CustomerReviewResponsesGetInstanceResponse, CustomerReviewResponsesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/customerReviewResponses/{id}',
        ...options
    });
};

export const customerReviewsGetInstance = <ThrowOnError extends boolean = false>(options: Options<CustomerReviewsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CustomerReviewsGetInstanceResponse, CustomerReviewsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/customerReviews/{id}',
        ...options
    });
};

export const devicesGetCollection = <ThrowOnError extends boolean = false>(options?: Options<DevicesGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DevicesGetCollectionResponse, DevicesGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/devices',
        ...options
    });
};

export const devicesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<DevicesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DevicesCreateInstanceResponse, DevicesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/devices',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const devicesGetInstance = <ThrowOnError extends boolean = false>(options: Options<DevicesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DevicesGetInstanceResponse, DevicesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/devices/{id}',
        ...options
    });
};

export const devicesUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<DevicesUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<DevicesUpdateInstanceResponse, DevicesUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/devices/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const endAppAvailabilityPreOrdersCreateInstance = <ThrowOnError extends boolean = false>(options: Options<EndAppAvailabilityPreOrdersCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EndAppAvailabilityPreOrdersCreateInstanceResponse, EndAppAvailabilityPreOrdersCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/endAppAvailabilityPreOrders',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const endUserLicenseAgreementsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<EndUserLicenseAgreementsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EndUserLicenseAgreementsCreateInstanceResponse, EndUserLicenseAgreementsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/endUserLicenseAgreements',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const endUserLicenseAgreementsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<EndUserLicenseAgreementsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<EndUserLicenseAgreementsDeleteInstanceResponse, EndUserLicenseAgreementsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/endUserLicenseAgreements/{id}',
        ...options
    });
};

export const endUserLicenseAgreementsGetInstance = <ThrowOnError extends boolean = false>(options: Options<EndUserLicenseAgreementsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EndUserLicenseAgreementsGetInstanceResponse, EndUserLicenseAgreementsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/endUserLicenseAgreements/{id}',
        ...options
    });
};

export const endUserLicenseAgreementsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<EndUserLicenseAgreementsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<EndUserLicenseAgreementsUpdateInstanceResponse, EndUserLicenseAgreementsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/endUserLicenseAgreements/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const financeReportsGetCollection = <ThrowOnError extends boolean = false>(options: Options<FinanceReportsGetCollectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FinanceReportsGetCollectionResponse, FinanceReportsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/financeReports',
        ...options
    });
};

export const gameCenterAchievementImagesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementImagesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterAchievementImagesCreateInstanceResponse, GameCenterAchievementImagesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterAchievementImages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterAchievementImagesDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementImagesDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GameCenterAchievementImagesDeleteInstanceResponse, GameCenterAchievementImagesDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterAchievementImages/{id}',
        ...options
    });
};

export const gameCenterAchievementImagesGetInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementImagesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterAchievementImagesGetInstanceResponse, GameCenterAchievementImagesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterAchievementImages/{id}',
        ...options
    });
};

export const gameCenterAchievementImagesUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementImagesUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterAchievementImagesUpdateInstanceResponse, GameCenterAchievementImagesUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterAchievementImages/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterAchievementLocalizationsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementLocalizationsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterAchievementLocalizationsCreateInstanceResponse, GameCenterAchievementLocalizationsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterAchievementLocalizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterAchievementLocalizationsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementLocalizationsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GameCenterAchievementLocalizationsDeleteInstanceResponse, GameCenterAchievementLocalizationsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterAchievementLocalizations/{id}',
        ...options
    });
};

export const gameCenterAchievementLocalizationsGetInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementLocalizationsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterAchievementLocalizationsGetInstanceResponse, GameCenterAchievementLocalizationsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterAchievementLocalizations/{id}',
        ...options
    });
};

export const gameCenterAchievementLocalizationsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementLocalizationsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterAchievementLocalizationsUpdateInstanceResponse, GameCenterAchievementLocalizationsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterAchievementLocalizations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterAchievementReleasesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementReleasesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterAchievementReleasesCreateInstanceResponse, GameCenterAchievementReleasesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterAchievementReleases',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterAchievementReleasesDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementReleasesDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GameCenterAchievementReleasesDeleteInstanceResponse, GameCenterAchievementReleasesDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterAchievementReleases/{id}',
        ...options
    });
};

export const gameCenterAchievementReleasesGetInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementReleasesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterAchievementReleasesGetInstanceResponse, GameCenterAchievementReleasesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterAchievementReleases/{id}',
        ...options
    });
};

export const gameCenterAchievementsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterAchievementsCreateInstanceResponse, GameCenterAchievementsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterAchievements',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterAchievementsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GameCenterAchievementsDeleteInstanceResponse, GameCenterAchievementsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterAchievements/{id}',
        ...options
    });
};

export const gameCenterAchievementsGetInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterAchievementsGetInstanceResponse, GameCenterAchievementsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterAchievements/{id}',
        ...options
    });
};

export const gameCenterAchievementsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterAchievementsUpdateInstanceResponse, GameCenterAchievementsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterAchievements/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterAppVersionsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterAppVersionsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterAppVersionsCreateInstanceResponse, GameCenterAppVersionsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterAppVersions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterAppVersionsGetInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterAppVersionsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterAppVersionsGetInstanceResponse, GameCenterAppVersionsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterAppVersions/{id}',
        ...options
    });
};

export const gameCenterAppVersionsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterAppVersionsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterAppVersionsUpdateInstanceResponse, GameCenterAppVersionsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterAppVersions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterDetailsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterDetailsCreateInstanceResponse, GameCenterDetailsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterDetails',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterDetailsGetInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterDetailsGetInstanceResponse, GameCenterDetailsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterDetails/{id}',
        ...options
    });
};

export const gameCenterDetailsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterDetailsUpdateInstanceResponse, GameCenterDetailsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterDetails/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterGroupsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<GameCenterGroupsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GameCenterGroupsGetCollectionResponse, GameCenterGroupsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterGroups',
        ...options
    });
};

export const gameCenterGroupsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterGroupsCreateInstanceResponse, GameCenterGroupsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterGroups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterGroupsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GameCenterGroupsDeleteInstanceResponse, GameCenterGroupsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterGroups/{id}',
        ...options
    });
};

export const gameCenterGroupsGetInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterGroupsGetInstanceResponse, GameCenterGroupsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterGroups/{id}',
        ...options
    });
};

export const gameCenterGroupsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterGroupsUpdateInstanceResponse, GameCenterGroupsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterGroups/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterLeaderboardEntrySubmissionsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardEntrySubmissionsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterLeaderboardEntrySubmissionsCreateInstanceResponse, GameCenterLeaderboardEntrySubmissionsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardEntrySubmissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterLeaderboardImagesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardImagesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterLeaderboardImagesCreateInstanceResponse, GameCenterLeaderboardImagesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardImages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterLeaderboardImagesDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardImagesDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GameCenterLeaderboardImagesDeleteInstanceResponse, GameCenterLeaderboardImagesDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardImages/{id}',
        ...options
    });
};

export const gameCenterLeaderboardImagesGetInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardImagesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterLeaderboardImagesGetInstanceResponse, GameCenterLeaderboardImagesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterLeaderboardImages/{id}',
        ...options
    });
};

export const gameCenterLeaderboardImagesUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardImagesUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterLeaderboardImagesUpdateInstanceResponse, GameCenterLeaderboardImagesUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardImages/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterLeaderboardLocalizationsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardLocalizationsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterLeaderboardLocalizationsCreateInstanceResponse, GameCenterLeaderboardLocalizationsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardLocalizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterLeaderboardLocalizationsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardLocalizationsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GameCenterLeaderboardLocalizationsDeleteInstanceResponse, GameCenterLeaderboardLocalizationsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardLocalizations/{id}',
        ...options
    });
};

export const gameCenterLeaderboardLocalizationsGetInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardLocalizationsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterLeaderboardLocalizationsGetInstanceResponse, GameCenterLeaderboardLocalizationsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterLeaderboardLocalizations/{id}',
        ...options
    });
};

export const gameCenterLeaderboardLocalizationsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardLocalizationsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterLeaderboardLocalizationsUpdateInstanceResponse, GameCenterLeaderboardLocalizationsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardLocalizations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterLeaderboardReleasesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardReleasesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterLeaderboardReleasesCreateInstanceResponse, GameCenterLeaderboardReleasesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardReleases',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterLeaderboardReleasesDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardReleasesDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GameCenterLeaderboardReleasesDeleteInstanceResponse, GameCenterLeaderboardReleasesDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardReleases/{id}',
        ...options
    });
};

export const gameCenterLeaderboardReleasesGetInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardReleasesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterLeaderboardReleasesGetInstanceResponse, GameCenterLeaderboardReleasesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterLeaderboardReleases/{id}',
        ...options
    });
};

export const gameCenterLeaderboardSetImagesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetImagesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterLeaderboardSetImagesCreateInstanceResponse, GameCenterLeaderboardSetImagesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardSetImages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterLeaderboardSetImagesDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetImagesDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GameCenterLeaderboardSetImagesDeleteInstanceResponse, GameCenterLeaderboardSetImagesDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardSetImages/{id}',
        ...options
    });
};

export const gameCenterLeaderboardSetImagesGetInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetImagesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterLeaderboardSetImagesGetInstanceResponse, GameCenterLeaderboardSetImagesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterLeaderboardSetImages/{id}',
        ...options
    });
};

export const gameCenterLeaderboardSetImagesUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetImagesUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterLeaderboardSetImagesUpdateInstanceResponse, GameCenterLeaderboardSetImagesUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardSetImages/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterLeaderboardSetLocalizationsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetLocalizationsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterLeaderboardSetLocalizationsCreateInstanceResponse, GameCenterLeaderboardSetLocalizationsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardSetLocalizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterLeaderboardSetLocalizationsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetLocalizationsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GameCenterLeaderboardSetLocalizationsDeleteInstanceResponse, GameCenterLeaderboardSetLocalizationsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardSetLocalizations/{id}',
        ...options
    });
};

export const gameCenterLeaderboardSetLocalizationsGetInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetLocalizationsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterLeaderboardSetLocalizationsGetInstanceResponse, GameCenterLeaderboardSetLocalizationsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterLeaderboardSetLocalizations/{id}',
        ...options
    });
};

export const gameCenterLeaderboardSetLocalizationsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetLocalizationsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterLeaderboardSetLocalizationsUpdateInstanceResponse, GameCenterLeaderboardSetLocalizationsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardSetLocalizations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterLeaderboardSetMemberLocalizationsGetCollection = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetMemberLocalizationsGetCollectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterLeaderboardSetMemberLocalizationsGetCollectionResponse, GameCenterLeaderboardSetMemberLocalizationsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterLeaderboardSetMemberLocalizations',
        ...options
    });
};

export const gameCenterLeaderboardSetMemberLocalizationsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetMemberLocalizationsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterLeaderboardSetMemberLocalizationsCreateInstanceResponse, GameCenterLeaderboardSetMemberLocalizationsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardSetMemberLocalizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterLeaderboardSetMemberLocalizationsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceResponse, GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardSetMemberLocalizations/{id}',
        ...options
    });
};

export const gameCenterLeaderboardSetMemberLocalizationsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceResponse, GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardSetMemberLocalizations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterLeaderboardSetReleasesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetReleasesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterLeaderboardSetReleasesCreateInstanceResponse, GameCenterLeaderboardSetReleasesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardSetReleases',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterLeaderboardSetReleasesDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetReleasesDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GameCenterLeaderboardSetReleasesDeleteInstanceResponse, GameCenterLeaderboardSetReleasesDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardSetReleases/{id}',
        ...options
    });
};

export const gameCenterLeaderboardSetReleasesGetInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetReleasesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterLeaderboardSetReleasesGetInstanceResponse, GameCenterLeaderboardSetReleasesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterLeaderboardSetReleases/{id}',
        ...options
    });
};

export const gameCenterLeaderboardSetsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterLeaderboardSetsCreateInstanceResponse, GameCenterLeaderboardSetsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardSets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterLeaderboardSetsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GameCenterLeaderboardSetsDeleteInstanceResponse, GameCenterLeaderboardSetsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardSets/{id}',
        ...options
    });
};

export const gameCenterLeaderboardSetsGetInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterLeaderboardSetsGetInstanceResponse, GameCenterLeaderboardSetsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterLeaderboardSets/{id}',
        ...options
    });
};

export const gameCenterLeaderboardSetsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterLeaderboardSetsUpdateInstanceResponse, GameCenterLeaderboardSetsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardSets/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterLeaderboardsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterLeaderboardsCreateInstanceResponse, GameCenterLeaderboardsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboards',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterLeaderboardsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GameCenterLeaderboardsDeleteInstanceResponse, GameCenterLeaderboardsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboards/{id}',
        ...options
    });
};

export const gameCenterLeaderboardsGetInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterLeaderboardsGetInstanceResponse, GameCenterLeaderboardsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterLeaderboards/{id}',
        ...options
    });
};

export const gameCenterLeaderboardsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterLeaderboardsUpdateInstanceResponse, GameCenterLeaderboardsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboards/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterMatchmakingQueuesGetCollection = <ThrowOnError extends boolean = false>(options?: Options<GameCenterMatchmakingQueuesGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GameCenterMatchmakingQueuesGetCollectionResponse, GameCenterMatchmakingQueuesGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterMatchmakingQueues',
        ...options
    });
};

export const gameCenterMatchmakingQueuesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingQueuesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterMatchmakingQueuesCreateInstanceResponse, GameCenterMatchmakingQueuesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterMatchmakingQueues',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterMatchmakingQueuesDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingQueuesDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GameCenterMatchmakingQueuesDeleteInstanceResponse, GameCenterMatchmakingQueuesDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterMatchmakingQueues/{id}',
        ...options
    });
};

export const gameCenterMatchmakingQueuesGetInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingQueuesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterMatchmakingQueuesGetInstanceResponse, GameCenterMatchmakingQueuesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterMatchmakingQueues/{id}',
        ...options
    });
};

export const gameCenterMatchmakingQueuesUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingQueuesUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterMatchmakingQueuesUpdateInstanceResponse, GameCenterMatchmakingQueuesUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterMatchmakingQueues/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterMatchmakingRuleSetTestsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRuleSetTestsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterMatchmakingRuleSetTestsCreateInstanceResponse, GameCenterMatchmakingRuleSetTestsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterMatchmakingRuleSetTests',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterMatchmakingRuleSetsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<GameCenterMatchmakingRuleSetsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GameCenterMatchmakingRuleSetsGetCollectionResponse, GameCenterMatchmakingRuleSetsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterMatchmakingRuleSets',
        ...options
    });
};

export const gameCenterMatchmakingRuleSetsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRuleSetsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterMatchmakingRuleSetsCreateInstanceResponse, GameCenterMatchmakingRuleSetsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterMatchmakingRuleSets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterMatchmakingRuleSetsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRuleSetsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GameCenterMatchmakingRuleSetsDeleteInstanceResponse, GameCenterMatchmakingRuleSetsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterMatchmakingRuleSets/{id}',
        ...options
    });
};

export const gameCenterMatchmakingRuleSetsGetInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRuleSetsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterMatchmakingRuleSetsGetInstanceResponse, GameCenterMatchmakingRuleSetsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterMatchmakingRuleSets/{id}',
        ...options
    });
};

export const gameCenterMatchmakingRuleSetsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRuleSetsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterMatchmakingRuleSetsUpdateInstanceResponse, GameCenterMatchmakingRuleSetsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterMatchmakingRuleSets/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterMatchmakingRulesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRulesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterMatchmakingRulesCreateInstanceResponse, GameCenterMatchmakingRulesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterMatchmakingRules',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterMatchmakingRulesDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRulesDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GameCenterMatchmakingRulesDeleteInstanceResponse, GameCenterMatchmakingRulesDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterMatchmakingRules/{id}',
        ...options
    });
};

export const gameCenterMatchmakingRulesUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRulesUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterMatchmakingRulesUpdateInstanceResponse, GameCenterMatchmakingRulesUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterMatchmakingRules/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterMatchmakingTeamsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingTeamsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterMatchmakingTeamsCreateInstanceResponse, GameCenterMatchmakingTeamsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterMatchmakingTeams',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterMatchmakingTeamsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingTeamsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GameCenterMatchmakingTeamsDeleteInstanceResponse, GameCenterMatchmakingTeamsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterMatchmakingTeams/{id}',
        ...options
    });
};

export const gameCenterMatchmakingTeamsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingTeamsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterMatchmakingTeamsUpdateInstanceResponse, GameCenterMatchmakingTeamsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterMatchmakingTeams/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterPlayerAchievementSubmissionsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<GameCenterPlayerAchievementSubmissionsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterPlayerAchievementSubmissionsCreateInstanceResponse, GameCenterPlayerAchievementSubmissionsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterPlayerAchievementSubmissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const inAppPurchaseAppStoreReviewScreenshotsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<InAppPurchaseAppStoreReviewScreenshotsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InAppPurchaseAppStoreReviewScreenshotsCreateInstanceResponse, InAppPurchaseAppStoreReviewScreenshotsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/inAppPurchaseAppStoreReviewScreenshots',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const inAppPurchaseAppStoreReviewScreenshotsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceResponse, InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/inAppPurchaseAppStoreReviewScreenshots/{id}',
        ...options
    });
};

export const inAppPurchaseAppStoreReviewScreenshotsGetInstance = <ThrowOnError extends boolean = false>(options: Options<InAppPurchaseAppStoreReviewScreenshotsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InAppPurchaseAppStoreReviewScreenshotsGetInstanceResponse, InAppPurchaseAppStoreReviewScreenshotsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/inAppPurchaseAppStoreReviewScreenshots/{id}',
        ...options
    });
};

export const inAppPurchaseAppStoreReviewScreenshotsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceResponse, InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/inAppPurchaseAppStoreReviewScreenshots/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const inAppPurchaseAvailabilitiesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<InAppPurchaseAvailabilitiesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InAppPurchaseAvailabilitiesCreateInstanceResponse, InAppPurchaseAvailabilitiesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/inAppPurchaseAvailabilities',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const inAppPurchaseAvailabilitiesGetInstance = <ThrowOnError extends boolean = false>(options: Options<InAppPurchaseAvailabilitiesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InAppPurchaseAvailabilitiesGetInstanceResponse, InAppPurchaseAvailabilitiesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/inAppPurchaseAvailabilities/{id}',
        ...options
    });
};

export const inAppPurchaseContentsGetInstance = <ThrowOnError extends boolean = false>(options: Options<InAppPurchaseContentsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InAppPurchaseContentsGetInstanceResponse, InAppPurchaseContentsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/inAppPurchaseContents/{id}',
        ...options
    });
};

export const inAppPurchaseImagesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<InAppPurchaseImagesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InAppPurchaseImagesCreateInstanceResponse, InAppPurchaseImagesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/inAppPurchaseImages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const inAppPurchaseImagesDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<InAppPurchaseImagesDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<InAppPurchaseImagesDeleteInstanceResponse, InAppPurchaseImagesDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/inAppPurchaseImages/{id}',
        ...options
    });
};

export const inAppPurchaseImagesGetInstance = <ThrowOnError extends boolean = false>(options: Options<InAppPurchaseImagesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InAppPurchaseImagesGetInstanceResponse, InAppPurchaseImagesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/inAppPurchaseImages/{id}',
        ...options
    });
};

export const inAppPurchaseImagesUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<InAppPurchaseImagesUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<InAppPurchaseImagesUpdateInstanceResponse, InAppPurchaseImagesUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/inAppPurchaseImages/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const inAppPurchaseLocalizationsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<InAppPurchaseLocalizationsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InAppPurchaseLocalizationsCreateInstanceResponse, InAppPurchaseLocalizationsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/inAppPurchaseLocalizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const inAppPurchaseLocalizationsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<InAppPurchaseLocalizationsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<InAppPurchaseLocalizationsDeleteInstanceResponse, InAppPurchaseLocalizationsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/inAppPurchaseLocalizations/{id}',
        ...options
    });
};

export const inAppPurchaseLocalizationsGetInstance = <ThrowOnError extends boolean = false>(options: Options<InAppPurchaseLocalizationsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InAppPurchaseLocalizationsGetInstanceResponse, InAppPurchaseLocalizationsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/inAppPurchaseLocalizations/{id}',
        ...options
    });
};

export const inAppPurchaseLocalizationsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<InAppPurchaseLocalizationsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<InAppPurchaseLocalizationsUpdateInstanceResponse, InAppPurchaseLocalizationsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/inAppPurchaseLocalizations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const inAppPurchasePriceSchedulesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<InAppPurchasePriceSchedulesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InAppPurchasePriceSchedulesCreateInstanceResponse, InAppPurchasePriceSchedulesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/inAppPurchasePriceSchedules',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const inAppPurchasePriceSchedulesGetInstance = <ThrowOnError extends boolean = false>(options: Options<InAppPurchasePriceSchedulesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InAppPurchasePriceSchedulesGetInstanceResponse, InAppPurchasePriceSchedulesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/inAppPurchasePriceSchedules/{id}',
        ...options
    });
};

export const inAppPurchaseSubmissionsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<InAppPurchaseSubmissionsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InAppPurchaseSubmissionsCreateInstanceResponse, InAppPurchaseSubmissionsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/inAppPurchaseSubmissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 */
export const inAppPurchasesGetInstance = <ThrowOnError extends boolean = false>(options: Options<InAppPurchasesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InAppPurchasesGetInstanceResponse, InAppPurchasesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/inAppPurchases/{id}',
        ...options
    });
};

export const inAppPurchasesV2CreateInstance = <ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2CreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InAppPurchasesV2CreateInstanceResponse, InAppPurchasesV2CreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v2/inAppPurchases',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const inAppPurchasesV2DeleteInstance = <ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2DeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<InAppPurchasesV2DeleteInstanceResponse, InAppPurchasesV2DeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v2/inAppPurchases/{id}',
        ...options
    });
};

export const inAppPurchasesV2GetInstance = <ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2GetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InAppPurchasesV2GetInstanceResponse, InAppPurchasesV2GetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v2/inAppPurchases/{id}',
        ...options
    });
};

export const inAppPurchasesV2UpdateInstance = <ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2UpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<InAppPurchasesV2UpdateInstanceResponse, InAppPurchasesV2UpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v2/inAppPurchases/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 */
export const marketplaceDomainsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceDomainsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceDomainsGetCollectionResponse, MarketplaceDomainsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/marketplaceDomains',
        ...options
    });
};

/**
 * @deprecated
 */
export const marketplaceDomainsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<MarketplaceDomainsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceDomainsCreateInstanceResponse, MarketplaceDomainsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/marketplaceDomains',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 */
export const marketplaceDomainsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<MarketplaceDomainsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceDomainsDeleteInstanceResponse, MarketplaceDomainsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/marketplaceDomains/{id}',
        ...options
    });
};

/**
 * @deprecated
 */
export const marketplaceDomainsGetInstance = <ThrowOnError extends boolean = false>(options: Options<MarketplaceDomainsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarketplaceDomainsGetInstanceResponse, MarketplaceDomainsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/marketplaceDomains/{id}',
        ...options
    });
};

export const marketplaceSearchDetailsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<MarketplaceSearchDetailsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceSearchDetailsCreateInstanceResponse, MarketplaceSearchDetailsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/marketplaceSearchDetails',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceSearchDetailsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<MarketplaceSearchDetailsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceSearchDetailsDeleteInstanceResponse, MarketplaceSearchDetailsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/marketplaceSearchDetails/{id}',
        ...options
    });
};

export const marketplaceSearchDetailsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<MarketplaceSearchDetailsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceSearchDetailsUpdateInstanceResponse, MarketplaceSearchDetailsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/marketplaceSearchDetails/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceWebhooksGetCollection = <ThrowOnError extends boolean = false>(options?: Options<MarketplaceWebhooksGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MarketplaceWebhooksGetCollectionResponse, MarketplaceWebhooksGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/marketplaceWebhooks',
        ...options
    });
};

export const marketplaceWebhooksCreateInstance = <ThrowOnError extends boolean = false>(options: Options<MarketplaceWebhooksCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MarketplaceWebhooksCreateInstanceResponse, MarketplaceWebhooksCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/marketplaceWebhooks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const marketplaceWebhooksDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<MarketplaceWebhooksDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MarketplaceWebhooksDeleteInstanceResponse, MarketplaceWebhooksDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/marketplaceWebhooks/{id}',
        ...options
    });
};

export const marketplaceWebhooksUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<MarketplaceWebhooksUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MarketplaceWebhooksUpdateInstanceResponse, MarketplaceWebhooksUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/marketplaceWebhooks/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const merchantIdsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<MerchantIdsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MerchantIdsGetCollectionResponse, MerchantIdsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/merchantIds',
        ...options
    });
};

export const merchantIdsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<MerchantIdsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MerchantIdsCreateInstanceResponse, MerchantIdsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/merchantIds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const merchantIdsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<MerchantIdsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MerchantIdsDeleteInstanceResponse, MerchantIdsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/merchantIds/{id}',
        ...options
    });
};

export const merchantIdsGetInstance = <ThrowOnError extends boolean = false>(options: Options<MerchantIdsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MerchantIdsGetInstanceResponse, MerchantIdsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/merchantIds/{id}',
        ...options
    });
};

export const merchantIdsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<MerchantIdsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<MerchantIdsUpdateInstanceResponse, MerchantIdsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/merchantIds/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const nominationsGetCollection = <ThrowOnError extends boolean = false>(options: Options<NominationsGetCollectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<NominationsGetCollectionResponse, NominationsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/nominations',
        ...options
    });
};

export const nominationsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<NominationsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<NominationsCreateInstanceResponse, NominationsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/nominations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const nominationsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<NominationsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<NominationsDeleteInstanceResponse, NominationsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/nominations/{id}',
        ...options
    });
};

export const nominationsGetInstance = <ThrowOnError extends boolean = false>(options: Options<NominationsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<NominationsGetInstanceResponse, NominationsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/nominations/{id}',
        ...options
    });
};

export const nominationsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<NominationsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<NominationsUpdateInstanceResponse, NominationsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/nominations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const preReleaseVersionsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<PreReleaseVersionsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PreReleaseVersionsGetCollectionResponse, PreReleaseVersionsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/preReleaseVersions',
        ...options
    });
};

export const preReleaseVersionsGetInstance = <ThrowOnError extends boolean = false>(options: Options<PreReleaseVersionsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PreReleaseVersionsGetInstanceResponse, PreReleaseVersionsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/preReleaseVersions/{id}',
        ...options
    });
};

export const profilesGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ProfilesGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProfilesGetCollectionResponse, ProfilesGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/profiles',
        ...options
    });
};

export const profilesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<ProfilesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProfilesCreateInstanceResponse, ProfilesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/profiles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const profilesDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<ProfilesDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ProfilesDeleteInstanceResponse, ProfilesDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/profiles/{id}',
        ...options
    });
};

export const profilesGetInstance = <ThrowOnError extends boolean = false>(options: Options<ProfilesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProfilesGetInstanceResponse, ProfilesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/profiles/{id}',
        ...options
    });
};

export const promotedPurchasesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<PromotedPurchasesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PromotedPurchasesCreateInstanceResponse, PromotedPurchasesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/promotedPurchases',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const promotedPurchasesDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<PromotedPurchasesDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<PromotedPurchasesDeleteInstanceResponse, PromotedPurchasesDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/promotedPurchases/{id}',
        ...options
    });
};

export const promotedPurchasesGetInstance = <ThrowOnError extends boolean = false>(options: Options<PromotedPurchasesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PromotedPurchasesGetInstanceResponse, PromotedPurchasesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/promotedPurchases/{id}',
        ...options
    });
};

export const promotedPurchasesUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<PromotedPurchasesUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PromotedPurchasesUpdateInstanceResponse, PromotedPurchasesUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/promotedPurchases/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const reviewSubmissionItemsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<ReviewSubmissionItemsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ReviewSubmissionItemsCreateInstanceResponse, ReviewSubmissionItemsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reviewSubmissionItems',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const reviewSubmissionItemsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<ReviewSubmissionItemsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ReviewSubmissionItemsDeleteInstanceResponse, ReviewSubmissionItemsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reviewSubmissionItems/{id}',
        ...options
    });
};

export const reviewSubmissionItemsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<ReviewSubmissionItemsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ReviewSubmissionItemsUpdateInstanceResponse, ReviewSubmissionItemsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reviewSubmissionItems/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const reviewSubmissionsGetCollection = <ThrowOnError extends boolean = false>(options: Options<ReviewSubmissionsGetCollectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReviewSubmissionsGetCollectionResponse, ReviewSubmissionsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/reviewSubmissions',
        ...options
    });
};

export const reviewSubmissionsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<ReviewSubmissionsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ReviewSubmissionsCreateInstanceResponse, ReviewSubmissionsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reviewSubmissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const reviewSubmissionsGetInstance = <ThrowOnError extends boolean = false>(options: Options<ReviewSubmissionsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReviewSubmissionsGetInstanceResponse, ReviewSubmissionsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/reviewSubmissions/{id}',
        ...options
    });
};

export const reviewSubmissionsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<ReviewSubmissionsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ReviewSubmissionsUpdateInstanceResponse, ReviewSubmissionsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/reviewSubmissions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const routingAppCoveragesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<RoutingAppCoveragesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RoutingAppCoveragesCreateInstanceResponse, RoutingAppCoveragesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/routingAppCoverages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const routingAppCoveragesDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<RoutingAppCoveragesDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RoutingAppCoveragesDeleteInstanceResponse, RoutingAppCoveragesDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/routingAppCoverages/{id}',
        ...options
    });
};

export const routingAppCoveragesGetInstance = <ThrowOnError extends boolean = false>(options: Options<RoutingAppCoveragesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RoutingAppCoveragesGetInstanceResponse, RoutingAppCoveragesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/routingAppCoverages/{id}',
        ...options
    });
};

export const routingAppCoveragesUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<RoutingAppCoveragesUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RoutingAppCoveragesUpdateInstanceResponse, RoutingAppCoveragesUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/routingAppCoverages/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const salesReportsGetCollection = <ThrowOnError extends boolean = false>(options: Options<SalesReportsGetCollectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SalesReportsGetCollectionResponse, SalesReportsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/salesReports',
        ...options
    });
};

export const sandboxTestersV2GetCollection = <ThrowOnError extends boolean = false>(options?: Options<SandboxTestersV2GetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SandboxTestersV2GetCollectionResponse, SandboxTestersV2GetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v2/sandboxTesters',
        ...options
    });
};

export const sandboxTestersV2UpdateInstance = <ThrowOnError extends boolean = false>(options: Options<SandboxTestersV2UpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SandboxTestersV2UpdateInstanceResponse, SandboxTestersV2UpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v2/sandboxTesters/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const sandboxTestersClearPurchaseHistoryRequestV2CreateInstance = <ThrowOnError extends boolean = false>(options: Options<SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceResponse, SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v2/sandboxTestersClearPurchaseHistoryRequest',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const scmGitReferencesGetInstance = <ThrowOnError extends boolean = false>(options: Options<ScmGitReferencesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ScmGitReferencesGetInstanceResponse, ScmGitReferencesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/scmGitReferences/{id}',
        ...options
    });
};

export const scmProvidersGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ScmProvidersGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ScmProvidersGetCollectionResponse, ScmProvidersGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/scmProviders',
        ...options
    });
};

export const scmProvidersGetInstance = <ThrowOnError extends boolean = false>(options: Options<ScmProvidersGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ScmProvidersGetInstanceResponse, ScmProvidersGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/scmProviders/{id}',
        ...options
    });
};

export const scmPullRequestsGetInstance = <ThrowOnError extends boolean = false>(options: Options<ScmPullRequestsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ScmPullRequestsGetInstanceResponse, ScmPullRequestsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/scmPullRequests/{id}',
        ...options
    });
};

export const scmRepositoriesGetCollection = <ThrowOnError extends boolean = false>(options?: Options<ScmRepositoriesGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ScmRepositoriesGetCollectionResponse, ScmRepositoriesGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/scmRepositories',
        ...options
    });
};

export const scmRepositoriesGetInstance = <ThrowOnError extends boolean = false>(options: Options<ScmRepositoriesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ScmRepositoriesGetInstanceResponse, ScmRepositoriesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/scmRepositories/{id}',
        ...options
    });
};

export const subscriptionAppStoreReviewScreenshotsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionAppStoreReviewScreenshotsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubscriptionAppStoreReviewScreenshotsCreateInstanceResponse, SubscriptionAppStoreReviewScreenshotsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionAppStoreReviewScreenshots',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionAppStoreReviewScreenshotsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionAppStoreReviewScreenshotsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SubscriptionAppStoreReviewScreenshotsDeleteInstanceResponse, SubscriptionAppStoreReviewScreenshotsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionAppStoreReviewScreenshots/{id}',
        ...options
    });
};

export const subscriptionAppStoreReviewScreenshotsGetInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionAppStoreReviewScreenshotsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionAppStoreReviewScreenshotsGetInstanceResponse, SubscriptionAppStoreReviewScreenshotsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptionAppStoreReviewScreenshots/{id}',
        ...options
    });
};

export const subscriptionAppStoreReviewScreenshotsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionAppStoreReviewScreenshotsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SubscriptionAppStoreReviewScreenshotsUpdateInstanceResponse, SubscriptionAppStoreReviewScreenshotsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionAppStoreReviewScreenshots/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionAvailabilitiesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionAvailabilitiesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubscriptionAvailabilitiesCreateInstanceResponse, SubscriptionAvailabilitiesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionAvailabilities',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionAvailabilitiesGetInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionAvailabilitiesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionAvailabilitiesGetInstanceResponse, SubscriptionAvailabilitiesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptionAvailabilities/{id}',
        ...options
    });
};

export const subscriptionGracePeriodsGetInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionGracePeriodsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionGracePeriodsGetInstanceResponse, SubscriptionGracePeriodsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptionGracePeriods/{id}',
        ...options
    });
};

export const subscriptionGracePeriodsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionGracePeriodsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SubscriptionGracePeriodsUpdateInstanceResponse, SubscriptionGracePeriodsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionGracePeriods/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionGroupLocalizationsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupLocalizationsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubscriptionGroupLocalizationsCreateInstanceResponse, SubscriptionGroupLocalizationsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionGroupLocalizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionGroupLocalizationsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupLocalizationsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SubscriptionGroupLocalizationsDeleteInstanceResponse, SubscriptionGroupLocalizationsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionGroupLocalizations/{id}',
        ...options
    });
};

export const subscriptionGroupLocalizationsGetInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupLocalizationsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionGroupLocalizationsGetInstanceResponse, SubscriptionGroupLocalizationsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptionGroupLocalizations/{id}',
        ...options
    });
};

export const subscriptionGroupLocalizationsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupLocalizationsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SubscriptionGroupLocalizationsUpdateInstanceResponse, SubscriptionGroupLocalizationsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionGroupLocalizations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionGroupSubmissionsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupSubmissionsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubscriptionGroupSubmissionsCreateInstanceResponse, SubscriptionGroupSubmissionsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionGroupSubmissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionGroupsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubscriptionGroupsCreateInstanceResponse, SubscriptionGroupsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionGroups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionGroupsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SubscriptionGroupsDeleteInstanceResponse, SubscriptionGroupsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionGroups/{id}',
        ...options
    });
};

export const subscriptionGroupsGetInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionGroupsGetInstanceResponse, SubscriptionGroupsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptionGroups/{id}',
        ...options
    });
};

export const subscriptionGroupsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SubscriptionGroupsUpdateInstanceResponse, SubscriptionGroupsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionGroups/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionImagesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionImagesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubscriptionImagesCreateInstanceResponse, SubscriptionImagesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionImages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionImagesDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionImagesDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SubscriptionImagesDeleteInstanceResponse, SubscriptionImagesDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionImages/{id}',
        ...options
    });
};

export const subscriptionImagesGetInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionImagesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionImagesGetInstanceResponse, SubscriptionImagesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptionImages/{id}',
        ...options
    });
};

export const subscriptionImagesUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionImagesUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SubscriptionImagesUpdateInstanceResponse, SubscriptionImagesUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionImages/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionIntroductoryOffersCreateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionIntroductoryOffersCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubscriptionIntroductoryOffersCreateInstanceResponse, SubscriptionIntroductoryOffersCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionIntroductoryOffers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionIntroductoryOffersDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionIntroductoryOffersDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SubscriptionIntroductoryOffersDeleteInstanceResponse, SubscriptionIntroductoryOffersDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionIntroductoryOffers/{id}',
        ...options
    });
};

export const subscriptionIntroductoryOffersUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionIntroductoryOffersUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SubscriptionIntroductoryOffersUpdateInstanceResponse, SubscriptionIntroductoryOffersUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionIntroductoryOffers/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionLocalizationsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionLocalizationsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubscriptionLocalizationsCreateInstanceResponse, SubscriptionLocalizationsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionLocalizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionLocalizationsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionLocalizationsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SubscriptionLocalizationsDeleteInstanceResponse, SubscriptionLocalizationsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionLocalizations/{id}',
        ...options
    });
};

export const subscriptionLocalizationsGetInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionLocalizationsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionLocalizationsGetInstanceResponse, SubscriptionLocalizationsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptionLocalizations/{id}',
        ...options
    });
};

export const subscriptionLocalizationsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionLocalizationsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SubscriptionLocalizationsUpdateInstanceResponse, SubscriptionLocalizationsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionLocalizations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionOfferCodeCustomCodesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodeCustomCodesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubscriptionOfferCodeCustomCodesCreateInstanceResponse, SubscriptionOfferCodeCustomCodesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionOfferCodeCustomCodes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionOfferCodeCustomCodesGetInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodeCustomCodesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionOfferCodeCustomCodesGetInstanceResponse, SubscriptionOfferCodeCustomCodesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptionOfferCodeCustomCodes/{id}',
        ...options
    });
};

export const subscriptionOfferCodeCustomCodesUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodeCustomCodesUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SubscriptionOfferCodeCustomCodesUpdateInstanceResponse, SubscriptionOfferCodeCustomCodesUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionOfferCodeCustomCodes/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionOfferCodeOneTimeUseCodesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodeOneTimeUseCodesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubscriptionOfferCodeOneTimeUseCodesCreateInstanceResponse, SubscriptionOfferCodeOneTimeUseCodesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionOfferCodeOneTimeUseCodes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionOfferCodeOneTimeUseCodesGetInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodeOneTimeUseCodesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionOfferCodeOneTimeUseCodesGetInstanceResponse, SubscriptionOfferCodeOneTimeUseCodesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptionOfferCodeOneTimeUseCodes/{id}',
        ...options
    });
};

export const subscriptionOfferCodeOneTimeUseCodesUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceResponse, SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionOfferCodeOneTimeUseCodes/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionOfferCodesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubscriptionOfferCodesCreateInstanceResponse, SubscriptionOfferCodesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionOfferCodes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionOfferCodesGetInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodesGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionOfferCodesGetInstanceResponse, SubscriptionOfferCodesGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptionOfferCodes/{id}',
        ...options
    });
};

export const subscriptionOfferCodesUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodesUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SubscriptionOfferCodesUpdateInstanceResponse, SubscriptionOfferCodesUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionOfferCodes/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionPricePointsGetInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionPricePointsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionPricePointsGetInstanceResponse, SubscriptionPricePointsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptionPricePoints/{id}',
        ...options
    });
};

export const subscriptionPricesCreateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionPricesCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubscriptionPricesCreateInstanceResponse, SubscriptionPricesCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionPrices',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionPricesDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionPricesDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SubscriptionPricesDeleteInstanceResponse, SubscriptionPricesDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionPrices/{id}',
        ...options
    });
};

export const subscriptionPromotionalOffersCreateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionPromotionalOffersCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubscriptionPromotionalOffersCreateInstanceResponse, SubscriptionPromotionalOffersCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionPromotionalOffers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionPromotionalOffersDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionPromotionalOffersDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SubscriptionPromotionalOffersDeleteInstanceResponse, SubscriptionPromotionalOffersDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionPromotionalOffers/{id}',
        ...options
    });
};

export const subscriptionPromotionalOffersGetInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionPromotionalOffersGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionPromotionalOffersGetInstanceResponse, SubscriptionPromotionalOffersGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptionPromotionalOffers/{id}',
        ...options
    });
};

export const subscriptionPromotionalOffersUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionPromotionalOffersUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SubscriptionPromotionalOffersUpdateInstanceResponse, SubscriptionPromotionalOffersUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionPromotionalOffers/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionSubmissionsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionSubmissionsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubscriptionSubmissionsCreateInstanceResponse, SubscriptionSubmissionsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionSubmissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubscriptionsCreateInstanceResponse, SubscriptionsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SubscriptionsDeleteInstanceResponse, SubscriptionsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptions/{id}',
        ...options
    });
};

export const subscriptionsGetInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionsGetInstanceResponse, SubscriptionsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptions/{id}',
        ...options
    });
};

export const subscriptionsUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<SubscriptionsUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SubscriptionsUpdateInstanceResponse, SubscriptionsUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const territoriesGetCollection = <ThrowOnError extends boolean = false>(options?: Options<TerritoriesGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TerritoriesGetCollectionResponse, TerritoriesGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/territories',
        ...options
    });
};

export const territoryAvailabilitiesUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<TerritoryAvailabilitiesUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<TerritoryAvailabilitiesUpdateInstanceResponse, TerritoryAvailabilitiesUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/territoryAvailabilities/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const userInvitationsGetCollection = <ThrowOnError extends boolean = false>(options?: Options<UserInvitationsGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserInvitationsGetCollectionResponse, UserInvitationsGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/userInvitations',
        ...options
    });
};

export const userInvitationsCreateInstance = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserInvitationsCreateInstanceResponse, UserInvitationsCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/userInvitations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const userInvitationsDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UserInvitationsDeleteInstanceResponse, UserInvitationsDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/userInvitations/{id}',
        ...options
    });
};

export const userInvitationsGetInstance = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserInvitationsGetInstanceResponse, UserInvitationsGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/userInvitations/{id}',
        ...options
    });
};

export const usersGetCollection = <ThrowOnError extends boolean = false>(options?: Options<UsersGetCollectionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersGetCollectionResponse, UsersGetCollectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/users',
        ...options
    });
};

export const usersDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<UsersDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersDeleteInstanceResponse, UsersDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{id}',
        ...options
    });
};

export const usersGetInstance = <ThrowOnError extends boolean = false>(options: Options<UsersGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersGetInstanceResponse, UsersGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/users/{id}',
        ...options
    });
};

export const usersUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<UsersUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersUpdateInstanceResponse, UsersUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const winBackOffersCreateInstance = <ThrowOnError extends boolean = false>(options: Options<WinBackOffersCreateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WinBackOffersCreateInstanceResponse, WinBackOffersCreateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/winBackOffers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const winBackOffersDeleteInstance = <ThrowOnError extends boolean = false>(options: Options<WinBackOffersDeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<WinBackOffersDeleteInstanceResponse, WinBackOffersDeleteInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/winBackOffers/{id}',
        ...options
    });
};

export const winBackOffersGetInstance = <ThrowOnError extends boolean = false>(options: Options<WinBackOffersGetInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WinBackOffersGetInstanceResponse, WinBackOffersGetInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/winBackOffers/{id}',
        ...options
    });
};

export const winBackOffersUpdateInstance = <ThrowOnError extends boolean = false>(options: Options<WinBackOffersUpdateInstanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<WinBackOffersUpdateInstanceResponse, WinBackOffersUpdateInstanceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/winBackOffers/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const alternativeDistributionPackageVersionsDeltasGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionPackageVersionsDeltasGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AlternativeDistributionPackageVersionsDeltasGetToManyRelatedResponse, AlternativeDistributionPackageVersionsDeltasGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/alternativeDistributionPackageVersions/{id}/deltas',
        ...options
    });
};

export const alternativeDistributionPackageVersionsVariantsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionPackageVersionsVariantsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AlternativeDistributionPackageVersionsVariantsGetToManyRelatedResponse, AlternativeDistributionPackageVersionsVariantsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/alternativeDistributionPackageVersions/{id}/variants',
        ...options
    });
};

export const alternativeDistributionPackagesVersionsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionPackagesVersionsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AlternativeDistributionPackagesVersionsGetToManyRelatedResponse, AlternativeDistributionPackagesVersionsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/alternativeDistributionPackages/{id}/versions',
        ...options
    });
};

export const analyticsReportInstancesSegmentsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AnalyticsReportInstancesSegmentsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AnalyticsReportInstancesSegmentsGetToManyRelatedResponse, AnalyticsReportInstancesSegmentsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/analyticsReportInstances/{id}/segments',
        ...options
    });
};

export const analyticsReportRequestsReportsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AnalyticsReportRequestsReportsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AnalyticsReportRequestsReportsGetToManyRelatedResponse, AnalyticsReportRequestsReportsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/analyticsReportRequests/{id}/reports',
        ...options
    });
};

export const analyticsReportsInstancesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AnalyticsReportsInstancesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AnalyticsReportsInstancesGetToManyRelatedResponse, AnalyticsReportsInstancesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/analyticsReports/{id}/instances',
        ...options
    });
};

export const appAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedResponse, AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v2/appAvailabilities/{id}/territoryAvailabilities',
        ...options
    });
};

export const appCategoriesParentGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppCategoriesParentGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppCategoriesParentGetToOneRelatedResponse, AppCategoriesParentGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appCategories/{id}/parent',
        ...options
    });
};

export const appCategoriesSubcategoriesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppCategoriesSubcategoriesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppCategoriesSubcategoriesGetToManyRelatedResponse, AppCategoriesSubcategoriesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appCategories/{id}/subcategories',
        ...options
    });
};

export const appClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedResponse, AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appClipDefaultExperienceLocalizations/{id}/appClipHeaderImage',
        ...options
    });
};

export const appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedResponse, AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appClipDefaultExperiences/{id}/appClipAppStoreReviewDetail',
        ...options
    });
};

export const appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedResponse, AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appClipDefaultExperiences/{id}/appClipDefaultExperienceLocalizations',
        ...options
    });
};

export const appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationship = <ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipResponse, AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion',
        ...options
    });
};

export const appClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship = <ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipResponse, AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedResponse, AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appClipDefaultExperiences/{id}/releaseWithAppStoreVersion',
        ...options
    });
};

export const appClipsAppClipAdvancedExperiencesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppClipsAppClipAdvancedExperiencesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppClipsAppClipAdvancedExperiencesGetToManyRelatedResponse, AppClipsAppClipAdvancedExperiencesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appClips/{id}/appClipAdvancedExperiences',
        ...options
    });
};

export const appClipsAppClipDefaultExperiencesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppClipsAppClipDefaultExperiencesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppClipsAppClipDefaultExperiencesGetToManyRelatedResponse, AppClipsAppClipDefaultExperiencesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appClips/{id}/appClipDefaultExperiences',
        ...options
    });
};

export const appCustomProductPageLocalizationsAppPreviewSetsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedResponse, AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appCustomProductPageLocalizations/{id}/appPreviewSets',
        ...options
    });
};

export const appCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedResponse, AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appCustomProductPageLocalizations/{id}/appScreenshotSets',
        ...options
    });
};

export const appCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedResponse, AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appCustomProductPageVersions/{id}/appCustomProductPageLocalizations',
        ...options
    });
};

export const appCustomProductPagesAppCustomProductPageVersionsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedResponse, AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appCustomProductPages/{id}/appCustomProductPageVersions',
        ...options
    });
};

/**
 * @deprecated
 */
export const appEncryptionDeclarationsAppGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppEncryptionDeclarationsAppGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppEncryptionDeclarationsAppGetToOneRelatedResponse, AppEncryptionDeclarationsAppGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appEncryptionDeclarations/{id}/app',
        ...options
    });
};

export const appEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedResponse, AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appEncryptionDeclarations/{id}/appEncryptionDeclarationDocument',
        ...options
    });
};

/**
 * @deprecated
 */
export const appEncryptionDeclarationsBuildsCreateToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<AppEncryptionDeclarationsBuildsCreateToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AppEncryptionDeclarationsBuildsCreateToManyRelationshipResponse, AppEncryptionDeclarationsBuildsCreateToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appEncryptionDeclarations/{id}/relationships/builds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appEventLocalizationsAppEventScreenshotsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppEventLocalizationsAppEventScreenshotsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppEventLocalizationsAppEventScreenshotsGetToManyRelatedResponse, AppEventLocalizationsAppEventScreenshotsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appEventLocalizations/{id}/appEventScreenshots',
        ...options
    });
};

export const appEventLocalizationsAppEventVideoClipsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppEventLocalizationsAppEventVideoClipsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppEventLocalizationsAppEventVideoClipsGetToManyRelatedResponse, AppEventLocalizationsAppEventVideoClipsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appEventLocalizations/{id}/appEventVideoClips',
        ...options
    });
};

export const appEventsLocalizationsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppEventsLocalizationsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppEventsLocalizationsGetToManyRelatedResponse, AppEventsLocalizationsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appEvents/{id}/localizations',
        ...options
    });
};

export const appInfosAgeRatingDeclarationGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppInfosAgeRatingDeclarationGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppInfosAgeRatingDeclarationGetToOneRelatedResponse, AppInfosAgeRatingDeclarationGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appInfos/{id}/ageRatingDeclaration',
        ...options
    });
};

export const appInfosAppInfoLocalizationsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppInfosAppInfoLocalizationsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppInfosAppInfoLocalizationsGetToManyRelatedResponse, AppInfosAppInfoLocalizationsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appInfos/{id}/appInfoLocalizations',
        ...options
    });
};

export const appInfosPrimaryCategoryGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppInfosPrimaryCategoryGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppInfosPrimaryCategoryGetToOneRelatedResponse, AppInfosPrimaryCategoryGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appInfos/{id}/primaryCategory',
        ...options
    });
};

export const appInfosPrimarySubcategoryOneGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppInfosPrimarySubcategoryOneGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppInfosPrimarySubcategoryOneGetToOneRelatedResponse, AppInfosPrimarySubcategoryOneGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appInfos/{id}/primarySubcategoryOne',
        ...options
    });
};

export const appInfosPrimarySubcategoryTwoGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppInfosPrimarySubcategoryTwoGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppInfosPrimarySubcategoryTwoGetToOneRelatedResponse, AppInfosPrimarySubcategoryTwoGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appInfos/{id}/primarySubcategoryTwo',
        ...options
    });
};

export const appInfosSecondaryCategoryGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppInfosSecondaryCategoryGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppInfosSecondaryCategoryGetToOneRelatedResponse, AppInfosSecondaryCategoryGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appInfos/{id}/secondaryCategory',
        ...options
    });
};

export const appInfosSecondarySubcategoryOneGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppInfosSecondarySubcategoryOneGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppInfosSecondarySubcategoryOneGetToOneRelatedResponse, AppInfosSecondarySubcategoryOneGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appInfos/{id}/secondarySubcategoryOne',
        ...options
    });
};

export const appInfosSecondarySubcategoryTwoGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppInfosSecondarySubcategoryTwoGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppInfosSecondarySubcategoryTwoGetToOneRelatedResponse, AppInfosSecondarySubcategoryTwoGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appInfos/{id}/secondarySubcategoryTwo',
        ...options
    });
};

export const appPreviewSetsAppPreviewsGetToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<AppPreviewSetsAppPreviewsGetToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppPreviewSetsAppPreviewsGetToManyRelationshipResponse, AppPreviewSetsAppPreviewsGetToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appPreviewSets/{id}/relationships/appPreviews',
        ...options
    });
};

export const appPreviewSetsAppPreviewsReplaceToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<AppPreviewSetsAppPreviewsReplaceToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppPreviewSetsAppPreviewsReplaceToManyRelationshipResponse, AppPreviewSetsAppPreviewsReplaceToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appPreviewSets/{id}/relationships/appPreviews',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appPreviewSetsAppPreviewsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppPreviewSetsAppPreviewsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppPreviewSetsAppPreviewsGetToManyRelatedResponse, AppPreviewSetsAppPreviewsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appPreviewSets/{id}/appPreviews',
        ...options
    });
};

export const appPricePointsV3EqualizationsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppPricePointsV3EqualizationsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppPricePointsV3EqualizationsGetToManyRelatedResponse, AppPricePointsV3EqualizationsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v3/appPricePoints/{id}/equalizations',
        ...options
    });
};

export const appPriceSchedulesAutomaticPricesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppPriceSchedulesAutomaticPricesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppPriceSchedulesAutomaticPricesGetToManyRelatedResponse, AppPriceSchedulesAutomaticPricesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appPriceSchedules/{id}/automaticPrices',
        ...options
    });
};

export const appPriceSchedulesBaseTerritoryGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppPriceSchedulesBaseTerritoryGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppPriceSchedulesBaseTerritoryGetToOneRelatedResponse, AppPriceSchedulesBaseTerritoryGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appPriceSchedules/{id}/baseTerritory',
        ...options
    });
};

export const appPriceSchedulesManualPricesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppPriceSchedulesManualPricesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppPriceSchedulesManualPricesGetToManyRelatedResponse, AppPriceSchedulesManualPricesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appPriceSchedules/{id}/manualPrices',
        ...options
    });
};

export const appScreenshotSetsAppScreenshotsGetToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<AppScreenshotSetsAppScreenshotsGetToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppScreenshotSetsAppScreenshotsGetToManyRelationshipResponse, AppScreenshotSetsAppScreenshotsGetToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appScreenshotSets/{id}/relationships/appScreenshots',
        ...options
    });
};

export const appScreenshotSetsAppScreenshotsReplaceToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipResponse, AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appScreenshotSets/{id}/relationships/appScreenshots',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appScreenshotSetsAppScreenshotsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppScreenshotSetsAppScreenshotsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppScreenshotSetsAppScreenshotsGetToManyRelatedResponse, AppScreenshotSetsAppScreenshotsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appScreenshotSets/{id}/appScreenshots',
        ...options
    });
};

export const appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedResponse, AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreReviewDetails/{id}/appStoreReviewAttachments',
        ...options
    });
};

export const appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedResponse, AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appPreviewSets',
        ...options
    });
};

export const appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedResponse, AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appScreenshotSets',
        ...options
    });
};

export const appStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedResponse, AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersionExperimentTreatments/{id}/appStoreVersionExperimentTreatmentLocalizations',
        ...options
    });
};

export const appStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedResponse, AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v2/appStoreVersionExperiments/{id}/appStoreVersionExperimentTreatments',
        ...options
    });
};

/**
 * @deprecated
 */
export const appStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedResponse, AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersionExperiments/{id}/appStoreVersionExperimentTreatments',
        ...options
    });
};

export const appStoreVersionLocalizationsAppPreviewSetsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedResponse, AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersionLocalizations/{id}/appPreviewSets',
        ...options
    });
};

export const appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedResponse, AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersionLocalizations/{id}/appScreenshotSets',
        ...options
    });
};

/**
 * @deprecated
 */
export const appStoreVersionsAgeRatingDeclarationGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAgeRatingDeclarationGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionsAgeRatingDeclarationGetToOneRelatedResponse, AppStoreVersionsAgeRatingDeclarationGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersions/{id}/ageRatingDeclaration',
        ...options
    });
};

export const appStoreVersionsAlternativeDistributionPackageGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedResponse, AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersions/{id}/alternativeDistributionPackage',
        ...options
    });
};

export const appStoreVersionsAppClipDefaultExperienceGetToOneRelationship = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipResponse, AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience',
        ...options
    });
};

export const appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipResponse, AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appStoreVersionsAppClipDefaultExperienceGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedResponse, AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersions/{id}/appClipDefaultExperience',
        ...options
    });
};

export const appStoreVersionsAppStoreReviewDetailGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppStoreReviewDetailGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionsAppStoreReviewDetailGetToOneRelatedResponse, AppStoreVersionsAppStoreReviewDetailGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersions/{id}/appStoreReviewDetail',
        ...options
    });
};

/**
 * @deprecated
 */
export const appStoreVersionsAppStoreVersionExperimentsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedResponse, AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersions/{id}/appStoreVersionExperiments',
        ...options
    });
};

export const appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedResponse, AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersions/{id}/appStoreVersionExperimentsV2',
        ...options
    });
};

export const appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedResponse, AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersions/{id}/appStoreVersionLocalizations',
        ...options
    });
};

export const appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedResponse, AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersions/{id}/appStoreVersionPhasedRelease',
        ...options
    });
};

/**
 * @deprecated
 */
export const appStoreVersionsAppStoreVersionSubmissionGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedResponse, AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersions/{id}/appStoreVersionSubmission',
        ...options
    });
};

export const appStoreVersionsBuildGetToOneRelationship = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsBuildGetToOneRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionsBuildGetToOneRelationshipResponse, AppStoreVersionsBuildGetToOneRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersions/{id}/relationships/build',
        ...options
    });
};

export const appStoreVersionsBuildUpdateToOneRelationship = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsBuildUpdateToOneRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppStoreVersionsBuildUpdateToOneRelationshipResponse, AppStoreVersionsBuildUpdateToOneRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appStoreVersions/{id}/relationships/build',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appStoreVersionsBuildGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsBuildGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionsBuildGetToOneRelatedResponse, AppStoreVersionsBuildGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersions/{id}/build',
        ...options
    });
};

export const appStoreVersionsCustomerReviewsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsCustomerReviewsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionsCustomerReviewsGetToManyRelatedResponse, AppStoreVersionsCustomerReviewsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersions/{id}/customerReviews',
        ...options
    });
};

export const appStoreVersionsGameCenterAppVersionGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsGameCenterAppVersionGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionsGameCenterAppVersionGetToOneRelatedResponse, AppStoreVersionsGameCenterAppVersionGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersions/{id}/gameCenterAppVersion',
        ...options
    });
};

export const appStoreVersionsRoutingAppCoverageGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsRoutingAppCoverageGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppStoreVersionsRoutingAppCoverageGetToOneRelatedResponse, AppStoreVersionsRoutingAppCoverageGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appStoreVersions/{id}/routingAppCoverage',
        ...options
    });
};

export const appsAlternativeDistributionKeyGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppsAlternativeDistributionKeyGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsAlternativeDistributionKeyGetToOneRelatedResponse, AppsAlternativeDistributionKeyGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/alternativeDistributionKey',
        ...options
    });
};

export const appsAnalyticsReportRequestsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppsAnalyticsReportRequestsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsAnalyticsReportRequestsGetToManyRelatedResponse, AppsAnalyticsReportRequestsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/analyticsReportRequests',
        ...options
    });
};

export const appsAppAvailabilityV2GetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppsAppAvailabilityV2GetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsAppAvailabilityV2GetToOneRelatedResponse, AppsAppAvailabilityV2GetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/appAvailabilityV2',
        ...options
    });
};

export const appsAppClipsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppsAppClipsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsAppClipsGetToManyRelatedResponse, AppsAppClipsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/appClips',
        ...options
    });
};

export const appsAppCustomProductPagesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppsAppCustomProductPagesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsAppCustomProductPagesGetToManyRelatedResponse, AppsAppCustomProductPagesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/appCustomProductPages',
        ...options
    });
};

export const appsAppEncryptionDeclarationsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppsAppEncryptionDeclarationsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsAppEncryptionDeclarationsGetToManyRelatedResponse, AppsAppEncryptionDeclarationsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/appEncryptionDeclarations',
        ...options
    });
};

export const appsAppEventsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppsAppEventsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsAppEventsGetToManyRelatedResponse, AppsAppEventsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/appEvents',
        ...options
    });
};

export const appsAppInfosGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppsAppInfosGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsAppInfosGetToManyRelatedResponse, AppsAppInfosGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/appInfos',
        ...options
    });
};

export const appsAppPricePointsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppsAppPricePointsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsAppPricePointsGetToManyRelatedResponse, AppsAppPricePointsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/appPricePoints',
        ...options
    });
};

export const appsAppPriceScheduleGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppsAppPriceScheduleGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsAppPriceScheduleGetToOneRelatedResponse, AppsAppPriceScheduleGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/appPriceSchedule',
        ...options
    });
};

export const appsAppStoreVersionExperimentsV2GetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppsAppStoreVersionExperimentsV2GetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsAppStoreVersionExperimentsV2GetToManyRelatedResponse, AppsAppStoreVersionExperimentsV2GetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/appStoreVersionExperimentsV2',
        ...options
    });
};

export const appsAppStoreVersionsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppsAppStoreVersionsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsAppStoreVersionsGetToManyRelatedResponse, AppsAppStoreVersionsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/appStoreVersions',
        ...options
    });
};

export const appsBetaAppLocalizationsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppsBetaAppLocalizationsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsBetaAppLocalizationsGetToManyRelatedResponse, AppsBetaAppLocalizationsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/betaAppLocalizations',
        ...options
    });
};

export const appsBetaAppReviewDetailGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppsBetaAppReviewDetailGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsBetaAppReviewDetailGetToOneRelatedResponse, AppsBetaAppReviewDetailGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/betaAppReviewDetail',
        ...options
    });
};

export const appsBetaGroupsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppsBetaGroupsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsBetaGroupsGetToManyRelatedResponse, AppsBetaGroupsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/betaGroups',
        ...options
    });
};

export const appsBetaLicenseAgreementGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppsBetaLicenseAgreementGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsBetaLicenseAgreementGetToOneRelatedResponse, AppsBetaLicenseAgreementGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/betaLicenseAgreement',
        ...options
    });
};

export const appsBetaTestersDeleteToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<AppsBetaTestersDeleteToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AppsBetaTestersDeleteToManyRelationshipResponse, AppsBetaTestersDeleteToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/apps/{id}/relationships/betaTesters',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appsBuildsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppsBuildsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsBuildsGetToManyRelatedResponse, AppsBuildsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/builds',
        ...options
    });
};

export const appsCiProductGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppsCiProductGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsCiProductGetToOneRelatedResponse, AppsCiProductGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/ciProduct',
        ...options
    });
};

export const appsCustomerReviewsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppsCustomerReviewsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsCustomerReviewsGetToManyRelatedResponse, AppsCustomerReviewsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/customerReviews',
        ...options
    });
};

export const appsEndUserLicenseAgreementGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppsEndUserLicenseAgreementGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsEndUserLicenseAgreementGetToOneRelatedResponse, AppsEndUserLicenseAgreementGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/endUserLicenseAgreement',
        ...options
    });
};

export const appsGameCenterDetailGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppsGameCenterDetailGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsGameCenterDetailGetToOneRelatedResponse, AppsGameCenterDetailGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/gameCenterDetail',
        ...options
    });
};

/**
 * @deprecated
 */
export const appsGameCenterEnabledVersionsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppsGameCenterEnabledVersionsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsGameCenterEnabledVersionsGetToManyRelatedResponse, AppsGameCenterEnabledVersionsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/gameCenterEnabledVersions',
        ...options
    });
};

/**
 * @deprecated
 */
export const appsInAppPurchasesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppsInAppPurchasesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsInAppPurchasesGetToManyRelatedResponse, AppsInAppPurchasesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/inAppPurchases',
        ...options
    });
};

export const appsInAppPurchasesV2GetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppsInAppPurchasesV2GetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsInAppPurchasesV2GetToManyRelatedResponse, AppsInAppPurchasesV2GetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/inAppPurchasesV2',
        ...options
    });
};

export const appsMarketplaceSearchDetailGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppsMarketplaceSearchDetailGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsMarketplaceSearchDetailGetToOneRelatedResponse, AppsMarketplaceSearchDetailGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/marketplaceSearchDetail',
        ...options
    });
};

export const appsPerfPowerMetricsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppsPerfPowerMetricsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsPerfPowerMetricsGetToManyRelatedResponse, AppsPerfPowerMetricsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/perfPowerMetrics',
        ...options
    });
};

export const appsPreReleaseVersionsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppsPreReleaseVersionsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsPreReleaseVersionsGetToManyRelatedResponse, AppsPreReleaseVersionsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/preReleaseVersions',
        ...options
    });
};

export const appsPromotedPurchasesGetToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<AppsPromotedPurchasesGetToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsPromotedPurchasesGetToManyRelationshipResponse, AppsPromotedPurchasesGetToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/apps/{id}/relationships/promotedPurchases',
        ...options
    });
};

export const appsPromotedPurchasesReplaceToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<AppsPromotedPurchasesReplaceToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AppsPromotedPurchasesReplaceToManyRelationshipResponse, AppsPromotedPurchasesReplaceToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/apps/{id}/relationships/promotedPurchases',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const appsPromotedPurchasesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppsPromotedPurchasesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsPromotedPurchasesGetToManyRelatedResponse, AppsPromotedPurchasesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/promotedPurchases',
        ...options
    });
};

export const appsReviewSubmissionsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppsReviewSubmissionsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsReviewSubmissionsGetToManyRelatedResponse, AppsReviewSubmissionsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/reviewSubmissions',
        ...options
    });
};

export const appsSubscriptionGracePeriodGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<AppsSubscriptionGracePeriodGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsSubscriptionGracePeriodGetToOneRelatedResponse, AppsSubscriptionGracePeriodGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/subscriptionGracePeriod',
        ...options
    });
};

export const appsSubscriptionGroupsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<AppsSubscriptionGroupsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsSubscriptionGroupsGetToManyRelatedResponse, AppsSubscriptionGroupsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/subscriptionGroups',
        ...options
    });
};

export const betaAppLocalizationsAppGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<BetaAppLocalizationsAppGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaAppLocalizationsAppGetToOneRelatedResponse, BetaAppLocalizationsAppGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaAppLocalizations/{id}/app',
        ...options
    });
};

export const betaAppReviewDetailsAppGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<BetaAppReviewDetailsAppGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaAppReviewDetailsAppGetToOneRelatedResponse, BetaAppReviewDetailsAppGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaAppReviewDetails/{id}/app',
        ...options
    });
};

export const betaAppReviewSubmissionsBuildGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<BetaAppReviewSubmissionsBuildGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaAppReviewSubmissionsBuildGetToOneRelatedResponse, BetaAppReviewSubmissionsBuildGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaAppReviewSubmissions/{id}/build',
        ...options
    });
};

export const betaBuildLocalizationsBuildGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<BetaBuildLocalizationsBuildGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaBuildLocalizationsBuildGetToOneRelatedResponse, BetaBuildLocalizationsBuildGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaBuildLocalizations/{id}/build',
        ...options
    });
};

export const betaGroupsAppGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<BetaGroupsAppGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaGroupsAppGetToOneRelatedResponse, BetaGroupsAppGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaGroups/{id}/app',
        ...options
    });
};

export const betaGroupsBetaRecruitmentCriteriaGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<BetaGroupsBetaRecruitmentCriteriaGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaGroupsBetaRecruitmentCriteriaGetToOneRelatedResponse, BetaGroupsBetaRecruitmentCriteriaGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaGroups/{id}/betaRecruitmentCriteria',
        ...options
    });
};

export const betaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelatedResponse, BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaGroups/{id}/betaRecruitmentCriterionCompatibleBuildCheck',
        ...options
    });
};

export const betaGroupsBetaTestersDeleteToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<BetaGroupsBetaTestersDeleteToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BetaGroupsBetaTestersDeleteToManyRelationshipResponse, BetaGroupsBetaTestersDeleteToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaGroups/{id}/relationships/betaTesters',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaGroupsBetaTestersGetToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<BetaGroupsBetaTestersGetToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaGroupsBetaTestersGetToManyRelationshipResponse, BetaGroupsBetaTestersGetToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaGroups/{id}/relationships/betaTesters',
        ...options
    });
};

export const betaGroupsBetaTestersCreateToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<BetaGroupsBetaTestersCreateToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BetaGroupsBetaTestersCreateToManyRelationshipResponse, BetaGroupsBetaTestersCreateToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaGroups/{id}/relationships/betaTesters',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaGroupsBetaTestersGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<BetaGroupsBetaTestersGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaGroupsBetaTestersGetToManyRelatedResponse, BetaGroupsBetaTestersGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaGroups/{id}/betaTesters',
        ...options
    });
};

export const betaGroupsBuildsDeleteToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<BetaGroupsBuildsDeleteToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BetaGroupsBuildsDeleteToManyRelationshipResponse, BetaGroupsBuildsDeleteToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaGroups/{id}/relationships/builds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaGroupsBuildsGetToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<BetaGroupsBuildsGetToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaGroupsBuildsGetToManyRelationshipResponse, BetaGroupsBuildsGetToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaGroups/{id}/relationships/builds',
        ...options
    });
};

export const betaGroupsBuildsCreateToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<BetaGroupsBuildsCreateToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BetaGroupsBuildsCreateToManyRelationshipResponse, BetaGroupsBuildsCreateToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaGroups/{id}/relationships/builds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaGroupsBuildsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<BetaGroupsBuildsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaGroupsBuildsGetToManyRelatedResponse, BetaGroupsBuildsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaGroups/{id}/builds',
        ...options
    });
};

export const betaLicenseAgreementsAppGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<BetaLicenseAgreementsAppGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaLicenseAgreementsAppGetToOneRelatedResponse, BetaLicenseAgreementsAppGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaLicenseAgreements/{id}/app',
        ...options
    });
};

export const betaTestersAppsDeleteToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<BetaTestersAppsDeleteToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BetaTestersAppsDeleteToManyRelationshipResponse, BetaTestersAppsDeleteToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaTesters/{id}/relationships/apps',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaTestersAppsGetToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<BetaTestersAppsGetToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaTestersAppsGetToManyRelationshipResponse, BetaTestersAppsGetToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaTesters/{id}/relationships/apps',
        ...options
    });
};

export const betaTestersAppsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<BetaTestersAppsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaTestersAppsGetToManyRelatedResponse, BetaTestersAppsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaTesters/{id}/apps',
        ...options
    });
};

export const betaTestersBetaGroupsDeleteToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<BetaTestersBetaGroupsDeleteToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BetaTestersBetaGroupsDeleteToManyRelationshipResponse, BetaTestersBetaGroupsDeleteToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaTesters/{id}/relationships/betaGroups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaTestersBetaGroupsGetToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<BetaTestersBetaGroupsGetToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaTestersBetaGroupsGetToManyRelationshipResponse, BetaTestersBetaGroupsGetToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaTesters/{id}/relationships/betaGroups',
        ...options
    });
};

export const betaTestersBetaGroupsCreateToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<BetaTestersBetaGroupsCreateToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BetaTestersBetaGroupsCreateToManyRelationshipResponse, BetaTestersBetaGroupsCreateToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaTesters/{id}/relationships/betaGroups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaTestersBetaGroupsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<BetaTestersBetaGroupsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaTestersBetaGroupsGetToManyRelatedResponse, BetaTestersBetaGroupsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaTesters/{id}/betaGroups',
        ...options
    });
};

export const betaTestersBuildsDeleteToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<BetaTestersBuildsDeleteToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BetaTestersBuildsDeleteToManyRelationshipResponse, BetaTestersBuildsDeleteToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaTesters/{id}/relationships/builds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaTestersBuildsGetToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<BetaTestersBuildsGetToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaTestersBuildsGetToManyRelationshipResponse, BetaTestersBuildsGetToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaTesters/{id}/relationships/builds',
        ...options
    });
};

export const betaTestersBuildsCreateToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<BetaTestersBuildsCreateToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BetaTestersBuildsCreateToManyRelationshipResponse, BetaTestersBuildsCreateToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaTesters/{id}/relationships/builds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const betaTestersBuildsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<BetaTestersBuildsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaTestersBuildsGetToManyRelatedResponse, BetaTestersBuildsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaTesters/{id}/builds',
        ...options
    });
};

export const buildBetaDetailsBuildGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<BuildBetaDetailsBuildGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BuildBetaDetailsBuildGetToOneRelatedResponse, BuildBetaDetailsBuildGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/buildBetaDetails/{id}/build',
        ...options
    });
};

export const buildBundlesAppClipDomainCacheStatusGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<BuildBundlesAppClipDomainCacheStatusGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BuildBundlesAppClipDomainCacheStatusGetToOneRelatedResponse, BuildBundlesAppClipDomainCacheStatusGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/buildBundles/{id}/appClipDomainCacheStatus',
        ...options
    });
};

export const buildBundlesAppClipDomainDebugStatusGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<BuildBundlesAppClipDomainDebugStatusGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BuildBundlesAppClipDomainDebugStatusGetToOneRelatedResponse, BuildBundlesAppClipDomainDebugStatusGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/buildBundles/{id}/appClipDomainDebugStatus',
        ...options
    });
};

export const buildBundlesBetaAppClipInvocationsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<BuildBundlesBetaAppClipInvocationsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BuildBundlesBetaAppClipInvocationsGetToManyRelatedResponse, BuildBundlesBetaAppClipInvocationsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/buildBundles/{id}/betaAppClipInvocations',
        ...options
    });
};

export const buildBundlesBuildBundleFileSizesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<BuildBundlesBuildBundleFileSizesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BuildBundlesBuildBundleFileSizesGetToManyRelatedResponse, BuildBundlesBuildBundleFileSizesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/buildBundles/{id}/buildBundleFileSizes',
        ...options
    });
};

export const buildsAppGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<BuildsAppGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BuildsAppGetToOneRelatedResponse, BuildsAppGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/builds/{id}/app',
        ...options
    });
};

export const buildsAppEncryptionDeclarationGetToOneRelationship = <ThrowOnError extends boolean = false>(options: Options<BuildsAppEncryptionDeclarationGetToOneRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BuildsAppEncryptionDeclarationGetToOneRelationshipResponse, BuildsAppEncryptionDeclarationGetToOneRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/builds/{id}/relationships/appEncryptionDeclaration',
        ...options
    });
};

export const buildsAppEncryptionDeclarationUpdateToOneRelationship = <ThrowOnError extends boolean = false>(options: Options<BuildsAppEncryptionDeclarationUpdateToOneRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<BuildsAppEncryptionDeclarationUpdateToOneRelationshipResponse, BuildsAppEncryptionDeclarationUpdateToOneRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/builds/{id}/relationships/appEncryptionDeclaration',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const buildsAppEncryptionDeclarationGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<BuildsAppEncryptionDeclarationGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BuildsAppEncryptionDeclarationGetToOneRelatedResponse, BuildsAppEncryptionDeclarationGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/builds/{id}/appEncryptionDeclaration',
        ...options
    });
};

export const buildsAppStoreVersionGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<BuildsAppStoreVersionGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BuildsAppStoreVersionGetToOneRelatedResponse, BuildsAppStoreVersionGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/builds/{id}/appStoreVersion',
        ...options
    });
};

export const buildsBetaAppReviewSubmissionGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<BuildsBetaAppReviewSubmissionGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BuildsBetaAppReviewSubmissionGetToOneRelatedResponse, BuildsBetaAppReviewSubmissionGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/builds/{id}/betaAppReviewSubmission',
        ...options
    });
};

export const buildsBetaBuildLocalizationsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<BuildsBetaBuildLocalizationsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BuildsBetaBuildLocalizationsGetToManyRelatedResponse, BuildsBetaBuildLocalizationsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/builds/{id}/betaBuildLocalizations',
        ...options
    });
};

export const buildsBetaGroupsDeleteToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<BuildsBetaGroupsDeleteToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BuildsBetaGroupsDeleteToManyRelationshipResponse, BuildsBetaGroupsDeleteToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/builds/{id}/relationships/betaGroups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const buildsBetaGroupsCreateToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<BuildsBetaGroupsCreateToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BuildsBetaGroupsCreateToManyRelationshipResponse, BuildsBetaGroupsCreateToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/builds/{id}/relationships/betaGroups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const buildsBuildBetaDetailGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<BuildsBuildBetaDetailGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BuildsBuildBetaDetailGetToOneRelatedResponse, BuildsBuildBetaDetailGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/builds/{id}/buildBetaDetail',
        ...options
    });
};

export const buildsDiagnosticSignaturesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<BuildsDiagnosticSignaturesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BuildsDiagnosticSignaturesGetToManyRelatedResponse, BuildsDiagnosticSignaturesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/builds/{id}/diagnosticSignatures',
        ...options
    });
};

export const buildsIconsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<BuildsIconsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BuildsIconsGetToManyRelatedResponse, BuildsIconsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/builds/{id}/icons',
        ...options
    });
};

export const buildsIndividualTestersDeleteToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<BuildsIndividualTestersDeleteToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BuildsIndividualTestersDeleteToManyRelationshipResponse, BuildsIndividualTestersDeleteToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/builds/{id}/relationships/individualTesters',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const buildsIndividualTestersGetToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<BuildsIndividualTestersGetToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BuildsIndividualTestersGetToManyRelationshipResponse, BuildsIndividualTestersGetToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/builds/{id}/relationships/individualTesters',
        ...options
    });
};

export const buildsIndividualTestersCreateToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<BuildsIndividualTestersCreateToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BuildsIndividualTestersCreateToManyRelationshipResponse, BuildsIndividualTestersCreateToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/builds/{id}/relationships/individualTesters',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const buildsIndividualTestersGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<BuildsIndividualTestersGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BuildsIndividualTestersGetToManyRelatedResponse, BuildsIndividualTestersGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/builds/{id}/individualTesters',
        ...options
    });
};

export const buildsPerfPowerMetricsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<BuildsPerfPowerMetricsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BuildsPerfPowerMetricsGetToManyRelatedResponse, BuildsPerfPowerMetricsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/builds/{id}/perfPowerMetrics',
        ...options
    });
};

export const buildsPreReleaseVersionGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<BuildsPreReleaseVersionGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BuildsPreReleaseVersionGetToOneRelatedResponse, BuildsPreReleaseVersionGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/builds/{id}/preReleaseVersion',
        ...options
    });
};

export const bundleIdsAppGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<BundleIdsAppGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BundleIdsAppGetToOneRelatedResponse, BundleIdsAppGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/bundleIds/{id}/app',
        ...options
    });
};

export const bundleIdsBundleIdCapabilitiesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<BundleIdsBundleIdCapabilitiesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BundleIdsBundleIdCapabilitiesGetToManyRelatedResponse, BundleIdsBundleIdCapabilitiesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/bundleIds/{id}/bundleIdCapabilities',
        ...options
    });
};

export const bundleIdsProfilesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<BundleIdsProfilesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BundleIdsProfilesGetToManyRelatedResponse, BundleIdsProfilesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/bundleIds/{id}/profiles',
        ...options
    });
};

export const ciBuildActionsArtifactsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<CiBuildActionsArtifactsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiBuildActionsArtifactsGetToManyRelatedResponse, CiBuildActionsArtifactsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciBuildActions/{id}/artifacts',
        ...options
    });
};

export const ciBuildActionsBuildRunGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<CiBuildActionsBuildRunGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiBuildActionsBuildRunGetToOneRelatedResponse, CiBuildActionsBuildRunGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciBuildActions/{id}/buildRun',
        ...options
    });
};

export const ciBuildActionsIssuesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<CiBuildActionsIssuesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiBuildActionsIssuesGetToManyRelatedResponse, CiBuildActionsIssuesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciBuildActions/{id}/issues',
        ...options
    });
};

export const ciBuildActionsTestResultsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<CiBuildActionsTestResultsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiBuildActionsTestResultsGetToManyRelatedResponse, CiBuildActionsTestResultsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciBuildActions/{id}/testResults',
        ...options
    });
};

export const ciBuildRunsActionsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<CiBuildRunsActionsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiBuildRunsActionsGetToManyRelatedResponse, CiBuildRunsActionsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciBuildRuns/{id}/actions',
        ...options
    });
};

export const ciBuildRunsBuildsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<CiBuildRunsBuildsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiBuildRunsBuildsGetToManyRelatedResponse, CiBuildRunsBuildsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciBuildRuns/{id}/builds',
        ...options
    });
};

export const ciMacOsVersionsXcodeVersionsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<CiMacOsVersionsXcodeVersionsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiMacOsVersionsXcodeVersionsGetToManyRelatedResponse, CiMacOsVersionsXcodeVersionsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciMacOsVersions/{id}/xcodeVersions',
        ...options
    });
};

export const ciProductsAdditionalRepositoriesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<CiProductsAdditionalRepositoriesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiProductsAdditionalRepositoriesGetToManyRelatedResponse, CiProductsAdditionalRepositoriesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciProducts/{id}/additionalRepositories',
        ...options
    });
};

export const ciProductsAppGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<CiProductsAppGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiProductsAppGetToOneRelatedResponse, CiProductsAppGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciProducts/{id}/app',
        ...options
    });
};

export const ciProductsBuildRunsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<CiProductsBuildRunsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiProductsBuildRunsGetToManyRelatedResponse, CiProductsBuildRunsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciProducts/{id}/buildRuns',
        ...options
    });
};

export const ciProductsPrimaryRepositoriesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<CiProductsPrimaryRepositoriesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiProductsPrimaryRepositoriesGetToManyRelatedResponse, CiProductsPrimaryRepositoriesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciProducts/{id}/primaryRepositories',
        ...options
    });
};

export const ciProductsWorkflowsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<CiProductsWorkflowsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiProductsWorkflowsGetToManyRelatedResponse, CiProductsWorkflowsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciProducts/{id}/workflows',
        ...options
    });
};

export const ciWorkflowsBuildRunsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<CiWorkflowsBuildRunsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiWorkflowsBuildRunsGetToManyRelatedResponse, CiWorkflowsBuildRunsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciWorkflows/{id}/buildRuns',
        ...options
    });
};

export const ciWorkflowsRepositoryGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<CiWorkflowsRepositoryGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiWorkflowsRepositoryGetToOneRelatedResponse, CiWorkflowsRepositoryGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciWorkflows/{id}/repository',
        ...options
    });
};

export const ciXcodeVersionsMacOsVersionsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<CiXcodeVersionsMacOsVersionsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CiXcodeVersionsMacOsVersionsGetToManyRelatedResponse, CiXcodeVersionsMacOsVersionsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/ciXcodeVersions/{id}/macOsVersions',
        ...options
    });
};

export const customerReviewsResponseGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<CustomerReviewsResponseGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CustomerReviewsResponseGetToOneRelatedResponse, CustomerReviewsResponseGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/customerReviews/{id}/response',
        ...options
    });
};

export const diagnosticSignaturesLogsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<DiagnosticSignaturesLogsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DiagnosticSignaturesLogsGetToManyRelatedResponse, DiagnosticSignaturesLogsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/diagnosticSignatures/{id}/logs',
        ...options
    });
};

export const endUserLicenseAgreementsTerritoriesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<EndUserLicenseAgreementsTerritoriesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EndUserLicenseAgreementsTerritoriesGetToManyRelatedResponse, EndUserLicenseAgreementsTerritoriesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/endUserLicenseAgreements/{id}/territories',
        ...options
    });
};

export const gameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedResponse, GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterAchievementLocalizations/{id}/gameCenterAchievement',
        ...options
    });
};

export const gameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedResponse, GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterAchievementLocalizations/{id}/gameCenterAchievementImage',
        ...options
    });
};

/**
 * @deprecated
 */
export const gameCenterAchievementsGroupAchievementGetToOneRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementsGroupAchievementGetToOneRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterAchievementsGroupAchievementGetToOneRelationshipResponse, GameCenterAchievementsGroupAchievementGetToOneRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterAchievements/{id}/relationships/groupAchievement',
        ...options
    });
};

/**
 * @deprecated
 */
export const gameCenterAchievementsGroupAchievementUpdateToOneRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementsGroupAchievementUpdateToOneRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterAchievementsGroupAchievementUpdateToOneRelationshipResponse, GameCenterAchievementsGroupAchievementUpdateToOneRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterAchievements/{id}/relationships/groupAchievement',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 */
export const gameCenterAchievementsGroupAchievementGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementsGroupAchievementGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterAchievementsGroupAchievementGetToOneRelatedResponse, GameCenterAchievementsGroupAchievementGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterAchievements/{id}/groupAchievement',
        ...options
    });
};

export const gameCenterAchievementsLocalizationsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementsLocalizationsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterAchievementsLocalizationsGetToManyRelatedResponse, GameCenterAchievementsLocalizationsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterAchievements/{id}/localizations',
        ...options
    });
};

export const gameCenterAchievementsReleasesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementsReleasesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterAchievementsReleasesGetToManyRelatedResponse, GameCenterAchievementsReleasesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterAchievements/{id}/releases',
        ...options
    });
};

export const gameCenterAppVersionsAppStoreVersionGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterAppVersionsAppStoreVersionGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterAppVersionsAppStoreVersionGetToOneRelatedResponse, GameCenterAppVersionsAppStoreVersionGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterAppVersions/{id}/appStoreVersion',
        ...options
    });
};

export const gameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipResponse, GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterAppVersionsCompatibilityVersionsGetToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipResponse, GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions',
        ...options
    });
};

export const gameCenterAppVersionsCompatibilityVersionsCreateToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipResponse, GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterAppVersionsCompatibilityVersionsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedResponse, GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterAppVersions/{id}/compatibilityVersions',
        ...options
    });
};

export const gameCenterDetailsAchievementReleasesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsAchievementReleasesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterDetailsAchievementReleasesGetToManyRelatedResponse, GameCenterDetailsAchievementReleasesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterDetails/{id}/achievementReleases',
        ...options
    });
};

export const gameCenterDetailsGameCenterAchievementsGetToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterAchievementsGetToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterDetailsGameCenterAchievementsGetToManyRelationshipResponse, GameCenterDetailsGameCenterAchievementsGetToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterDetails/{id}/relationships/gameCenterAchievements',
        ...options
    });
};

export const gameCenterDetailsGameCenterAchievementsReplaceToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipResponse, GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterDetails/{id}/relationships/gameCenterAchievements',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterDetailsGameCenterAchievementsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterAchievementsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterDetailsGameCenterAchievementsGetToManyRelatedResponse, GameCenterDetailsGameCenterAchievementsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterDetails/{id}/gameCenterAchievements',
        ...options
    });
};

export const gameCenterDetailsGameCenterAppVersionsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterAppVersionsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterDetailsGameCenterAppVersionsGetToManyRelatedResponse, GameCenterDetailsGameCenterAppVersionsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterDetails/{id}/gameCenterAppVersions',
        ...options
    });
};

export const gameCenterDetailsGameCenterGroupGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterGroupGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterDetailsGameCenterGroupGetToOneRelatedResponse, GameCenterDetailsGameCenterGroupGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterDetails/{id}/gameCenterGroup',
        ...options
    });
};

export const gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipResponse, GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboardSets',
        ...options
    });
};

export const gameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipResponse, GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboardSets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedResponse, GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterDetails/{id}/gameCenterLeaderboardSets',
        ...options
    });
};

export const gameCenterDetailsGameCenterLeaderboardsGetToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipResponse, GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboards',
        ...options
    });
};

export const gameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipResponse, GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboards',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterDetailsGameCenterLeaderboardsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedResponse, GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterDetails/{id}/gameCenterLeaderboards',
        ...options
    });
};

export const gameCenterDetailsLeaderboardReleasesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsLeaderboardReleasesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterDetailsLeaderboardReleasesGetToManyRelatedResponse, GameCenterDetailsLeaderboardReleasesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterDetails/{id}/leaderboardReleases',
        ...options
    });
};

export const gameCenterDetailsLeaderboardSetReleasesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedResponse, GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterDetails/{id}/leaderboardSetReleases',
        ...options
    });
};

/**
 * @deprecated
 */
export const gameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipResponse, GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 */
export const gameCenterEnabledVersionsCompatibleVersionsGetToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipResponse, GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions',
        ...options
    });
};

/**
 * @deprecated
 */
export const gameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipResponse, GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 */
export const gameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipResponse, GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 */
export const gameCenterEnabledVersionsCompatibleVersionsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedResponse, GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterEnabledVersions/{id}/compatibleVersions',
        ...options
    });
};

export const gameCenterGroupsGameCenterAchievementsGetToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterAchievementsGetToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterGroupsGameCenterAchievementsGetToManyRelationshipResponse, GameCenterGroupsGameCenterAchievementsGetToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterGroups/{id}/relationships/gameCenterAchievements',
        ...options
    });
};

export const gameCenterGroupsGameCenterAchievementsReplaceToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipResponse, GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterGroups/{id}/relationships/gameCenterAchievements',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterGroupsGameCenterAchievementsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterAchievementsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterGroupsGameCenterAchievementsGetToManyRelatedResponse, GameCenterGroupsGameCenterAchievementsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterGroups/{id}/gameCenterAchievements',
        ...options
    });
};

export const gameCenterGroupsGameCenterDetailsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterDetailsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterGroupsGameCenterDetailsGetToManyRelatedResponse, GameCenterGroupsGameCenterDetailsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterGroups/{id}/gameCenterDetails',
        ...options
    });
};

export const gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipResponse, GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets',
        ...options
    });
};

export const gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipResponse, GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedResponse, GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterGroups/{id}/gameCenterLeaderboardSets',
        ...options
    });
};

export const gameCenterGroupsGameCenterLeaderboardsGetToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipResponse, GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards',
        ...options
    });
};

export const gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipResponse, GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterGroupsGameCenterLeaderboardsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedResponse, GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterGroups/{id}/gameCenterLeaderboards',
        ...options
    });
};

export const gameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedResponse, GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterLeaderboardLocalizations/{id}/gameCenterLeaderboardImage',
        ...options
    });
};

export const gameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedResponse, GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterLeaderboardSetLocalizations/{id}/gameCenterLeaderboardSetImage',
        ...options
    });
};

export const gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedResponse, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterLeaderboardSetMemberLocalizations/{id}/gameCenterLeaderboard',
        ...options
    });
};

export const gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedResponse, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterLeaderboardSetMemberLocalizations/{id}/gameCenterLeaderboardSet',
        ...options
    });
};

export const gameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipResponse, GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipResponse, GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards',
        ...options
    });
};

export const gameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipResponse, GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipResponse, GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedResponse, GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterLeaderboardSets/{id}/gameCenterLeaderboards',
        ...options
    });
};

/**
 * @deprecated
 */
export const gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipResponse, GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet',
        ...options
    });
};

/**
 * @deprecated
 */
export const gameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipResponse, GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 */
export const gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedResponse, GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterLeaderboardSets/{id}/groupLeaderboardSet',
        ...options
    });
};

export const gameCenterLeaderboardSetsLocalizationsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsLocalizationsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterLeaderboardSetsLocalizationsGetToManyRelatedResponse, GameCenterLeaderboardSetsLocalizationsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterLeaderboardSets/{id}/localizations',
        ...options
    });
};

export const gameCenterLeaderboardSetsReleasesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsReleasesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterLeaderboardSetsReleasesGetToManyRelatedResponse, GameCenterLeaderboardSetsReleasesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterLeaderboardSets/{id}/releases',
        ...options
    });
};

/**
 * @deprecated
 */
export const gameCenterLeaderboardsGroupLeaderboardGetToOneRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipResponse, GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboards/{id}/relationships/groupLeaderboard',
        ...options
    });
};

/**
 * @deprecated
 */
export const gameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationship = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipResponse, GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/gameCenterLeaderboards/{id}/relationships/groupLeaderboard',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 */
export const gameCenterLeaderboardsGroupLeaderboardGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedResponse, GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterLeaderboards/{id}/groupLeaderboard',
        ...options
    });
};

export const gameCenterLeaderboardsLocalizationsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardsLocalizationsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterLeaderboardsLocalizationsGetToManyRelatedResponse, GameCenterLeaderboardsLocalizationsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterLeaderboards/{id}/localizations',
        ...options
    });
};

export const gameCenterLeaderboardsReleasesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardsReleasesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterLeaderboardsReleasesGetToManyRelatedResponse, GameCenterLeaderboardsReleasesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterLeaderboards/{id}/releases',
        ...options
    });
};

export const gameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedResponse, GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterMatchmakingRuleSets/{id}/matchmakingQueues',
        ...options
    });
};

export const gameCenterMatchmakingRuleSetsRulesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRuleSetsRulesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterMatchmakingRuleSetsRulesGetToManyRelatedResponse, GameCenterMatchmakingRuleSetsRulesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterMatchmakingRuleSets/{id}/rules',
        ...options
    });
};

export const gameCenterMatchmakingRuleSetsTeamsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedResponse, GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterMatchmakingRuleSets/{id}/teams',
        ...options
    });
};

export const inAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedResponse, InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/inAppPurchaseAvailabilities/{id}/availableTerritories',
        ...options
    });
};

export const inAppPurchasePricePointsEqualizationsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<InAppPurchasePricePointsEqualizationsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InAppPurchasePricePointsEqualizationsGetToManyRelatedResponse, InAppPurchasePricePointsEqualizationsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/inAppPurchasePricePoints/{id}/equalizations',
        ...options
    });
};

export const inAppPurchasePriceSchedulesAutomaticPricesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedResponse, InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/inAppPurchasePriceSchedules/{id}/automaticPrices',
        ...options
    });
};

export const inAppPurchasePriceSchedulesBaseTerritoryGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedResponse, InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/inAppPurchasePriceSchedules/{id}/baseTerritory',
        ...options
    });
};

export const inAppPurchasePriceSchedulesManualPricesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<InAppPurchasePriceSchedulesManualPricesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InAppPurchasePriceSchedulesManualPricesGetToManyRelatedResponse, InAppPurchasePriceSchedulesManualPricesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/inAppPurchasePriceSchedules/{id}/manualPrices',
        ...options
    });
};

export const inAppPurchasesV2AppStoreReviewScreenshotGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedResponse, InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v2/inAppPurchases/{id}/appStoreReviewScreenshot',
        ...options
    });
};

export const inAppPurchasesV2ContentGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2ContentGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InAppPurchasesV2ContentGetToOneRelatedResponse, InAppPurchasesV2ContentGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v2/inAppPurchases/{id}/content',
        ...options
    });
};

export const inAppPurchasesV2IapPriceScheduleGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2IapPriceScheduleGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InAppPurchasesV2IapPriceScheduleGetToOneRelatedResponse, InAppPurchasesV2IapPriceScheduleGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v2/inAppPurchases/{id}/iapPriceSchedule',
        ...options
    });
};

export const inAppPurchasesV2ImagesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2ImagesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InAppPurchasesV2ImagesGetToManyRelatedResponse, InAppPurchasesV2ImagesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v2/inAppPurchases/{id}/images',
        ...options
    });
};

export const inAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedResponse, InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v2/inAppPurchases/{id}/inAppPurchaseAvailability',
        ...options
    });
};

export const inAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedResponse, InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v2/inAppPurchases/{id}/inAppPurchaseLocalizations',
        ...options
    });
};

export const inAppPurchasesV2PricePointsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2PricePointsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InAppPurchasesV2PricePointsGetToManyRelatedResponse, InAppPurchasesV2PricePointsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v2/inAppPurchases/{id}/pricePoints',
        ...options
    });
};

export const inAppPurchasesV2PromotedPurchaseGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2PromotedPurchaseGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InAppPurchasesV2PromotedPurchaseGetToOneRelatedResponse, InAppPurchasesV2PromotedPurchaseGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v2/inAppPurchases/{id}/promotedPurchase',
        ...options
    });
};

export const merchantIdsCertificatesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<MerchantIdsCertificatesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MerchantIdsCertificatesGetToManyRelatedResponse, MerchantIdsCertificatesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/merchantIds/{id}/certificates',
        ...options
    });
};

export const preReleaseVersionsAppGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<PreReleaseVersionsAppGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PreReleaseVersionsAppGetToOneRelatedResponse, PreReleaseVersionsAppGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/preReleaseVersions/{id}/app',
        ...options
    });
};

export const preReleaseVersionsBuildsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<PreReleaseVersionsBuildsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PreReleaseVersionsBuildsGetToManyRelatedResponse, PreReleaseVersionsBuildsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/preReleaseVersions/{id}/builds',
        ...options
    });
};

export const profilesBundleIdGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<ProfilesBundleIdGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProfilesBundleIdGetToOneRelatedResponse, ProfilesBundleIdGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/profiles/{id}/bundleId',
        ...options
    });
};

export const profilesCertificatesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<ProfilesCertificatesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProfilesCertificatesGetToManyRelatedResponse, ProfilesCertificatesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/profiles/{id}/certificates',
        ...options
    });
};

export const profilesDevicesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<ProfilesDevicesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ProfilesDevicesGetToManyRelatedResponse, ProfilesDevicesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/profiles/{id}/devices',
        ...options
    });
};

export const reviewSubmissionsItemsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<ReviewSubmissionsItemsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReviewSubmissionsItemsGetToManyRelatedResponse, ReviewSubmissionsItemsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/reviewSubmissions/{id}/items',
        ...options
    });
};

export const scmProvidersRepositoriesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<ScmProvidersRepositoriesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ScmProvidersRepositoriesGetToManyRelatedResponse, ScmProvidersRepositoriesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/scmProviders/{id}/repositories',
        ...options
    });
};

export const scmRepositoriesGitReferencesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<ScmRepositoriesGitReferencesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ScmRepositoriesGitReferencesGetToManyRelatedResponse, ScmRepositoriesGitReferencesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/scmRepositories/{id}/gitReferences',
        ...options
    });
};

export const scmRepositoriesPullRequestsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<ScmRepositoriesPullRequestsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ScmRepositoriesPullRequestsGetToManyRelatedResponse, ScmRepositoriesPullRequestsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/scmRepositories/{id}/pullRequests',
        ...options
    });
};

export const subscriptionAvailabilitiesAvailableTerritoriesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedResponse, SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptionAvailabilities/{id}/availableTerritories',
        ...options
    });
};

export const subscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedResponse, SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptionGroups/{id}/subscriptionGroupLocalizations',
        ...options
    });
};

export const subscriptionGroupsSubscriptionsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupsSubscriptionsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionGroupsSubscriptionsGetToManyRelatedResponse, SubscriptionGroupsSubscriptionsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptionGroups/{id}/subscriptions',
        ...options
    });
};

export const subscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedResponse, SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptionOfferCodeOneTimeUseCodes/{id}/values',
        ...options
    });
};

export const subscriptionOfferCodesCustomCodesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodesCustomCodesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionOfferCodesCustomCodesGetToManyRelatedResponse, SubscriptionOfferCodesCustomCodesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptionOfferCodes/{id}/customCodes',
        ...options
    });
};

export const subscriptionOfferCodesOneTimeUseCodesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedResponse, SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptionOfferCodes/{id}/oneTimeUseCodes',
        ...options
    });
};

export const subscriptionOfferCodesPricesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodesPricesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionOfferCodesPricesGetToManyRelatedResponse, SubscriptionOfferCodesPricesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptionOfferCodes/{id}/prices',
        ...options
    });
};

export const subscriptionPricePointsEqualizationsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<SubscriptionPricePointsEqualizationsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionPricePointsEqualizationsGetToManyRelatedResponse, SubscriptionPricePointsEqualizationsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptionPricePoints/{id}/equalizations',
        ...options
    });
};

export const subscriptionPromotionalOffersPricesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<SubscriptionPromotionalOffersPricesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionPromotionalOffersPricesGetToManyRelatedResponse, SubscriptionPromotionalOffersPricesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptionPromotionalOffers/{id}/prices',
        ...options
    });
};

export const subscriptionsAppStoreReviewScreenshotGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<SubscriptionsAppStoreReviewScreenshotGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionsAppStoreReviewScreenshotGetToOneRelatedResponse, SubscriptionsAppStoreReviewScreenshotGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptions/{id}/appStoreReviewScreenshot',
        ...options
    });
};

export const subscriptionsImagesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<SubscriptionsImagesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionsImagesGetToManyRelatedResponse, SubscriptionsImagesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptions/{id}/images',
        ...options
    });
};

export const subscriptionsIntroductoryOffersDeleteToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<SubscriptionsIntroductoryOffersDeleteToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SubscriptionsIntroductoryOffersDeleteToManyRelationshipResponse, SubscriptionsIntroductoryOffersDeleteToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptions/{id}/relationships/introductoryOffers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionsIntroductoryOffersGetToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<SubscriptionsIntroductoryOffersGetToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionsIntroductoryOffersGetToManyRelationshipResponse, SubscriptionsIntroductoryOffersGetToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptions/{id}/relationships/introductoryOffers',
        ...options
    });
};

export const subscriptionsIntroductoryOffersGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<SubscriptionsIntroductoryOffersGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionsIntroductoryOffersGetToManyRelatedResponse, SubscriptionsIntroductoryOffersGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptions/{id}/introductoryOffers',
        ...options
    });
};

export const subscriptionsOfferCodesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<SubscriptionsOfferCodesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionsOfferCodesGetToManyRelatedResponse, SubscriptionsOfferCodesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptions/{id}/offerCodes',
        ...options
    });
};

export const subscriptionsPricePointsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<SubscriptionsPricePointsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionsPricePointsGetToManyRelatedResponse, SubscriptionsPricePointsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptions/{id}/pricePoints',
        ...options
    });
};

export const subscriptionsPricesDeleteToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<SubscriptionsPricesDeleteToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SubscriptionsPricesDeleteToManyRelationshipResponse, SubscriptionsPricesDeleteToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptions/{id}/relationships/prices',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const subscriptionsPricesGetToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<SubscriptionsPricesGetToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionsPricesGetToManyRelationshipResponse, SubscriptionsPricesGetToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/subscriptions/{id}/relationships/prices',
        ...options
    });
};

export const subscriptionsPricesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<SubscriptionsPricesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionsPricesGetToManyRelatedResponse, SubscriptionsPricesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptions/{id}/prices',
        ...options
    });
};

export const subscriptionsPromotedPurchaseGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<SubscriptionsPromotedPurchaseGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionsPromotedPurchaseGetToOneRelatedResponse, SubscriptionsPromotedPurchaseGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptions/{id}/promotedPurchase',
        ...options
    });
};

export const subscriptionsPromotionalOffersGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<SubscriptionsPromotionalOffersGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionsPromotionalOffersGetToManyRelatedResponse, SubscriptionsPromotionalOffersGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptions/{id}/promotionalOffers',
        ...options
    });
};

export const subscriptionsSubscriptionAvailabilityGetToOneRelated = <ThrowOnError extends boolean = false>(options: Options<SubscriptionsSubscriptionAvailabilityGetToOneRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionsSubscriptionAvailabilityGetToOneRelatedResponse, SubscriptionsSubscriptionAvailabilityGetToOneRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptions/{id}/subscriptionAvailability',
        ...options
    });
};

export const subscriptionsSubscriptionLocalizationsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<SubscriptionsSubscriptionLocalizationsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionsSubscriptionLocalizationsGetToManyRelatedResponse, SubscriptionsSubscriptionLocalizationsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptions/{id}/subscriptionLocalizations',
        ...options
    });
};

export const subscriptionsWinBackOffersGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<SubscriptionsWinBackOffersGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubscriptionsWinBackOffersGetToManyRelatedResponse, SubscriptionsWinBackOffersGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/subscriptions/{id}/winBackOffers',
        ...options
    });
};

export const userInvitationsVisibleAppsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<UserInvitationsVisibleAppsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserInvitationsVisibleAppsGetToManyRelatedResponse, UserInvitationsVisibleAppsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/userInvitations/{id}/visibleApps',
        ...options
    });
};

export const usersVisibleAppsDeleteToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<UsersVisibleAppsDeleteToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersVisibleAppsDeleteToManyRelationshipResponse, UsersVisibleAppsDeleteToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{id}/relationships/visibleApps',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const usersVisibleAppsGetToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<UsersVisibleAppsGetToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersVisibleAppsGetToManyRelationshipResponse, UsersVisibleAppsGetToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{id}/relationships/visibleApps',
        ...options
    });
};

export const usersVisibleAppsReplaceToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<UsersVisibleAppsReplaceToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersVisibleAppsReplaceToManyRelationshipResponse, UsersVisibleAppsReplaceToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{id}/relationships/visibleApps',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const usersVisibleAppsCreateToManyRelationship = <ThrowOnError extends boolean = false>(options: Options<UsersVisibleAppsCreateToManyRelationshipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersVisibleAppsCreateToManyRelationshipResponse, UsersVisibleAppsCreateToManyRelationshipError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{id}/relationships/visibleApps',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const usersVisibleAppsGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<UsersVisibleAppsGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersVisibleAppsGetToManyRelatedResponse, UsersVisibleAppsGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/users/{id}/visibleApps',
        ...options
    });
};

export const winBackOffersPricesGetToManyRelated = <ThrowOnError extends boolean = false>(options: Options<WinBackOffersPricesGetToManyRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WinBackOffersPricesGetToManyRelatedResponse, WinBackOffersPricesGetToManyRelatedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/winBackOffers/{id}/prices',
        ...options
    });
};

export const appsBetaTesterUsagesGetMetrics = <ThrowOnError extends boolean = false>(options: Options<AppsBetaTesterUsagesGetMetricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AppsBetaTesterUsagesGetMetricsResponse, AppsBetaTesterUsagesGetMetricsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/apps/{id}/metrics/betaTesterUsages',
        ...options
    });
};

export const betaGroupsBetaTesterUsagesGetMetrics = <ThrowOnError extends boolean = false>(options: Options<BetaGroupsBetaTesterUsagesGetMetricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaGroupsBetaTesterUsagesGetMetricsResponse, BetaGroupsBetaTesterUsagesGetMetricsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/betaGroups/{id}/metrics/betaTesterUsages',
        ...options
    });
};

export const betaGroupsPublicLinkUsagesGetMetrics = <ThrowOnError extends boolean = false>(options: Options<BetaGroupsPublicLinkUsagesGetMetricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaGroupsPublicLinkUsagesGetMetricsResponse, BetaGroupsPublicLinkUsagesGetMetricsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaGroups/{id}/metrics/publicLinkUsages',
        ...options
    });
};

export const betaTestersBetaTesterUsagesGetMetrics = <ThrowOnError extends boolean = false>(options: Options<BetaTestersBetaTesterUsagesGetMetricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BetaTestersBetaTesterUsagesGetMetricsResponse, BetaTestersBetaTesterUsagesGetMetricsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/betaTesters/{id}/metrics/betaTesterUsages',
        ...options
    });
};

export const buildsBetaBuildUsagesGetMetrics = <ThrowOnError extends boolean = false>(options: Options<BuildsBetaBuildUsagesGetMetricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BuildsBetaBuildUsagesGetMetricsResponse, BuildsBetaBuildUsagesGetMetricsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/builds/{id}/metrics/betaBuildUsages',
        ...options
    });
};

export const gameCenterDetailsClassicMatchmakingRequestsGetMetrics = <ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsClassicMatchmakingRequestsGetMetricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterDetailsClassicMatchmakingRequestsGetMetricsResponse, GameCenterDetailsClassicMatchmakingRequestsGetMetricsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterDetails/{id}/metrics/classicMatchmakingRequests',
        ...options
    });
};

export const gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics = <ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsResponse, GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterDetails/{id}/metrics/ruleBasedMatchmakingRequests',
        ...options
    });
};

export const gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsResponse, GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingQueueSizes',
        ...options
    });
};

export const gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsResponse, GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingRequests',
        ...options
    });
};

export const gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsResponse, GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingQueueSizes',
        ...options
    });
};

export const gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsResponse, GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingRequests',
        ...options
    });
};

export const gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsResponse, GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingSessions',
        ...options
    });
};

export const gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsResponse, GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingBooleanRuleResults',
        ...options
    });
};

export const gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsResponse, GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingNumberRuleResults',
        ...options
    });
};

export const gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics = <ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsResponse, GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingRuleErrors',
        ...options
    });
};